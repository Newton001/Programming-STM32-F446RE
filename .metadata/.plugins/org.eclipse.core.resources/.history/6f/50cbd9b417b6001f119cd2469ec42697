/***************************************************************************************************
 * @file       MFRC522.h
 * @author     Newton Kelvin
 *
 */

#include "spi.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "MFRC522_Driver.h"


// Function to control the Chip Select (CS) line
static void MFRC522_Select(void) {
	HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin, GPIO_PIN_RESET);
}

static void MFRC522_Deselect(void) {
	HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin, GPIO_PIN_SET);
}

/**
 * @brief Writes a single byte to a specified register in the MFRC522 chip.
 * @param reg: The address of the register to write to (with MSB set to 0 for write).
 * @param value: The value to write to the register.
 */
void PCD_WriteRegister(uint8_t reg, uint8_t value) {
	uint8_t data[2];
	data[0] = (reg & 0x7E); // Address format: MSB must be 0 for write
	data[1] = value;

	MFRC522_Select();
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
	MFRC522_Deselect();
}

/**
 * @brief Writes multiple bytes to a specified register in the MFRC522 chip.
 * @param reg: The address of the register to write to (already shifted).
 * @param count: The number of bytes to write.
 * @param values: Pointer to the array of bytes to write.
 */

void PCD_WriteRegisterMulti(uint8_t reg, uint8_t count, const uint8_t *values) {
	// Allocate a buffer for the data (register address + data bytes)
	uint8_t buffer[count + 1];
	buffer[0] = reg; // First byte is the register address

	// Copy the values to the buffer
	for (uint8_t i = 0; i < count; i++) {
		buffer[i + 1] = values[i];
	}

	// Start the SPI communication
	MFRC522_Select();

	// Send the buffer over SPI
	HAL_SPI_Transmit(&hspi2, buffer, count + 1, HAL_MAX_DELAY);

	// End the SPI communication
	MFRC522_Deselect();
}

uint8_t PCD_ReadRegister(uint8_t reg) {
	uint8_t txData = (reg & 0x7E) | 0x80; // Address format: MSB set for read
	uint8_t rxData = 0;

	MFRC522_Select();

	// Transmit the register address and read the response
	HAL_SPI_Transmit(&hspi2, &txData, 1, HAL_MAX_DELAY);
	HAL_SPI_Receive(&hspi2, &rxData, 1, HAL_MAX_DELAY);

	MFRC522_Deselect();

	return rxData;
}

/**
 * @brief Resets the MFRC522 chip by toggling the reset pin.
 */
void PCD_Reset(void) {
	HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_RESET); // Pull reset LOW
	HAL_Delay(50);                                                            // Hold for 50 ms
	HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_SET);  // Pull reset HIGH
	HAL_Delay(50);                                                            // Wait for the chip to initialize
}

/**
 * @brief Sets specific bits in a register without altering other bits.
 * @param reg: The register address to modify.
 * @param mask: The bitmask indicating which bits to set (1 = set bit, 0 = leave bit unchanged).
 */

void PCD_SetRegisterBits(uint8_t reg, uint8_t mask) {
	// Read the current value of the register
	uint8_t current = PCD_ReadRegister(reg);

	// Set the bits indicated by the mask
	PCD_WriteRegister(reg, current | mask);
}

/**
 * @brief Turns the MFRC522 antenna on by enabling the TX1 and TX2 control bits in the TxControlReg register.
 */
void PCD_AntennaOn(void) {
	uint8_t value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03)
	{
		PCD_WriteRegister(TxControlReg, value | 0x03);
	}
	PCD_WriteRegister(RFCfgReg, (PCD_ReadRegister(RFCfgReg) & 0x8F) | 0x70); // Set TxGain to maximum

}


void PCD_Init(void) {

	PCD_Reset();
	// Step 2: Configure the Timer
	PCD_WriteRegister(TModeReg, 0x80);       // Timer mode (auto-restart enabled)
	PCD_WriteRegister(TPrescalerReg, 0xA9); // Timer prescaler (recommended value)
	PCD_WriteRegister(TReloadRegH, 0x03);     // Timer reload high byte
	PCD_WriteRegister(TReloadRegL, 0xE8);      // Timer reload low byte
	PCD_WriteRegister(TxASKReg, 0x40);
	PCD_WriteRegister(ModeReg, 0x3D);
	PCD_WriteRegister(RFCfgReg, (0x07<<4)); // Set Rx Gain to max
	// Step 3: Configure the antenna gain
	PCD_WriteRegister(RFCfgReg, 0x70); // Set maximum receiver gain

	// Step 4: Turn on the antenna
	PCD_AntennaOn();

	// Step 5: Verify initialization by reading the version
	uint8_t version = PCD_ReadRegister(VersionReg);
	if (version != 0x91 && version != 0x92) {
		// Initialization failed
		printf("Error: MFRC522 initialization failed. VersionReg=0x%02X\n", version);
	}
	else {
		printf("MFRC522 initialized successfully. VersionReg=0x%02X\n", version);
	}

}

/**
 * @brief Reads multiple bytes from a specified register in the MFRC522 chip.
 * @param reg: The address of the register to read from (already shifted).
 * @param count: The number of bytes to read.
 * @param values: Pointer to the buffer where the read data will be stored.
 */
void PCD_ReadRegisterMulti(uint8_t reg, uint8_t count, uint8_t *values) {
	if (count == 0) return; // No bytes to read

	for (uint8_t i = 0; i < count; i++) {
		values[i] = PCD_ReadRegister(reg); // Read each byte using PCD_ReadRegister
	}
}


void PCD_ClearFIFO(void) {
	PCD_WriteRegister(CommandReg, 0x10); // Flush the FIFO buffer
}

void PCD_ClrRegisterBits(uint8_t reg, uint8_t mask) {
	// Read the current value of the register
	uint8_t tmp = PCD_ReadRegister(reg);

	// Write the modified value back to the register
	PCD_WriteRegister(reg, (tmp & (~mask)));
}

/**
 * @brief Calculates the CRC using the MFRC522 hardware.
 * @param data Pointer to the data to calculate the CRC for.
 * @param length Length of the data.
 * @param result Pointer to a 2-byte array to store the CRC result (low byte first).
 * @return STATUS_OK on success, or an error code if CRC calculation fails.
 */
uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result) {
	// Clear the CRC result registers
	PCD_WriteRegister(DivIrqReg, 0x04); // Clear the CRCIRq bit
	PCD_WriteRegister(CommandReg, PCD_Idle); // Stop any active command

	// Write data to the FIFO buffer
	PCD_WriteRegisterMulti(FIFODataReg, length, data);

	// Start the CRC calculation
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);

	// Wait for the CRC calculation to complete
	uint8_t n;
	for (uint8_t i = 0; i < 255; i++) {
		n = PCD_ReadRegister(DivIrqReg); // Check the DivIrqReg register
		if (n & 0x04) { // CRCIRq bit is set
			break;
		}
	}

	// Check for timeout
	if (!(n & 0x04)) {
		return STATUS_TIMEOUT;
	}

	// Read the CRC result
	result[0] = PCD_ReadRegister(CRCResultRegL); // Low byte
	result[1] = PCD_ReadRegister(CRCResultRegH); // High byte

	return STATUS_OK;
}

/**
 * @brief Communicates with a PICC using the MFRC522.
 *
 * @param command Command to execute (e.g., PCD_Transceive).
 * @param waitIRq IRQ bits to wait for (e.g., RxIRq or TxIRq).
 * @param sendData Pointer to the data to send.
 * @param sendLen Length of the data to send.
 * @param backData Pointer to the buffer to store the received data (optional).
 * @param backLen Pointer to a variable indicating the size of the buffer and where the received length will be stored.
 * @param validBits Pointer to a variable storing the number of valid bits in the last byte (optional).
 * @param rxAlign Bit alignment for the received data.
 * @param checkCRC If true, validates CRC on the received data.
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t PCD_CommunicateWithPICC(uint8_t command,
		uint8_t waitIRq,
		uint8_t *sendData,
		uint8_t sendLen,
		uint8_t *backData,
		uint8_t *backLen,
		uint8_t *validBits,
		uint8_t rxAlign,
		bool checkCRC) {
	uint8_t n, _validBits = 0;
	uint32_t i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
	uint8_t bitFraming = (rxAlign << 4) + txLastBits; // RxAlign = BitFramingReg[6..4], TxLastBits = BitFramingReg[2..0]

	// Stop any active command
	PCD_WriteRegister(CommandReg, PCD_Idle);

	// Clear all IRQ bits
	PCD_WriteRegister(ComIrqReg, 0x7F);

	// Flush FIFO
	PCD_SetRegisterBits(FIFOLevelReg, 0x80);

	// Write data to the FIFO
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);

	// Set BitFramingReg
	PCD_WriteRegister(BitFramingReg, bitFraming);

	// Execute the command
	PCD_WriteRegister(CommandReg, command);

	// Start transmission if Transceive command
	if (command == PCD_Transceive) {
		PCD_SetRegisterBits(BitFramingReg, 0x80); // StartSend=1, transmission starts
	}

	// Wait for the command to complete
	i = 5000; // Timeout counter
	while (1) {
		n = PCD_ReadRegister(ComIrqReg); // Check IRQ bits
		if (n & waitIRq) { // Success signal
			break;
		}
		if (n & 0x01) { // Timer interrupt (timeout)
			return STATUS_TIMEOUT;
		}
		if (--i == 0) { // Emergency timeout
			return STATUS_TIMEOUT;
		}
	}

	// Check for errors
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg);
	if (errorRegValue & 0x13) { // BufferOvfl, ParityErr, ProtocolErr
		return STATUS_ERROR;
	}

	// Retrieve data if requested
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg); // Number of bytes in FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM; // Buffer overflow
		}

		*backLen = n; // Update backLen with the number of bytes received

		// Read data from FIFO
		PCD_ReadRegisterMulti(FIFODataReg, n, backData);

		_validBits = PCD_ReadRegister(ControlReg) & 0x07; // Get valid bits in the last byte
		if (validBits) {
			*validBits = _validBits;
		}
	}

	// Handle collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
	}

	// Perform CRC validation if requested
	if (backData && backLen && checkCRC) {
		if ((*backLen == 1) && (_validBits == 4)) {
			return STATUS_MIFARE_NACK; // MIFARE NAK
		}

		if ((*backLen < 2) || (_validBits != 0)) {
			return STATUS_CRC_WRONG; // Invalid CRC
		}

		uint8_t controlBuffer[2];
		n = PCD_CalculateCRC(backData, *backLen - 2, controlBuffer);
		if (n != STATUS_OK) {
			return n;
		}

		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}

	return STATUS_OK; // Success
}

/**
 * @brief Sends data to the PICC and receives its response.
 *
 * This function wraps PCD_CommunicateWithPICC to simplify sending data to the PICC and receiving a response.
 *
 * @param sendData Pointer to the data to send.
 * @param sendLen Number of bytes to send.
 * @param backData Pointer to a buffer to store the received data (optional).
 * @param backLen Pointer to a variable indicating the size of the buffer and where the received length will be stored.
 * @param validBits Pointer to a variable storing the number of valid bits in the last byte (optional).
 * @param rxAlign Bit alignment for the received data.
 * @param checkCRC If true, validates CRC on the received data.
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t PCD_TransceiveData(uint8_t *sendData,
                           uint8_t sendLen,
                           uint8_t *backData,
                           uint8_t *backLen,
                           uint8_t *validBits,
                           uint8_t rxAlign,
                           bool checkCRC) {
    uint8_t waitIRq = 0x30; // Wait for RxIRq and IdleIRq

    // Call the underlying communication function
    return PCD_CommunicateWithPICC(PCD_Transceive,
                                   waitIRq,
                                   sendData,
                                   sendLen,
                                   backData,
                                   backLen,
                                   validBits,
                                   rxAlign,
                                   checkCRC);
}

/**
 * @brief Sends a REQA or WUPA command to the PICC.
 *
 * This function is used to detect if a card is in the RF field and ready for communication.
 *
 * @param command The command to send (PICC_CMD_REQA or PICC_CMD_WUPA).
 * @param bufferATQA Pointer to a buffer to store the ATQA response (2 bytes).
 * @param bufferSize Pointer to a variable indicating the buffer size. Must be at least 2.
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t PICC_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize) {
    uint8_t validBits;
    uint8_t status;

    if (bufferATQA == NULL || *bufferSize < 2) {
        // The ATQA response is 2 bytes long.
        return STATUS_NO_ROOM;
    }

    // ValuesAfterColl=1 => Bits received after collision are cleared.
    PCD_ClrRegisterBits(CollReg, 0x80);

    // For REQA and WUPA we need the short frame format
    // - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
    validBits = 7;

    status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits, 0, false);
    if (status != STATUS_OK) {
        return status;
    }

    if ((*bufferSize != 2) || (validBits != 0)) {
        // ATQA must be exactly 16 bits.
        return STATUS_ERROR;
    }

    return STATUS_OK;
}

/*
 * Transmits a REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
 * Beware: When two PICCs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.
 */
PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize)
{
  return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
}
