/*
 * MFRC522_Driver.h
 *
 *  Created on: Nov 22, 2024
 *      Author: newton
 */

#ifndef MFRC522_DRIVER_H_
#define MFRC522_DRIVER_H_
#ifdef __cplusplus
extern "C" {
#endif

#include "stm32f4xx_hal.h"
#include <stdint.h>
#include <stdbool.h>

// Define shifted register addresses for SPI communication
#define CommandReg       (0x01 << 1)
#define ComIEnReg        (0x02 << 1)
#define DivIEnReg        (0x03 << 1)
#define ComIrqReg        (0x04 << 1)
#define DivIrqReg        (0x05 << 1)
#define ErrorReg         (0x06 << 1)
#define Status1Reg       (0x07 << 1)
#define Status2Reg       (0x08 << 1)
#define FIFODataReg      (0x09 << 1)
#define FIFOLevelReg     (0x0A << 1)
#define WaterLevelReg    (0x0B << 1)
#define ControlReg       (0x0C << 1)
#define BitFramingReg    (0x0D << 1)
#define CollReg          (0x0E << 1)

#define ModeReg          (0x11 << 1)
#define TxModeReg        (0x12 << 1)
#define RxModeReg        (0x13 << 1)
#define TxControlReg     (0x14 << 1)
#define TxASKReg         (0x15 << 1)
#define TxSelReg         (0x16 << 1)
#define RxSelReg         (0x17 << 1)
#define RxThresholdReg   (0x18 << 1)
#define DemodReg         (0x19 << 1)
#define MfTxReg          (0x1C << 1)
#define MfRxReg          (0x1D << 1)
#define SerialSpeedReg   (0x1F << 1)

#define CRCResultRegH    (0x21 << 1)
#define CRCResultRegL    (0x22 << 1)
#define ModWidthReg      (0x24 << 1)
#define RFCfgReg         (0x26 << 1)
#define GsNReg           (0x27 << 1)
#define CWGsPReg         (0x28 << 1)
#define ModGsPReg        (0x29 << 1)
#define TModeReg         (0x2A << 1)
#define TPrescalerReg    (0x2B << 1)
#define TReloadRegH      (0x2C << 1)
#define TReloadRegL      (0x2D << 1)
#define TCntValueRegH    (0x2E << 1)
#define TCntValueRegL    (0x2F << 1)

#define TestSel1Reg      (0x31 << 1)
#define TestSel2Reg      (0x32 << 1)
#define TestPinEnReg     (0x33 << 1)
#define TestPinValueReg  (0x34 << 1)
#define TestBusReg       (0x35 << 1)
#define AutoTestReg      (0x36 << 1)
#define VersionReg       (0x37 << 1)
#define AnalogTestReg    (0x38 << 1)
#define TestDAC1Reg      (0x39 << 1)
#define TestDAC2Reg      (0x3A << 1)
#define TestADCReg       (0x3B << 1)

// MFRC522 commands
#define PCD_IDLE          0x00
#define PCD_MEM           0x01
#define PCD_GENERATERANDOMID 0x02
#define PCD_CALCCRC       0x03
#define PCD_TRANSMIT      0x04
#define PCD_NOCMDCHANGE   0x07
#define PCD_RECEIVE       0x08
#define PCD_TRANSCEIVE    0x0C
#define PCD_MFAUTHENT     0x0E
#define PCD_SOFTRESET     0x0F

// Commands sent to the PICC
#define PICC_REQA         0x26
#define PICC_WUPA         0x52
#define PICC_CT           0x88
#define PICC_SEL_CL1      0x93
#define PICC_SEL_CL2      0x95
#define PICC_SEL_CL3      0x97
#define PICC_HLTA         0x50

#define PICC_AUTH_KEY_A   0x60
#define PICC_AUTH_KEY_B   0x61
#define PICC_READ         0x30
#define PICC_WRITE        0xA0
#define PICC_DECREMENT    0xC0
#define PICC_INCREMENT    0xC1
#define PICC_RESTORE      0xC2
#define PICC_TRANSFER     0xB0
#define PICC_UL_WRITE     0xA2

// Constants
#define MF_ACK            0xA
#define MF_KEY_SIZE       6
#define FIFO_SIZE         64

// Status codes
#define MI_OK             0
#define MI_NOTAGERR       1
#define MI_ERR            2
#define MI_TIMEOUT 		  3

// Status codes
#define STATUS_OK              0x00  // Success
#define STATUS_ERROR           0x01  // Error in communication
#define STATUS_COLLISION       0x02  // Collision detected
#define STATUS_TIMEOUT         0x03  // Timeout in communication
#define STATUS_NO_ROOM         0x04  // A buffer is not big enough
#define STATUS_INTERNAL_ERROR  0x05  // Internal error in the code
#define STATUS_INVALID         0x06  // Invalid argument
#define STATUS_CRC_WRONG       0x07  // CRC_A does not match
#define STATUS_MIFARE_NACK     0x08  // A MIFARE PICC responded with NAK

// RC522 handle structure
typedef struct {
    SPI_HandleTypeDef *hspi;  // SPI handle
    GPIO_TypeDef *csPort;     // Chip Select GPIO port
    uint16_t csPin;           // Chip Select GPIO pin
    GPIO_TypeDef *rstPort;    // Reset GPIO port
    uint16_t rstPin;          // Reset GPIO pin
    uint8_t txBuffer[FIFO_SIZE]; // DMA Tx buffer
    uint8_t rxBuffer[FIFO_SIZE]; // DMA Rx buffer
} RC522_HandleTypeDef;

/*Failed Approaches*/

// Function prototypes

// Initialization
void RC522_Init(RC522_HandleTypeDef *rc522, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin, GPIO_TypeDef *rstPort, uint16_t rstPin);
void RC522_Reset(RC522_HandleTypeDef *rc522);

// Register read/write operations
void RC522_WriteRegister(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t value);
uint8_t RC522_ReadRegister(RC522_HandleTypeDef *rc522, uint8_t reg);
void RC522_SetRegisterBits(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t mask);
void RC522_ClearRegisterBits(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t mask);

// Data transfer functions
uint8_t RC522_Request(RC522_HandleTypeDef *rc522, uint8_t reqMode, uint8_t *TagType);
uint8_t RC522_Anticoll(RC522_HandleTypeDef *rc522, uint8_t *serNum);
uint8_t RC522_SelectTag(RC522_HandleTypeDef *rc522, uint8_t *serNum);
uint8_t RC522_Auth(RC522_HandleTypeDef *rc522, uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum);
uint8_t RC522_Read(RC522_HandleTypeDef *rc522, uint8_t blockAddr, uint8_t *recvData);
uint8_t RC522_Write(RC522_HandleTypeDef *rc522, uint8_t blockAddr, uint8_t *writeData);
void RC522_CalculateCRC(RC522_HandleTypeDef *rc522, uint8_t *data, uint8_t length, uint8_t *result);
void RC522_Halt(RC522_HandleTypeDef *rc522);
uint8_t RC522_TransceiveData(RC522_HandleTypeDef *rc522, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen);

// SPI communication modes
HAL_StatusTypeDef RC522_Transmit_IT(RC522_HandleTypeDef *rc522, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef RC522_Receive_IT(RC522_HandleTypeDef *rc522, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef RC522_TransmitReceive_IT(RC522_HandleTypeDef *rc522, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef RC522_Transmit_DMA(RC522_HandleTypeDef *rc522, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef RC522_Receive_DMA(RC522_HandleTypeDef *rc522, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef RC522_TransmitReceive_DMA(RC522_HandleTypeDef *rc522, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

// Callbacks for IT and DMA
void RC522_TxCpltCallback(void);
void RC522_RxCpltCallback(void);
void RC522_ErrorCallback(void);*/


// PICC types we can detect. Remember to update PICC_GetTypeName() if you add more.
enum PICC_Type {
  PICC_TYPE_UNKNOWN      = 0,
  PICC_TYPE_ISO_14443_4  = 1,  // PICC compliant with ISO/IEC 14443-4
  PICC_TYPE_ISO_18092    = 2,  // PICC compliant with ISO/IEC 18092 (NFC)
  PICC_TYPE_MIFARE_MINI  = 3,  // MIFARE Classic protocol, 320 bytes
  PICC_TYPE_MIFARE_1K    = 4,  // MIFARE Classic protocol, 1KB
  PICC_TYPE_MIFARE_4K    = 5,  // MIFARE Classic protocol, 4KB
  PICC_TYPE_MIFARE_UL    = 6,  // MIFARE Ultralight or Ultralight C
  PICC_TYPE_MIFARE_PLUS  = 7,  // MIFARE Plus
  PICC_TYPE_TNP3XXX      = 8,  // Only mentioned in NXP AN 10833 MIFARE Type Identification Procedure
  PICC_TYPE_NOT_COMPLETE = 255 // SAK indicates UID is not complete.
};


// A struct used for passing the UID of a PICC.
typedef struct {
  uint8_t    size;     // Number of bytes in the UID. 4, 7 or 10.
  uint8_t    uidByte[10];
  uint8_t    sak;      // The SAK (Select acknowledge) byte returned from the PICC after successful selection.
} Uid;


// A struct used for passing a MIFARE Crypto1 key
typedef struct {
  uint8_t    keyByte[MF_KEY_SIZE];
} MIFARE_Key;

// Member variables
Uid uid;                // Used by PICC_ReadCardSerial().


// ************************************************************************************
//! @name Functions for manipulating the MFRC522
// ************************************************************************************
//@{

/**
* Initializes the MFRC522 chip.
*/
void    PCD_Init           (void);

void    PCD_AntennaOn      (void);

void    PCD_WriteRegister  (uint8_t reg, uint8_t value);

void    PCD_WriteRegister  (uint8_t reg, uint8_t count, uint8_t *values);

uint8_t PCD_ReadRegister   (uint8_t reg);

void    PCD_ReadRegister   (uint8_t reg, uint8_t count, uint8_t *values, uint8_t rxAlign = 0);

void    PCD_SetRegisterBits(uint8_t reg, uint8_t mask);

void    PCD_ClrRegisterBits(uint8_t reg, uint8_t mask);

uint8_t PCD_CalculateCRC   (uint8_t *data, uint8_t length, uint8_t *result);

uint8_t PCD_TransceiveData (uint8_t *sendData,
                              uint8_t sendLen,
                              uint8_t *backData,
                              uint8_t *backLen,
                              uint8_t *validBits = NULL,
                              uint8_t rxAlign    = 0,
                              bool    checkCRC   = false);


uint8_t PCD_CommunicateWithPICC(uint8_t command,
                                  uint8_t waitIRq,
                                  uint8_t *sendData,
                                  uint8_t sendLen,
                                  uint8_t *backData  = NULL,
                                  uint8_t *backLen   = NULL,
                                  uint8_t *validBits = NULL,
                                  uint8_t rxAlign    = 0,
                                  bool    checkCRC   = false);


uint8_t PICC_RequestA      (uint8_t *bufferATQA, uint8_t *bufferSize);

uint8_t PICC_WakeupA       (uint8_t *bufferATQA, uint8_t *bufferSize);

uint8_t PICC_REQA_or_WUPA  (uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize);

uint8_t PICC_Select        (Uid *uid, uint8_t validBits = 0);

uint8_t PICC_HaltA         (void);

uint8_t PCD_Authenticate   (uint8_t command, uint8_t blockAddr, MIFARE_Key *key, Uid *uid);

void    PCD_StopCrypto1    (void);

uint8_t MIFARE_Read        (uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize);

uint8_t MIFARE_Write       (uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize);

uint8_t MIFARE_UltralightWrite(uint8_t page, uint8_t *buffer, uint8_t bufferSize);

uint8_t MIFARE_Decrement   (uint8_t blockAddr, uint32_t delta);

uint8_t MIFARE_Increment   (uint8_t blockAddr, uint32_t delta);

uint8_t MIFARE_Restore     (uint8_t blockAddr);

uint8_t MIFARE_Transfer    (uint8_t blockAddr);

uint8_t PCD_MIFARE_Transceive(uint8_t *sendData, uint8_t sendLen, bool acceptTimeout = false);

uint8_t PICC_GetType         (uint8_t sak);

char*   PICC_GetTypeName     (uint8_t type);

char*   GetStatusCodeName    (uint8_t code);

void    MIFARE_SetAccessBits (uint8_t *accessBitBuffer,
                                uint8_t g0,
                                uint8_t g1,
                                uint8_t g2,
                                uint8_t g3);

bool    PICC_IsNewCardPresent(void);

bool    PICC_ReadCardSerial  (void);

uint8_t MIFARE_TwoStepHelper(uint8_t command, uint8_t blockAddr, uint32_t data);


#ifdef __cplusplus
}
#endif
#endif /* MFRC522_DRIVER_H_ */
