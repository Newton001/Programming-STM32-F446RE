/*
 * rc522.h
 *
 *  Created on: Nov 3, 2024
 *      Author: newton
 */

#ifndef RC522_H_
#define RC522_H_

#include "stm32f4xx_hal.h"
#include "spi.h"

// Define SPI handler (for use in other files)
extern SPI_HandleTypeDef hspi1;

// MFRC522 Buffer size
#define MAX_LEN 16

// MFRC522 Command Set
#define PCD_IDLE              0x00   // No action; cancel the current command
#define PCD_AUTHENT           0x0E   // Authenticate with Key A or B
#define PCD_RECEIVE           0x08   // Receive data
#define PCD_TRANSMIT          0x04   // Transmit data
#define PCD_TRANSCEIVE        0x0C   // Transmit and receive data
#define PCD_RESETPHASE        0x0F   // Reset the MFRC522
#define PCD_CALCCRC           0x03   // Calculate CRC

// PICC Commands for MIFARE_One cards
#define PICC_REQIDL           0x26   // Request idle mode
#define PICC_REQALL           0x52   // Request all cards
#define PICC_ANTICOLL         0x93   // Anti-collision command
#define PICC_SElECTTAG        0x93   // Select a card
#define PICC_AUTHENT1A        0x60   // Authenticate with Key A
#define PICC_AUTHENT1B        0x61   // Authenticate with Key B
#define PICC_READ             0x30   // Read block
#define PICC_WRITE            0xA0   // Write block
#define PICC_DECREMENT        0xC0   // Decrement value block
#define PICC_INCREMENT        0xC1   // Increment value block
#define PICC_RESTORE          0xC2   // Restore block data
#define PICC_TRANSFER         0xB0   // Transfer block data
#define PICC_HALT             0x50   // Put the card into halt state

// MFRC522 Registers
// Page 0: Command and Status
#define Reserved00            0x00
#define CommandReg            0x01
#define ComIEnReg             0x02
#define DivIEnReg             0x03
#define ComIrqReg             0x04
#define DivIrqReg             0x05
#define ErrorReg              0x06
#define Status1Reg            0x07
#define Status2Reg            0x08
#define FIFODataReg           0x09
#define FIFOLevelReg          0x0A
#define WaterLevelReg         0x0B
#define ControlReg            0x0C
#define BitFramingReg         0x0D
#define CollReg               0x0E
#define Reserved01            0x0F

// Page 1: Command
#define Reserved10            0x10
#define ModeReg               0x11
#define TxModeReg             0x12
#define RxModeReg             0x13
#define TxControlReg          0x14
#define TxAutoReg             0x15
#define TxSelReg              0x16
#define RxSelReg              0x17
#define RxThresholdReg        0x18
#define DemodReg              0x19
#define Reserved11            0x1A
#define Reserved12            0x1B
#define MifareReg             0x1C
#define Reserved13            0x1D
#define Reserved14            0x1E
#define SerialSpeedReg        0x1F

// Page 2: Configuration
#define Reserved20            0x20
#define CRCResultRegM         0x21
#define CRCResultRegL         0x22
#define Reserved21            0x23
#define ModWidthReg           0x24
#define Reserved22            0x25
#define RFCfgReg              0x26
#define GsNReg                0x27
#define CWGsPReg              0x28
#define ModGsPReg             0x29
#define TModeReg              0x2A
#define TPrescalerReg         0x2B
#define TReloadRegH           0x2C
#define TReloadRegL           0x2D
#define TCounterValueRegH     0x2E
#define TCounterValueRegL     0x2F

// Page 3: Test Registers
#define Reserved30            0x30
#define TestSel1Reg           0x31
#define TestSel2Reg           0x32
#define TestPinEnReg          0x33
#define TestPinValueReg       0x34
#define TestBusReg            0x35
#define AutoTestReg           0x36
#define VersionReg            0x37
#define AnalogTestReg         0x38
#define TestDAC1Reg           0x39
#define TestDAC2Reg           0x3A
#define TestADCReg            0x3B
#define Reserved31            0x3C
#define Reserved32            0x3D
#define Reserved33            0x3E
#define Reserved34            0x3F


#define TxASKReg             0x15
// Status Codes
#define MI_OK                 0   // Success
#define MI_NOTAGERR           1   // No tag error
#define MI_ERR                2   // General error

// Function Prototypes
void RC522_Init(void);
uint8_t RC522_Request(uint8_t reqMode, uint8_t *TagType);
uint8_t RC522_Anticoll(uint8_t *serNum);
uint8_t RC522_SelectTag(uint8_t *serNum);
uint8_t RC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum);
uint8_t RC522_Write(uint8_t blockAddr, uint8_t *writeData);
uint8_t RC522_Read(uint8_t blockAddr, uint8_t *recvData);
void RC522_Halt(void);
void RC522_Reset(void);
uint8_t RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen);

// Utility Functions for Register Manipulation
void SetBitMask(uint8_t reg, uint8_t mask);
void ClearBitMask(uint8_t reg, uint8_t mask);
void antenna_on(void);
void antenna_off(void);

#endif /* RC522_H_ */
