/***************************************************************************************************
 * @file       MFRC522.h
 * @author     Newton Kelvin
 *
 */

#include "spi.h"
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include "MFRC522_Driver.h"


static const char* const _TypeNamePICC[] =
{
		"Unknown type",
		"PICC compliant with ISO/IEC 14443-4",
		"PICC compliant with ISO/IEC 18092 (NFC)",
		"MIFARE Mini, 320 bytes",
		"MIFARE 1KB",
		"MIFARE 4KB",
		"MIFARE Ultralight or Ultralight C",
		"MIFARE Plus",
		"MIFARE TNP3XXX",

		/* not complete UID */
		"SAK indicates UID is not complete"
};

static const char* const _ErrorMessage[] =
{
		"Unknown error",
		"Success",
		"Error in communication",
		"Collision detected",
		"Timeout in communication",
		"A buffer is not big enough",
		"Internal error in the code, should not happen",
		"Invalid argument",
		"The CRC_A does not match",
		"A MIFARE PICC responded with NAK"
};

#define MFRC522_MaxPICCs (sizeof(_TypeNamePICC)/sizeof(_TypeNamePICC[0]))
#define MFRC522_MaxError (sizeof(_ErrorMessage)/sizeof(_ErrorMessage[0]))


// Functions Definitions
void PCD_Init(void)
{
	HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_RESET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(RC522_RESET_GPIO_Port, RC522_RESET_Pin, GPIO_PIN_SET);
	HAL_Delay(50);
	PCD_WriteRegister(TModeReg, 0x80); // Timer to Start
	PCD_WriteRegister(TPrescalerReg, 0xA9); // TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25us.
	PCD_WriteRegister(TReloadRegH, 0x03);   // Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
	PCD_WriteRegister(TReloadRegL, 0xE8);
	PCD_WriteRegister(TxASKReg, 0x40);      // Default 0x00. Force a 100 % ASK modulation independent
	PCD_WriteRegister(ModeReg, 0x3D);
	PCD_WriteRegister(RFCfgReg, (0x07<<4));
	PCD_AntennaOn();
}

void PCD_Reset(void)
{
	PCD_WriteRegister(CommandReg, PCD_SoftReset);
	HAL_Delay(50);
	while(PCD_ReadRegister(CommandReg) & (1<<4))
	{

	}
}

void PCD_Antenna(void)
{
	uint8_t value = PCD_ReadRegister(TxControlReg);
	if((value & 0x03)!=0x03)
	{
		PCD_WriteRegister(TxControlReg,value|0x03);
	}
}


uint8_t PCD_TranscieveData(uint8_t *sendData,uint8_t sendLen,uint8_t *backData,uint8_t *backLen,
		uint8_t *validBits,uint8_t rxAlign,bool checkCRC){
	uint8_t waitIRq = 0x30;
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
}

uint8_t PCD_CommunicateWithPICC(uint8_t command,
		uint8_t waitIRq,
		uint8_t *sendData,
		uint8_t sendLen,
		uint8_t *backData,
		uint8_t *backLen,
		uint8_t *validBits,
		uint8_t rxAlign,
		bool    checkCRC)
{
	uint8_t n, _validBits=0;
	uint32_t i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
	uint8_t bitFraming = (rxAlign << 4) + txLastBits;   // RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

	PCD_WriteRegister(CommandReg, PCD_Idle);            // Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);                 // Clear all seven interrupt request bits
	PCD_SetRegisterBits(FIFOLevelReg, 0x80);            // FlushBuffer = 1, FIFO initialization
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);  // Write sendData to the FIFO
	PCD_WriteRegister(BitFramingReg, bitFraming);       // Bit adjustments
	PCD_WriteRegister(CommandReg, command);             // Execute the command
	if (command == PCD_Transceive)
	{
		PCD_SetRegisterBits(BitFramingReg, 0x80);      // StartSend=1, transmission of data starts
	}

	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86us.
	i = 2000;
	while (1)
	{
		n = PCD_ReadRegister(ComIrqReg);  // ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq)
		{          // One of the interrupts that signal success has been set.
			break;
		}

		if (n & 0x01)
		{           // Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
		}

		if (--i == 0)
		{           // The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	// Stop now if any errors except collisions were detected.
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13)
	{  // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
	}

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen)
	{
		n = PCD_ReadRegister(FIFOLevelReg);           // Number of bytes in the FIFO
		if (n > *backLen)
		{
			return STATUS_NO_ROOM;
		}

		*backLen = n;                       // Number of bytes returned
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);    // Get received data from FIFO
		_validBits = PCD_ReadRegister(ControlReg) & 0x07; // RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
		if (validBits)
		{
			*validBits = _validBits;
		}
	}

	// Tell about collisions
	if (errorRegValue & 0x08)
	{ // CollErr
		return STATUS_COLLISION;
	}

	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC)
	{
		// In this case a MIFARE Classic NAK is not OK.
		if ((*backLen == 1) && (_validBits == 4))
		{
			return STATUS_MIFARE_NACK;
		}

		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if ((*backLen < 2) || (_validBits != 0))
		{
			return STATUS_CRC_WRONG;
		}

		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		uint8_t controlBuffer[2];
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
		if (n != STATUS_OK)
		{
			return n;
		}

		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1]))
		{
			return STATUS_CRC_WRONG;
		}
	}

	return STATUS_OK;
}


