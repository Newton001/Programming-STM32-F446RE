#ifndef MFRC522_H
#define MFRC522_H

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32f4xx_hal.h" // HAL library for GPIO and SPI
#include <stdbool.h>       // Boolean type support
#include <stdint.h>        // Fixed-width integers

// MFRC522 Constants

// PICC Commands
#define PICC_CMD_REQA          0x26
#define PICC_CMD_WUPA          0x52
#define PICC_CMD_CT            0x88
#define PICC_CMD_SEL_CL1       0x93
#define PICC_CMD_SEL_CL2       0x95
#define PICC_CMD_SEL_CL3       0x97
#define PICC_CMD_HLTA          0x50
#define PICC_CMD_MF_AUTH_KEY_A 0x60
#define PICC_CMD_MF_AUTH_KEY_B 0x61
#define PICC_CMD_MF_READ       0x30
#define PICC_CMD_MF_WRITE      0xA0
#define PICC_CMD_MF_DECREMENT  0xC0
#define PICC_CMD_MF_INCREMENT  0xC1
#define PICC_CMD_MF_RESTORE    0xC2
#define PICC_CMD_MF_TRANSFER   0xB0
#define PICC_CMD_UL_WRITE      0xA2

// Status Codes
typedef enum {
    STATUS_OK = 1,
    STATUS_ERROR,
    STATUS_COLLISION,
    STATUS_TIMEOUT,
    STATUS_NO_ROOM,
    STATUS_INTERNAL_ERROR,
    STATUS_INVALID,
    STATUS_CRC_WRONG,
    STATUS_MIFARE_NACK
} StatusCode;

// PICC Types
#define PICC_TYPE_UNKNOWN      0
#define PICC_TYPE_ISO_14443_4  1
#define PICC_TYPE_ISO_18092    2
#define PICC_TYPE_MIFARE_MINI  3
#define PICC_TYPE_MIFARE_1K    4
#define PICC_TYPE_MIFARE_4K    5
#define PICC_TYPE_MIFARE_UL    6
#define PICC_TYPE_MIFARE_PLUS  7
#define PICC_TYPE_TNP3XXX      8
#define PICC_TYPE_NOT_COMPLETE 255

// Structs
typedef struct {
    uint8_t size;        // Number of bytes in the UID
    uint8_t uidByte[10]; // UID bytes
    uint8_t sak;         // Select Acknowledge (SAK) byte
} Uid;

typedef struct {
    uint8_t keyByte[6];  // MIFARE Crypto1 key
} MIFARE_Key;

typedef struct {
    uint8_t *validBits;  // Optional: Valid bits
    uint8_t rxAlign;     // Optional: Receive alignment
    bool checkCRC;       // Optional: Whether to check CRC
} TransceiveConfig;

// GPIO Pins
#define RC522_CS_GPIO_Port GPIOB
#define RC522_CS_Pin GPIO_PIN_6
#define RC522_RESET_GPIO_Port GPIOC
#define RC522_RESET_Pin GPIO_PIN_7

// Function Prototypes

// Initialization and Configuration
void PCD_Init(void);
void PCD_Reset(void);
void PCD_AntennaOn(void);

// Low-Level Register Access
void PCD_WriteRegister(uint8_t reg, uint8_t value);
void PCD_WriteRegisterMulti(uint8_t reg, uint8_t count, uint8_t *values);
uint8_t PCD_ReadRegister(uint8_t reg);
void PCD_ReadRegisterMulti(uint8_t reg, uint8_t count, uint8_t *values);
void PCD_SetRegisterBits(uint8_t reg, uint8_t mask);
void PCD_ClrRegisterBits(uint8_t reg, uint8_t mask);

// Communication with the MFRC522
uint8_t PCD_CommunicateWithPICC(uint8_t command, uint8_t waitIRq, uint8_t *sendData, uint8_t sendLen,
                                uint8_t *backData, uint8_t *backLen, uint8_t *validBits, uint8_t rxAlign,
                                bool checkCRC);
uint8_t PCD_TransceiveDataBase(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen,
                               TransceiveConfig *config);
uint8_t PCD_TransceiveDataDefault(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen);
uint8_t PCD_TransceiveDataWithCRC(uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen);
uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result);

// PICC-Level Commands
uint8_t PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize);
uint8_t PICC_WakeupA(uint8_t *bufferATQA, uint8_t *bufferSize);
uint8_t PICC_Select(Uid *uid, uint8_t validBits);
uint8_t PICC_HaltA(void);

// MIFARE Commands
uint8_t PCD_Authenticate(uint8_t command, uint8_t blockAddr, MIFARE_Key *key, Uid *uid);
void PCD_StopCrypto1(void);
uint8_t MIFARE_Read(uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize);
uint8_t MIFARE_Write(uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize);
uint8_t MIFARE_UltralightWrite(uint8_t page, uint8_t *buffer, uint8_t bufferSize);
uint8_t MIFARE_Decrement(uint8_t blockAddr, uint32_t delta);
uint8_t MIFARE_Increment(uint8_t blockAddr, uint32_t delta);
uint8_t MIFARE_Restore(uint8_t blockAddr);
uint8_t MIFARE_Transfer(uint8_t blockAddr);

// Utilities
uint8_t PICC_GetType(uint8_t sak);
char *PICC_GetTypeName(uint8_t type);
char *GetStatusCodeName(uint8_t code);
void MIFARE_SetAccessBits(uint8_t *accessBitBuffer, uint8_t g0, uint8_t g1, uint8_t g2, uint8_t g3);
bool PICC_IsNewCardPresent(void);
bool PICC_ReadCardSerial(void);

#ifdef __cplusplus
}
#endif

#endif // MFRC522_H
