
Binary_Count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080029c0  080029c0  000039c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a30  08002a30  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00003a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002a38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002aa0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002aa0  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bb3  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ab  00000000  00000000  00008c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00009ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003da  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216eb  00000000  00000000  0000a92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072c2  00000000  00000000  0002c015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7822  00000000  00000000  000332d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faaf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b28  00000000  00000000  000fab3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fc664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080029a8 	.word	0x080029a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080029a8 	.word	0x080029a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr,int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; ++i)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
	{
		ITM_SendChar((*ptr++));
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffc9 	bl	80005a0 <ITM_SendChar>
	for(int i = 0; i < len; ++i)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
	}
	return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800062e:	f000 fa1b 	bl	8000a68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000632:	f000 f867 	bl	8000704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000636:	f000 f8c5 	bl	80007c4 <MX_GPIO_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Set PC0 to PC3 to binary counter value
		HAL_GPIO_WritePin(B0_GPIO_Port, B0_Pin, (counter & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800063a:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <main+0xd0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	2101      	movs	r1, #1
 8000648:	482c      	ldr	r0, [pc, #176]	@ (80006fc <main+0xd4>)
 800064a:	f000 fd35 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, (counter & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <main+0xd0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	105b      	asrs	r3, r3, #1
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	2102      	movs	r1, #2
 8000660:	4826      	ldr	r0, [pc, #152]	@ (80006fc <main+0xd4>)
 8000662:	f000 fd29 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, (counter & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000666:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <main+0xd0>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	109b      	asrs	r3, r3, #2
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	2104      	movs	r1, #4
 8000678:	4820      	ldr	r0, [pc, #128]	@ (80006fc <main+0xd4>)
 800067a:	f000 fd1d 	bl	80010b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B3_GPIO_Port, B3_Pin, (counter & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800067e:	4b1e      	ldr	r3, [pc, #120]	@ (80006f8 <main+0xd0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	10db      	asrs	r3, r3, #3
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	2108      	movs	r1, #8
 8000690:	481a      	ldr	r0, [pc, #104]	@ (80006fc <main+0xd4>)
 8000692:	f000 fd11 	bl	80010b8 <HAL_GPIO_WritePin>

		// Read the state of each pin (PC0, PC1, PC2, PC3)
		uint8_t pin0 = HAL_GPIO_ReadPin(B0_GPIO_Port, B0_Pin);
 8000696:	2101      	movs	r1, #1
 8000698:	4818      	ldr	r0, [pc, #96]	@ (80006fc <main+0xd4>)
 800069a:	f000 fcf5 	bl	8001088 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
		uint8_t pin1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80006a2:	2102      	movs	r1, #2
 80006a4:	4815      	ldr	r0, [pc, #84]	@ (80006fc <main+0xd4>)
 80006a6:	f000 fcef 	bl	8001088 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71bb      	strb	r3, [r7, #6]
		uint8_t pin2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 80006ae:	2104      	movs	r1, #4
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <main+0xd4>)
 80006b2:	f000 fce9 	bl	8001088 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	717b      	strb	r3, [r7, #5]
		uint8_t pin3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 80006ba:	2108      	movs	r1, #8
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <main+0xd4>)
 80006be:	f000 fce3 	bl	8001088 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	713b      	strb	r3, [r7, #4]


		// Print the state of each pin to the SWV Console
		printf("PC0: %d, PC1: %d, PC2: %d, PC3: %d\n", pin0, pin1, pin2, pin3);
 80006c6:	79f9      	ldrb	r1, [r7, #7]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	7978      	ldrb	r0, [r7, #5]
 80006cc:	793b      	ldrb	r3, [r7, #4]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4603      	mov	r3, r0
 80006d2:	480b      	ldr	r0, [pc, #44]	@ (8000700 <main+0xd8>)
 80006d4:	f001 fafa 	bl	8001ccc <iprintf>

		// Increment the counter
		counter = (counter + 1) & 0x0F;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <main+0xd0>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <main+0xd0>)
 80006e8:	701a      	strb	r2, [r3, #0]
		// Delay to simulate the timing
		HAL_Delay(500); // 500 ms delay, adjust as needed
 80006ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ee:	f000 fa2d 	bl	8000b4c <HAL_Delay>
	{
 80006f2:	bf00      	nop
 80006f4:	e7a1      	b.n	800063a <main+0x12>
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084
 80006fc:	40020800 	.word	0x40020800
 8000700:	080029c0 	.word	0x080029c0

08000704 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	@ 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fb2f 	bl	8001d76 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <SystemClock_Config+0xb8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <SystemClock_Config+0xb8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <SystemClock_Config+0xb8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemClock_Config+0xbc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <SystemClock_Config+0xbc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f000 ff47 	bl	800160c <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000784:	f000 f850 	bl	8000828 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fca2 	bl	80010ec <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xae>
	{
		Error_Handler();
 80007ae:	f000 f83b 	bl	8000828 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_GPIO_Init+0x5c>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <MX_GPIO_Init+0x5c>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_GPIO_Init+0x5c>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, B0_Pin|B1_Pin|B2_Pin|B3_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	210f      	movs	r1, #15
 80007f8:	480a      	ldr	r0, [pc, #40]	@ (8000824 <MX_GPIO_Init+0x60>)
 80007fa:	f000 fc5d 	bl	80010b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B0_Pin B1_Pin B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin|B3_Pin;
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_GPIO_Init+0x60>)
 8000814:	f000 faa4 	bl	8000d60 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800

08000828 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <NMI_Handler+0x4>

0800088c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <UsageFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 f917 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e00a      	b.n	800090a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008f4:	f3af 8000 	nop.w
 80008f8:	4601      	mov	r1, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	60ba      	str	r2, [r7, #8]
 8000900:	b2ca      	uxtb	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf0      	blt.n	80008f4 <_read+0x12>
  }

  return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_close>:
  }
  return len;
}

int _close(int file)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	605a      	str	r2, [r3, #4]
  return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_isatty>:

int _isatty(int file)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f001 fa2e 	bl	8001e14 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20020000 	.word	0x20020000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	20000088 	.word	0x20000088
 80009ec:	200001e0 	.word	0x200001e0

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f001 f9ed 	bl	8001e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fdef 	bl	8000628 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a58:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8000a5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a60:	200001dc 	.word	0x200001dc

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f931 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff feca 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f93b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f911 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	2000008c 	.word	0x2000008c

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	2000008c 	.word	0x2000008c

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_SetPriority>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff47 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5c 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e165      	b.n	8001048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 8154 	bne.w	8001042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d130      	bne.n	8000e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d017      	beq.n	8000e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d123      	bne.n	8000ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0203 	and.w	r2, r3, #3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80ae 	beq.w	8001042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b5d      	ldr	r3, [pc, #372]	@ (8001060 <HAL_GPIO_Init+0x300>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a5c      	ldr	r2, [pc, #368]	@ (8001060 <HAL_GPIO_Init+0x300>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8001060 <HAL_GPIO_Init+0x300>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f02:	4a58      	ldr	r2, [pc, #352]	@ (8001064 <HAL_GPIO_Init+0x304>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4f      	ldr	r2, [pc, #316]	@ (8001068 <HAL_GPIO_Init+0x308>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d025      	beq.n	8000f7a <HAL_GPIO_Init+0x21a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	@ (800106c <HAL_GPIO_Init+0x30c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01f      	beq.n	8000f76 <HAL_GPIO_Init+0x216>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	@ (8001070 <HAL_GPIO_Init+0x310>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x212>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <HAL_GPIO_Init+0x314>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x20e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	@ (8001078 <HAL_GPIO_Init+0x318>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x20a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	@ (800107c <HAL_GPIO_Init+0x31c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x206>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	@ (8001080 <HAL_GPIO_Init+0x320>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x202>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f62:	2307      	movs	r3, #7
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x21c>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	@ (8001064 <HAL_GPIO_Init+0x304>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a31      	ldr	r2, [pc, #196]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a26      	ldr	r2, [pc, #152]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <HAL_GPIO_Init+0x324>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <HAL_GPIO_Init+0x324>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_GPIO_Init+0x324>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f ae96 	bls.w	8000d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40021400 	.word	0x40021400
 8001080:	40021800 	.word	0x40021800
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0cc      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001100:	4b68      	ldr	r3, [pc, #416]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d90c      	bls.n	8001128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	4b65      	ldr	r3, [pc, #404]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	4b63      	ldr	r3, [pc, #396]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0b8      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001140:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a58      	ldr	r2, [pc, #352]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800114a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001158:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a52      	ldr	r2, [pc, #328]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001164:	4b50      	ldr	r3, [pc, #320]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	494d      	ldr	r1, [pc, #308]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d044      	beq.n	800120c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d119      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e07f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d003      	beq.n	80011aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d109      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e06f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e067      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ca:	4b37      	ldr	r3, [pc, #220]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f023 0203 	bic.w	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4934      	ldr	r1, [pc, #208]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fcaa 	bl	8000b34 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff fca6 	bl	8000b34 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e04f      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	4b2b      	ldr	r3, [pc, #172]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 020c 	and.w	r2, r3, #12
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	429a      	cmp	r2, r3
 800120a:	d1eb      	bne.n	80011e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800120c:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d20c      	bcs.n	8001234 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e032      	b.n	800129a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4916      	ldr	r1, [pc, #88]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	490e      	ldr	r1, [pc, #56]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001272:	f000 f821 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001276:	4602      	mov	r2, r0
 8001278:	4b0b      	ldr	r3, [pc, #44]	@ (80012a8 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	490a      	ldr	r1, [pc, #40]	@ (80012ac <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fc0a 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	080029e4 	.word	0x080029e4
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012bc:	b0a6      	sub	sp, #152	@ 0x98
 80012be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012de:	4bc8      	ldr	r3, [pc, #800]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	f200 817e 	bhi.w	80015e8 <HAL_RCC_GetSysClockFreq+0x330>
 80012ec:	a201      	add	r2, pc, #4	@ (adr r2, 80012f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	08001329 	.word	0x08001329
 80012f8:	080015e9 	.word	0x080015e9
 80012fc:	080015e9 	.word	0x080015e9
 8001300:	080015e9 	.word	0x080015e9
 8001304:	08001331 	.word	0x08001331
 8001308:	080015e9 	.word	0x080015e9
 800130c:	080015e9 	.word	0x080015e9
 8001310:	080015e9 	.word	0x080015e9
 8001314:	08001339 	.word	0x08001339
 8001318:	080015e9 	.word	0x080015e9
 800131c:	080015e9 	.word	0x080015e9
 8001320:	080015e9 	.word	0x080015e9
 8001324:	080014a3 	.word	0x080014a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4bb6      	ldr	r3, [pc, #728]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x34c>)
 800132a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800132e:	e15f      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001330:	4bb5      	ldr	r3, [pc, #724]	@ (8001608 <HAL_RCC_GetSysClockFreq+0x350>)
 8001332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001336:	e15b      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001338:	4bb1      	ldr	r3, [pc, #708]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001344:	4bae      	ldr	r3, [pc, #696]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d031      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001350:	4bab      	ldr	r3, [pc, #684]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	2200      	movs	r2, #0
 8001358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800135a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800135c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800135e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001362:	663b      	str	r3, [r7, #96]	@ 0x60
 8001364:	2300      	movs	r3, #0
 8001366:	667b      	str	r3, [r7, #100]	@ 0x64
 8001368:	4ba7      	ldr	r3, [pc, #668]	@ (8001608 <HAL_RCC_GetSysClockFreq+0x350>)
 800136a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800136e:	462a      	mov	r2, r5
 8001370:	fb03 f202 	mul.w	r2, r3, r2
 8001374:	2300      	movs	r3, #0
 8001376:	4621      	mov	r1, r4
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	4aa2      	ldr	r2, [pc, #648]	@ (8001608 <HAL_RCC_GetSysClockFreq+0x350>)
 8001380:	4621      	mov	r1, r4
 8001382:	fba1 1202 	umull	r1, r2, r1, r2
 8001386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001388:	460a      	mov	r2, r1
 800138a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800138c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800138e:	4413      	add	r3, r2
 8001390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001396:	2200      	movs	r2, #0
 8001398:	65bb      	str	r3, [r7, #88]	@ 0x58
 800139a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800139c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80013a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80013a4:	f7fe ff84 	bl	80002b0 <__aeabi_uldivmod>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4613      	mov	r3, r2
 80013ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013b2:	e064      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b4:	4b92      	ldr	r3, [pc, #584]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	2200      	movs	r2, #0
 80013bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80013be:	657a      	str	r2, [r7, #84]	@ 0x54
 80013c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013c8:	2300      	movs	r3, #0
 80013ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013cc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80013d0:	4622      	mov	r2, r4
 80013d2:	462b      	mov	r3, r5
 80013d4:	f04f 0000 	mov.w	r0, #0
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	0159      	lsls	r1, r3, #5
 80013de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013e2:	0150      	lsls	r0, r2, #5
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4621      	mov	r1, r4
 80013ea:	1a51      	subs	r1, r2, r1
 80013ec:	6139      	str	r1, [r7, #16]
 80013ee:	4629      	mov	r1, r5
 80013f0:	eb63 0301 	sbc.w	r3, r3, r1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001402:	4659      	mov	r1, fp
 8001404:	018b      	lsls	r3, r1, #6
 8001406:	4651      	mov	r1, sl
 8001408:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800140c:	4651      	mov	r1, sl
 800140e:	018a      	lsls	r2, r1, #6
 8001410:	4651      	mov	r1, sl
 8001412:	ebb2 0801 	subs.w	r8, r2, r1
 8001416:	4659      	mov	r1, fp
 8001418:	eb63 0901 	sbc.w	r9, r3, r1
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800142c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001430:	4690      	mov	r8, r2
 8001432:	4699      	mov	r9, r3
 8001434:	4623      	mov	r3, r4
 8001436:	eb18 0303 	adds.w	r3, r8, r3
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	462b      	mov	r3, r5
 800143e:	eb49 0303 	adc.w	r3, r9, r3
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001450:	4629      	mov	r1, r5
 8001452:	028b      	lsls	r3, r1, #10
 8001454:	4621      	mov	r1, r4
 8001456:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800145a:	4621      	mov	r1, r4
 800145c:	028a      	lsls	r2, r1, #10
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001466:	2200      	movs	r2, #0
 8001468:	643b      	str	r3, [r7, #64]	@ 0x40
 800146a:	647a      	str	r2, [r7, #68]	@ 0x44
 800146c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001470:	f7fe ff1e 	bl	80002b0 <__aeabi_uldivmod>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4613      	mov	r3, r2
 800147a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800147e:	4b60      	ldr	r3, [pc, #384]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0c1b      	lsrs	r3, r3, #16
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	3301      	adds	r3, #1
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001490:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001494:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001498:	fbb2 f3f3 	udiv	r3, r2, r3
 800149c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014a0:	e0a6      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a2:	4b57      	ldr	r3, [pc, #348]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ae:	4b54      	ldr	r3, [pc, #336]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d02a      	beq.n	8001510 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ba:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	099b      	lsrs	r3, r3, #6
 80014c0:	2200      	movs	r2, #0
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014cc:	2100      	movs	r1, #0
 80014ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001608 <HAL_RCC_GetSysClockFreq+0x350>)
 80014d0:	fb03 f201 	mul.w	r2, r3, r1
 80014d4:	2300      	movs	r3, #0
 80014d6:	fb00 f303 	mul.w	r3, r0, r3
 80014da:	4413      	add	r3, r2
 80014dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001608 <HAL_RCC_GetSysClockFreq+0x350>)
 80014de:	fba0 1202 	umull	r1, r2, r0, r2
 80014e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80014e4:	460a      	mov	r2, r1
 80014e6:	673a      	str	r2, [r7, #112]	@ 0x70
 80014e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014ea:	4413      	add	r3, r2
 80014ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80014ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014f2:	2200      	movs	r2, #0
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80014f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80014f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001500:	f7fe fed6 	bl	80002b0 <__aeabi_uldivmod>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4613      	mov	r3, r2
 800150a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800150e:	e05b      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001510:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	2200      	movs	r2, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800151a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800151c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
 8001528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800152c:	4642      	mov	r2, r8
 800152e:	464b      	mov	r3, r9
 8001530:	f04f 0000 	mov.w	r0, #0
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	0159      	lsls	r1, r3, #5
 800153a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153e:	0150      	lsls	r0, r2, #5
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4641      	mov	r1, r8
 8001546:	ebb2 0a01 	subs.w	sl, r2, r1
 800154a:	4649      	mov	r1, r9
 800154c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800155c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001564:	ebb2 040a 	subs.w	r4, r2, sl
 8001568:	eb63 050b 	sbc.w	r5, r3, fp
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	00eb      	lsls	r3, r5, #3
 8001576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157a:	00e2      	lsls	r2, r4, #3
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	4643      	mov	r3, r8
 8001582:	18e3      	adds	r3, r4, r3
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	464b      	mov	r3, r9
 8001588:	eb45 0303 	adc.w	r3, r5, r3
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800159a:	4629      	mov	r1, r5
 800159c:	028b      	lsls	r3, r1, #10
 800159e:	4621      	mov	r1, r4
 80015a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015a4:	4621      	mov	r1, r4
 80015a6:	028a      	lsls	r2, r1, #10
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015b0:	2200      	movs	r2, #0
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	61fa      	str	r2, [r7, #28]
 80015b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ba:	f7fe fe79 	bl	80002b0 <__aeabi_uldivmod>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4613      	mov	r3, r2
 80015c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x348>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0f1b      	lsrs	r3, r3, #28
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80015d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80015da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015e6:	e003      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3798      	adds	r7, #152	@ 0x98
 80015f8:	46bd      	mov	sp, r7
 80015fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	00f42400 	.word	0x00f42400
 8001608:	017d7840 	.word	0x017d7840

0800160c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e28d      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8083 	beq.w	8001732 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800162c:	4b94      	ldr	r3, [pc, #592]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	d019      	beq.n	800166c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001638:	4b91      	ldr	r3, [pc, #580]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001640:	2b08      	cmp	r3, #8
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001644:	4b8e      	ldr	r3, [pc, #568]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b8b      	ldr	r3, [pc, #556]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800165a:	2b0c      	cmp	r3, #12
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b84      	ldr	r3, [pc, #528]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x124>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e25a      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x90>
 800168e:	4b7c      	ldr	r3, [pc, #496]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7b      	ldr	r2, [pc, #492]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xcc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0xb4>
 80016a6:	4b76      	ldr	r3, [pc, #472]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a75      	ldr	r2, [pc, #468]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b73      	ldr	r3, [pc, #460]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a72      	ldr	r2, [pc, #456]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xcc>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fa28 	bl	8000b34 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fa24 	bl	8000b34 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	@ 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e21f      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b61      	ldr	r3, [pc, #388]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xdc>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fa14 	bl	8000b34 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fa10 	bl	8000b34 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e20b      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b57      	ldr	r3, [pc, #348]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x104>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06f      	beq.n	800181e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800173e:	4b50      	ldr	r3, [pc, #320]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d017      	beq.n	800177a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800174a:	4b4d      	ldr	r3, [pc, #308]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001752:	2b08      	cmp	r3, #8
 8001754:	d105      	bne.n	8001762 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b47      	ldr	r3, [pc, #284]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d11c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b44      	ldr	r3, [pc, #272]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b41      	ldr	r3, [pc, #260]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x186>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1d3      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b3b      	ldr	r3, [pc, #236]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4937      	ldr	r1, [pc, #220]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e03a      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_RCC_OscConfig+0x278>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff f9bd 	bl	8000b34 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff f9b9 	bl	8000b34 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1b4      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4925      	ldr	r1, [pc, #148]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <HAL_RCC_OscConfig+0x278>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f99c 	bl	8000b34 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f998 	bl	8000b34 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e193      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d036      	beq.n	8001898 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff f97c 	bl	8000b34 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff f978 	bl	8000b34 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e173      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <HAL_RCC_OscConfig+0x274>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x234>
 800185e:	e01b      	b.n	8001898 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_OscConfig+0x27c>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff f965 	bl	8000b34 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	e00e      	b.n	800188c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff f961 	bl	8000b34 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d907      	bls.n	800188c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e15c      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
 8001880:	40023800 	.word	0x40023800
 8001884:	42470000 	.word	0x42470000
 8001888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1ea      	bne.n	800186e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8097 	beq.w	80019d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b83      	ldr	r3, [pc, #524]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <HAL_RCC_OscConfig+0x4b0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x4b0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x4b0>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff f921 	bl	8000b34 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff f91d 	bl	8000b34 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e118      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x4b0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x31e>
 800191c:	4b66      	ldr	r3, [pc, #408]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001920:	4a65      	ldr	r2, [pc, #404]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	@ 0x70
 8001928:	e01c      	b.n	8001964 <HAL_RCC_OscConfig+0x358>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x340>
 8001932:	4b61      	ldr	r3, [pc, #388]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001936:	4a60      	ldr	r2, [pc, #384]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6713      	str	r3, [r2, #112]	@ 0x70
 800193e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	@ 0x70
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0x358>
 800194c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	4a59      	ldr	r2, [pc, #356]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6713      	str	r3, [r2, #112]	@ 0x70
 8001958:	4b57      	ldr	r3, [pc, #348]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d015      	beq.n	8001998 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f8e2 	bl	8000b34 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f8de 	bl	8000b34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0d7      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ee      	beq.n	8001974 <HAL_RCC_OscConfig+0x368>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f8cc 	bl	8000b34 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f8c8 	bl	8000b34 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0c1      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ee      	bne.n	80019a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80ad 	beq.w	8001b38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d060      	beq.n	8001aac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d145      	bne.n	8001a7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f2:	4b33      	ldr	r3, [pc, #204]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f89c 	bl	8000b34 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f898 	bl	8000b34 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e093      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	071b      	lsls	r3, r3, #28
 8001a4a:	491b      	ldr	r1, [pc, #108]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b4>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f86d 	bl	8000b34 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff f869 	bl	8000b34 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e064      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x452>
 8001a7c:	e05c      	b.n	8001b38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_RCC_OscConfig+0x4b4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f856 	bl	8000b34 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f852 	bl	8000b34 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04d      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x480>
 8001aaa:	e045      	b.n	8001b38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e040      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <HAL_RCC_OscConfig+0x538>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d030      	beq.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d129      	bne.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d122      	bne.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001af4:	4013      	ands	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d119      	bne.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d10f      	bne.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <std>:
 8001b48:	2300      	movs	r3, #0
 8001b4a:	b510      	push	{r4, lr}
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8001b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b56:	6083      	str	r3, [r0, #8]
 8001b58:	8181      	strh	r1, [r0, #12]
 8001b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b5c:	81c2      	strh	r2, [r0, #14]
 8001b5e:	6183      	str	r3, [r0, #24]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2208      	movs	r2, #8
 8001b64:	305c      	adds	r0, #92	@ 0x5c
 8001b66:	f000 f906 	bl	8001d76 <memset>
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <std+0x58>)
 8001b6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <std+0x5c>)
 8001b70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <std+0x60>)
 8001b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <std+0x64>)
 8001b78:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <std+0x68>)
 8001b7c:	6224      	str	r4, [r4, #32]
 8001b7e:	429c      	cmp	r4, r3
 8001b80:	d006      	beq.n	8001b90 <std+0x48>
 8001b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b86:	4294      	cmp	r4, r2
 8001b88:	d002      	beq.n	8001b90 <std+0x48>
 8001b8a:	33d0      	adds	r3, #208	@ 0xd0
 8001b8c:	429c      	cmp	r4, r3
 8001b8e:	d105      	bne.n	8001b9c <std+0x54>
 8001b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b98:	f000 b966 	b.w	8001e68 <__retarget_lock_init_recursive>
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	bf00      	nop
 8001ba0:	08001cf1 	.word	0x08001cf1
 8001ba4:	08001d13 	.word	0x08001d13
 8001ba8:	08001d4b 	.word	0x08001d4b
 8001bac:	08001d6f 	.word	0x08001d6f
 8001bb0:	20000090 	.word	0x20000090

08001bb4 <stdio_exit_handler>:
 8001bb4:	4a02      	ldr	r2, [pc, #8]	@ (8001bc0 <stdio_exit_handler+0xc>)
 8001bb6:	4903      	ldr	r1, [pc, #12]	@ (8001bc4 <stdio_exit_handler+0x10>)
 8001bb8:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <stdio_exit_handler+0x14>)
 8001bba:	f000 b869 	b.w	8001c90 <_fwalk_sglue>
 8001bbe:	bf00      	nop
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	08002709 	.word	0x08002709
 8001bc8:	2000001c 	.word	0x2000001c

08001bcc <cleanup_stdio>:
 8001bcc:	6841      	ldr	r1, [r0, #4]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <cleanup_stdio+0x34>)
 8001bd0:	4299      	cmp	r1, r3
 8001bd2:	b510      	push	{r4, lr}
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	d001      	beq.n	8001bdc <cleanup_stdio+0x10>
 8001bd8:	f000 fd96 	bl	8002708 <_fflush_r>
 8001bdc:	68a1      	ldr	r1, [r4, #8]
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <cleanup_stdio+0x38>)
 8001be0:	4299      	cmp	r1, r3
 8001be2:	d002      	beq.n	8001bea <cleanup_stdio+0x1e>
 8001be4:	4620      	mov	r0, r4
 8001be6:	f000 fd8f 	bl	8002708 <_fflush_r>
 8001bea:	68e1      	ldr	r1, [r4, #12]
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <cleanup_stdio+0x3c>)
 8001bee:	4299      	cmp	r1, r3
 8001bf0:	d004      	beq.n	8001bfc <cleanup_stdio+0x30>
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bf8:	f000 bd86 	b.w	8002708 <_fflush_r>
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000090 	.word	0x20000090
 8001c04:	200000f8 	.word	0x200000f8
 8001c08:	20000160 	.word	0x20000160

08001c0c <global_stdio_init.part.0>:
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <global_stdio_init.part.0+0x30>)
 8001c10:	4c0b      	ldr	r4, [pc, #44]	@ (8001c40 <global_stdio_init.part.0+0x34>)
 8001c12:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <global_stdio_init.part.0+0x38>)
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	4620      	mov	r0, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	f7ff ff94 	bl	8001b48 <std>
 8001c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001c24:	2201      	movs	r2, #1
 8001c26:	2109      	movs	r1, #9
 8001c28:	f7ff ff8e 	bl	8001b48 <std>
 8001c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001c30:	2202      	movs	r2, #2
 8001c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c36:	2112      	movs	r1, #18
 8001c38:	f7ff bf86 	b.w	8001b48 <std>
 8001c3c:	200001c8 	.word	0x200001c8
 8001c40:	20000090 	.word	0x20000090
 8001c44:	08001bb5 	.word	0x08001bb5

08001c48 <__sfp_lock_acquire>:
 8001c48:	4801      	ldr	r0, [pc, #4]	@ (8001c50 <__sfp_lock_acquire+0x8>)
 8001c4a:	f000 b90e 	b.w	8001e6a <__retarget_lock_acquire_recursive>
 8001c4e:	bf00      	nop
 8001c50:	200001d1 	.word	0x200001d1

08001c54 <__sfp_lock_release>:
 8001c54:	4801      	ldr	r0, [pc, #4]	@ (8001c5c <__sfp_lock_release+0x8>)
 8001c56:	f000 b909 	b.w	8001e6c <__retarget_lock_release_recursive>
 8001c5a:	bf00      	nop
 8001c5c:	200001d1 	.word	0x200001d1

08001c60 <__sinit>:
 8001c60:	b510      	push	{r4, lr}
 8001c62:	4604      	mov	r4, r0
 8001c64:	f7ff fff0 	bl	8001c48 <__sfp_lock_acquire>
 8001c68:	6a23      	ldr	r3, [r4, #32]
 8001c6a:	b11b      	cbz	r3, 8001c74 <__sinit+0x14>
 8001c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c70:	f7ff bff0 	b.w	8001c54 <__sfp_lock_release>
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <__sinit+0x28>)
 8001c76:	6223      	str	r3, [r4, #32]
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <__sinit+0x2c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f5      	bne.n	8001c6c <__sinit+0xc>
 8001c80:	f7ff ffc4 	bl	8001c0c <global_stdio_init.part.0>
 8001c84:	e7f2      	b.n	8001c6c <__sinit+0xc>
 8001c86:	bf00      	nop
 8001c88:	08001bcd 	.word	0x08001bcd
 8001c8c:	200001c8 	.word	0x200001c8

08001c90 <_fwalk_sglue>:
 8001c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c94:	4607      	mov	r7, r0
 8001c96:	4688      	mov	r8, r1
 8001c98:	4614      	mov	r4, r2
 8001c9a:	2600      	movs	r6, #0
 8001c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8001ca4:	d505      	bpl.n	8001cb2 <_fwalk_sglue+0x22>
 8001ca6:	6824      	ldr	r4, [r4, #0]
 8001ca8:	2c00      	cmp	r4, #0
 8001caa:	d1f7      	bne.n	8001c9c <_fwalk_sglue+0xc>
 8001cac:	4630      	mov	r0, r6
 8001cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cb2:	89ab      	ldrh	r3, [r5, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d907      	bls.n	8001cc8 <_fwalk_sglue+0x38>
 8001cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	d003      	beq.n	8001cc8 <_fwalk_sglue+0x38>
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	4638      	mov	r0, r7
 8001cc4:	47c0      	blx	r8
 8001cc6:	4306      	orrs	r6, r0
 8001cc8:	3568      	adds	r5, #104	@ 0x68
 8001cca:	e7e9      	b.n	8001ca0 <_fwalk_sglue+0x10>

08001ccc <iprintf>:
 8001ccc:	b40f      	push	{r0, r1, r2, r3}
 8001cce:	b507      	push	{r0, r1, r2, lr}
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <iprintf+0x20>)
 8001cd2:	ab04      	add	r3, sp, #16
 8001cd4:	6808      	ldr	r0, [r1, #0]
 8001cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cda:	6881      	ldr	r1, [r0, #8]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f000 f9e9 	bl	80020b4 <_vfiprintf_r>
 8001ce2:	b003      	add	sp, #12
 8001ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ce8:	b004      	add	sp, #16
 8001cea:	4770      	bx	lr
 8001cec:	20000018 	.word	0x20000018

08001cf0 <__sread>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf8:	f000 f868 	bl	8001dcc <_read_r>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	bfab      	itete	ge
 8001d00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d02:	89a3      	ldrhlt	r3, [r4, #12]
 8001d04:	181b      	addge	r3, r3, r0
 8001d06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d0a:	bfac      	ite	ge
 8001d0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d0e:	81a3      	strhlt	r3, [r4, #12]
 8001d10:	bd10      	pop	{r4, pc}

08001d12 <__swrite>:
 8001d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d16:	461f      	mov	r7, r3
 8001d18:	898b      	ldrh	r3, [r1, #12]
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4616      	mov	r6, r2
 8001d22:	d505      	bpl.n	8001d30 <__swrite+0x1e>
 8001d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f000 f83c 	bl	8001da8 <_lseek_r>
 8001d30:	89a3      	ldrh	r3, [r4, #12]
 8001d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d3a:	81a3      	strh	r3, [r4, #12]
 8001d3c:	4632      	mov	r2, r6
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4628      	mov	r0, r5
 8001d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d46:	f000 b853 	b.w	8001df0 <_write_r>

08001d4a <__sseek>:
 8001d4a:	b510      	push	{r4, lr}
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d52:	f000 f829 	bl	8001da8 <_lseek_r>
 8001d56:	1c43      	adds	r3, r0, #1
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	bf15      	itete	ne
 8001d5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001d66:	81a3      	strheq	r3, [r4, #12]
 8001d68:	bf18      	it	ne
 8001d6a:	81a3      	strhne	r3, [r4, #12]
 8001d6c:	bd10      	pop	{r4, pc}

08001d6e <__sclose>:
 8001d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d72:	f000 b809 	b.w	8001d88 <_close_r>

08001d76 <memset>:
 8001d76:	4402      	add	r2, r0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d100      	bne.n	8001d80 <memset+0xa>
 8001d7e:	4770      	bx	lr
 8001d80:	f803 1b01 	strb.w	r1, [r3], #1
 8001d84:	e7f9      	b.n	8001d7a <memset+0x4>
	...

08001d88 <_close_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4d06      	ldr	r5, [pc, #24]	@ (8001da4 <_close_r+0x1c>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	602b      	str	r3, [r5, #0]
 8001d94:	f7fe fdc2 	bl	800091c <_close>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d102      	bne.n	8001da2 <_close_r+0x1a>
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	b103      	cbz	r3, 8001da2 <_close_r+0x1a>
 8001da0:	6023      	str	r3, [r4, #0]
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
 8001da4:	200001cc 	.word	0x200001cc

08001da8 <_lseek_r>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	4d07      	ldr	r5, [pc, #28]	@ (8001dc8 <_lseek_r+0x20>)
 8001dac:	4604      	mov	r4, r0
 8001dae:	4608      	mov	r0, r1
 8001db0:	4611      	mov	r1, r2
 8001db2:	2200      	movs	r2, #0
 8001db4:	602a      	str	r2, [r5, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	f7fe fdd7 	bl	800096a <_lseek>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d102      	bne.n	8001dc6 <_lseek_r+0x1e>
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	b103      	cbz	r3, 8001dc6 <_lseek_r+0x1e>
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}
 8001dc8:	200001cc 	.word	0x200001cc

08001dcc <_read_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4d07      	ldr	r5, [pc, #28]	@ (8001dec <_read_r+0x20>)
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	4608      	mov	r0, r1
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	602a      	str	r2, [r5, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f7fe fd81 	bl	80008e2 <_read>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d102      	bne.n	8001dea <_read_r+0x1e>
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	b103      	cbz	r3, 8001dea <_read_r+0x1e>
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	200001cc 	.word	0x200001cc

08001df0 <_write_r>:
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4d07      	ldr	r5, [pc, #28]	@ (8001e10 <_write_r+0x20>)
 8001df4:	4604      	mov	r4, r0
 8001df6:	4608      	mov	r0, r1
 8001df8:	4611      	mov	r1, r2
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	602a      	str	r2, [r5, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f7fe fbf5 	bl	80005ee <_write>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d102      	bne.n	8001e0e <_write_r+0x1e>
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	b103      	cbz	r3, 8001e0e <_write_r+0x1e>
 8001e0c:	6023      	str	r3, [r4, #0]
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}
 8001e10:	200001cc 	.word	0x200001cc

08001e14 <__errno>:
 8001e14:	4b01      	ldr	r3, [pc, #4]	@ (8001e1c <__errno+0x8>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000018 	.word	0x20000018

08001e20 <__libc_init_array>:
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	4d0d      	ldr	r5, [pc, #52]	@ (8001e58 <__libc_init_array+0x38>)
 8001e24:	4c0d      	ldr	r4, [pc, #52]	@ (8001e5c <__libc_init_array+0x3c>)
 8001e26:	1b64      	subs	r4, r4, r5
 8001e28:	10a4      	asrs	r4, r4, #2
 8001e2a:	2600      	movs	r6, #0
 8001e2c:	42a6      	cmp	r6, r4
 8001e2e:	d109      	bne.n	8001e44 <__libc_init_array+0x24>
 8001e30:	4d0b      	ldr	r5, [pc, #44]	@ (8001e60 <__libc_init_array+0x40>)
 8001e32:	4c0c      	ldr	r4, [pc, #48]	@ (8001e64 <__libc_init_array+0x44>)
 8001e34:	f000 fdb8 	bl	80029a8 <_init>
 8001e38:	1b64      	subs	r4, r4, r5
 8001e3a:	10a4      	asrs	r4, r4, #2
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	42a6      	cmp	r6, r4
 8001e40:	d105      	bne.n	8001e4e <__libc_init_array+0x2e>
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e48:	4798      	blx	r3
 8001e4a:	3601      	adds	r6, #1
 8001e4c:	e7ee      	b.n	8001e2c <__libc_init_array+0xc>
 8001e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e52:	4798      	blx	r3
 8001e54:	3601      	adds	r6, #1
 8001e56:	e7f2      	b.n	8001e3e <__libc_init_array+0x1e>
 8001e58:	08002a30 	.word	0x08002a30
 8001e5c:	08002a30 	.word	0x08002a30
 8001e60:	08002a30 	.word	0x08002a30
 8001e64:	08002a34 	.word	0x08002a34

08001e68 <__retarget_lock_init_recursive>:
 8001e68:	4770      	bx	lr

08001e6a <__retarget_lock_acquire_recursive>:
 8001e6a:	4770      	bx	lr

08001e6c <__retarget_lock_release_recursive>:
 8001e6c:	4770      	bx	lr
	...

08001e70 <_free_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4605      	mov	r5, r0
 8001e74:	2900      	cmp	r1, #0
 8001e76:	d041      	beq.n	8001efc <_free_r+0x8c>
 8001e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e7c:	1f0c      	subs	r4, r1, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bfb8      	it	lt
 8001e82:	18e4      	addlt	r4, r4, r3
 8001e84:	f000 f8e0 	bl	8002048 <__malloc_lock>
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <_free_r+0x90>)
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	b933      	cbnz	r3, 8001e9c <_free_r+0x2c>
 8001e8e:	6063      	str	r3, [r4, #4]
 8001e90:	6014      	str	r4, [r2, #0]
 8001e92:	4628      	mov	r0, r5
 8001e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e98:	f000 b8dc 	b.w	8002054 <__malloc_unlock>
 8001e9c:	42a3      	cmp	r3, r4
 8001e9e:	d908      	bls.n	8001eb2 <_free_r+0x42>
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	1821      	adds	r1, r4, r0
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	bf01      	itttt	eq
 8001ea8:	6819      	ldreq	r1, [r3, #0]
 8001eaa:	685b      	ldreq	r3, [r3, #4]
 8001eac:	1809      	addeq	r1, r1, r0
 8001eae:	6021      	streq	r1, [r4, #0]
 8001eb0:	e7ed      	b.n	8001e8e <_free_r+0x1e>
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	b10b      	cbz	r3, 8001ebc <_free_r+0x4c>
 8001eb8:	42a3      	cmp	r3, r4
 8001eba:	d9fa      	bls.n	8001eb2 <_free_r+0x42>
 8001ebc:	6811      	ldr	r1, [r2, #0]
 8001ebe:	1850      	adds	r0, r2, r1
 8001ec0:	42a0      	cmp	r0, r4
 8001ec2:	d10b      	bne.n	8001edc <_free_r+0x6c>
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	4401      	add	r1, r0
 8001ec8:	1850      	adds	r0, r2, r1
 8001eca:	4283      	cmp	r3, r0
 8001ecc:	6011      	str	r1, [r2, #0]
 8001ece:	d1e0      	bne.n	8001e92 <_free_r+0x22>
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6053      	str	r3, [r2, #4]
 8001ed6:	4408      	add	r0, r1
 8001ed8:	6010      	str	r0, [r2, #0]
 8001eda:	e7da      	b.n	8001e92 <_free_r+0x22>
 8001edc:	d902      	bls.n	8001ee4 <_free_r+0x74>
 8001ede:	230c      	movs	r3, #12
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	e7d6      	b.n	8001e92 <_free_r+0x22>
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	1821      	adds	r1, r4, r0
 8001ee8:	428b      	cmp	r3, r1
 8001eea:	bf04      	itt	eq
 8001eec:	6819      	ldreq	r1, [r3, #0]
 8001eee:	685b      	ldreq	r3, [r3, #4]
 8001ef0:	6063      	str	r3, [r4, #4]
 8001ef2:	bf04      	itt	eq
 8001ef4:	1809      	addeq	r1, r1, r0
 8001ef6:	6021      	streq	r1, [r4, #0]
 8001ef8:	6054      	str	r4, [r2, #4]
 8001efa:	e7ca      	b.n	8001e92 <_free_r+0x22>
 8001efc:	bd38      	pop	{r3, r4, r5, pc}
 8001efe:	bf00      	nop
 8001f00:	200001d8 	.word	0x200001d8

08001f04 <sbrk_aligned>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	4e0f      	ldr	r6, [pc, #60]	@ (8001f44 <sbrk_aligned+0x40>)
 8001f08:	460c      	mov	r4, r1
 8001f0a:	6831      	ldr	r1, [r6, #0]
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	b911      	cbnz	r1, 8001f16 <sbrk_aligned+0x12>
 8001f10:	f000 fcb6 	bl	8002880 <_sbrk_r>
 8001f14:	6030      	str	r0, [r6, #0]
 8001f16:	4621      	mov	r1, r4
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f000 fcb1 	bl	8002880 <_sbrk_r>
 8001f1e:	1c43      	adds	r3, r0, #1
 8001f20:	d103      	bne.n	8001f2a <sbrk_aligned+0x26>
 8001f22:	f04f 34ff 	mov.w	r4, #4294967295
 8001f26:	4620      	mov	r0, r4
 8001f28:	bd70      	pop	{r4, r5, r6, pc}
 8001f2a:	1cc4      	adds	r4, r0, #3
 8001f2c:	f024 0403 	bic.w	r4, r4, #3
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d0f8      	beq.n	8001f26 <sbrk_aligned+0x22>
 8001f34:	1a21      	subs	r1, r4, r0
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 fca2 	bl	8002880 <_sbrk_r>
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	d1f2      	bne.n	8001f26 <sbrk_aligned+0x22>
 8001f40:	e7ef      	b.n	8001f22 <sbrk_aligned+0x1e>
 8001f42:	bf00      	nop
 8001f44:	200001d4 	.word	0x200001d4

08001f48 <_malloc_r>:
 8001f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	1ccd      	adds	r5, r1, #3
 8001f4e:	f025 0503 	bic.w	r5, r5, #3
 8001f52:	3508      	adds	r5, #8
 8001f54:	2d0c      	cmp	r5, #12
 8001f56:	bf38      	it	cc
 8001f58:	250c      	movcc	r5, #12
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	4606      	mov	r6, r0
 8001f5e:	db01      	blt.n	8001f64 <_malloc_r+0x1c>
 8001f60:	42a9      	cmp	r1, r5
 8001f62:	d904      	bls.n	8001f6e <_malloc_r+0x26>
 8001f64:	230c      	movs	r3, #12
 8001f66:	6033      	str	r3, [r6, #0]
 8001f68:	2000      	movs	r0, #0
 8001f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002044 <_malloc_r+0xfc>
 8001f72:	f000 f869 	bl	8002048 <__malloc_lock>
 8001f76:	f8d8 3000 	ldr.w	r3, [r8]
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	bb44      	cbnz	r4, 8001fd0 <_malloc_r+0x88>
 8001f7e:	4629      	mov	r1, r5
 8001f80:	4630      	mov	r0, r6
 8001f82:	f7ff ffbf 	bl	8001f04 <sbrk_aligned>
 8001f86:	1c43      	adds	r3, r0, #1
 8001f88:	4604      	mov	r4, r0
 8001f8a:	d158      	bne.n	800203e <_malloc_r+0xf6>
 8001f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8001f90:	4627      	mov	r7, r4
 8001f92:	2f00      	cmp	r7, #0
 8001f94:	d143      	bne.n	800201e <_malloc_r+0xd6>
 8001f96:	2c00      	cmp	r4, #0
 8001f98:	d04b      	beq.n	8002032 <_malloc_r+0xea>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	4639      	mov	r1, r7
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	eb04 0903 	add.w	r9, r4, r3
 8001fa4:	f000 fc6c 	bl	8002880 <_sbrk_r>
 8001fa8:	4581      	cmp	r9, r0
 8001faa:	d142      	bne.n	8002032 <_malloc_r+0xea>
 8001fac:	6821      	ldr	r1, [r4, #0]
 8001fae:	1a6d      	subs	r5, r5, r1
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	f7ff ffa6 	bl	8001f04 <sbrk_aligned>
 8001fb8:	3001      	adds	r0, #1
 8001fba:	d03a      	beq.n	8002032 <_malloc_r+0xea>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	442b      	add	r3, r5
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	bb62      	cbnz	r2, 8002024 <_malloc_r+0xdc>
 8001fca:	f8c8 7000 	str.w	r7, [r8]
 8001fce:	e00f      	b.n	8001ff0 <_malloc_r+0xa8>
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	1b52      	subs	r2, r2, r5
 8001fd4:	d420      	bmi.n	8002018 <_malloc_r+0xd0>
 8001fd6:	2a0b      	cmp	r2, #11
 8001fd8:	d917      	bls.n	800200a <_malloc_r+0xc2>
 8001fda:	1961      	adds	r1, r4, r5
 8001fdc:	42a3      	cmp	r3, r4
 8001fde:	6025      	str	r5, [r4, #0]
 8001fe0:	bf18      	it	ne
 8001fe2:	6059      	strne	r1, [r3, #4]
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	bf08      	it	eq
 8001fe8:	f8c8 1000 	streq.w	r1, [r8]
 8001fec:	5162      	str	r2, [r4, r5]
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	f000 f82f 	bl	8002054 <__malloc_unlock>
 8001ff6:	f104 000b 	add.w	r0, r4, #11
 8001ffa:	1d23      	adds	r3, r4, #4
 8001ffc:	f020 0007 	bic.w	r0, r0, #7
 8002000:	1ac2      	subs	r2, r0, r3
 8002002:	bf1c      	itt	ne
 8002004:	1a1b      	subne	r3, r3, r0
 8002006:	50a3      	strne	r3, [r4, r2]
 8002008:	e7af      	b.n	8001f6a <_malloc_r+0x22>
 800200a:	6862      	ldr	r2, [r4, #4]
 800200c:	42a3      	cmp	r3, r4
 800200e:	bf0c      	ite	eq
 8002010:	f8c8 2000 	streq.w	r2, [r8]
 8002014:	605a      	strne	r2, [r3, #4]
 8002016:	e7eb      	b.n	8001ff0 <_malloc_r+0xa8>
 8002018:	4623      	mov	r3, r4
 800201a:	6864      	ldr	r4, [r4, #4]
 800201c:	e7ae      	b.n	8001f7c <_malloc_r+0x34>
 800201e:	463c      	mov	r4, r7
 8002020:	687f      	ldr	r7, [r7, #4]
 8002022:	e7b6      	b.n	8001f92 <_malloc_r+0x4a>
 8002024:	461a      	mov	r2, r3
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	42a3      	cmp	r3, r4
 800202a:	d1fb      	bne.n	8002024 <_malloc_r+0xdc>
 800202c:	2300      	movs	r3, #0
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	e7de      	b.n	8001ff0 <_malloc_r+0xa8>
 8002032:	230c      	movs	r3, #12
 8002034:	6033      	str	r3, [r6, #0]
 8002036:	4630      	mov	r0, r6
 8002038:	f000 f80c 	bl	8002054 <__malloc_unlock>
 800203c:	e794      	b.n	8001f68 <_malloc_r+0x20>
 800203e:	6005      	str	r5, [r0, #0]
 8002040:	e7d6      	b.n	8001ff0 <_malloc_r+0xa8>
 8002042:	bf00      	nop
 8002044:	200001d8 	.word	0x200001d8

08002048 <__malloc_lock>:
 8002048:	4801      	ldr	r0, [pc, #4]	@ (8002050 <__malloc_lock+0x8>)
 800204a:	f7ff bf0e 	b.w	8001e6a <__retarget_lock_acquire_recursive>
 800204e:	bf00      	nop
 8002050:	200001d0 	.word	0x200001d0

08002054 <__malloc_unlock>:
 8002054:	4801      	ldr	r0, [pc, #4]	@ (800205c <__malloc_unlock+0x8>)
 8002056:	f7ff bf09 	b.w	8001e6c <__retarget_lock_release_recursive>
 800205a:	bf00      	nop
 800205c:	200001d0 	.word	0x200001d0

08002060 <__sfputc_r>:
 8002060:	6893      	ldr	r3, [r2, #8]
 8002062:	3b01      	subs	r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	b410      	push	{r4}
 8002068:	6093      	str	r3, [r2, #8]
 800206a:	da08      	bge.n	800207e <__sfputc_r+0x1e>
 800206c:	6994      	ldr	r4, [r2, #24]
 800206e:	42a3      	cmp	r3, r4
 8002070:	db01      	blt.n	8002076 <__sfputc_r+0x16>
 8002072:	290a      	cmp	r1, #10
 8002074:	d103      	bne.n	800207e <__sfputc_r+0x1e>
 8002076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800207a:	f000 bb6d 	b.w	8002758 <__swbuf_r>
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	1c58      	adds	r0, r3, #1
 8002082:	6010      	str	r0, [r2, #0]
 8002084:	7019      	strb	r1, [r3, #0]
 8002086:	4608      	mov	r0, r1
 8002088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800208c:	4770      	bx	lr

0800208e <__sfputs_r>:
 800208e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002090:	4606      	mov	r6, r0
 8002092:	460f      	mov	r7, r1
 8002094:	4614      	mov	r4, r2
 8002096:	18d5      	adds	r5, r2, r3
 8002098:	42ac      	cmp	r4, r5
 800209a:	d101      	bne.n	80020a0 <__sfputs_r+0x12>
 800209c:	2000      	movs	r0, #0
 800209e:	e007      	b.n	80020b0 <__sfputs_r+0x22>
 80020a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020a4:	463a      	mov	r2, r7
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7ff ffda 	bl	8002060 <__sfputc_r>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d1f3      	bne.n	8002098 <__sfputs_r+0xa>
 80020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020b4 <_vfiprintf_r>:
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b8:	460d      	mov	r5, r1
 80020ba:	b09d      	sub	sp, #116	@ 0x74
 80020bc:	4614      	mov	r4, r2
 80020be:	4698      	mov	r8, r3
 80020c0:	4606      	mov	r6, r0
 80020c2:	b118      	cbz	r0, 80020cc <_vfiprintf_r+0x18>
 80020c4:	6a03      	ldr	r3, [r0, #32]
 80020c6:	b90b      	cbnz	r3, 80020cc <_vfiprintf_r+0x18>
 80020c8:	f7ff fdca 	bl	8001c60 <__sinit>
 80020cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020ce:	07d9      	lsls	r1, r3, #31
 80020d0:	d405      	bmi.n	80020de <_vfiprintf_r+0x2a>
 80020d2:	89ab      	ldrh	r3, [r5, #12]
 80020d4:	059a      	lsls	r2, r3, #22
 80020d6:	d402      	bmi.n	80020de <_vfiprintf_r+0x2a>
 80020d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020da:	f7ff fec6 	bl	8001e6a <__retarget_lock_acquire_recursive>
 80020de:	89ab      	ldrh	r3, [r5, #12]
 80020e0:	071b      	lsls	r3, r3, #28
 80020e2:	d501      	bpl.n	80020e8 <_vfiprintf_r+0x34>
 80020e4:	692b      	ldr	r3, [r5, #16]
 80020e6:	b99b      	cbnz	r3, 8002110 <_vfiprintf_r+0x5c>
 80020e8:	4629      	mov	r1, r5
 80020ea:	4630      	mov	r0, r6
 80020ec:	f000 fb72 	bl	80027d4 <__swsetup_r>
 80020f0:	b170      	cbz	r0, 8002110 <_vfiprintf_r+0x5c>
 80020f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020f4:	07dc      	lsls	r4, r3, #31
 80020f6:	d504      	bpl.n	8002102 <_vfiprintf_r+0x4e>
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	b01d      	add	sp, #116	@ 0x74
 80020fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002102:	89ab      	ldrh	r3, [r5, #12]
 8002104:	0598      	lsls	r0, r3, #22
 8002106:	d4f7      	bmi.n	80020f8 <_vfiprintf_r+0x44>
 8002108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800210a:	f7ff feaf 	bl	8001e6c <__retarget_lock_release_recursive>
 800210e:	e7f3      	b.n	80020f8 <_vfiprintf_r+0x44>
 8002110:	2300      	movs	r3, #0
 8002112:	9309      	str	r3, [sp, #36]	@ 0x24
 8002114:	2320      	movs	r3, #32
 8002116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800211a:	f8cd 800c 	str.w	r8, [sp, #12]
 800211e:	2330      	movs	r3, #48	@ 0x30
 8002120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80022d0 <_vfiprintf_r+0x21c>
 8002124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002128:	f04f 0901 	mov.w	r9, #1
 800212c:	4623      	mov	r3, r4
 800212e:	469a      	mov	sl, r3
 8002130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002134:	b10a      	cbz	r2, 800213a <_vfiprintf_r+0x86>
 8002136:	2a25      	cmp	r2, #37	@ 0x25
 8002138:	d1f9      	bne.n	800212e <_vfiprintf_r+0x7a>
 800213a:	ebba 0b04 	subs.w	fp, sl, r4
 800213e:	d00b      	beq.n	8002158 <_vfiprintf_r+0xa4>
 8002140:	465b      	mov	r3, fp
 8002142:	4622      	mov	r2, r4
 8002144:	4629      	mov	r1, r5
 8002146:	4630      	mov	r0, r6
 8002148:	f7ff ffa1 	bl	800208e <__sfputs_r>
 800214c:	3001      	adds	r0, #1
 800214e:	f000 80a7 	beq.w	80022a0 <_vfiprintf_r+0x1ec>
 8002152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002154:	445a      	add	r2, fp
 8002156:	9209      	str	r2, [sp, #36]	@ 0x24
 8002158:	f89a 3000 	ldrb.w	r3, [sl]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 809f 	beq.w	80022a0 <_vfiprintf_r+0x1ec>
 8002162:	2300      	movs	r3, #0
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800216c:	f10a 0a01 	add.w	sl, sl, #1
 8002170:	9304      	str	r3, [sp, #16]
 8002172:	9307      	str	r3, [sp, #28]
 8002174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002178:	931a      	str	r3, [sp, #104]	@ 0x68
 800217a:	4654      	mov	r4, sl
 800217c:	2205      	movs	r2, #5
 800217e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002182:	4853      	ldr	r0, [pc, #332]	@ (80022d0 <_vfiprintf_r+0x21c>)
 8002184:	f7fe f844 	bl	8000210 <memchr>
 8002188:	9a04      	ldr	r2, [sp, #16]
 800218a:	b9d8      	cbnz	r0, 80021c4 <_vfiprintf_r+0x110>
 800218c:	06d1      	lsls	r1, r2, #27
 800218e:	bf44      	itt	mi
 8002190:	2320      	movmi	r3, #32
 8002192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002196:	0713      	lsls	r3, r2, #28
 8002198:	bf44      	itt	mi
 800219a:	232b      	movmi	r3, #43	@ 0x2b
 800219c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021a0:	f89a 3000 	ldrb.w	r3, [sl]
 80021a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80021a6:	d015      	beq.n	80021d4 <_vfiprintf_r+0x120>
 80021a8:	9a07      	ldr	r2, [sp, #28]
 80021aa:	4654      	mov	r4, sl
 80021ac:	2000      	movs	r0, #0
 80021ae:	f04f 0c0a 	mov.w	ip, #10
 80021b2:	4621      	mov	r1, r4
 80021b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021b8:	3b30      	subs	r3, #48	@ 0x30
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	d94b      	bls.n	8002256 <_vfiprintf_r+0x1a2>
 80021be:	b1b0      	cbz	r0, 80021ee <_vfiprintf_r+0x13a>
 80021c0:	9207      	str	r2, [sp, #28]
 80021c2:	e014      	b.n	80021ee <_vfiprintf_r+0x13a>
 80021c4:	eba0 0308 	sub.w	r3, r0, r8
 80021c8:	fa09 f303 	lsl.w	r3, r9, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	9304      	str	r3, [sp, #16]
 80021d0:	46a2      	mov	sl, r4
 80021d2:	e7d2      	b.n	800217a <_vfiprintf_r+0xc6>
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	1d19      	adds	r1, r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	9103      	str	r1, [sp, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bfbb      	ittet	lt
 80021e0:	425b      	neglt	r3, r3
 80021e2:	f042 0202 	orrlt.w	r2, r2, #2
 80021e6:	9307      	strge	r3, [sp, #28]
 80021e8:	9307      	strlt	r3, [sp, #28]
 80021ea:	bfb8      	it	lt
 80021ec:	9204      	strlt	r2, [sp, #16]
 80021ee:	7823      	ldrb	r3, [r4, #0]
 80021f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80021f2:	d10a      	bne.n	800220a <_vfiprintf_r+0x156>
 80021f4:	7863      	ldrb	r3, [r4, #1]
 80021f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80021f8:	d132      	bne.n	8002260 <_vfiprintf_r+0x1ac>
 80021fa:	9b03      	ldr	r3, [sp, #12]
 80021fc:	1d1a      	adds	r2, r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	9203      	str	r2, [sp, #12]
 8002202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002206:	3402      	adds	r4, #2
 8002208:	9305      	str	r3, [sp, #20]
 800220a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80022e0 <_vfiprintf_r+0x22c>
 800220e:	7821      	ldrb	r1, [r4, #0]
 8002210:	2203      	movs	r2, #3
 8002212:	4650      	mov	r0, sl
 8002214:	f7fd fffc 	bl	8000210 <memchr>
 8002218:	b138      	cbz	r0, 800222a <_vfiprintf_r+0x176>
 800221a:	9b04      	ldr	r3, [sp, #16]
 800221c:	eba0 000a 	sub.w	r0, r0, sl
 8002220:	2240      	movs	r2, #64	@ 0x40
 8002222:	4082      	lsls	r2, r0
 8002224:	4313      	orrs	r3, r2
 8002226:	3401      	adds	r4, #1
 8002228:	9304      	str	r3, [sp, #16]
 800222a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800222e:	4829      	ldr	r0, [pc, #164]	@ (80022d4 <_vfiprintf_r+0x220>)
 8002230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002234:	2206      	movs	r2, #6
 8002236:	f7fd ffeb 	bl	8000210 <memchr>
 800223a:	2800      	cmp	r0, #0
 800223c:	d03f      	beq.n	80022be <_vfiprintf_r+0x20a>
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <_vfiprintf_r+0x224>)
 8002240:	bb1b      	cbnz	r3, 800228a <_vfiprintf_r+0x1d6>
 8002242:	9b03      	ldr	r3, [sp, #12]
 8002244:	3307      	adds	r3, #7
 8002246:	f023 0307 	bic.w	r3, r3, #7
 800224a:	3308      	adds	r3, #8
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002250:	443b      	add	r3, r7
 8002252:	9309      	str	r3, [sp, #36]	@ 0x24
 8002254:	e76a      	b.n	800212c <_vfiprintf_r+0x78>
 8002256:	fb0c 3202 	mla	r2, ip, r2, r3
 800225a:	460c      	mov	r4, r1
 800225c:	2001      	movs	r0, #1
 800225e:	e7a8      	b.n	80021b2 <_vfiprintf_r+0xfe>
 8002260:	2300      	movs	r3, #0
 8002262:	3401      	adds	r4, #1
 8002264:	9305      	str	r3, [sp, #20]
 8002266:	4619      	mov	r1, r3
 8002268:	f04f 0c0a 	mov.w	ip, #10
 800226c:	4620      	mov	r0, r4
 800226e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002272:	3a30      	subs	r2, #48	@ 0x30
 8002274:	2a09      	cmp	r2, #9
 8002276:	d903      	bls.n	8002280 <_vfiprintf_r+0x1cc>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0c6      	beq.n	800220a <_vfiprintf_r+0x156>
 800227c:	9105      	str	r1, [sp, #20]
 800227e:	e7c4      	b.n	800220a <_vfiprintf_r+0x156>
 8002280:	fb0c 2101 	mla	r1, ip, r1, r2
 8002284:	4604      	mov	r4, r0
 8002286:	2301      	movs	r3, #1
 8002288:	e7f0      	b.n	800226c <_vfiprintf_r+0x1b8>
 800228a:	ab03      	add	r3, sp, #12
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	462a      	mov	r2, r5
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <_vfiprintf_r+0x228>)
 8002292:	a904      	add	r1, sp, #16
 8002294:	4630      	mov	r0, r6
 8002296:	f3af 8000 	nop.w
 800229a:	4607      	mov	r7, r0
 800229c:	1c78      	adds	r0, r7, #1
 800229e:	d1d6      	bne.n	800224e <_vfiprintf_r+0x19a>
 80022a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022a2:	07d9      	lsls	r1, r3, #31
 80022a4:	d405      	bmi.n	80022b2 <_vfiprintf_r+0x1fe>
 80022a6:	89ab      	ldrh	r3, [r5, #12]
 80022a8:	059a      	lsls	r2, r3, #22
 80022aa:	d402      	bmi.n	80022b2 <_vfiprintf_r+0x1fe>
 80022ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022ae:	f7ff fddd 	bl	8001e6c <__retarget_lock_release_recursive>
 80022b2:	89ab      	ldrh	r3, [r5, #12]
 80022b4:	065b      	lsls	r3, r3, #25
 80022b6:	f53f af1f 	bmi.w	80020f8 <_vfiprintf_r+0x44>
 80022ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022bc:	e71e      	b.n	80020fc <_vfiprintf_r+0x48>
 80022be:	ab03      	add	r3, sp, #12
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	462a      	mov	r2, r5
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <_vfiprintf_r+0x228>)
 80022c6:	a904      	add	r1, sp, #16
 80022c8:	4630      	mov	r0, r6
 80022ca:	f000 f879 	bl	80023c0 <_printf_i>
 80022ce:	e7e4      	b.n	800229a <_vfiprintf_r+0x1e6>
 80022d0:	080029f4 	.word	0x080029f4
 80022d4:	080029fe 	.word	0x080029fe
 80022d8:	00000000 	.word	0x00000000
 80022dc:	0800208f 	.word	0x0800208f
 80022e0:	080029fa 	.word	0x080029fa

080022e4 <_printf_common>:
 80022e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e8:	4616      	mov	r6, r2
 80022ea:	4698      	mov	r8, r3
 80022ec:	688a      	ldr	r2, [r1, #8]
 80022ee:	690b      	ldr	r3, [r1, #16]
 80022f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bfb8      	it	lt
 80022f8:	4613      	movlt	r3, r2
 80022fa:	6033      	str	r3, [r6, #0]
 80022fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002300:	4607      	mov	r7, r0
 8002302:	460c      	mov	r4, r1
 8002304:	b10a      	cbz	r2, 800230a <_printf_common+0x26>
 8002306:	3301      	adds	r3, #1
 8002308:	6033      	str	r3, [r6, #0]
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	0699      	lsls	r1, r3, #26
 800230e:	bf42      	ittt	mi
 8002310:	6833      	ldrmi	r3, [r6, #0]
 8002312:	3302      	addmi	r3, #2
 8002314:	6033      	strmi	r3, [r6, #0]
 8002316:	6825      	ldr	r5, [r4, #0]
 8002318:	f015 0506 	ands.w	r5, r5, #6
 800231c:	d106      	bne.n	800232c <_printf_common+0x48>
 800231e:	f104 0a19 	add.w	sl, r4, #25
 8002322:	68e3      	ldr	r3, [r4, #12]
 8002324:	6832      	ldr	r2, [r6, #0]
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	42ab      	cmp	r3, r5
 800232a:	dc26      	bgt.n	800237a <_printf_common+0x96>
 800232c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	3b00      	subs	r3, #0
 8002334:	bf18      	it	ne
 8002336:	2301      	movne	r3, #1
 8002338:	0692      	lsls	r2, r2, #26
 800233a:	d42b      	bmi.n	8002394 <_printf_common+0xb0>
 800233c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002340:	4641      	mov	r1, r8
 8002342:	4638      	mov	r0, r7
 8002344:	47c8      	blx	r9
 8002346:	3001      	adds	r0, #1
 8002348:	d01e      	beq.n	8002388 <_printf_common+0xa4>
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	6922      	ldr	r2, [r4, #16]
 800234e:	f003 0306 	and.w	r3, r3, #6
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf02      	ittt	eq
 8002356:	68e5      	ldreq	r5, [r4, #12]
 8002358:	6833      	ldreq	r3, [r6, #0]
 800235a:	1aed      	subeq	r5, r5, r3
 800235c:	68a3      	ldr	r3, [r4, #8]
 800235e:	bf0c      	ite	eq
 8002360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002364:	2500      	movne	r5, #0
 8002366:	4293      	cmp	r3, r2
 8002368:	bfc4      	itt	gt
 800236a:	1a9b      	subgt	r3, r3, r2
 800236c:	18ed      	addgt	r5, r5, r3
 800236e:	2600      	movs	r6, #0
 8002370:	341a      	adds	r4, #26
 8002372:	42b5      	cmp	r5, r6
 8002374:	d11a      	bne.n	80023ac <_printf_common+0xc8>
 8002376:	2000      	movs	r0, #0
 8002378:	e008      	b.n	800238c <_printf_common+0xa8>
 800237a:	2301      	movs	r3, #1
 800237c:	4652      	mov	r2, sl
 800237e:	4641      	mov	r1, r8
 8002380:	4638      	mov	r0, r7
 8002382:	47c8      	blx	r9
 8002384:	3001      	adds	r0, #1
 8002386:	d103      	bne.n	8002390 <_printf_common+0xac>
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002390:	3501      	adds	r5, #1
 8002392:	e7c6      	b.n	8002322 <_printf_common+0x3e>
 8002394:	18e1      	adds	r1, r4, r3
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	2030      	movs	r0, #48	@ 0x30
 800239a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800239e:	4422      	add	r2, r4
 80023a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023a8:	3302      	adds	r3, #2
 80023aa:	e7c7      	b.n	800233c <_printf_common+0x58>
 80023ac:	2301      	movs	r3, #1
 80023ae:	4622      	mov	r2, r4
 80023b0:	4641      	mov	r1, r8
 80023b2:	4638      	mov	r0, r7
 80023b4:	47c8      	blx	r9
 80023b6:	3001      	adds	r0, #1
 80023b8:	d0e6      	beq.n	8002388 <_printf_common+0xa4>
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7d9      	b.n	8002372 <_printf_common+0x8e>
	...

080023c0 <_printf_i>:
 80023c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023c4:	7e0f      	ldrb	r7, [r1, #24]
 80023c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023c8:	2f78      	cmp	r7, #120	@ 0x78
 80023ca:	4691      	mov	r9, r2
 80023cc:	4680      	mov	r8, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	469a      	mov	sl, r3
 80023d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023d6:	d807      	bhi.n	80023e8 <_printf_i+0x28>
 80023d8:	2f62      	cmp	r7, #98	@ 0x62
 80023da:	d80a      	bhi.n	80023f2 <_printf_i+0x32>
 80023dc:	2f00      	cmp	r7, #0
 80023de:	f000 80d2 	beq.w	8002586 <_printf_i+0x1c6>
 80023e2:	2f58      	cmp	r7, #88	@ 0x58
 80023e4:	f000 80b9 	beq.w	800255a <_printf_i+0x19a>
 80023e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023f0:	e03a      	b.n	8002468 <_printf_i+0xa8>
 80023f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80023f6:	2b15      	cmp	r3, #21
 80023f8:	d8f6      	bhi.n	80023e8 <_printf_i+0x28>
 80023fa:	a101      	add	r1, pc, #4	@ (adr r1, 8002400 <_printf_i+0x40>)
 80023fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002400:	08002459 	.word	0x08002459
 8002404:	0800246d 	.word	0x0800246d
 8002408:	080023e9 	.word	0x080023e9
 800240c:	080023e9 	.word	0x080023e9
 8002410:	080023e9 	.word	0x080023e9
 8002414:	080023e9 	.word	0x080023e9
 8002418:	0800246d 	.word	0x0800246d
 800241c:	080023e9 	.word	0x080023e9
 8002420:	080023e9 	.word	0x080023e9
 8002424:	080023e9 	.word	0x080023e9
 8002428:	080023e9 	.word	0x080023e9
 800242c:	0800256d 	.word	0x0800256d
 8002430:	08002497 	.word	0x08002497
 8002434:	08002527 	.word	0x08002527
 8002438:	080023e9 	.word	0x080023e9
 800243c:	080023e9 	.word	0x080023e9
 8002440:	0800258f 	.word	0x0800258f
 8002444:	080023e9 	.word	0x080023e9
 8002448:	08002497 	.word	0x08002497
 800244c:	080023e9 	.word	0x080023e9
 8002450:	080023e9 	.word	0x080023e9
 8002454:	0800252f 	.word	0x0800252f
 8002458:	6833      	ldr	r3, [r6, #0]
 800245a:	1d1a      	adds	r2, r3, #4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6032      	str	r2, [r6, #0]
 8002460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002464:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002468:	2301      	movs	r3, #1
 800246a:	e09d      	b.n	80025a8 <_printf_i+0x1e8>
 800246c:	6833      	ldr	r3, [r6, #0]
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	1d19      	adds	r1, r3, #4
 8002472:	6031      	str	r1, [r6, #0]
 8002474:	0606      	lsls	r6, r0, #24
 8002476:	d501      	bpl.n	800247c <_printf_i+0xbc>
 8002478:	681d      	ldr	r5, [r3, #0]
 800247a:	e003      	b.n	8002484 <_printf_i+0xc4>
 800247c:	0645      	lsls	r5, r0, #25
 800247e:	d5fb      	bpl.n	8002478 <_printf_i+0xb8>
 8002480:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002484:	2d00      	cmp	r5, #0
 8002486:	da03      	bge.n	8002490 <_printf_i+0xd0>
 8002488:	232d      	movs	r3, #45	@ 0x2d
 800248a:	426d      	negs	r5, r5
 800248c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002490:	4859      	ldr	r0, [pc, #356]	@ (80025f8 <_printf_i+0x238>)
 8002492:	230a      	movs	r3, #10
 8002494:	e011      	b.n	80024ba <_printf_i+0xfa>
 8002496:	6821      	ldr	r1, [r4, #0]
 8002498:	6833      	ldr	r3, [r6, #0]
 800249a:	0608      	lsls	r0, r1, #24
 800249c:	f853 5b04 	ldr.w	r5, [r3], #4
 80024a0:	d402      	bmi.n	80024a8 <_printf_i+0xe8>
 80024a2:	0649      	lsls	r1, r1, #25
 80024a4:	bf48      	it	mi
 80024a6:	b2ad      	uxthmi	r5, r5
 80024a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80024aa:	4853      	ldr	r0, [pc, #332]	@ (80025f8 <_printf_i+0x238>)
 80024ac:	6033      	str	r3, [r6, #0]
 80024ae:	bf14      	ite	ne
 80024b0:	230a      	movne	r3, #10
 80024b2:	2308      	moveq	r3, #8
 80024b4:	2100      	movs	r1, #0
 80024b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024ba:	6866      	ldr	r6, [r4, #4]
 80024bc:	60a6      	str	r6, [r4, #8]
 80024be:	2e00      	cmp	r6, #0
 80024c0:	bfa2      	ittt	ge
 80024c2:	6821      	ldrge	r1, [r4, #0]
 80024c4:	f021 0104 	bicge.w	r1, r1, #4
 80024c8:	6021      	strge	r1, [r4, #0]
 80024ca:	b90d      	cbnz	r5, 80024d0 <_printf_i+0x110>
 80024cc:	2e00      	cmp	r6, #0
 80024ce:	d04b      	beq.n	8002568 <_printf_i+0x1a8>
 80024d0:	4616      	mov	r6, r2
 80024d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80024d6:	fb03 5711 	mls	r7, r3, r1, r5
 80024da:	5dc7      	ldrb	r7, [r0, r7]
 80024dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024e0:	462f      	mov	r7, r5
 80024e2:	42bb      	cmp	r3, r7
 80024e4:	460d      	mov	r5, r1
 80024e6:	d9f4      	bls.n	80024d2 <_printf_i+0x112>
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d10b      	bne.n	8002504 <_printf_i+0x144>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	07df      	lsls	r7, r3, #31
 80024f0:	d508      	bpl.n	8002504 <_printf_i+0x144>
 80024f2:	6923      	ldr	r3, [r4, #16]
 80024f4:	6861      	ldr	r1, [r4, #4]
 80024f6:	4299      	cmp	r1, r3
 80024f8:	bfde      	ittt	le
 80024fa:	2330      	movle	r3, #48	@ 0x30
 80024fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002500:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002504:	1b92      	subs	r2, r2, r6
 8002506:	6122      	str	r2, [r4, #16]
 8002508:	f8cd a000 	str.w	sl, [sp]
 800250c:	464b      	mov	r3, r9
 800250e:	aa03      	add	r2, sp, #12
 8002510:	4621      	mov	r1, r4
 8002512:	4640      	mov	r0, r8
 8002514:	f7ff fee6 	bl	80022e4 <_printf_common>
 8002518:	3001      	adds	r0, #1
 800251a:	d14a      	bne.n	80025b2 <_printf_i+0x1f2>
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	b004      	add	sp, #16
 8002522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	6023      	str	r3, [r4, #0]
 800252e:	4833      	ldr	r0, [pc, #204]	@ (80025fc <_printf_i+0x23c>)
 8002530:	2778      	movs	r7, #120	@ 0x78
 8002532:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	6831      	ldr	r1, [r6, #0]
 800253a:	061f      	lsls	r7, r3, #24
 800253c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002540:	d402      	bmi.n	8002548 <_printf_i+0x188>
 8002542:	065f      	lsls	r7, r3, #25
 8002544:	bf48      	it	mi
 8002546:	b2ad      	uxthmi	r5, r5
 8002548:	6031      	str	r1, [r6, #0]
 800254a:	07d9      	lsls	r1, r3, #31
 800254c:	bf44      	itt	mi
 800254e:	f043 0320 	orrmi.w	r3, r3, #32
 8002552:	6023      	strmi	r3, [r4, #0]
 8002554:	b11d      	cbz	r5, 800255e <_printf_i+0x19e>
 8002556:	2310      	movs	r3, #16
 8002558:	e7ac      	b.n	80024b4 <_printf_i+0xf4>
 800255a:	4827      	ldr	r0, [pc, #156]	@ (80025f8 <_printf_i+0x238>)
 800255c:	e7e9      	b.n	8002532 <_printf_i+0x172>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f023 0320 	bic.w	r3, r3, #32
 8002564:	6023      	str	r3, [r4, #0]
 8002566:	e7f6      	b.n	8002556 <_printf_i+0x196>
 8002568:	4616      	mov	r6, r2
 800256a:	e7bd      	b.n	80024e8 <_printf_i+0x128>
 800256c:	6833      	ldr	r3, [r6, #0]
 800256e:	6825      	ldr	r5, [r4, #0]
 8002570:	6961      	ldr	r1, [r4, #20]
 8002572:	1d18      	adds	r0, r3, #4
 8002574:	6030      	str	r0, [r6, #0]
 8002576:	062e      	lsls	r6, r5, #24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	d501      	bpl.n	8002580 <_printf_i+0x1c0>
 800257c:	6019      	str	r1, [r3, #0]
 800257e:	e002      	b.n	8002586 <_printf_i+0x1c6>
 8002580:	0668      	lsls	r0, r5, #25
 8002582:	d5fb      	bpl.n	800257c <_printf_i+0x1bc>
 8002584:	8019      	strh	r1, [r3, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	6123      	str	r3, [r4, #16]
 800258a:	4616      	mov	r6, r2
 800258c:	e7bc      	b.n	8002508 <_printf_i+0x148>
 800258e:	6833      	ldr	r3, [r6, #0]
 8002590:	1d1a      	adds	r2, r3, #4
 8002592:	6032      	str	r2, [r6, #0]
 8002594:	681e      	ldr	r6, [r3, #0]
 8002596:	6862      	ldr	r2, [r4, #4]
 8002598:	2100      	movs	r1, #0
 800259a:	4630      	mov	r0, r6
 800259c:	f7fd fe38 	bl	8000210 <memchr>
 80025a0:	b108      	cbz	r0, 80025a6 <_printf_i+0x1e6>
 80025a2:	1b80      	subs	r0, r0, r6
 80025a4:	6060      	str	r0, [r4, #4]
 80025a6:	6863      	ldr	r3, [r4, #4]
 80025a8:	6123      	str	r3, [r4, #16]
 80025aa:	2300      	movs	r3, #0
 80025ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025b0:	e7aa      	b.n	8002508 <_printf_i+0x148>
 80025b2:	6923      	ldr	r3, [r4, #16]
 80025b4:	4632      	mov	r2, r6
 80025b6:	4649      	mov	r1, r9
 80025b8:	4640      	mov	r0, r8
 80025ba:	47d0      	blx	sl
 80025bc:	3001      	adds	r0, #1
 80025be:	d0ad      	beq.n	800251c <_printf_i+0x15c>
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	079b      	lsls	r3, r3, #30
 80025c4:	d413      	bmi.n	80025ee <_printf_i+0x22e>
 80025c6:	68e0      	ldr	r0, [r4, #12]
 80025c8:	9b03      	ldr	r3, [sp, #12]
 80025ca:	4298      	cmp	r0, r3
 80025cc:	bfb8      	it	lt
 80025ce:	4618      	movlt	r0, r3
 80025d0:	e7a6      	b.n	8002520 <_printf_i+0x160>
 80025d2:	2301      	movs	r3, #1
 80025d4:	4632      	mov	r2, r6
 80025d6:	4649      	mov	r1, r9
 80025d8:	4640      	mov	r0, r8
 80025da:	47d0      	blx	sl
 80025dc:	3001      	adds	r0, #1
 80025de:	d09d      	beq.n	800251c <_printf_i+0x15c>
 80025e0:	3501      	adds	r5, #1
 80025e2:	68e3      	ldr	r3, [r4, #12]
 80025e4:	9903      	ldr	r1, [sp, #12]
 80025e6:	1a5b      	subs	r3, r3, r1
 80025e8:	42ab      	cmp	r3, r5
 80025ea:	dcf2      	bgt.n	80025d2 <_printf_i+0x212>
 80025ec:	e7eb      	b.n	80025c6 <_printf_i+0x206>
 80025ee:	2500      	movs	r5, #0
 80025f0:	f104 0619 	add.w	r6, r4, #25
 80025f4:	e7f5      	b.n	80025e2 <_printf_i+0x222>
 80025f6:	bf00      	nop
 80025f8:	08002a05 	.word	0x08002a05
 80025fc:	08002a16 	.word	0x08002a16

08002600 <__sflush_r>:
 8002600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002608:	0716      	lsls	r6, r2, #28
 800260a:	4605      	mov	r5, r0
 800260c:	460c      	mov	r4, r1
 800260e:	d454      	bmi.n	80026ba <__sflush_r+0xba>
 8002610:	684b      	ldr	r3, [r1, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dc02      	bgt.n	800261c <__sflush_r+0x1c>
 8002616:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd48      	ble.n	80026ae <__sflush_r+0xae>
 800261c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800261e:	2e00      	cmp	r6, #0
 8002620:	d045      	beq.n	80026ae <__sflush_r+0xae>
 8002622:	2300      	movs	r3, #0
 8002624:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002628:	682f      	ldr	r7, [r5, #0]
 800262a:	6a21      	ldr	r1, [r4, #32]
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	d030      	beq.n	8002692 <__sflush_r+0x92>
 8002630:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002632:	89a3      	ldrh	r3, [r4, #12]
 8002634:	0759      	lsls	r1, r3, #29
 8002636:	d505      	bpl.n	8002644 <__sflush_r+0x44>
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	1ad2      	subs	r2, r2, r3
 800263c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800263e:	b10b      	cbz	r3, 8002644 <__sflush_r+0x44>
 8002640:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	2300      	movs	r3, #0
 8002646:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002648:	6a21      	ldr	r1, [r4, #32]
 800264a:	4628      	mov	r0, r5
 800264c:	47b0      	blx	r6
 800264e:	1c43      	adds	r3, r0, #1
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	d106      	bne.n	8002662 <__sflush_r+0x62>
 8002654:	6829      	ldr	r1, [r5, #0]
 8002656:	291d      	cmp	r1, #29
 8002658:	d82b      	bhi.n	80026b2 <__sflush_r+0xb2>
 800265a:	4a2a      	ldr	r2, [pc, #168]	@ (8002704 <__sflush_r+0x104>)
 800265c:	410a      	asrs	r2, r1
 800265e:	07d6      	lsls	r6, r2, #31
 8002660:	d427      	bmi.n	80026b2 <__sflush_r+0xb2>
 8002662:	2200      	movs	r2, #0
 8002664:	6062      	str	r2, [r4, #4]
 8002666:	04d9      	lsls	r1, r3, #19
 8002668:	6922      	ldr	r2, [r4, #16]
 800266a:	6022      	str	r2, [r4, #0]
 800266c:	d504      	bpl.n	8002678 <__sflush_r+0x78>
 800266e:	1c42      	adds	r2, r0, #1
 8002670:	d101      	bne.n	8002676 <__sflush_r+0x76>
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	b903      	cbnz	r3, 8002678 <__sflush_r+0x78>
 8002676:	6560      	str	r0, [r4, #84]	@ 0x54
 8002678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800267a:	602f      	str	r7, [r5, #0]
 800267c:	b1b9      	cbz	r1, 80026ae <__sflush_r+0xae>
 800267e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002682:	4299      	cmp	r1, r3
 8002684:	d002      	beq.n	800268c <__sflush_r+0x8c>
 8002686:	4628      	mov	r0, r5
 8002688:	f7ff fbf2 	bl	8001e70 <_free_r>
 800268c:	2300      	movs	r3, #0
 800268e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002690:	e00d      	b.n	80026ae <__sflush_r+0xae>
 8002692:	2301      	movs	r3, #1
 8002694:	4628      	mov	r0, r5
 8002696:	47b0      	blx	r6
 8002698:	4602      	mov	r2, r0
 800269a:	1c50      	adds	r0, r2, #1
 800269c:	d1c9      	bne.n	8002632 <__sflush_r+0x32>
 800269e:	682b      	ldr	r3, [r5, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0c6      	beq.n	8002632 <__sflush_r+0x32>
 80026a4:	2b1d      	cmp	r3, #29
 80026a6:	d001      	beq.n	80026ac <__sflush_r+0xac>
 80026a8:	2b16      	cmp	r3, #22
 80026aa:	d11e      	bne.n	80026ea <__sflush_r+0xea>
 80026ac:	602f      	str	r7, [r5, #0]
 80026ae:	2000      	movs	r0, #0
 80026b0:	e022      	b.n	80026f8 <__sflush_r+0xf8>
 80026b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	e01b      	b.n	80026f2 <__sflush_r+0xf2>
 80026ba:	690f      	ldr	r7, [r1, #16]
 80026bc:	2f00      	cmp	r7, #0
 80026be:	d0f6      	beq.n	80026ae <__sflush_r+0xae>
 80026c0:	0793      	lsls	r3, r2, #30
 80026c2:	680e      	ldr	r6, [r1, #0]
 80026c4:	bf08      	it	eq
 80026c6:	694b      	ldreq	r3, [r1, #20]
 80026c8:	600f      	str	r7, [r1, #0]
 80026ca:	bf18      	it	ne
 80026cc:	2300      	movne	r3, #0
 80026ce:	eba6 0807 	sub.w	r8, r6, r7
 80026d2:	608b      	str	r3, [r1, #8]
 80026d4:	f1b8 0f00 	cmp.w	r8, #0
 80026d8:	dde9      	ble.n	80026ae <__sflush_r+0xae>
 80026da:	6a21      	ldr	r1, [r4, #32]
 80026dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80026de:	4643      	mov	r3, r8
 80026e0:	463a      	mov	r2, r7
 80026e2:	4628      	mov	r0, r5
 80026e4:	47b0      	blx	r6
 80026e6:	2800      	cmp	r0, #0
 80026e8:	dc08      	bgt.n	80026fc <__sflush_r+0xfc>
 80026ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fc:	4407      	add	r7, r0
 80026fe:	eba8 0800 	sub.w	r8, r8, r0
 8002702:	e7e7      	b.n	80026d4 <__sflush_r+0xd4>
 8002704:	dfbffffe 	.word	0xdfbffffe

08002708 <_fflush_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	690b      	ldr	r3, [r1, #16]
 800270c:	4605      	mov	r5, r0
 800270e:	460c      	mov	r4, r1
 8002710:	b913      	cbnz	r3, 8002718 <_fflush_r+0x10>
 8002712:	2500      	movs	r5, #0
 8002714:	4628      	mov	r0, r5
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	b118      	cbz	r0, 8002722 <_fflush_r+0x1a>
 800271a:	6a03      	ldr	r3, [r0, #32]
 800271c:	b90b      	cbnz	r3, 8002722 <_fflush_r+0x1a>
 800271e:	f7ff fa9f 	bl	8001c60 <__sinit>
 8002722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f3      	beq.n	8002712 <_fflush_r+0xa>
 800272a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800272c:	07d0      	lsls	r0, r2, #31
 800272e:	d404      	bmi.n	800273a <_fflush_r+0x32>
 8002730:	0599      	lsls	r1, r3, #22
 8002732:	d402      	bmi.n	800273a <_fflush_r+0x32>
 8002734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002736:	f7ff fb98 	bl	8001e6a <__retarget_lock_acquire_recursive>
 800273a:	4628      	mov	r0, r5
 800273c:	4621      	mov	r1, r4
 800273e:	f7ff ff5f 	bl	8002600 <__sflush_r>
 8002742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002744:	07da      	lsls	r2, r3, #31
 8002746:	4605      	mov	r5, r0
 8002748:	d4e4      	bmi.n	8002714 <_fflush_r+0xc>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	059b      	lsls	r3, r3, #22
 800274e:	d4e1      	bmi.n	8002714 <_fflush_r+0xc>
 8002750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002752:	f7ff fb8b 	bl	8001e6c <__retarget_lock_release_recursive>
 8002756:	e7dd      	b.n	8002714 <_fflush_r+0xc>

08002758 <__swbuf_r>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	460e      	mov	r6, r1
 800275c:	4614      	mov	r4, r2
 800275e:	4605      	mov	r5, r0
 8002760:	b118      	cbz	r0, 800276a <__swbuf_r+0x12>
 8002762:	6a03      	ldr	r3, [r0, #32]
 8002764:	b90b      	cbnz	r3, 800276a <__swbuf_r+0x12>
 8002766:	f7ff fa7b 	bl	8001c60 <__sinit>
 800276a:	69a3      	ldr	r3, [r4, #24]
 800276c:	60a3      	str	r3, [r4, #8]
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	071a      	lsls	r2, r3, #28
 8002772:	d501      	bpl.n	8002778 <__swbuf_r+0x20>
 8002774:	6923      	ldr	r3, [r4, #16]
 8002776:	b943      	cbnz	r3, 800278a <__swbuf_r+0x32>
 8002778:	4621      	mov	r1, r4
 800277a:	4628      	mov	r0, r5
 800277c:	f000 f82a 	bl	80027d4 <__swsetup_r>
 8002780:	b118      	cbz	r0, 800278a <__swbuf_r+0x32>
 8002782:	f04f 37ff 	mov.w	r7, #4294967295
 8002786:	4638      	mov	r0, r7
 8002788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	6922      	ldr	r2, [r4, #16]
 800278e:	1a98      	subs	r0, r3, r2
 8002790:	6963      	ldr	r3, [r4, #20]
 8002792:	b2f6      	uxtb	r6, r6
 8002794:	4283      	cmp	r3, r0
 8002796:	4637      	mov	r7, r6
 8002798:	dc05      	bgt.n	80027a6 <__swbuf_r+0x4e>
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f7ff ffb3 	bl	8002708 <_fflush_r>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d1ed      	bne.n	8002782 <__swbuf_r+0x2a>
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	6022      	str	r2, [r4, #0]
 80027b2:	701e      	strb	r6, [r3, #0]
 80027b4:	6962      	ldr	r2, [r4, #20]
 80027b6:	1c43      	adds	r3, r0, #1
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d004      	beq.n	80027c6 <__swbuf_r+0x6e>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	07db      	lsls	r3, r3, #31
 80027c0:	d5e1      	bpl.n	8002786 <__swbuf_r+0x2e>
 80027c2:	2e0a      	cmp	r6, #10
 80027c4:	d1df      	bne.n	8002786 <__swbuf_r+0x2e>
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f7ff ff9d 	bl	8002708 <_fflush_r>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d0d9      	beq.n	8002786 <__swbuf_r+0x2e>
 80027d2:	e7d6      	b.n	8002782 <__swbuf_r+0x2a>

080027d4 <__swsetup_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4b29      	ldr	r3, [pc, #164]	@ (800287c <__swsetup_r+0xa8>)
 80027d8:	4605      	mov	r5, r0
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	460c      	mov	r4, r1
 80027de:	b118      	cbz	r0, 80027e8 <__swsetup_r+0x14>
 80027e0:	6a03      	ldr	r3, [r0, #32]
 80027e2:	b90b      	cbnz	r3, 80027e8 <__swsetup_r+0x14>
 80027e4:	f7ff fa3c 	bl	8001c60 <__sinit>
 80027e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ec:	0719      	lsls	r1, r3, #28
 80027ee:	d422      	bmi.n	8002836 <__swsetup_r+0x62>
 80027f0:	06da      	lsls	r2, r3, #27
 80027f2:	d407      	bmi.n	8002804 <__swsetup_r+0x30>
 80027f4:	2209      	movs	r2, #9
 80027f6:	602a      	str	r2, [r5, #0]
 80027f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fc:	81a3      	strh	r3, [r4, #12]
 80027fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002802:	e033      	b.n	800286c <__swsetup_r+0x98>
 8002804:	0758      	lsls	r0, r3, #29
 8002806:	d512      	bpl.n	800282e <__swsetup_r+0x5a>
 8002808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800280a:	b141      	cbz	r1, 800281e <__swsetup_r+0x4a>
 800280c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002810:	4299      	cmp	r1, r3
 8002812:	d002      	beq.n	800281a <__swsetup_r+0x46>
 8002814:	4628      	mov	r0, r5
 8002816:	f7ff fb2b 	bl	8001e70 <_free_r>
 800281a:	2300      	movs	r3, #0
 800281c:	6363      	str	r3, [r4, #52]	@ 0x34
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002824:	81a3      	strh	r3, [r4, #12]
 8002826:	2300      	movs	r3, #0
 8002828:	6063      	str	r3, [r4, #4]
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	6023      	str	r3, [r4, #0]
 800282e:	89a3      	ldrh	r3, [r4, #12]
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	81a3      	strh	r3, [r4, #12]
 8002836:	6923      	ldr	r3, [r4, #16]
 8002838:	b94b      	cbnz	r3, 800284e <__swsetup_r+0x7a>
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002844:	d003      	beq.n	800284e <__swsetup_r+0x7a>
 8002846:	4621      	mov	r1, r4
 8002848:	4628      	mov	r0, r5
 800284a:	f000 f84f 	bl	80028ec <__smakebuf_r>
 800284e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002852:	f013 0201 	ands.w	r2, r3, #1
 8002856:	d00a      	beq.n	800286e <__swsetup_r+0x9a>
 8002858:	2200      	movs	r2, #0
 800285a:	60a2      	str	r2, [r4, #8]
 800285c:	6962      	ldr	r2, [r4, #20]
 800285e:	4252      	negs	r2, r2
 8002860:	61a2      	str	r2, [r4, #24]
 8002862:	6922      	ldr	r2, [r4, #16]
 8002864:	b942      	cbnz	r2, 8002878 <__swsetup_r+0xa4>
 8002866:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800286a:	d1c5      	bne.n	80027f8 <__swsetup_r+0x24>
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	0799      	lsls	r1, r3, #30
 8002870:	bf58      	it	pl
 8002872:	6962      	ldrpl	r2, [r4, #20]
 8002874:	60a2      	str	r2, [r4, #8]
 8002876:	e7f4      	b.n	8002862 <__swsetup_r+0x8e>
 8002878:	2000      	movs	r0, #0
 800287a:	e7f7      	b.n	800286c <__swsetup_r+0x98>
 800287c:	20000018 	.word	0x20000018

08002880 <_sbrk_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4d06      	ldr	r5, [pc, #24]	@ (800289c <_sbrk_r+0x1c>)
 8002884:	2300      	movs	r3, #0
 8002886:	4604      	mov	r4, r0
 8002888:	4608      	mov	r0, r1
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	f7fe f87a 	bl	8000984 <_sbrk>
 8002890:	1c43      	adds	r3, r0, #1
 8002892:	d102      	bne.n	800289a <_sbrk_r+0x1a>
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	b103      	cbz	r3, 800289a <_sbrk_r+0x1a>
 8002898:	6023      	str	r3, [r4, #0]
 800289a:	bd38      	pop	{r3, r4, r5, pc}
 800289c:	200001cc 	.word	0x200001cc

080028a0 <__swhatbuf_r>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	460c      	mov	r4, r1
 80028a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a8:	2900      	cmp	r1, #0
 80028aa:	b096      	sub	sp, #88	@ 0x58
 80028ac:	4615      	mov	r5, r2
 80028ae:	461e      	mov	r6, r3
 80028b0:	da0d      	bge.n	80028ce <__swhatbuf_r+0x2e>
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	bf14      	ite	ne
 80028be:	2340      	movne	r3, #64	@ 0x40
 80028c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80028c4:	2000      	movs	r0, #0
 80028c6:	6031      	str	r1, [r6, #0]
 80028c8:	602b      	str	r3, [r5, #0]
 80028ca:	b016      	add	sp, #88	@ 0x58
 80028cc:	bd70      	pop	{r4, r5, r6, pc}
 80028ce:	466a      	mov	r2, sp
 80028d0:	f000 f848 	bl	8002964 <_fstat_r>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	dbec      	blt.n	80028b2 <__swhatbuf_r+0x12>
 80028d8:	9901      	ldr	r1, [sp, #4]
 80028da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80028de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80028e2:	4259      	negs	r1, r3
 80028e4:	4159      	adcs	r1, r3
 80028e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ea:	e7eb      	b.n	80028c4 <__swhatbuf_r+0x24>

080028ec <__smakebuf_r>:
 80028ec:	898b      	ldrh	r3, [r1, #12]
 80028ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028f0:	079d      	lsls	r5, r3, #30
 80028f2:	4606      	mov	r6, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	d507      	bpl.n	8002908 <__smakebuf_r+0x1c>
 80028f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80028fc:	6023      	str	r3, [r4, #0]
 80028fe:	6123      	str	r3, [r4, #16]
 8002900:	2301      	movs	r3, #1
 8002902:	6163      	str	r3, [r4, #20]
 8002904:	b003      	add	sp, #12
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	ab01      	add	r3, sp, #4
 800290a:	466a      	mov	r2, sp
 800290c:	f7ff ffc8 	bl	80028a0 <__swhatbuf_r>
 8002910:	9f00      	ldr	r7, [sp, #0]
 8002912:	4605      	mov	r5, r0
 8002914:	4639      	mov	r1, r7
 8002916:	4630      	mov	r0, r6
 8002918:	f7ff fb16 	bl	8001f48 <_malloc_r>
 800291c:	b948      	cbnz	r0, 8002932 <__smakebuf_r+0x46>
 800291e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002922:	059a      	lsls	r2, r3, #22
 8002924:	d4ee      	bmi.n	8002904 <__smakebuf_r+0x18>
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	81a3      	strh	r3, [r4, #12]
 8002930:	e7e2      	b.n	80028f8 <__smakebuf_r+0xc>
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	6020      	str	r0, [r4, #0]
 8002936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800293a:	81a3      	strh	r3, [r4, #12]
 800293c:	9b01      	ldr	r3, [sp, #4]
 800293e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002942:	b15b      	cbz	r3, 800295c <__smakebuf_r+0x70>
 8002944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002948:	4630      	mov	r0, r6
 800294a:	f000 f81d 	bl	8002988 <_isatty_r>
 800294e:	b128      	cbz	r0, 800295c <__smakebuf_r+0x70>
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	89a3      	ldrh	r3, [r4, #12]
 800295e:	431d      	orrs	r5, r3
 8002960:	81a5      	strh	r5, [r4, #12]
 8002962:	e7cf      	b.n	8002904 <__smakebuf_r+0x18>

08002964 <_fstat_r>:
 8002964:	b538      	push	{r3, r4, r5, lr}
 8002966:	4d07      	ldr	r5, [pc, #28]	@ (8002984 <_fstat_r+0x20>)
 8002968:	2300      	movs	r3, #0
 800296a:	4604      	mov	r4, r0
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	f7fd ffdf 	bl	8000934 <_fstat>
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	d102      	bne.n	8002980 <_fstat_r+0x1c>
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	b103      	cbz	r3, 8002980 <_fstat_r+0x1c>
 800297e:	6023      	str	r3, [r4, #0]
 8002980:	bd38      	pop	{r3, r4, r5, pc}
 8002982:	bf00      	nop
 8002984:	200001cc 	.word	0x200001cc

08002988 <_isatty_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4d06      	ldr	r5, [pc, #24]	@ (80029a4 <_isatty_r+0x1c>)
 800298c:	2300      	movs	r3, #0
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fd ffde 	bl	8000954 <_isatty>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_isatty_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_isatty_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	200001cc 	.word	0x200001cc

080029a8 <_init>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr

080029b4 <_fini>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	bf00      	nop
 80029b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ba:	bc08      	pop	{r3}
 80029bc:	469e      	mov	lr, r3
 80029be:	4770      	bx	lr
