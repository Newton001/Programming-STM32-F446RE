
DAC_DMA_SineWave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004480  08004480  00005480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004678  08004678  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800467c  0800467c  0000567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004680  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  2000000c  0800468c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800468c  00006408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b839  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002051  00000000  00000000  00011875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000138c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095b  00000000  00000000  000144f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e22  00000000  00000000  00014e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e998  00000000  00000000  00036c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfee3  00000000  00000000  0004560d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001154f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  00115534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00118b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004468 	.word	0x08004468

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004468 	.word	0x08004468

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96a 	b.w	8000e30 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14e      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b80:	4694      	mov	ip, r2
 8000b82:	458c      	cmp	ip, r1
 8000b84:	4686      	mov	lr, r0
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	d962      	bls.n	8000c52 <__udivmoddi4+0xde>
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	4091      	lsls	r1, r2
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fa1f f68c 	uxth.w	r6, ip
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb04 f106 	mul.w	r1, r4, r6
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bca:	f080 8112 	bcs.w	8000df2 <__udivmoddi4+0x27e>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 810f 	bls.w	8000df2 <__udivmoddi4+0x27e>
 8000bd4:	3c02      	subs	r4, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be2:	fb07 1110 	mls	r1, r7, r0, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb00 f606 	mul.w	r6, r0, r6
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x94>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bfa:	f080 80fc 	bcs.w	8000df6 <__udivmoddi4+0x282>
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f240 80f9 	bls.w	8000df6 <__udivmoddi4+0x282>
 8000c04:	4463      	add	r3, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	1b9b      	subs	r3, r3, r6
 8000c0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11d      	cbz	r5, 8000c1a <__udivmoddi4+0xa6>
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d905      	bls.n	8000c2e <__udivmoddi4+0xba>
 8000c22:	b10d      	cbz	r5, 8000c28 <__udivmoddi4+0xb4>
 8000c24:	e9c5 0100 	strd	r0, r1, [r5]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e7f5      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c2e:	fab3 f183 	clz	r1, r3
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d146      	bne.n	8000cc4 <__udivmoddi4+0x150>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xcc>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f0c0 80f0 	bcc.w	8000e20 <__udivmoddi4+0x2ac>
 8000c40:	1a86      	subs	r6, r0, r2
 8000c42:	eb64 0303 	sbc.w	r3, r4, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d0e6      	beq.n	8000c1a <__udivmoddi4+0xa6>
 8000c4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c50:	e7e3      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	f040 8090 	bne.w	8000d78 <__udivmoddi4+0x204>
 8000c58:	eba1 040c 	sub.w	r4, r1, ip
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb07 f006 	mul.w	r0, r7, r6
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x11c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x11a>
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c8e:	4626      	mov	r6, r4
 8000c90:	1a1c      	subs	r4, r3, r0
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb00 f707 	mul.w	r7, r0, r7
 8000ca6:	429f      	cmp	r7, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x148>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x146>
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	f200 80b0 	bhi.w	8000e1a <__udivmoddi4+0x2a6>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	1bdb      	subs	r3, r3, r7
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0x9c>
 8000cc4:	f1c1 0620 	rsb	r6, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd8:	ea43 030c 	orr.w	r3, r3, ip
 8000cdc:	40f4      	lsrs	r4, r6
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	0c38      	lsrs	r0, r7, #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x1a6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d0a:	f080 8084 	bcs.w	8000e16 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8081 	bls.w	8000e16 <__udivmoddi4+0x2a2>
 8000d14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	eba4 0409 	sub.w	r4, r4, r9
 8000d1e:	fa1f f983 	uxth.w	r9, r3
 8000d22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d26:	fb00 4413 	mls	r4, r0, r3, r4
 8000d2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1d2>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d3c:	d267      	bcs.n	8000e0e <__udivmoddi4+0x29a>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d965      	bls.n	8000e0e <__udivmoddi4+0x29a>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	429c      	cmp	r4, r3
 8000d54:	46ce      	mov	lr, r9
 8000d56:	469c      	mov	ip, r3
 8000d58:	d351      	bcc.n	8000dfe <__udivmoddi4+0x28a>
 8000d5a:	d04e      	beq.n	8000dfa <__udivmoddi4+0x286>
 8000d5c:	b155      	cbz	r5, 8000d74 <__udivmoddi4+0x200>
 8000d5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d62:	eb64 040c 	sbc.w	r4, r4, ip
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	e9c5 6400 	strd	r6, r4, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e750      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000d78:	f1c2 0320 	rsb	r3, r2, #32
 8000d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa24 f303 	lsr.w	r3, r4, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f107 	mul.w	r1, r0, r7
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x24c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db6:	d22c      	bcs.n	8000e12 <__udivmoddi4+0x29e>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d92a      	bls.n	8000e12 <__udivmoddi4+0x29e>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd0:	fb01 f307 	mul.w	r3, r1, r7
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x276>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de0:	d213      	bcs.n	8000e0a <__udivmoddi4+0x296>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d911      	bls.n	8000e0a <__udivmoddi4+0x296>
 8000de6:	3902      	subs	r1, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1ae4      	subs	r4, r4, r3
 8000dec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df0:	e739      	b.n	8000c66 <__udivmoddi4+0xf2>
 8000df2:	4604      	mov	r4, r0
 8000df4:	e6f0      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000df6:	4608      	mov	r0, r1
 8000df8:	e706      	b.n	8000c08 <__udivmoddi4+0x94>
 8000dfa:	45c8      	cmp	r8, r9
 8000dfc:	d2ae      	bcs.n	8000d5c <__udivmoddi4+0x1e8>
 8000dfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7a8      	b.n	8000d5c <__udivmoddi4+0x1e8>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	e7ed      	b.n	8000dea <__udivmoddi4+0x276>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e799      	b.n	8000d46 <__udivmoddi4+0x1d2>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e7d4      	b.n	8000dc0 <__udivmoddi4+0x24c>
 8000e16:	46d6      	mov	lr, sl
 8000e18:	e77f      	b.n	8000d1a <__udivmoddi4+0x1a6>
 8000e1a:	4463      	add	r3, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e74d      	b.n	8000cbc <__udivmoddi4+0x148>
 8000e20:	4606      	mov	r6, r0
 8000e22:	4623      	mov	r3, r4
 8000e24:	4608      	mov	r0, r1
 8000e26:	e70f      	b.n	8000c48 <__udivmoddi4+0xd4>
 8000e28:	3e02      	subs	r6, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	e730      	b.n	8000c90 <__udivmoddi4+0x11c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0000      	movs	r0, r0
	...

08000e38 <generate_sine_wave>:
static void MX_DMA_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void generate_sine_wave(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	e044      	b.n	8000ece <generate_sine_wave+0x96>
		sine_wave[i] = ((sin(i *2 * PI/SAMPLES) + 1)) * res_12b/2;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb2f 	bl	80004ac <__aeabi_i2d>
 8000e4e:	a328      	add	r3, pc, #160	@ (adr r3, 8000ef0 <generate_sine_wave+0xb8>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fb94 	bl	8000580 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <generate_sine_wave+0xa8>)
 8000e66:	f7ff fcb5 	bl	80007d4 <__aeabi_ddiv>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	ec43 2b17 	vmov	d7, r2, r3
 8000e72:	eeb0 0a47 	vmov.f32	s0, s14
 8000e76:	eef0 0a67 	vmov.f32	s1, s15
 8000e7a:	f002 fac5 	bl	8003408 <sin>
 8000e7e:	ec51 0b10 	vmov	r0, r1, d0
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <generate_sine_wave+0xac>)
 8000e88:	f7ff f9c4 	bl	8000214 <__adddf3>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <generate_sine_wave+0xb0>)
 8000e9a:	f7ff fb71 	bl	8000580 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eae:	f7ff fc91 	bl	80007d4 <__aeabi_ddiv>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fe23 	bl	8000b04 <__aeabi_d2uiz>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	490a      	ldr	r1, [pc, #40]	@ (8000eec <generate_sine_wave+0xb4>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000ed2:	ddb7      	ble.n	8000e44 <generate_sine_wave+0xc>
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40690000 	.word	0x40690000
 8000ee4:	3ff00000 	.word	0x3ff00000
 8000ee8:	40b00000 	.word	0x40b00000
 8000eec:	200000e4 	.word	0x200000e4
 8000ef0:	d2412aee 	.word	0xd2412aee
 8000ef4:	400921e9 	.word	0x400921e9

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 fa89 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f81d 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f90b 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f000 f8e9 	bl	80010e0 <MX_DMA_Init>
  MX_DAC_Init();
 8000f0e:	f000 f889 	bl	8001024 <MX_DAC_Init>
  MX_TIM7_Init();
 8000f12:	f000 f8b1 	bl	8001078 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  generate_sine_wave();
 8000f16:	f7ff ff8f 	bl	8000e38 <generate_sine_wave>

  HAL_TIM_Base_Start(&htim7);
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <main+0x3c>)
 8000f1c:	f002 f8b6 	bl	800308c <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, sine_wave, SAMPLES, DAC_ALIGN_12B_R);
 8000f20:	2300      	movs	r3, #0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	23c8      	movs	r3, #200	@ 0xc8
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <main+0x40>)
 8000f28:	2110      	movs	r1, #16
 8000f2a:	4804      	ldr	r0, [pc, #16]	@ (8000f3c <main+0x44>)
 8000f2c:	f000 fc18 	bl	8001760 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <main+0x38>
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	200000e4 	.word	0x200000e4
 8000f3c:	20000028 	.word	0x20000028

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	@ 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2234      	movs	r2, #52	@ 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fa2c 	bl	80033ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <SystemClock_Config+0xdc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800101c <SystemClock_Config+0xdc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f74:	4b29      	ldr	r3, [pc, #164]	@ (800101c <SystemClock_Config+0xdc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f80:	2300      	movs	r3, #0
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <SystemClock_Config+0xe0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa4:	2310      	movs	r3, #16
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fb4:	23b4      	movs	r3, #180	@ 0xb4
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fd71 	bl	8002ab0 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd4:	f000 f8e0 	bl	8001198 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fd8:	f001 fa8a 	bl	80024f0 <HAL_PWREx_EnableOverDrive>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fe2:	f000 f8d9 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2105      	movs	r1, #5
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fac3 	bl	8002590 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001010:	f000 f8c2 	bl	8001198 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3750      	adds	r7, #80	@ 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <MX_DAC_Init+0x4c>)
 8001034:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <MX_DAC_Init+0x50>)
 8001036:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <MX_DAC_Init+0x4c>)
 800103a:	f000 fb6e 	bl	800171a <HAL_DAC_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001044:	f000 f8a8 	bl	8001198 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8001048:	2314      	movs	r3, #20
 800104a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	2210      	movs	r2, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <MX_DAC_Init+0x4c>)
 8001058:	f000 fc62 	bl	8001920 <HAL_DAC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001062:	f000 f899 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000028 	.word	0x20000028
 8001074:	40007400 	.word	0x40007400

08001078 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_TIM7_Init+0x60>)
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <MX_TIM7_Init+0x64>)
 800108a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180-1;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_TIM7_Init+0x60>)
 800108e:	22b3      	movs	r2, #179	@ 0xb3
 8001090:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_TIM7_Init+0x60>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_TIM7_Init+0x60>)
 800109a:	2209      	movs	r2, #9
 800109c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_TIM7_Init+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <MX_TIM7_Init+0x60>)
 80010a6:	f001 ffa1 	bl	8002fec <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80010b0:	f000 f872 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010b4:	2320      	movs	r3, #32
 80010b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_TIM7_Init+0x60>)
 80010c2:	f002 f8f7 	bl	80032b4 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80010cc:	f000 f864 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000009c 	.word	0x2000009c
 80010dc:	40001400 	.word	0x40001400

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2011      	movs	r0, #17
 8001108:	f000 fad1 	bl	80016ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800110c:	2011      	movs	r0, #17
 800110e:	f000 faea 	bl	80016e6 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_GPIO_Init+0x70>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <MX_GPIO_Init+0x70>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_GPIO_Init+0x70>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]

	/* Configure GPIO pin: PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001152:	2320      	movs	r3, #32
 8001154:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; // Set to Analog mode
 8001156:	2303      	movs	r3, #3
 8001158:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	@ (8001194 <MX_GPIO_Init+0x74>)
 8001166:	f001 f82f 	bl	80021c8 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <MX_GPIO_Init+0x70>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <MX_GPIO_Init+0x70>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <MX_GPIO_Init+0x70>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2f      	ldr	r2, [pc, #188]	@ (80012d0 <HAL_DAC_MspInit+0xdc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d158      	bne.n	80012c8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	4a2d      	ldr	r2, [pc, #180]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 8001220:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001224:	6413      	str	r3, [r2, #64]	@ 0x40
 8001226:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <HAL_DAC_MspInit+0xe0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800124e:	2320      	movs	r3, #32
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	481d      	ldr	r0, [pc, #116]	@ (80012d8 <HAL_DAC_MspInit+0xe4>)
 8001262:	f000 ffb1 	bl	80021c8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 8001268:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <HAL_DAC_MspInit+0xec>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800126c:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 800126e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001272:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 8001276:	2240      	movs	r2, #64	@ 0x40
 8001278:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 8001282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001286:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 800128a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800128e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 8001292:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001296:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 800129a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800129e:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80012ac:	480b      	ldr	r0, [pc, #44]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 80012ae:	f000 fc1b 	bl	8001ae8 <HAL_DMA_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80012b8:	f7ff ff6e 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_DAC_MspInit+0xe8>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40007400 	.word	0x40007400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	2000003c 	.word	0x2000003c
 80012e0:	400260a0 	.word	0x400260a0

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_TIM_Base_MspInit+0x3c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10d      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 8001300:	f043 0320 	orr.w	r3, r3, #32
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <HAL_TIM_Base_MspInit+0x40>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40001400 	.word	0x40001400
 8001324:	40023800 	.word	0x40023800

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <NMI_Handler+0x4>

08001330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <HardFault_Handler+0x4>

08001338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <MemManage_Handler+0x4>

08001340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <UsageFault_Handler+0x4>

08001350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137e:	f000 f89b 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <DMA1_Stream6_IRQHandler+0x10>)
 800138e:	f000 fcb1 	bl	8001cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000003c 	.word	0x2000003c

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c4:	f7ff ffea 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f001 ffe5 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff fd81 	bl	8000ef8 <main>
  bx  lr    
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001404:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8001408:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800140c:	20000408 	.word	0x20000408

08001410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_Init+0x40>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_Init+0x40>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800142e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_Init+0x40>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f92b 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff feac 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f943 	bl	8001702 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f90b 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000404 	.word	0x20000404

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000404 	.word	0x20000404

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	@ (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff3e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff31 	bl	800155c <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e014      	b.n	8001756 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fd59 	bl	80011f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0a2      	b.n	80018c2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	795b      	ldrb	r3, [r3, #5]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_DAC_Start_DMA+0x28>
 8001784:	2302      	movs	r3, #2
 8001786:	e09c      	b.n	80018c2 <HAL_DAC_Start_DMA+0x162>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d129      	bne.n	80017ee <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4a4b      	ldr	r2, [pc, #300]	@ (80018cc <HAL_DAC_Start_DMA+0x16c>)
 80017a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4a4a      	ldr	r2, [pc, #296]	@ (80018d0 <HAL_DAC_Start_DMA+0x170>)
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	4a49      	ldr	r2, [pc, #292]	@ (80018d4 <HAL_DAC_Start_DMA+0x174>)
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DAC_Start_DMA+0x70>
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d005      	beq.n	80017da <HAL_DAC_Start_DMA+0x7a>
 80017ce:	e009      	b.n	80017e4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3308      	adds	r3, #8
 80017d6:	613b      	str	r3, [r7, #16]
        break;
 80017d8:	e033      	b.n	8001842 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	330c      	adds	r3, #12
 80017e0:	613b      	str	r3, [r7, #16]
        break;
 80017e2:	e02e      	b.n	8001842 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3310      	adds	r3, #16
 80017ea:	613b      	str	r3, [r7, #16]
        break;
 80017ec:	e029      	b.n	8001842 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	4a39      	ldr	r2, [pc, #228]	@ (80018d8 <HAL_DAC_Start_DMA+0x178>)
 80017f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a38      	ldr	r2, [pc, #224]	@ (80018dc <HAL_DAC_Start_DMA+0x17c>)
 80017fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4a37      	ldr	r2, [pc, #220]	@ (80018e0 <HAL_DAC_Start_DMA+0x180>)
 8001804:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001814:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DAC_Start_DMA+0xc4>
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d005      	beq.n	800182e <HAL_DAC_Start_DMA+0xce>
 8001822:	e009      	b.n	8001838 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3314      	adds	r3, #20
 800182a:	613b      	str	r3, [r7, #16]
        break;
 800182c:	e009      	b.n	8001842 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3318      	adds	r3, #24
 8001834:	613b      	str	r3, [r7, #16]
        break;
 8001836:	e004      	b.n	8001842 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	331c      	adds	r3, #28
 800183e:	613b      	str	r3, [r7, #16]
        break;
 8001840:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001856:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6898      	ldr	r0, [r3, #8]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	f000 f9ef 	bl	8001c44 <HAL_DMA_Start_IT>
 8001866:	4603      	mov	r3, r0
 8001868:	75fb      	strb	r3, [r7, #23]
 800186a:	e010      	b.n	800188e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800187a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	68d8      	ldr	r0, [r3, #12]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	f000 f9dd 	bl	8001c44 <HAL_DMA_Start_IT>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e005      	b.n	80018c0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f043 0204 	orr.w	r2, r3, #4
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	080019d3 	.word	0x080019d3
 80018d0:	080019f5 	.word	0x080019f5
 80018d4:	08001a11 	.word	0x08001a11
 80018d8:	08001a7b 	.word	0x08001a7b
 80018dc:	08001a9d 	.word	0x08001a9d
 80018e0:	08001ab9 	.word	0x08001ab9

080018e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	@ 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_DAC_ConfigChannel+0x1c>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e042      	b.n	80019c6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_DAC_ConfigChannel+0x2c>
 8001948:	2302      	movs	r3, #2
 800194a:	e03c      	b.n	80019c6 <HAL_DAC_ConfigChannel+0xa6>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	22c0      	movs	r2, #192	@ 0xc0
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff ff7f 	bl	80018e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	711a      	strb	r2, [r3, #4]
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a00:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ff78 	bl	80018f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f043 0204 	orr.w	r2, r3, #4
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff6e 	bl	800190c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	711a      	strb	r2, [r3, #4]
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a86:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff ffd8 	bl	8001a3e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	711a      	strb	r2, [r3, #4]
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ffd1 	bl	8001a52 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f043 0204 	orr.w	r2, r3, #4
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ffc7 	bl	8001a66 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	711a      	strb	r2, [r3, #4]
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fcf4 	bl	80014e0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e099      	b.n	8001c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b24:	e00f      	b.n	8001b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b26:	f7ff fcdb 	bl	80014e0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d908      	bls.n	8001b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e078      	b.n	8001c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e8      	bne.n	8001b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <HAL_DMA_Init+0x158>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d107      	bne.n	8001bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f023 0307 	bic.w	r3, r3, #7
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d117      	bne.n	8001c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fa6f 	bl	80020d0 <DMA_CheckFifoParam>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2240      	movs	r2, #64	@ 0x40
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c06:	2301      	movs	r3, #1
 8001c08:	e016      	b.n	8001c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa26 	bl	8002064 <DMA_CalcBaseAndBitshift>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c20:	223f      	movs	r2, #63	@ 0x3f
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	f010803f 	.word	0xf010803f

08001c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Start_IT+0x26>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e040      	b.n	8001cec <HAL_DMA_Start_IT+0xa8>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d12f      	bne.n	8001cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f9b8 	bl	8002008 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	223f      	movs	r2, #63	@ 0x3f
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0216 	orr.w	r2, r2, #22
 8001cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0208 	orr.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e005      	b.n	8001cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d00:	4b8e      	ldr	r3, [pc, #568]	@ (8001f3c <HAL_DMA_IRQHandler+0x248>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a8e      	ldr	r2, [pc, #568]	@ (8001f40 <HAL_DMA_IRQHandler+0x24c>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	2208      	movs	r2, #8
 8001d20:	409a      	lsls	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01a      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0204 	bic.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	2201      	movs	r2, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d012      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	2201      	movs	r2, #1
 8001d84:	409a      	lsls	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f043 0202 	orr.w	r2, r3, #2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d012      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2204      	movs	r2, #4
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f043 0204 	orr.w	r2, r3, #4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d043      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03c      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dee:	2210      	movs	r2, #16
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d018      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d024      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	4798      	blx	r3
 8001e22:	e01f      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e016      	b.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0208 	bic.w	r2, r2, #8
 8001e52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2220      	movs	r2, #32
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 808f 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8087 	beq.w	8001f94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d136      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0216 	bic.w	r2, r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695a      	ldr	r2, [r3, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ebc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d103      	bne.n	8001ece <HAL_DMA_IRQHandler+0x1da>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	223f      	movs	r2, #63	@ 0x3f
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d07e      	beq.n	8002000 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
        }
        return;
 8001f0a:	e079      	b.n	8002000 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01d      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d031      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e02c      	b.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
 8001f3a:	bf00      	nop
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d023      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e01e      	b.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10f      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0210 	bic.w	r2, r2, #16
 8001f72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d032      	beq.n	8002002 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2205      	movs	r2, #5
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d307      	bcc.n	8001fdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f2      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x2cc>
 8001fda:	e000      	b.n	8001fde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
 8001ffe:	e000      	b.n	8002002 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002000:	bf00      	nop
    }
  }
}
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002024:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d108      	bne.n	8002048 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002046:	e007      	b.n	8002058 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3b10      	subs	r3, #16
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <DMA_CalcBaseAndBitshift+0x68>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d909      	bls.n	80020a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	1d1a      	adds	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80020a4:	e007      	b.n	80020b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	aaaaaaab 	.word	0xaaaaaaab
 80020cc:	08004490 	.word	0x08004490

080020d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11f      	bne.n	800212a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d856      	bhi.n	800219e <DMA_CheckFifoParam+0xce>
 80020f0:	a201      	add	r2, pc, #4	@ (adr r2, 80020f8 <DMA_CheckFifoParam+0x28>)
 80020f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f6:	bf00      	nop
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800211b 	.word	0x0800211b
 8002100:	08002109 	.word	0x08002109
 8002104:	0800219f 	.word	0x0800219f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d046      	beq.n	80021a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e043      	b.n	80021a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002122:	d140      	bne.n	80021a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002128:	e03d      	b.n	80021a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002132:	d121      	bne.n	8002178 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d837      	bhi.n	80021aa <DMA_CheckFifoParam+0xda>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <DMA_CheckFifoParam+0x70>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	08002157 	.word	0x08002157
 8002148:	08002151 	.word	0x08002151
 800214c:	08002169 	.word	0x08002169
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
      break;
 8002154:	e030      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d025      	beq.n	80021ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002166:	e022      	b.n	80021ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002170:	d11f      	bne.n	80021b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002176:	e01c      	b.n	80021b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d903      	bls.n	8002186 <DMA_CheckFifoParam+0xb6>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d003      	beq.n	800218c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002184:	e018      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      break;
 800218a:	e015      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00e      	beq.n	80021b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      break;
 800219c:	e00b      	b.n	80021b6 <DMA_CheckFifoParam+0xe6>
      break;
 800219e:	bf00      	nop
 80021a0:	e00a      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e008      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e006      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e004      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e002      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
    }
  } 
  
  return status; 
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	@ 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	e165      	b.n	80024b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	f040 8154 	bne.w	80024aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d005      	beq.n	800221a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	2b02      	cmp	r3, #2
 8002218:	d130      	bne.n	800227c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 0201 	and.w	r2, r3, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b03      	cmp	r3, #3
 8002286:	d017      	beq.n	80022b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d123      	bne.n	800230c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80ae 	beq.w	80024aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b5d      	ldr	r3, [pc, #372]	@ (80024c8 <HAL_GPIO_Init+0x300>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	4a5c      	ldr	r2, [pc, #368]	@ (80024c8 <HAL_GPIO_Init+0x300>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800235c:	6453      	str	r3, [r2, #68]	@ 0x44
 800235e:	4b5a      	ldr	r3, [pc, #360]	@ (80024c8 <HAL_GPIO_Init+0x300>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800236a:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <HAL_GPIO_Init+0x304>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4f      	ldr	r2, [pc, #316]	@ (80024d0 <HAL_GPIO_Init+0x308>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d025      	beq.n	80023e2 <HAL_GPIO_Init+0x21a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4e      	ldr	r2, [pc, #312]	@ (80024d4 <HAL_GPIO_Init+0x30c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01f      	beq.n	80023de <HAL_GPIO_Init+0x216>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_GPIO_Init+0x310>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d019      	beq.n	80023da <HAL_GPIO_Init+0x212>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4c      	ldr	r2, [pc, #304]	@ (80024dc <HAL_GPIO_Init+0x314>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x20e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4b      	ldr	r2, [pc, #300]	@ (80024e0 <HAL_GPIO_Init+0x318>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x20a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <HAL_GPIO_Init+0x31c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x206>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a49      	ldr	r2, [pc, #292]	@ (80024e8 <HAL_GPIO_Init+0x320>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x202>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00c      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00a      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e008      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023d6:	2303      	movs	r3, #3
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x21c>
 80023e2:	2300      	movs	r3, #0
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f002 0203 	and.w	r2, r2, #3
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	4093      	lsls	r3, r2
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f4:	4935      	ldr	r1, [pc, #212]	@ (80024cc <HAL_GPIO_Init+0x304>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <HAL_GPIO_Init+0x324>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002426:	4a31      	ldr	r2, [pc, #196]	@ (80024ec <HAL_GPIO_Init+0x324>)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800242c:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_GPIO_Init+0x324>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002450:	4a26      	ldr	r2, [pc, #152]	@ (80024ec <HAL_GPIO_Init+0x324>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002456:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_GPIO_Init+0x324>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <HAL_GPIO_Init+0x324>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002480:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <HAL_GPIO_Init+0x324>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a4:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_GPIO_Init+0x324>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f67f ae96 	bls.w	80021e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40013800 	.word	0x40013800
 80024d0:	40020000 	.word	0x40020000
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020800 	.word	0x40020800
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40021400 	.word	0x40021400
 80024e8:	40021800 	.word	0x40021800
 80024ec:	40013c00 	.word	0x40013c00

080024f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a1f      	ldr	r2, [pc, #124]	@ (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_PWREx_EnableOverDrive+0x90>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_PWREx_EnableOverDrive+0x94>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251c:	f7fe ffe0 	bl	80014e0 <HAL_GetTick>
 8002520:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002522:	e009      	b.n	8002538 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002524:	f7fe ffdc 	bl	80014e0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002532:	d901      	bls.n	8002538 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e01f      	b.n	8002578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002538:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <HAL_PWREx_EnableOverDrive+0x98>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002544:	d1ee      	bne.n	8002524 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800254c:	f7fe ffc8 	bl	80014e0 <HAL_GetTick>
 8002550:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002552:	e009      	b.n	8002568 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002554:	f7fe ffc4 	bl	80014e0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002562:	d901      	bls.n	8002568 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e007      	b.n	8002578 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002568:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_PWREx_EnableOverDrive+0x98>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002574:	d1ee      	bne.n	8002554 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	420e0040 	.word	0x420e0040
 8002588:	40007000 	.word	0x40007000
 800258c:	420e0044 	.word	0x420e0044

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0cc      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b68      	ldr	r3, [pc, #416]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d90c      	bls.n	80025cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b65      	ldr	r3, [pc, #404]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	4a58      	ldr	r2, [pc, #352]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d044      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d119      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d003      	beq.n	800264e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	2b03      	cmp	r3, #3
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e067      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4b37      	ldr	r3, [pc, #220]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4934      	ldr	r1, [pc, #208]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe ff2e 	bl	80014e0 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe ff2a 	bl	80014e0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e04f      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 020c 	and.w	r2, r3, #12
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1eb      	bne.n	8002688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d20c      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_RCC_ClockConfig+0x1b8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f821 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800271a:	4602      	mov	r2, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	490a      	ldr	r1, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	5ccb      	ldrb	r3, [r1, r3]
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fe8e 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00
 800274c:	40023800 	.word	0x40023800
 8002750:	08004480 	.word	0x08004480
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002760:	b0a6      	sub	sp, #152	@ 0x98
 8002762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002782:	4bc8      	ldr	r3, [pc, #800]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b0c      	cmp	r3, #12
 800278c:	f200 817e 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x330>
 8002790:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027cd 	.word	0x080027cd
 800279c:	08002a8d 	.word	0x08002a8d
 80027a0:	08002a8d 	.word	0x08002a8d
 80027a4:	08002a8d 	.word	0x08002a8d
 80027a8:	080027d5 	.word	0x080027d5
 80027ac:	08002a8d 	.word	0x08002a8d
 80027b0:	08002a8d 	.word	0x08002a8d
 80027b4:	08002a8d 	.word	0x08002a8d
 80027b8:	080027dd 	.word	0x080027dd
 80027bc:	08002a8d 	.word	0x08002a8d
 80027c0:	08002a8d 	.word	0x08002a8d
 80027c4:	08002a8d 	.word	0x08002a8d
 80027c8:	08002947 	.word	0x08002947
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4bb6      	ldr	r3, [pc, #728]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80027ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027d2:	e15f      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4bb5      	ldr	r3, [pc, #724]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 80027d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027da:	e15b      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4bb1      	ldr	r3, [pc, #708]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e8:	4bae      	ldr	r3, [pc, #696]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d031      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4bab      	ldr	r3, [pc, #684]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	663b      	str	r3, [r7, #96]	@ 0x60
 8002808:	2300      	movs	r3, #0
 800280a:	667b      	str	r3, [r7, #100]	@ 0x64
 800280c:	4ba7      	ldr	r3, [pc, #668]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 800280e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002812:	462a      	mov	r2, r5
 8002814:	fb03 f202 	mul.w	r2, r3, r2
 8002818:	2300      	movs	r3, #0
 800281a:	4621      	mov	r1, r4
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	4aa2      	ldr	r2, [pc, #648]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002824:	4621      	mov	r1, r4
 8002826:	fba1 1202 	umull	r1, r2, r1, r2
 800282a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800282c:	460a      	mov	r2, r1
 800282e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002830:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002832:	4413      	add	r3, r2
 8002834:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283a:	2200      	movs	r2, #0
 800283c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800283e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002840:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002844:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002848:	f7fe f97c 	bl	8000b44 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002856:	e064      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b92      	ldr	r3, [pc, #584]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	653b      	str	r3, [r7, #80]	@ 0x50
 8002862:	657a      	str	r2, [r7, #84]	@ 0x54
 8002864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800286c:	2300      	movs	r3, #0
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002870:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002874:	4622      	mov	r2, r4
 8002876:	462b      	mov	r3, r5
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002886:	0150      	lsls	r0, r2, #5
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4621      	mov	r1, r4
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	6139      	str	r1, [r7, #16]
 8002892:	4629      	mov	r1, r5
 8002894:	eb63 0301 	sbc.w	r3, r3, r1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a6:	4659      	mov	r1, fp
 80028a8:	018b      	lsls	r3, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b0:	4651      	mov	r1, sl
 80028b2:	018a      	lsls	r2, r1, #6
 80028b4:	4651      	mov	r1, sl
 80028b6:	ebb2 0801 	subs.w	r8, r2, r1
 80028ba:	4659      	mov	r1, fp
 80028bc:	eb63 0901 	sbc.w	r9, r3, r1
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d4:	4690      	mov	r8, r2
 80028d6:	4699      	mov	r9, r3
 80028d8:	4623      	mov	r3, r4
 80028da:	eb18 0303 	adds.w	r3, r8, r3
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	462b      	mov	r3, r5
 80028e2:	eb49 0303 	adc.w	r3, r9, r3
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028f4:	4629      	mov	r1, r5
 80028f6:	028b      	lsls	r3, r1, #10
 80028f8:	4621      	mov	r1, r4
 80028fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fe:	4621      	mov	r1, r4
 8002900:	028a      	lsls	r2, r1, #10
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290a:	2200      	movs	r2, #0
 800290c:	643b      	str	r3, [r7, #64]	@ 0x40
 800290e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002914:	f7fe f916 	bl	8000b44 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4613      	mov	r3, r2
 800291e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002922:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	3301      	adds	r3, #1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002934:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002944:	e0a6      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002946:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002952:	4b54      	ldr	r3, [pc, #336]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d02a      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b51      	ldr	r3, [pc, #324]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002968:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002970:	2100      	movs	r1, #0
 8002972:	4b4e      	ldr	r3, [pc, #312]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002974:	fb03 f201 	mul.w	r2, r3, r1
 8002978:	2300      	movs	r3, #0
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	4413      	add	r3, r2
 8002980:	4a4a      	ldr	r2, [pc, #296]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x350>)
 8002982:	fba0 1202 	umull	r1, r2, r0, r2
 8002986:	677a      	str	r2, [r7, #116]	@ 0x74
 8002988:	460a      	mov	r2, r1
 800298a:	673a      	str	r2, [r7, #112]	@ 0x70
 800298c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800298e:	4413      	add	r3, r2
 8002990:	677b      	str	r3, [r7, #116]	@ 0x74
 8002992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002996:	2200      	movs	r2, #0
 8002998:	633b      	str	r3, [r7, #48]	@ 0x30
 800299a:	637a      	str	r2, [r7, #52]	@ 0x34
 800299c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80029a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80029a4:	f7fe f8ce 	bl	8000b44 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029b2:	e05b      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	2200      	movs	r2, #0
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0159      	lsls	r1, r3, #5
 80029de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029e2:	0150      	lsls	r0, r2, #5
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4641      	mov	r1, r8
 80029ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ee:	4649      	mov	r1, r9
 80029f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a08:	ebb2 040a 	subs.w	r4, r2, sl
 8002a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	00eb      	lsls	r3, r5, #3
 8002a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1e:	00e2      	lsls	r2, r4, #3
 8002a20:	4614      	mov	r4, r2
 8002a22:	461d      	mov	r5, r3
 8002a24:	4643      	mov	r3, r8
 8002a26:	18e3      	adds	r3, r4, r3
 8002a28:	603b      	str	r3, [r7, #0]
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	eb45 0303 	adc.w	r3, r5, r3
 8002a30:	607b      	str	r3, [r7, #4]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a3e:	4629      	mov	r1, r5
 8002a40:	028b      	lsls	r3, r1, #10
 8002a42:	4621      	mov	r1, r4
 8002a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a48:	4621      	mov	r1, r4
 8002a4a:	028a      	lsls	r2, r1, #10
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a54:	2200      	movs	r2, #0
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	61fa      	str	r2, [r7, #28]
 8002a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5e:	f7fe f871 	bl	8000b44 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4613      	mov	r3, r2
 8002a68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0f1b      	lsrs	r3, r3, #28
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3798      	adds	r7, #152	@ 0x98
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	017d7840 	.word	0x017d7840

08002ab0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e28d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8083 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ad0:	4b94      	ldr	r3, [pc, #592]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d019      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002adc:	4b91      	ldr	r3, [pc, #580]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af4:	d00c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d112      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b88      	ldr	r3, [pc, #544]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b0e:	d10b      	bne.n	8002b28 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b10:	4b84      	ldr	r3, [pc, #528]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d05b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x124>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d157      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e25a      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCC_OscConfig+0x90>
 8002b32:	4b7c      	ldr	r3, [pc, #496]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a7b      	ldr	r2, [pc, #492]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e01d      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb4>
 8002b4a:	4b76      	ldr	r3, [pc, #472]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a72      	ldr	r2, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_RCC_OscConfig+0xcc>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6e      	ldr	r2, [pc, #440]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fcac 	bl	80014e0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fca8 	bl	80014e0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e21f      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0xdc>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fc98 	bl	80014e0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fc94 	bl	80014e0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e20b      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	4b57      	ldr	r3, [pc, #348]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x104>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d06f      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002be2:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bee:	4b4d      	ldr	r3, [pc, #308]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b44      	ldr	r3, [pc, #272]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1d3      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4937      	ldr	r1, [pc, #220]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc41 	bl	80014e0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe fc3d 	bl	80014e0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1b4      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4925      	ldr	r1, [pc, #148]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <HAL_RCC_OscConfig+0x278>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fc20 	bl	80014e0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fc1c 	bl	80014e0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e193      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d036      	beq.n	8002d3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b15      	ldr	r3, [pc, #84]	@ (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fc00 	bl	80014e0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fbfc 	bl	80014e0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e173      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x234>
 8002d02:	e01b      	b.n	8002d3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_RCC_OscConfig+0x27c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fbe9 	bl	80014e0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e00e      	b.n	8002d30 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe fbe5 	bl	80014e0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d907      	bls.n	8002d30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e15c      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	42470000 	.word	0x42470000
 8002d2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b8a      	ldr	r3, [pc, #552]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ea      	bne.n	8002d12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8097 	beq.w	8002e78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a7e      	ldr	r2, [pc, #504]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b79      	ldr	r3, [pc, #484]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d118      	bne.n	8002db8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d86:	4b76      	ldr	r3, [pc, #472]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fba5 	bl	80014e0 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9a:	f7fe fba1 	bl	80014e0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e118      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	4b6c      	ldr	r3, [pc, #432]	@ (8002f60 <HAL_RCC_OscConfig+0x4b0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x31e>
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a65      	ldr	r2, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x340>
 8002dd6:	4b61      	ldr	r3, [pc, #388]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a60      	ldr	r2, [pc, #384]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	4b5e      	ldr	r3, [pc, #376]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de6:	4a5d      	ldr	r2, [pc, #372]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0x358>
 8002df0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a59      	ldr	r2, [pc, #356]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfc:	4b57      	ldr	r3, [pc, #348]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e00:	4a56      	ldr	r2, [pc, #344]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	f023 0304 	bic.w	r3, r3, #4
 8002e06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe fb66 	bl	80014e0 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fe fb62 	bl	80014e0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0d7      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ee      	beq.n	8002e18 <HAL_RCC_OscConfig+0x368>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fb50 	bl	80014e0 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe fb4c 	bl	80014e0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0c1      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ee      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	4a3a      	ldr	r2, [pc, #232]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ad 	beq.w	8002fdc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e82:	4b36      	ldr	r3, [pc, #216]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d145      	bne.n	8002f22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fb20 	bl	80014e0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fb1c 	bl	80014e0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e093      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b29      	ldr	r3, [pc, #164]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	019b      	lsls	r3, r3, #6
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	071b      	lsls	r3, r3, #28
 8002eee:	491b      	ldr	r1, [pc, #108]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe faf1 	bl	80014e0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fe faed 	bl	80014e0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e064      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x452>
 8002f20:	e05c      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <HAL_RCC_OscConfig+0x4b4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fada 	bl	80014e0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fad6 	bl	80014e0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04d      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x480>
 8002f4e:	e045      	b.n	8002fdc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d107      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f68:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe8 <HAL_RCC_OscConfig+0x538>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d030      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d129      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d122      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d119      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f966 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 f896 	bl	800315c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e046      	b.n	8003132 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a23      	ldr	r2, [pc, #140]	@ (8003140 <HAL_TIM_Base_Start+0xb4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030be:	d01d      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003144 <HAL_TIM_Base_Start+0xb8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_TIM_Base_Start+0xbc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <HAL_TIM_Base_Start+0xc0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <HAL_TIM_Base_Start+0xc4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <HAL_TIM_Base_Start+0xc8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_Base_Start+0x70>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a18      	ldr	r2, [pc, #96]	@ (8003158 <HAL_TIM_Base_Start+0xcc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d010      	beq.n	8003130 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	e007      	b.n	8003130 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40010400 	.word	0x40010400
 8003154:	40014000 	.word	0x40014000
 8003158:	40001800 	.word	0x40001800

0800315c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a46      	ldr	r2, [pc, #280]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317a:	d00f      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a43      	ldr	r2, [pc, #268]	@ (800328c <TIM_Base_SetConfig+0x130>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a42      	ldr	r2, [pc, #264]	@ (8003290 <TIM_Base_SetConfig+0x134>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a41      	ldr	r2, [pc, #260]	@ (8003294 <TIM_Base_SetConfig+0x138>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a40      	ldr	r2, [pc, #256]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d027      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a32      	ldr	r2, [pc, #200]	@ (800328c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d023      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d017      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2e      	ldr	r2, [pc, #184]	@ (800329c <TIM_Base_SetConfig+0x140>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <TIM_Base_SetConfig+0x144>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00f      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <TIM_Base_SetConfig+0x148>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	@ (80032a8 <TIM_Base_SetConfig+0x14c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2a      	ldr	r2, [pc, #168]	@ (80032ac <TIM_Base_SetConfig+0x150>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <TIM_Base_SetConfig+0x154>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d108      	bne.n	8003220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_Base_SetConfig+0xf8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
  }
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40001800 	.word	0x40001800
 80032ac:	40001c00 	.word	0x40001c00
 80032b0:	40002000 	.word	0x40002000

080032b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e05a      	b.n	8003382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a21      	ldr	r2, [pc, #132]	@ (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003318:	d01d      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1d      	ldr	r2, [pc, #116]	@ (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1b      	ldr	r2, [pc, #108]	@ (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1a      	ldr	r2, [pc, #104]	@ (800339c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a15      	ldr	r2, [pc, #84]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10c      	bne.n	8003370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800335c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	4313      	orrs	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40014000 	.word	0x40014000
 80033a8:	40001800 	.word	0x40001800

080033ac <memset>:
 80033ac:	4402      	add	r2, r0
 80033ae:	4603      	mov	r3, r0
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d100      	bne.n	80033b6 <memset+0xa>
 80033b4:	4770      	bx	lr
 80033b6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ba:	e7f9      	b.n	80033b0 <memset+0x4>

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4d0d      	ldr	r5, [pc, #52]	@ (80033f4 <__libc_init_array+0x38>)
 80033c0:	4c0d      	ldr	r4, [pc, #52]	@ (80033f8 <__libc_init_array+0x3c>)
 80033c2:	1b64      	subs	r4, r4, r5
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	2600      	movs	r6, #0
 80033c8:	42a6      	cmp	r6, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	4d0b      	ldr	r5, [pc, #44]	@ (80033fc <__libc_init_array+0x40>)
 80033ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003400 <__libc_init_array+0x44>)
 80033d0:	f001 f84a 	bl	8004468 <_init>
 80033d4:	1b64      	subs	r4, r4, r5
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	2600      	movs	r6, #0
 80033da:	42a6      	cmp	r6, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e4:	4798      	blx	r3
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ee:	4798      	blx	r3
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08004678 	.word	0x08004678
 80033f8:	08004678 	.word	0x08004678
 80033fc:	08004678 	.word	0x08004678
 8003400:	0800467c 	.word	0x0800467c
 8003404:	00000000 	.word	0x00000000

08003408 <sin>:
 8003408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800340a:	ec53 2b10 	vmov	r2, r3, d0
 800340e:	4826      	ldr	r0, [pc, #152]	@ (80034a8 <sin+0xa0>)
 8003410:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003414:	4281      	cmp	r1, r0
 8003416:	d807      	bhi.n	8003428 <sin+0x20>
 8003418:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80034a0 <sin+0x98>
 800341c:	2000      	movs	r0, #0
 800341e:	b005      	add	sp, #20
 8003420:	f85d eb04 	ldr.w	lr, [sp], #4
 8003424:	f000 b90c 	b.w	8003640 <__kernel_sin>
 8003428:	4820      	ldr	r0, [pc, #128]	@ (80034ac <sin+0xa4>)
 800342a:	4281      	cmp	r1, r0
 800342c:	d908      	bls.n	8003440 <sin+0x38>
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	f7fc feed 	bl	8000210 <__aeabi_dsub>
 8003436:	ec41 0b10 	vmov	d0, r0, r1
 800343a:	b005      	add	sp, #20
 800343c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003440:	4668      	mov	r0, sp
 8003442:	f000 f9b9 	bl	80037b8 <__ieee754_rem_pio2>
 8003446:	f000 0003 	and.w	r0, r0, #3
 800344a:	2801      	cmp	r0, #1
 800344c:	d00c      	beq.n	8003468 <sin+0x60>
 800344e:	2802      	cmp	r0, #2
 8003450:	d011      	beq.n	8003476 <sin+0x6e>
 8003452:	b9e8      	cbnz	r0, 8003490 <sin+0x88>
 8003454:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003458:	ed9d 0b00 	vldr	d0, [sp]
 800345c:	2001      	movs	r0, #1
 800345e:	f000 f8ef 	bl	8003640 <__kernel_sin>
 8003462:	ec51 0b10 	vmov	r0, r1, d0
 8003466:	e7e6      	b.n	8003436 <sin+0x2e>
 8003468:	ed9d 1b02 	vldr	d1, [sp, #8]
 800346c:	ed9d 0b00 	vldr	d0, [sp]
 8003470:	f000 f81e 	bl	80034b0 <__kernel_cos>
 8003474:	e7f5      	b.n	8003462 <sin+0x5a>
 8003476:	ed9d 1b02 	vldr	d1, [sp, #8]
 800347a:	ed9d 0b00 	vldr	d0, [sp]
 800347e:	2001      	movs	r0, #1
 8003480:	f000 f8de 	bl	8003640 <__kernel_sin>
 8003484:	ec53 2b10 	vmov	r2, r3, d0
 8003488:	4610      	mov	r0, r2
 800348a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800348e:	e7d2      	b.n	8003436 <sin+0x2e>
 8003490:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003494:	ed9d 0b00 	vldr	d0, [sp]
 8003498:	f000 f80a 	bl	80034b0 <__kernel_cos>
 800349c:	e7f2      	b.n	8003484 <sin+0x7c>
 800349e:	bf00      	nop
	...
 80034a8:	3fe921fb 	.word	0x3fe921fb
 80034ac:	7fefffff 	.word	0x7fefffff

080034b0 <__kernel_cos>:
 80034b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	ec57 6b10 	vmov	r6, r7, d0
 80034b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80034bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80034c0:	ed8d 1b00 	vstr	d1, [sp]
 80034c4:	d206      	bcs.n	80034d4 <__kernel_cos+0x24>
 80034c6:	4630      	mov	r0, r6
 80034c8:	4639      	mov	r1, r7
 80034ca:	f7fd faf3 	bl	8000ab4 <__aeabi_d2iz>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f000 8088 	beq.w	80035e4 <__kernel_cos+0x134>
 80034d4:	4632      	mov	r2, r6
 80034d6:	463b      	mov	r3, r7
 80034d8:	4630      	mov	r0, r6
 80034da:	4639      	mov	r1, r7
 80034dc:	f7fd f850 	bl	8000580 <__aeabi_dmul>
 80034e0:	4b51      	ldr	r3, [pc, #324]	@ (8003628 <__kernel_cos+0x178>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	f7fd f84a 	bl	8000580 <__aeabi_dmul>
 80034ec:	a340      	add	r3, pc, #256	@ (adr r3, 80035f0 <__kernel_cos+0x140>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	4682      	mov	sl, r0
 80034f4:	468b      	mov	fp, r1
 80034f6:	4620      	mov	r0, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	f7fd f841 	bl	8000580 <__aeabi_dmul>
 80034fe:	a33e      	add	r3, pc, #248	@ (adr r3, 80035f8 <__kernel_cos+0x148>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fc fe86 	bl	8000214 <__adddf3>
 8003508:	4622      	mov	r2, r4
 800350a:	462b      	mov	r3, r5
 800350c:	f7fd f838 	bl	8000580 <__aeabi_dmul>
 8003510:	a33b      	add	r3, pc, #236	@ (adr r3, 8003600 <__kernel_cos+0x150>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fc fe7b 	bl	8000210 <__aeabi_dsub>
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	f7fd f82f 	bl	8000580 <__aeabi_dmul>
 8003522:	a339      	add	r3, pc, #228	@ (adr r3, 8003608 <__kernel_cos+0x158>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f7fc fe74 	bl	8000214 <__adddf3>
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	f7fd f826 	bl	8000580 <__aeabi_dmul>
 8003534:	a336      	add	r3, pc, #216	@ (adr r3, 8003610 <__kernel_cos+0x160>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fc fe69 	bl	8000210 <__aeabi_dsub>
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	f7fd f81d 	bl	8000580 <__aeabi_dmul>
 8003546:	a334      	add	r3, pc, #208	@ (adr r3, 8003618 <__kernel_cos+0x168>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fc fe62 	bl	8000214 <__adddf3>
 8003550:	4622      	mov	r2, r4
 8003552:	462b      	mov	r3, r5
 8003554:	f7fd f814 	bl	8000580 <__aeabi_dmul>
 8003558:	4622      	mov	r2, r4
 800355a:	462b      	mov	r3, r5
 800355c:	f7fd f810 	bl	8000580 <__aeabi_dmul>
 8003560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	4630      	mov	r0, r6
 800356a:	4639      	mov	r1, r7
 800356c:	f7fd f808 	bl	8000580 <__aeabi_dmul>
 8003570:	460b      	mov	r3, r1
 8003572:	4602      	mov	r2, r0
 8003574:	4629      	mov	r1, r5
 8003576:	4620      	mov	r0, r4
 8003578:	f7fc fe4a 	bl	8000210 <__aeabi_dsub>
 800357c:	4b2b      	ldr	r3, [pc, #172]	@ (800362c <__kernel_cos+0x17c>)
 800357e:	4598      	cmp	r8, r3
 8003580:	4606      	mov	r6, r0
 8003582:	460f      	mov	r7, r1
 8003584:	d810      	bhi.n	80035a8 <__kernel_cos+0xf8>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4650      	mov	r0, sl
 800358c:	4659      	mov	r1, fp
 800358e:	f7fc fe3f 	bl	8000210 <__aeabi_dsub>
 8003592:	460b      	mov	r3, r1
 8003594:	4926      	ldr	r1, [pc, #152]	@ (8003630 <__kernel_cos+0x180>)
 8003596:	4602      	mov	r2, r0
 8003598:	2000      	movs	r0, #0
 800359a:	f7fc fe39 	bl	8000210 <__aeabi_dsub>
 800359e:	ec41 0b10 	vmov	d0, r0, r1
 80035a2:	b003      	add	sp, #12
 80035a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a8:	4b22      	ldr	r3, [pc, #136]	@ (8003634 <__kernel_cos+0x184>)
 80035aa:	4921      	ldr	r1, [pc, #132]	@ (8003630 <__kernel_cos+0x180>)
 80035ac:	4598      	cmp	r8, r3
 80035ae:	bf8c      	ite	hi
 80035b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8003638 <__kernel_cos+0x188>)
 80035b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80035b6:	2400      	movs	r4, #0
 80035b8:	4622      	mov	r2, r4
 80035ba:	462b      	mov	r3, r5
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fc fe27 	bl	8000210 <__aeabi_dsub>
 80035c2:	4622      	mov	r2, r4
 80035c4:	4680      	mov	r8, r0
 80035c6:	4689      	mov	r9, r1
 80035c8:	462b      	mov	r3, r5
 80035ca:	4650      	mov	r0, sl
 80035cc:	4659      	mov	r1, fp
 80035ce:	f7fc fe1f 	bl	8000210 <__aeabi_dsub>
 80035d2:	4632      	mov	r2, r6
 80035d4:	463b      	mov	r3, r7
 80035d6:	f7fc fe1b 	bl	8000210 <__aeabi_dsub>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4640      	mov	r0, r8
 80035e0:	4649      	mov	r1, r9
 80035e2:	e7da      	b.n	800359a <__kernel_cos+0xea>
 80035e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003620 <__kernel_cos+0x170>
 80035e8:	e7db      	b.n	80035a2 <__kernel_cos+0xf2>
 80035ea:	bf00      	nop
 80035ec:	f3af 8000 	nop.w
 80035f0:	be8838d4 	.word	0xbe8838d4
 80035f4:	bda8fae9 	.word	0xbda8fae9
 80035f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80035fc:	3e21ee9e 	.word	0x3e21ee9e
 8003600:	809c52ad 	.word	0x809c52ad
 8003604:	3e927e4f 	.word	0x3e927e4f
 8003608:	19cb1590 	.word	0x19cb1590
 800360c:	3efa01a0 	.word	0x3efa01a0
 8003610:	16c15177 	.word	0x16c15177
 8003614:	3f56c16c 	.word	0x3f56c16c
 8003618:	5555554c 	.word	0x5555554c
 800361c:	3fa55555 	.word	0x3fa55555
 8003620:	00000000 	.word	0x00000000
 8003624:	3ff00000 	.word	0x3ff00000
 8003628:	3fe00000 	.word	0x3fe00000
 800362c:	3fd33332 	.word	0x3fd33332
 8003630:	3ff00000 	.word	0x3ff00000
 8003634:	3fe90000 	.word	0x3fe90000
 8003638:	3fd20000 	.word	0x3fd20000
 800363c:	00000000 	.word	0x00000000

08003640 <__kernel_sin>:
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	ec55 4b10 	vmov	r4, r5, d0
 8003648:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800364c:	b085      	sub	sp, #20
 800364e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003652:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003656:	4680      	mov	r8, r0
 8003658:	d205      	bcs.n	8003666 <__kernel_sin+0x26>
 800365a:	4620      	mov	r0, r4
 800365c:	4629      	mov	r1, r5
 800365e:	f7fd fa29 	bl	8000ab4 <__aeabi_d2iz>
 8003662:	2800      	cmp	r0, #0
 8003664:	d052      	beq.n	800370c <__kernel_sin+0xcc>
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f7fc ff87 	bl	8000580 <__aeabi_dmul>
 8003672:	4682      	mov	sl, r0
 8003674:	468b      	mov	fp, r1
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4620      	mov	r0, r4
 800367c:	4629      	mov	r1, r5
 800367e:	f7fc ff7f 	bl	8000580 <__aeabi_dmul>
 8003682:	a342      	add	r3, pc, #264	@ (adr r3, 800378c <__kernel_sin+0x14c>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	e9cd 0100 	strd	r0, r1, [sp]
 800368c:	4650      	mov	r0, sl
 800368e:	4659      	mov	r1, fp
 8003690:	f7fc ff76 	bl	8000580 <__aeabi_dmul>
 8003694:	a33f      	add	r3, pc, #252	@ (adr r3, 8003794 <__kernel_sin+0x154>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc fdb9 	bl	8000210 <__aeabi_dsub>
 800369e:	4652      	mov	r2, sl
 80036a0:	465b      	mov	r3, fp
 80036a2:	f7fc ff6d 	bl	8000580 <__aeabi_dmul>
 80036a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800379c <__kernel_sin+0x15c>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc fdb2 	bl	8000214 <__adddf3>
 80036b0:	4652      	mov	r2, sl
 80036b2:	465b      	mov	r3, fp
 80036b4:	f7fc ff64 	bl	8000580 <__aeabi_dmul>
 80036b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80037a4 <__kernel_sin+0x164>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc fda7 	bl	8000210 <__aeabi_dsub>
 80036c2:	4652      	mov	r2, sl
 80036c4:	465b      	mov	r3, fp
 80036c6:	f7fc ff5b 	bl	8000580 <__aeabi_dmul>
 80036ca:	a338      	add	r3, pc, #224	@ (adr r3, 80037ac <__kernel_sin+0x16c>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc fda0 	bl	8000214 <__adddf3>
 80036d4:	4606      	mov	r6, r0
 80036d6:	460f      	mov	r7, r1
 80036d8:	f1b8 0f00 	cmp.w	r8, #0
 80036dc:	d11b      	bne.n	8003716 <__kernel_sin+0xd6>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4650      	mov	r0, sl
 80036e4:	4659      	mov	r1, fp
 80036e6:	f7fc ff4b 	bl	8000580 <__aeabi_dmul>
 80036ea:	a325      	add	r3, pc, #148	@ (adr r3, 8003780 <__kernel_sin+0x140>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc fd8e 	bl	8000210 <__aeabi_dsub>
 80036f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036f8:	f7fc ff42 	bl	8000580 <__aeabi_dmul>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4620      	mov	r0, r4
 8003702:	4629      	mov	r1, r5
 8003704:	f7fc fd86 	bl	8000214 <__adddf3>
 8003708:	4604      	mov	r4, r0
 800370a:	460d      	mov	r5, r1
 800370c:	ec45 4b10 	vmov	d0, r4, r5
 8003710:	b005      	add	sp, #20
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800371a:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <__kernel_sin+0x148>)
 800371c:	2200      	movs	r2, #0
 800371e:	f7fc ff2f 	bl	8000580 <__aeabi_dmul>
 8003722:	4632      	mov	r2, r6
 8003724:	4680      	mov	r8, r0
 8003726:	4689      	mov	r9, r1
 8003728:	463b      	mov	r3, r7
 800372a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800372e:	f7fc ff27 	bl	8000580 <__aeabi_dmul>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4640      	mov	r0, r8
 8003738:	4649      	mov	r1, r9
 800373a:	f7fc fd69 	bl	8000210 <__aeabi_dsub>
 800373e:	4652      	mov	r2, sl
 8003740:	465b      	mov	r3, fp
 8003742:	f7fc ff1d 	bl	8000580 <__aeabi_dmul>
 8003746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800374a:	f7fc fd61 	bl	8000210 <__aeabi_dsub>
 800374e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003780 <__kernel_sin+0x140>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800375c:	f7fc ff10 	bl	8000580 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4630      	mov	r0, r6
 8003766:	4639      	mov	r1, r7
 8003768:	f7fc fd54 	bl	8000214 <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc fd4c 	bl	8000210 <__aeabi_dsub>
 8003778:	e7c6      	b.n	8003708 <__kernel_sin+0xc8>
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w
 8003780:	55555549 	.word	0x55555549
 8003784:	3fc55555 	.word	0x3fc55555
 8003788:	3fe00000 	.word	0x3fe00000
 800378c:	5acfd57c 	.word	0x5acfd57c
 8003790:	3de5d93a 	.word	0x3de5d93a
 8003794:	8a2b9ceb 	.word	0x8a2b9ceb
 8003798:	3e5ae5e6 	.word	0x3e5ae5e6
 800379c:	57b1fe7d 	.word	0x57b1fe7d
 80037a0:	3ec71de3 	.word	0x3ec71de3
 80037a4:	19c161d5 	.word	0x19c161d5
 80037a8:	3f2a01a0 	.word	0x3f2a01a0
 80037ac:	1110f8a6 	.word	0x1110f8a6
 80037b0:	3f811111 	.word	0x3f811111
 80037b4:	00000000 	.word	0x00000000

080037b8 <__ieee754_rem_pio2>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	ec57 6b10 	vmov	r6, r7, d0
 80037c0:	4bc5      	ldr	r3, [pc, #788]	@ (8003ad8 <__ieee754_rem_pio2+0x320>)
 80037c2:	b08d      	sub	sp, #52	@ 0x34
 80037c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80037c8:	4598      	cmp	r8, r3
 80037ca:	4604      	mov	r4, r0
 80037cc:	9704      	str	r7, [sp, #16]
 80037ce:	d807      	bhi.n	80037e0 <__ieee754_rem_pio2+0x28>
 80037d0:	2200      	movs	r2, #0
 80037d2:	2300      	movs	r3, #0
 80037d4:	ed80 0b00 	vstr	d0, [r0]
 80037d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80037dc:	2500      	movs	r5, #0
 80037de:	e028      	b.n	8003832 <__ieee754_rem_pio2+0x7a>
 80037e0:	4bbe      	ldr	r3, [pc, #760]	@ (8003adc <__ieee754_rem_pio2+0x324>)
 80037e2:	4598      	cmp	r8, r3
 80037e4:	d878      	bhi.n	80038d8 <__ieee754_rem_pio2+0x120>
 80037e6:	9b04      	ldr	r3, [sp, #16]
 80037e8:	4dbd      	ldr	r5, [pc, #756]	@ (8003ae0 <__ieee754_rem_pio2+0x328>)
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	4630      	mov	r0, r6
 80037ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	4639      	mov	r1, r7
 80037f6:	dd38      	ble.n	800386a <__ieee754_rem_pio2+0xb2>
 80037f8:	f7fc fd0a 	bl	8000210 <__aeabi_dsub>
 80037fc:	45a8      	cmp	r8, r5
 80037fe:	4606      	mov	r6, r0
 8003800:	460f      	mov	r7, r1
 8003802:	d01a      	beq.n	800383a <__ieee754_rem_pio2+0x82>
 8003804:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc fd01 	bl	8000210 <__aeabi_dsub>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4680      	mov	r8, r0
 8003814:	4689      	mov	r9, r1
 8003816:	4630      	mov	r0, r6
 8003818:	4639      	mov	r1, r7
 800381a:	f7fc fcf9 	bl	8000210 <__aeabi_dsub>
 800381e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fcf4 	bl	8000210 <__aeabi_dsub>
 8003828:	e9c4 8900 	strd	r8, r9, [r4]
 800382c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003830:	2501      	movs	r5, #1
 8003832:	4628      	mov	r0, r5
 8003834:	b00d      	add	sp, #52	@ 0x34
 8003836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383a:	a39d      	add	r3, pc, #628	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc fce6 	bl	8000210 <__aeabi_dsub>
 8003844:	a39c      	add	r3, pc, #624	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	4606      	mov	r6, r0
 800384c:	460f      	mov	r7, r1
 800384e:	f7fc fcdf 	bl	8000210 <__aeabi_dsub>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4680      	mov	r8, r0
 8003858:	4689      	mov	r9, r1
 800385a:	4630      	mov	r0, r6
 800385c:	4639      	mov	r1, r7
 800385e:	f7fc fcd7 	bl	8000210 <__aeabi_dsub>
 8003862:	a395      	add	r3, pc, #596	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	e7dc      	b.n	8003824 <__ieee754_rem_pio2+0x6c>
 800386a:	f7fc fcd3 	bl	8000214 <__adddf3>
 800386e:	45a8      	cmp	r8, r5
 8003870:	4606      	mov	r6, r0
 8003872:	460f      	mov	r7, r1
 8003874:	d018      	beq.n	80038a8 <__ieee754_rem_pio2+0xf0>
 8003876:	a38c      	add	r3, pc, #560	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	f7fc fcca 	bl	8000214 <__adddf3>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4680      	mov	r8, r0
 8003886:	4689      	mov	r9, r1
 8003888:	4630      	mov	r0, r6
 800388a:	4639      	mov	r1, r7
 800388c:	f7fc fcc0 	bl	8000210 <__aeabi_dsub>
 8003890:	a385      	add	r3, pc, #532	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fcbd 	bl	8000214 <__adddf3>
 800389a:	f04f 35ff 	mov.w	r5, #4294967295
 800389e:	e9c4 8900 	strd	r8, r9, [r4]
 80038a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038a6:	e7c4      	b.n	8003832 <__ieee754_rem_pio2+0x7a>
 80038a8:	a381      	add	r3, pc, #516	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc fcb1 	bl	8000214 <__adddf3>
 80038b2:	a381      	add	r3, pc, #516	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	4606      	mov	r6, r0
 80038ba:	460f      	mov	r7, r1
 80038bc:	f7fc fcaa 	bl	8000214 <__adddf3>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4680      	mov	r8, r0
 80038c6:	4689      	mov	r9, r1
 80038c8:	4630      	mov	r0, r6
 80038ca:	4639      	mov	r1, r7
 80038cc:	f7fc fca0 	bl	8000210 <__aeabi_dsub>
 80038d0:	a379      	add	r3, pc, #484	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	e7de      	b.n	8003896 <__ieee754_rem_pio2+0xde>
 80038d8:	4b82      	ldr	r3, [pc, #520]	@ (8003ae4 <__ieee754_rem_pio2+0x32c>)
 80038da:	4598      	cmp	r8, r3
 80038dc:	f200 80d1 	bhi.w	8003a82 <__ieee754_rem_pio2+0x2ca>
 80038e0:	f000 f966 	bl	8003bb0 <fabs>
 80038e4:	ec57 6b10 	vmov	r6, r7, d0
 80038e8:	a375      	add	r3, pc, #468	@ (adr r3, 8003ac0 <__ieee754_rem_pio2+0x308>)
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	4630      	mov	r0, r6
 80038f0:	4639      	mov	r1, r7
 80038f2:	f7fc fe45 	bl	8000580 <__aeabi_dmul>
 80038f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ae8 <__ieee754_rem_pio2+0x330>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	f7fc fc8b 	bl	8000214 <__adddf3>
 80038fe:	f7fd f8d9 	bl	8000ab4 <__aeabi_d2iz>
 8003902:	4605      	mov	r5, r0
 8003904:	f7fc fdd2 	bl	80004ac <__aeabi_i2d>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003910:	a363      	add	r3, pc, #396	@ (adr r3, 8003aa0 <__ieee754_rem_pio2+0x2e8>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fe33 	bl	8000580 <__aeabi_dmul>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4630      	mov	r0, r6
 8003920:	4639      	mov	r1, r7
 8003922:	f7fc fc75 	bl	8000210 <__aeabi_dsub>
 8003926:	a360      	add	r3, pc, #384	@ (adr r3, 8003aa8 <__ieee754_rem_pio2+0x2f0>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	4682      	mov	sl, r0
 800392e:	468b      	mov	fp, r1
 8003930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003934:	f7fc fe24 	bl	8000580 <__aeabi_dmul>
 8003938:	2d1f      	cmp	r5, #31
 800393a:	4606      	mov	r6, r0
 800393c:	460f      	mov	r7, r1
 800393e:	dc0c      	bgt.n	800395a <__ieee754_rem_pio2+0x1a2>
 8003940:	4b6a      	ldr	r3, [pc, #424]	@ (8003aec <__ieee754_rem_pio2+0x334>)
 8003942:	1e6a      	subs	r2, r5, #1
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	4543      	cmp	r3, r8
 800394a:	d006      	beq.n	800395a <__ieee754_rem_pio2+0x1a2>
 800394c:	4632      	mov	r2, r6
 800394e:	463b      	mov	r3, r7
 8003950:	4650      	mov	r0, sl
 8003952:	4659      	mov	r1, fp
 8003954:	f7fc fc5c 	bl	8000210 <__aeabi_dsub>
 8003958:	e00e      	b.n	8003978 <__ieee754_rem_pio2+0x1c0>
 800395a:	463b      	mov	r3, r7
 800395c:	4632      	mov	r2, r6
 800395e:	4650      	mov	r0, sl
 8003960:	4659      	mov	r1, fp
 8003962:	f7fc fc55 	bl	8000210 <__aeabi_dsub>
 8003966:	ea4f 5328 	mov.w	r3, r8, asr #20
 800396a:	9305      	str	r3, [sp, #20]
 800396c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003970:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003974:	2b10      	cmp	r3, #16
 8003976:	dc02      	bgt.n	800397e <__ieee754_rem_pio2+0x1c6>
 8003978:	e9c4 0100 	strd	r0, r1, [r4]
 800397c:	e039      	b.n	80039f2 <__ieee754_rem_pio2+0x23a>
 800397e:	a34c      	add	r3, pc, #304	@ (adr r3, 8003ab0 <__ieee754_rem_pio2+0x2f8>)
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003988:	f7fc fdfa 	bl	8000580 <__aeabi_dmul>
 800398c:	4606      	mov	r6, r0
 800398e:	460f      	mov	r7, r1
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4650      	mov	r0, sl
 8003996:	4659      	mov	r1, fp
 8003998:	f7fc fc3a 	bl	8000210 <__aeabi_dsub>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4680      	mov	r8, r0
 80039a2:	4689      	mov	r9, r1
 80039a4:	4650      	mov	r0, sl
 80039a6:	4659      	mov	r1, fp
 80039a8:	f7fc fc32 	bl	8000210 <__aeabi_dsub>
 80039ac:	4632      	mov	r2, r6
 80039ae:	463b      	mov	r3, r7
 80039b0:	f7fc fc2e 	bl	8000210 <__aeabi_dsub>
 80039b4:	a340      	add	r3, pc, #256	@ (adr r3, 8003ab8 <__ieee754_rem_pio2+0x300>)
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	4606      	mov	r6, r0
 80039bc:	460f      	mov	r7, r1
 80039be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039c2:	f7fc fddd 	bl	8000580 <__aeabi_dmul>
 80039c6:	4632      	mov	r2, r6
 80039c8:	463b      	mov	r3, r7
 80039ca:	f7fc fc21 	bl	8000210 <__aeabi_dsub>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4606      	mov	r6, r0
 80039d4:	460f      	mov	r7, r1
 80039d6:	4640      	mov	r0, r8
 80039d8:	4649      	mov	r1, r9
 80039da:	f7fc fc19 	bl	8000210 <__aeabi_dsub>
 80039de:	9a05      	ldr	r2, [sp, #20]
 80039e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b31      	cmp	r3, #49	@ 0x31
 80039e8:	dc20      	bgt.n	8003a2c <__ieee754_rem_pio2+0x274>
 80039ea:	e9c4 0100 	strd	r0, r1, [r4]
 80039ee:	46c2      	mov	sl, r8
 80039f0:	46cb      	mov	fp, r9
 80039f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80039f6:	4650      	mov	r0, sl
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	4659      	mov	r1, fp
 80039fe:	f7fc fc07 	bl	8000210 <__aeabi_dsub>
 8003a02:	463b      	mov	r3, r7
 8003a04:	4632      	mov	r2, r6
 8003a06:	f7fc fc03 	bl	8000210 <__aeabi_dsub>
 8003a0a:	9b04      	ldr	r3, [sp, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a12:	f6bf af0e 	bge.w	8003832 <__ieee754_rem_pio2+0x7a>
 8003a16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003a1a:	6063      	str	r3, [r4, #4]
 8003a1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a20:	f8c4 8000 	str.w	r8, [r4]
 8003a24:	60a0      	str	r0, [r4, #8]
 8003a26:	60e3      	str	r3, [r4, #12]
 8003a28:	426d      	negs	r5, r5
 8003a2a:	e702      	b.n	8003832 <__ieee754_rem_pio2+0x7a>
 8003a2c:	a326      	add	r3, pc, #152	@ (adr r3, 8003ac8 <__ieee754_rem_pio2+0x310>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a36:	f7fc fda3 	bl	8000580 <__aeabi_dmul>
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	460f      	mov	r7, r1
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc fbe3 	bl	8000210 <__aeabi_dsub>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4682      	mov	sl, r0
 8003a50:	468b      	mov	fp, r1
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f7fc fbdb 	bl	8000210 <__aeabi_dsub>
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	f7fc fbd7 	bl	8000210 <__aeabi_dsub>
 8003a62:	a31b      	add	r3, pc, #108	@ (adr r3, 8003ad0 <__ieee754_rem_pio2+0x318>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	4606      	mov	r6, r0
 8003a6a:	460f      	mov	r7, r1
 8003a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a70:	f7fc fd86 	bl	8000580 <__aeabi_dmul>
 8003a74:	4632      	mov	r2, r6
 8003a76:	463b      	mov	r3, r7
 8003a78:	f7fc fbca 	bl	8000210 <__aeabi_dsub>
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	e764      	b.n	800394c <__ieee754_rem_pio2+0x194>
 8003a82:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <__ieee754_rem_pio2+0x338>)
 8003a84:	4598      	cmp	r8, r3
 8003a86:	d935      	bls.n	8003af4 <__ieee754_rem_pio2+0x33c>
 8003a88:	4632      	mov	r2, r6
 8003a8a:	463b      	mov	r3, r7
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	4639      	mov	r1, r7
 8003a90:	f7fc fbbe 	bl	8000210 <__aeabi_dsub>
 8003a94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a98:	e9c4 0100 	strd	r0, r1, [r4]
 8003a9c:	e69e      	b.n	80037dc <__ieee754_rem_pio2+0x24>
 8003a9e:	bf00      	nop
 8003aa0:	54400000 	.word	0x54400000
 8003aa4:	3ff921fb 	.word	0x3ff921fb
 8003aa8:	1a626331 	.word	0x1a626331
 8003aac:	3dd0b461 	.word	0x3dd0b461
 8003ab0:	1a600000 	.word	0x1a600000
 8003ab4:	3dd0b461 	.word	0x3dd0b461
 8003ab8:	2e037073 	.word	0x2e037073
 8003abc:	3ba3198a 	.word	0x3ba3198a
 8003ac0:	6dc9c883 	.word	0x6dc9c883
 8003ac4:	3fe45f30 	.word	0x3fe45f30
 8003ac8:	2e000000 	.word	0x2e000000
 8003acc:	3ba3198a 	.word	0x3ba3198a
 8003ad0:	252049c1 	.word	0x252049c1
 8003ad4:	397b839a 	.word	0x397b839a
 8003ad8:	3fe921fb 	.word	0x3fe921fb
 8003adc:	4002d97b 	.word	0x4002d97b
 8003ae0:	3ff921fb 	.word	0x3ff921fb
 8003ae4:	413921fb 	.word	0x413921fb
 8003ae8:	3fe00000 	.word	0x3fe00000
 8003aec:	08004498 	.word	0x08004498
 8003af0:	7fefffff 	.word	0x7fefffff
 8003af4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003af8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003afc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003b00:	4630      	mov	r0, r6
 8003b02:	460f      	mov	r7, r1
 8003b04:	f7fc ffd6 	bl	8000ab4 <__aeabi_d2iz>
 8003b08:	f7fc fcd0 	bl	80004ac <__aeabi_i2d>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4630      	mov	r0, r6
 8003b12:	4639      	mov	r1, r7
 8003b14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b18:	f7fc fb7a 	bl	8000210 <__aeabi_dsub>
 8003b1c:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <__ieee754_rem_pio2+0x3f0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f7fc fd2e 	bl	8000580 <__aeabi_dmul>
 8003b24:	460f      	mov	r7, r1
 8003b26:	4606      	mov	r6, r0
 8003b28:	f7fc ffc4 	bl	8000ab4 <__aeabi_d2iz>
 8003b2c:	f7fc fcbe 	bl	80004ac <__aeabi_i2d>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4630      	mov	r0, r6
 8003b36:	4639      	mov	r1, r7
 8003b38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b3c:	f7fc fb68 	bl	8000210 <__aeabi_dsub>
 8003b40:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <__ieee754_rem_pio2+0x3f0>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	f7fc fd1c 	bl	8000580 <__aeabi_dmul>
 8003b48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003b4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003b50:	f04f 0803 	mov.w	r8, #3
 8003b54:	2600      	movs	r6, #0
 8003b56:	2700      	movs	r7, #0
 8003b58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	463b      	mov	r3, r7
 8003b60:	46c2      	mov	sl, r8
 8003b62:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b66:	f7fc ff73 	bl	8000a50 <__aeabi_dcmpeq>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d1f4      	bne.n	8003b58 <__ieee754_rem_pio2+0x3a0>
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <__ieee754_rem_pio2+0x3f4>)
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2302      	movs	r3, #2
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	462a      	mov	r2, r5
 8003b78:	4653      	mov	r3, sl
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	a806      	add	r0, sp, #24
 8003b7e:	f000 f81f 	bl	8003bc0 <__kernel_rem_pio2>
 8003b82:	9b04      	ldr	r3, [sp, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	4605      	mov	r5, r0
 8003b88:	f6bf ae53 	bge.w	8003832 <__ieee754_rem_pio2+0x7a>
 8003b8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003b90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b94:	e9c4 2300 	strd	r2, r3, [r4]
 8003b98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003ba0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003ba4:	e740      	b.n	8003a28 <__ieee754_rem_pio2+0x270>
 8003ba6:	bf00      	nop
 8003ba8:	41700000 	.word	0x41700000
 8003bac:	08004518 	.word	0x08004518

08003bb0 <fabs>:
 8003bb0:	ec51 0b10 	vmov	r0, r1, d0
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003bba:	ec43 2b10 	vmov	d0, r2, r3
 8003bbe:	4770      	bx	lr

08003bc0 <__kernel_rem_pio2>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	ed2d 8b02 	vpush	{d8}
 8003bc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003bcc:	f112 0f14 	cmn.w	r2, #20
 8003bd0:	9306      	str	r3, [sp, #24]
 8003bd2:	9104      	str	r1, [sp, #16]
 8003bd4:	4bbe      	ldr	r3, [pc, #760]	@ (8003ed0 <__kernel_rem_pio2+0x310>)
 8003bd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003bd8:	9008      	str	r0, [sp, #32]
 8003bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	9b06      	ldr	r3, [sp, #24]
 8003be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003be6:	bfa8      	it	ge
 8003be8:	1ed4      	subge	r4, r2, #3
 8003bea:	9305      	str	r3, [sp, #20]
 8003bec:	bfb2      	itee	lt
 8003bee:	2400      	movlt	r4, #0
 8003bf0:	2318      	movge	r3, #24
 8003bf2:	fb94 f4f3 	sdivge	r4, r4, r3
 8003bf6:	f06f 0317 	mvn.w	r3, #23
 8003bfa:	fb04 3303 	mla	r3, r4, r3, r3
 8003bfe:	eb03 0b02 	add.w	fp, r3, r2
 8003c02:	9b00      	ldr	r3, [sp, #0]
 8003c04:	9a05      	ldr	r2, [sp, #20]
 8003c06:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003ec0 <__kernel_rem_pio2+0x300>
 8003c0a:	eb03 0802 	add.w	r8, r3, r2
 8003c0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003c10:	1aa7      	subs	r7, r4, r2
 8003c12:	ae20      	add	r6, sp, #128	@ 0x80
 8003c14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003c18:	2500      	movs	r5, #0
 8003c1a:	4545      	cmp	r5, r8
 8003c1c:	dd13      	ble.n	8003c46 <__kernel_rem_pio2+0x86>
 8003c1e:	9b06      	ldr	r3, [sp, #24]
 8003c20:	aa20      	add	r2, sp, #128	@ 0x80
 8003c22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003c26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003c2a:	f04f 0800 	mov.w	r8, #0
 8003c2e:	9b00      	ldr	r3, [sp, #0]
 8003c30:	4598      	cmp	r8, r3
 8003c32:	dc31      	bgt.n	8003c98 <__kernel_rem_pio2+0xd8>
 8003c34:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003ec0 <__kernel_rem_pio2+0x300>
 8003c38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c40:	462f      	mov	r7, r5
 8003c42:	2600      	movs	r6, #0
 8003c44:	e01b      	b.n	8003c7e <__kernel_rem_pio2+0xbe>
 8003c46:	42ef      	cmn	r7, r5
 8003c48:	d407      	bmi.n	8003c5a <__kernel_rem_pio2+0x9a>
 8003c4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003c4e:	f7fc fc2d 	bl	80004ac <__aeabi_i2d>
 8003c52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003c56:	3501      	adds	r5, #1
 8003c58:	e7df      	b.n	8003c1a <__kernel_rem_pio2+0x5a>
 8003c5a:	ec51 0b18 	vmov	r0, r1, d8
 8003c5e:	e7f8      	b.n	8003c52 <__kernel_rem_pio2+0x92>
 8003c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003c68:	f7fc fc8a 	bl	8000580 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c74:	f7fc face 	bl	8000214 <__adddf3>
 8003c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7c:	3601      	adds	r6, #1
 8003c7e:	9b05      	ldr	r3, [sp, #20]
 8003c80:	429e      	cmp	r6, r3
 8003c82:	f1a7 0708 	sub.w	r7, r7, #8
 8003c86:	ddeb      	ble.n	8003c60 <__kernel_rem_pio2+0xa0>
 8003c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c8c:	f108 0801 	add.w	r8, r8, #1
 8003c90:	ecaa 7b02 	vstmia	sl!, {d7}
 8003c94:	3508      	adds	r5, #8
 8003c96:	e7ca      	b.n	8003c2e <__kernel_rem_pio2+0x6e>
 8003c98:	9b00      	ldr	r3, [sp, #0]
 8003c9a:	f8dd 8000 	ldr.w	r8, [sp]
 8003c9e:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ca6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003ca8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cb4:	ab98      	add	r3, sp, #608	@ 0x260
 8003cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003cba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003cbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003cc2:	ac0c      	add	r4, sp, #48	@ 0x30
 8003cc4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003cc6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003cca:	46a1      	mov	r9, r4
 8003ccc:	46c2      	mov	sl, r8
 8003cce:	f1ba 0f00 	cmp.w	sl, #0
 8003cd2:	f1a5 0508 	sub.w	r5, r5, #8
 8003cd6:	dc77      	bgt.n	8003dc8 <__kernel_rem_pio2+0x208>
 8003cd8:	4658      	mov	r0, fp
 8003cda:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003cde:	f000 fac7 	bl	8004270 <scalbn>
 8003ce2:	ec57 6b10 	vmov	r6, r7, d0
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003cec:	4630      	mov	r0, r6
 8003cee:	4639      	mov	r1, r7
 8003cf0:	f7fc fc46 	bl	8000580 <__aeabi_dmul>
 8003cf4:	ec41 0b10 	vmov	d0, r0, r1
 8003cf8:	f000 fb3a 	bl	8004370 <floor>
 8003cfc:	4b75      	ldr	r3, [pc, #468]	@ (8003ed4 <__kernel_rem_pio2+0x314>)
 8003cfe:	ec51 0b10 	vmov	r0, r1, d0
 8003d02:	2200      	movs	r2, #0
 8003d04:	f7fc fc3c 	bl	8000580 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4639      	mov	r1, r7
 8003d10:	f7fc fa7e 	bl	8000210 <__aeabi_dsub>
 8003d14:	460f      	mov	r7, r1
 8003d16:	4606      	mov	r6, r0
 8003d18:	f7fc fecc 	bl	8000ab4 <__aeabi_d2iz>
 8003d1c:	9002      	str	r0, [sp, #8]
 8003d1e:	f7fc fbc5 	bl	80004ac <__aeabi_i2d>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4630      	mov	r0, r6
 8003d28:	4639      	mov	r1, r7
 8003d2a:	f7fc fa71 	bl	8000210 <__aeabi_dsub>
 8003d2e:	f1bb 0f00 	cmp.w	fp, #0
 8003d32:	4606      	mov	r6, r0
 8003d34:	460f      	mov	r7, r1
 8003d36:	dd6c      	ble.n	8003e12 <__kernel_rem_pio2+0x252>
 8003d38:	f108 31ff 	add.w	r1, r8, #4294967295
 8003d3c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d3e:	9d02      	ldr	r5, [sp, #8]
 8003d40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d44:	f1cb 0018 	rsb	r0, fp, #24
 8003d48:	fa43 f200 	asr.w	r2, r3, r0
 8003d4c:	4415      	add	r5, r2
 8003d4e:	4082      	lsls	r2, r0
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	aa0c      	add	r2, sp, #48	@ 0x30
 8003d54:	9502      	str	r5, [sp, #8]
 8003d56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003d5a:	f1cb 0217 	rsb	r2, fp, #23
 8003d5e:	fa43 f902 	asr.w	r9, r3, r2
 8003d62:	f1b9 0f00 	cmp.w	r9, #0
 8003d66:	dd64      	ble.n	8003e32 <__kernel_rem_pio2+0x272>
 8003d68:	9b02      	ldr	r3, [sp, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	4615      	mov	r5, r2
 8003d72:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003d76:	4590      	cmp	r8, r2
 8003d78:	f300 80b8 	bgt.w	8003eec <__kernel_rem_pio2+0x32c>
 8003d7c:	f1bb 0f00 	cmp.w	fp, #0
 8003d80:	dd07      	ble.n	8003d92 <__kernel_rem_pio2+0x1d2>
 8003d82:	f1bb 0f01 	cmp.w	fp, #1
 8003d86:	f000 80bf 	beq.w	8003f08 <__kernel_rem_pio2+0x348>
 8003d8a:	f1bb 0f02 	cmp.w	fp, #2
 8003d8e:	f000 80c6 	beq.w	8003f1e <__kernel_rem_pio2+0x35e>
 8003d92:	f1b9 0f02 	cmp.w	r9, #2
 8003d96:	d14c      	bne.n	8003e32 <__kernel_rem_pio2+0x272>
 8003d98:	4632      	mov	r2, r6
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	494e      	ldr	r1, [pc, #312]	@ (8003ed8 <__kernel_rem_pio2+0x318>)
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7fc fa36 	bl	8000210 <__aeabi_dsub>
 8003da4:	4606      	mov	r6, r0
 8003da6:	460f      	mov	r7, r1
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d042      	beq.n	8003e32 <__kernel_rem_pio2+0x272>
 8003dac:	4658      	mov	r0, fp
 8003dae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003ec8 <__kernel_rem_pio2+0x308>
 8003db2:	f000 fa5d 	bl	8004270 <scalbn>
 8003db6:	4630      	mov	r0, r6
 8003db8:	4639      	mov	r1, r7
 8003dba:	ec53 2b10 	vmov	r2, r3, d0
 8003dbe:	f7fc fa27 	bl	8000210 <__aeabi_dsub>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	460f      	mov	r7, r1
 8003dc6:	e034      	b.n	8003e32 <__kernel_rem_pio2+0x272>
 8003dc8:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <__kernel_rem_pio2+0x31c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd0:	f7fc fbd6 	bl	8000580 <__aeabi_dmul>
 8003dd4:	f7fc fe6e 	bl	8000ab4 <__aeabi_d2iz>
 8003dd8:	f7fc fb68 	bl	80004ac <__aeabi_i2d>
 8003ddc:	4b40      	ldr	r3, [pc, #256]	@ (8003ee0 <__kernel_rem_pio2+0x320>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	f7fc fbcc 	bl	8000580 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003df0:	f7fc fa0e 	bl	8000210 <__aeabi_dsub>
 8003df4:	f7fc fe5e 	bl	8000ab4 <__aeabi_d2iz>
 8003df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dfc:	f849 0b04 	str.w	r0, [r9], #4
 8003e00:	4639      	mov	r1, r7
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7fc fa06 	bl	8000214 <__adddf3>
 8003e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e10:	e75d      	b.n	8003cce <__kernel_rem_pio2+0x10e>
 8003e12:	d107      	bne.n	8003e24 <__kernel_rem_pio2+0x264>
 8003e14:	f108 33ff 	add.w	r3, r8, #4294967295
 8003e18:	aa0c      	add	r2, sp, #48	@ 0x30
 8003e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003e22:	e79e      	b.n	8003d62 <__kernel_rem_pio2+0x1a2>
 8003e24:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee4 <__kernel_rem_pio2+0x324>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f7fc fe30 	bl	8000a8c <__aeabi_dcmpge>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d143      	bne.n	8003eb8 <__kernel_rem_pio2+0x2f8>
 8003e30:	4681      	mov	r9, r0
 8003e32:	2200      	movs	r2, #0
 8003e34:	2300      	movs	r3, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	f7fc fe09 	bl	8000a50 <__aeabi_dcmpeq>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	f000 80bf 	beq.w	8003fc2 <__kernel_rem_pio2+0x402>
 8003e44:	f108 33ff 	add.w	r3, r8, #4294967295
 8003e48:	2200      	movs	r2, #0
 8003e4a:	9900      	ldr	r1, [sp, #0]
 8003e4c:	428b      	cmp	r3, r1
 8003e4e:	da6e      	bge.n	8003f2e <__kernel_rem_pio2+0x36e>
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	f000 8089 	beq.w	8003f68 <__kernel_rem_pio2+0x3a8>
 8003e56:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003e5c:	f1ab 0b18 	sub.w	fp, fp, #24
 8003e60:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f6      	beq.n	8003e56 <__kernel_rem_pio2+0x296>
 8003e68:	4658      	mov	r0, fp
 8003e6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003ec8 <__kernel_rem_pio2+0x308>
 8003e6e:	f000 f9ff 	bl	8004270 <scalbn>
 8003e72:	f108 0301 	add.w	r3, r8, #1
 8003e76:	00da      	lsls	r2, r3, #3
 8003e78:	9205      	str	r2, [sp, #20]
 8003e7a:	ec55 4b10 	vmov	r4, r5, d0
 8003e7e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003e80:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003edc <__kernel_rem_pio2+0x31c>
 8003e84:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003e88:	4646      	mov	r6, r8
 8003e8a:	f04f 0a00 	mov.w	sl, #0
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	f280 80cf 	bge.w	8004032 <__kernel_rem_pio2+0x472>
 8003e94:	4644      	mov	r4, r8
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	f2c0 80fd 	blt.w	8004096 <__kernel_rem_pio2+0x4d6>
 8003e9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <__kernel_rem_pio2+0x328>)
 8003e9e:	461f      	mov	r7, r3
 8003ea0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003ea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ea6:	9306      	str	r3, [sp, #24]
 8003ea8:	f04f 0a00 	mov.w	sl, #0
 8003eac:	f04f 0b00 	mov.w	fp, #0
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	eba8 0504 	sub.w	r5, r8, r4
 8003eb6:	e0e2      	b.n	800407e <__kernel_rem_pio2+0x4be>
 8003eb8:	f04f 0902 	mov.w	r9, #2
 8003ebc:	e754      	b.n	8003d68 <__kernel_rem_pio2+0x1a8>
 8003ebe:	bf00      	nop
	...
 8003ecc:	3ff00000 	.word	0x3ff00000
 8003ed0:	08004660 	.word	0x08004660
 8003ed4:	40200000 	.word	0x40200000
 8003ed8:	3ff00000 	.word	0x3ff00000
 8003edc:	3e700000 	.word	0x3e700000
 8003ee0:	41700000 	.word	0x41700000
 8003ee4:	3fe00000 	.word	0x3fe00000
 8003ee8:	08004620 	.word	0x08004620
 8003eec:	f854 3b04 	ldr.w	r3, [r4], #4
 8003ef0:	b945      	cbnz	r5, 8003f04 <__kernel_rem_pio2+0x344>
 8003ef2:	b123      	cbz	r3, 8003efe <__kernel_rem_pio2+0x33e>
 8003ef4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003ef8:	f844 3c04 	str.w	r3, [r4, #-4]
 8003efc:	2301      	movs	r3, #1
 8003efe:	3201      	adds	r2, #1
 8003f00:	461d      	mov	r5, r3
 8003f02:	e738      	b.n	8003d76 <__kernel_rem_pio2+0x1b6>
 8003f04:	1acb      	subs	r3, r1, r3
 8003f06:	e7f7      	b.n	8003ef8 <__kernel_rem_pio2+0x338>
 8003f08:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003f16:	a90c      	add	r1, sp, #48	@ 0x30
 8003f18:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f1c:	e739      	b.n	8003d92 <__kernel_rem_pio2+0x1d2>
 8003f1e:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f22:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003f2c:	e7f3      	b.n	8003f16 <__kernel_rem_pio2+0x356>
 8003f2e:	a90c      	add	r1, sp, #48	@ 0x30
 8003f30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	430a      	orrs	r2, r1
 8003f38:	e787      	b.n	8003e4a <__kernel_rem_pio2+0x28a>
 8003f3a:	3401      	adds	r4, #1
 8003f3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d0fa      	beq.n	8003f3a <__kernel_rem_pio2+0x37a>
 8003f44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f46:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f4a:	eb0d 0503 	add.w	r5, sp, r3
 8003f4e:	9b06      	ldr	r3, [sp, #24]
 8003f50:	aa20      	add	r2, sp, #128	@ 0x80
 8003f52:	4443      	add	r3, r8
 8003f54:	f108 0701 	add.w	r7, r8, #1
 8003f58:	3d98      	subs	r5, #152	@ 0x98
 8003f5a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003f5e:	4444      	add	r4, r8
 8003f60:	42bc      	cmp	r4, r7
 8003f62:	da04      	bge.n	8003f6e <__kernel_rem_pio2+0x3ae>
 8003f64:	46a0      	mov	r8, r4
 8003f66:	e6a2      	b.n	8003cae <__kernel_rem_pio2+0xee>
 8003f68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f6a:	2401      	movs	r4, #1
 8003f6c:	e7e6      	b.n	8003f3c <__kernel_rem_pio2+0x37c>
 8003f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003f74:	f7fc fa9a 	bl	80004ac <__aeabi_i2d>
 8003f78:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004240 <__kernel_rem_pio2+0x680>
 8003f7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f88:	46b2      	mov	sl, r6
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	9b05      	ldr	r3, [sp, #20]
 8003f90:	4598      	cmp	r8, r3
 8003f92:	dd05      	ble.n	8003fa0 <__kernel_rem_pio2+0x3e0>
 8003f94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f98:	3701      	adds	r7, #1
 8003f9a:	eca5 7b02 	vstmia	r5!, {d7}
 8003f9e:	e7df      	b.n	8003f60 <__kernel_rem_pio2+0x3a0>
 8003fa0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003fa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003fa8:	f7fc faea 	bl	8000580 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fb4:	f7fc f92e 	bl	8000214 <__adddf3>
 8003fb8:	f108 0801 	add.w	r8, r8, #1
 8003fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc0:	e7e5      	b.n	8003f8e <__kernel_rem_pio2+0x3ce>
 8003fc2:	f1cb 0000 	rsb	r0, fp, #0
 8003fc6:	ec47 6b10 	vmov	d0, r6, r7
 8003fca:	f000 f951 	bl	8004270 <scalbn>
 8003fce:	ec55 4b10 	vmov	r4, r5, d0
 8003fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8004248 <__kernel_rem_pio2+0x688>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc fd57 	bl	8000a8c <__aeabi_dcmpge>
 8003fde:	b300      	cbz	r0, 8004022 <__kernel_rem_pio2+0x462>
 8003fe0:	4b9a      	ldr	r3, [pc, #616]	@ (800424c <__kernel_rem_pio2+0x68c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7fc faca 	bl	8000580 <__aeabi_dmul>
 8003fec:	f7fc fd62 	bl	8000ab4 <__aeabi_d2iz>
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	f7fc fa5b 	bl	80004ac <__aeabi_i2d>
 8003ff6:	4b94      	ldr	r3, [pc, #592]	@ (8004248 <__kernel_rem_pio2+0x688>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f7fc fac1 	bl	8000580 <__aeabi_dmul>
 8003ffe:	460b      	mov	r3, r1
 8004000:	4602      	mov	r2, r0
 8004002:	4629      	mov	r1, r5
 8004004:	4620      	mov	r0, r4
 8004006:	f7fc f903 	bl	8000210 <__aeabi_dsub>
 800400a:	f7fc fd53 	bl	8000ab4 <__aeabi_d2iz>
 800400e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004010:	f10b 0b18 	add.w	fp, fp, #24
 8004014:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004018:	f108 0801 	add.w	r8, r8, #1
 800401c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004020:	e722      	b.n	8003e68 <__kernel_rem_pio2+0x2a8>
 8004022:	4620      	mov	r0, r4
 8004024:	4629      	mov	r1, r5
 8004026:	f7fc fd45 	bl	8000ab4 <__aeabi_d2iz>
 800402a:	ab0c      	add	r3, sp, #48	@ 0x30
 800402c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004030:	e71a      	b.n	8003e68 <__kernel_rem_pio2+0x2a8>
 8004032:	ab0c      	add	r3, sp, #48	@ 0x30
 8004034:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004038:	f7fc fa38 	bl	80004ac <__aeabi_i2d>
 800403c:	4622      	mov	r2, r4
 800403e:	462b      	mov	r3, r5
 8004040:	f7fc fa9e 	bl	8000580 <__aeabi_dmul>
 8004044:	4652      	mov	r2, sl
 8004046:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800404a:	465b      	mov	r3, fp
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	f7fc fa96 	bl	8000580 <__aeabi_dmul>
 8004054:	3e01      	subs	r6, #1
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	e718      	b.n	8003e8e <__kernel_rem_pio2+0x2ce>
 800405c:	9906      	ldr	r1, [sp, #24]
 800405e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004062:	9106      	str	r1, [sp, #24]
 8004064:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004068:	f7fc fa8a 	bl	8000580 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4650      	mov	r0, sl
 8004072:	4659      	mov	r1, fp
 8004074:	f7fc f8ce 	bl	8000214 <__adddf3>
 8004078:	3601      	adds	r6, #1
 800407a:	4682      	mov	sl, r0
 800407c:	468b      	mov	fp, r1
 800407e:	9b00      	ldr	r3, [sp, #0]
 8004080:	429e      	cmp	r6, r3
 8004082:	dc01      	bgt.n	8004088 <__kernel_rem_pio2+0x4c8>
 8004084:	42b5      	cmp	r5, r6
 8004086:	dae9      	bge.n	800405c <__kernel_rem_pio2+0x49c>
 8004088:	ab48      	add	r3, sp, #288	@ 0x120
 800408a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800408e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004092:	3c01      	subs	r4, #1
 8004094:	e6ff      	b.n	8003e96 <__kernel_rem_pio2+0x2d6>
 8004096:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004098:	2b02      	cmp	r3, #2
 800409a:	dc0b      	bgt.n	80040b4 <__kernel_rem_pio2+0x4f4>
 800409c:	2b00      	cmp	r3, #0
 800409e:	dc39      	bgt.n	8004114 <__kernel_rem_pio2+0x554>
 80040a0:	d05d      	beq.n	800415e <__kernel_rem_pio2+0x59e>
 80040a2:	9b02      	ldr	r3, [sp, #8]
 80040a4:	f003 0007 	and.w	r0, r3, #7
 80040a8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80040ac:	ecbd 8b02 	vpop	{d8}
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d1f3      	bne.n	80040a2 <__kernel_rem_pio2+0x4e2>
 80040ba:	9b05      	ldr	r3, [sp, #20]
 80040bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80040c0:	eb0d 0403 	add.w	r4, sp, r3
 80040c4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80040c8:	4625      	mov	r5, r4
 80040ca:	46c2      	mov	sl, r8
 80040cc:	f1ba 0f00 	cmp.w	sl, #0
 80040d0:	f1a5 0508 	sub.w	r5, r5, #8
 80040d4:	dc6b      	bgt.n	80041ae <__kernel_rem_pio2+0x5ee>
 80040d6:	4645      	mov	r5, r8
 80040d8:	2d01      	cmp	r5, #1
 80040da:	f1a4 0408 	sub.w	r4, r4, #8
 80040de:	f300 8087 	bgt.w	80041f0 <__kernel_rem_pio2+0x630>
 80040e2:	9c05      	ldr	r4, [sp, #20]
 80040e4:	ab48      	add	r3, sp, #288	@ 0x120
 80040e6:	441c      	add	r4, r3
 80040e8:	2000      	movs	r0, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	f1b8 0f01 	cmp.w	r8, #1
 80040f0:	f300 809c 	bgt.w	800422c <__kernel_rem_pio2+0x66c>
 80040f4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80040f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80040fc:	f1b9 0f00 	cmp.w	r9, #0
 8004100:	f040 80a6 	bne.w	8004250 <__kernel_rem_pio2+0x690>
 8004104:	9b04      	ldr	r3, [sp, #16]
 8004106:	e9c3 7800 	strd	r7, r8, [r3]
 800410a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800410e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004112:	e7c6      	b.n	80040a2 <__kernel_rem_pio2+0x4e2>
 8004114:	9d05      	ldr	r5, [sp, #20]
 8004116:	ab48      	add	r3, sp, #288	@ 0x120
 8004118:	441d      	add	r5, r3
 800411a:	4644      	mov	r4, r8
 800411c:	2000      	movs	r0, #0
 800411e:	2100      	movs	r1, #0
 8004120:	2c00      	cmp	r4, #0
 8004122:	da35      	bge.n	8004190 <__kernel_rem_pio2+0x5d0>
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	d038      	beq.n	800419c <__kernel_rem_pio2+0x5dc>
 800412a:	4602      	mov	r2, r0
 800412c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004130:	9c04      	ldr	r4, [sp, #16]
 8004132:	e9c4 2300 	strd	r2, r3, [r4]
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800413e:	f7fc f867 	bl	8000210 <__aeabi_dsub>
 8004142:	ad4a      	add	r5, sp, #296	@ 0x128
 8004144:	2401      	movs	r4, #1
 8004146:	45a0      	cmp	r8, r4
 8004148:	da2b      	bge.n	80041a2 <__kernel_rem_pio2+0x5e2>
 800414a:	f1b9 0f00 	cmp.w	r9, #0
 800414e:	d002      	beq.n	8004156 <__kernel_rem_pio2+0x596>
 8004150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004154:	4619      	mov	r1, r3
 8004156:	9b04      	ldr	r3, [sp, #16]
 8004158:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800415c:	e7a1      	b.n	80040a2 <__kernel_rem_pio2+0x4e2>
 800415e:	9c05      	ldr	r4, [sp, #20]
 8004160:	ab48      	add	r3, sp, #288	@ 0x120
 8004162:	441c      	add	r4, r3
 8004164:	2000      	movs	r0, #0
 8004166:	2100      	movs	r1, #0
 8004168:	f1b8 0f00 	cmp.w	r8, #0
 800416c:	da09      	bge.n	8004182 <__kernel_rem_pio2+0x5c2>
 800416e:	f1b9 0f00 	cmp.w	r9, #0
 8004172:	d002      	beq.n	800417a <__kernel_rem_pio2+0x5ba>
 8004174:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004178:	4619      	mov	r1, r3
 800417a:	9b04      	ldr	r3, [sp, #16]
 800417c:	e9c3 0100 	strd	r0, r1, [r3]
 8004180:	e78f      	b.n	80040a2 <__kernel_rem_pio2+0x4e2>
 8004182:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004186:	f7fc f845 	bl	8000214 <__adddf3>
 800418a:	f108 38ff 	add.w	r8, r8, #4294967295
 800418e:	e7eb      	b.n	8004168 <__kernel_rem_pio2+0x5a8>
 8004190:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004194:	f7fc f83e 	bl	8000214 <__adddf3>
 8004198:	3c01      	subs	r4, #1
 800419a:	e7c1      	b.n	8004120 <__kernel_rem_pio2+0x560>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	e7c6      	b.n	8004130 <__kernel_rem_pio2+0x570>
 80041a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80041a6:	f7fc f835 	bl	8000214 <__adddf3>
 80041aa:	3401      	adds	r4, #1
 80041ac:	e7cb      	b.n	8004146 <__kernel_rem_pio2+0x586>
 80041ae:	ed95 7b00 	vldr	d7, [r5]
 80041b2:	ed8d 7b00 	vstr	d7, [sp]
 80041b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80041ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041be:	ec53 2b17 	vmov	r2, r3, d7
 80041c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80041c6:	f7fc f825 	bl	8000214 <__adddf3>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4606      	mov	r6, r0
 80041d0:	460f      	mov	r7, r1
 80041d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041d6:	f7fc f81b 	bl	8000210 <__aeabi_dsub>
 80041da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041de:	f7fc f819 	bl	8000214 <__adddf3>
 80041e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80041ea:	e9c5 6700 	strd	r6, r7, [r5]
 80041ee:	e76d      	b.n	80040cc <__kernel_rem_pio2+0x50c>
 80041f0:	ed94 7b00 	vldr	d7, [r4]
 80041f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80041f8:	ec51 0b17 	vmov	r0, r1, d7
 80041fc:	4652      	mov	r2, sl
 80041fe:	465b      	mov	r3, fp
 8004200:	ed8d 7b00 	vstr	d7, [sp]
 8004204:	f7fc f806 	bl	8000214 <__adddf3>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4606      	mov	r6, r0
 800420e:	460f      	mov	r7, r1
 8004210:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004214:	f7fb fffc 	bl	8000210 <__aeabi_dsub>
 8004218:	4652      	mov	r2, sl
 800421a:	465b      	mov	r3, fp
 800421c:	f7fb fffa 	bl	8000214 <__adddf3>
 8004220:	3d01      	subs	r5, #1
 8004222:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004226:	e9c4 6700 	strd	r6, r7, [r4]
 800422a:	e755      	b.n	80040d8 <__kernel_rem_pio2+0x518>
 800422c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004230:	f7fb fff0 	bl	8000214 <__adddf3>
 8004234:	f108 38ff 	add.w	r8, r8, #4294967295
 8004238:	e758      	b.n	80040ec <__kernel_rem_pio2+0x52c>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
	...
 8004248:	41700000 	.word	0x41700000
 800424c:	3e700000 	.word	0x3e700000
 8004250:	9b04      	ldr	r3, [sp, #16]
 8004252:	9a04      	ldr	r2, [sp, #16]
 8004254:	601f      	str	r7, [r3, #0]
 8004256:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800425a:	605c      	str	r4, [r3, #4]
 800425c:	609d      	str	r5, [r3, #8]
 800425e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004268:	6110      	str	r0, [r2, #16]
 800426a:	6153      	str	r3, [r2, #20]
 800426c:	e719      	b.n	80040a2 <__kernel_rem_pio2+0x4e2>
 800426e:	bf00      	nop

08004270 <scalbn>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	ec55 4b10 	vmov	r4, r5, d0
 8004276:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800427a:	4606      	mov	r6, r0
 800427c:	462b      	mov	r3, r5
 800427e:	b991      	cbnz	r1, 80042a6 <scalbn+0x36>
 8004280:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004284:	4323      	orrs	r3, r4
 8004286:	d03d      	beq.n	8004304 <scalbn+0x94>
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <scalbn+0xf0>)
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	2200      	movs	r2, #0
 8004290:	f7fc f976 	bl	8000580 <__aeabi_dmul>
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <scalbn+0xf4>)
 8004296:	429e      	cmp	r6, r3
 8004298:	4604      	mov	r4, r0
 800429a:	460d      	mov	r5, r1
 800429c:	da0f      	bge.n	80042be <scalbn+0x4e>
 800429e:	a328      	add	r3, pc, #160	@ (adr r3, 8004340 <scalbn+0xd0>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	e01e      	b.n	80042e4 <scalbn+0x74>
 80042a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80042aa:	4291      	cmp	r1, r2
 80042ac:	d10b      	bne.n	80042c6 <scalbn+0x56>
 80042ae:	4622      	mov	r2, r4
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f7fb ffae 	bl	8000214 <__adddf3>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	e022      	b.n	8004304 <scalbn+0x94>
 80042be:	460b      	mov	r3, r1
 80042c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80042c4:	3936      	subs	r1, #54	@ 0x36
 80042c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80042ca:	4296      	cmp	r6, r2
 80042cc:	dd0d      	ble.n	80042ea <scalbn+0x7a>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004348 <scalbn+0xd8>)
 80042d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042d6:	da02      	bge.n	80042de <scalbn+0x6e>
 80042d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004350 <scalbn+0xe0>)
 80042da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042de:	a31a      	add	r3, pc, #104	@ (adr r3, 8004348 <scalbn+0xd8>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fc f94c 	bl	8000580 <__aeabi_dmul>
 80042e8:	e7e6      	b.n	80042b8 <scalbn+0x48>
 80042ea:	1872      	adds	r2, r6, r1
 80042ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80042f0:	428a      	cmp	r2, r1
 80042f2:	dcec      	bgt.n	80042ce <scalbn+0x5e>
 80042f4:	2a00      	cmp	r2, #0
 80042f6:	dd08      	ble.n	800430a <scalbn+0x9a>
 80042f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80042fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004300:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004304:	ec45 4b10 	vmov	d0, r4, r5
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800430e:	da08      	bge.n	8004322 <scalbn+0xb2>
 8004310:	2d00      	cmp	r5, #0
 8004312:	a10b      	add	r1, pc, #44	@ (adr r1, 8004340 <scalbn+0xd0>)
 8004314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004318:	dac1      	bge.n	800429e <scalbn+0x2e>
 800431a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004358 <scalbn+0xe8>)
 800431c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004320:	e7bd      	b.n	800429e <scalbn+0x2e>
 8004322:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004326:	3236      	adds	r2, #54	@ 0x36
 8004328:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800432c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004330:	4620      	mov	r0, r4
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <scalbn+0xf8>)
 8004334:	4629      	mov	r1, r5
 8004336:	2200      	movs	r2, #0
 8004338:	e7d4      	b.n	80042e4 <scalbn+0x74>
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w
 8004340:	c2f8f359 	.word	0xc2f8f359
 8004344:	01a56e1f 	.word	0x01a56e1f
 8004348:	8800759c 	.word	0x8800759c
 800434c:	7e37e43c 	.word	0x7e37e43c
 8004350:	8800759c 	.word	0x8800759c
 8004354:	fe37e43c 	.word	0xfe37e43c
 8004358:	c2f8f359 	.word	0xc2f8f359
 800435c:	81a56e1f 	.word	0x81a56e1f
 8004360:	43500000 	.word	0x43500000
 8004364:	ffff3cb0 	.word	0xffff3cb0
 8004368:	3c900000 	.word	0x3c900000
 800436c:	00000000 	.word	0x00000000

08004370 <floor>:
 8004370:	ec51 0b10 	vmov	r0, r1, d0
 8004374:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004380:	2e13      	cmp	r6, #19
 8004382:	460c      	mov	r4, r1
 8004384:	4605      	mov	r5, r0
 8004386:	4680      	mov	r8, r0
 8004388:	dc34      	bgt.n	80043f4 <floor+0x84>
 800438a:	2e00      	cmp	r6, #0
 800438c:	da17      	bge.n	80043be <floor+0x4e>
 800438e:	a332      	add	r3, pc, #200	@ (adr r3, 8004458 <floor+0xe8>)
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f7fb ff3e 	bl	8000214 <__adddf3>
 8004398:	2200      	movs	r2, #0
 800439a:	2300      	movs	r3, #0
 800439c:	f7fc fb80 	bl	8000aa0 <__aeabi_dcmpgt>
 80043a0:	b150      	cbz	r0, 80043b8 <floor+0x48>
 80043a2:	2c00      	cmp	r4, #0
 80043a4:	da55      	bge.n	8004452 <floor+0xe2>
 80043a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80043aa:	432c      	orrs	r4, r5
 80043ac:	2500      	movs	r5, #0
 80043ae:	42ac      	cmp	r4, r5
 80043b0:	4c2b      	ldr	r4, [pc, #172]	@ (8004460 <floor+0xf0>)
 80043b2:	bf08      	it	eq
 80043b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80043b8:	4621      	mov	r1, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	e023      	b.n	8004406 <floor+0x96>
 80043be:	4f29      	ldr	r7, [pc, #164]	@ (8004464 <floor+0xf4>)
 80043c0:	4137      	asrs	r7, r6
 80043c2:	ea01 0307 	and.w	r3, r1, r7
 80043c6:	4303      	orrs	r3, r0
 80043c8:	d01d      	beq.n	8004406 <floor+0x96>
 80043ca:	a323      	add	r3, pc, #140	@ (adr r3, 8004458 <floor+0xe8>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fb ff20 	bl	8000214 <__adddf3>
 80043d4:	2200      	movs	r2, #0
 80043d6:	2300      	movs	r3, #0
 80043d8:	f7fc fb62 	bl	8000aa0 <__aeabi_dcmpgt>
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0eb      	beq.n	80043b8 <floor+0x48>
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	bfbe      	ittt	lt
 80043e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80043e8:	4133      	asrlt	r3, r6
 80043ea:	18e4      	addlt	r4, r4, r3
 80043ec:	ea24 0407 	bic.w	r4, r4, r7
 80043f0:	2500      	movs	r5, #0
 80043f2:	e7e1      	b.n	80043b8 <floor+0x48>
 80043f4:	2e33      	cmp	r6, #51	@ 0x33
 80043f6:	dd0a      	ble.n	800440e <floor+0x9e>
 80043f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80043fc:	d103      	bne.n	8004406 <floor+0x96>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	f7fb ff07 	bl	8000214 <__adddf3>
 8004406:	ec41 0b10 	vmov	d0, r0, r1
 800440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800440e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004412:	f04f 37ff 	mov.w	r7, #4294967295
 8004416:	40df      	lsrs	r7, r3
 8004418:	4207      	tst	r7, r0
 800441a:	d0f4      	beq.n	8004406 <floor+0x96>
 800441c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004458 <floor+0xe8>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fb fef7 	bl	8000214 <__adddf3>
 8004426:	2200      	movs	r2, #0
 8004428:	2300      	movs	r3, #0
 800442a:	f7fc fb39 	bl	8000aa0 <__aeabi_dcmpgt>
 800442e:	2800      	cmp	r0, #0
 8004430:	d0c2      	beq.n	80043b8 <floor+0x48>
 8004432:	2c00      	cmp	r4, #0
 8004434:	da0a      	bge.n	800444c <floor+0xdc>
 8004436:	2e14      	cmp	r6, #20
 8004438:	d101      	bne.n	800443e <floor+0xce>
 800443a:	3401      	adds	r4, #1
 800443c:	e006      	b.n	800444c <floor+0xdc>
 800443e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004442:	2301      	movs	r3, #1
 8004444:	40b3      	lsls	r3, r6
 8004446:	441d      	add	r5, r3
 8004448:	4545      	cmp	r5, r8
 800444a:	d3f6      	bcc.n	800443a <floor+0xca>
 800444c:	ea25 0507 	bic.w	r5, r5, r7
 8004450:	e7b2      	b.n	80043b8 <floor+0x48>
 8004452:	2500      	movs	r5, #0
 8004454:	462c      	mov	r4, r5
 8004456:	e7af      	b.n	80043b8 <floor+0x48>
 8004458:	8800759c 	.word	0x8800759c
 800445c:	7e37e43c 	.word	0x7e37e43c
 8004460:	bff00000 	.word	0xbff00000
 8004464:	000fffff 	.word	0x000fffff

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
