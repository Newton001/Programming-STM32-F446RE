
Digital_Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08007bc0  08007bc0  00008bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008008  08008008  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008008  08008008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008010  08008010  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008010  08008010  00009010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008018  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  080081ec  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080081ec  0000a480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001178f  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d6  00000000  00000000  0001b993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0001e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e00  00000000  00000000  0001f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d52  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001736d  00000000  00000000  00043f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c50  00000000  00000000  0005b307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000605c  00000000  00000000  00131f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00137ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ba4 	.word	0x08007ba4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007ba4 	.word	0x08007ba4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_GPIO_Init+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_GPIO_Init+0xa8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001078:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <MX_GPIO_Init+0xac>)
 800107a:	f000 fea9 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	@ 0x40
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_GPIO_Init+0xb0>)
 8001084:	f000 fea4 	bl	8001dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8001088:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <MX_GPIO_Init+0xac>)
 80010a2:	f000 fd01 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_GPIO_Init+0xb0>)
 80010be:	f000 fcf3 	bl	8001aa8 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400

080010d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <MX_I2C1_Init+0x54>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x58>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001116:	f000 fe75 	bl	8001e04 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 f8c2 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001f0 	.word	0x200001f0
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12c      	bne.n	80011b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001172:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001184:	2304      	movs	r3, #4
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_I2C_MspInit+0x8c>)
 8001190:	f000 fc8a 	bl	8001aa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f000 fb16 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f80c 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f7ff ff28 	bl	8001024 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011d4:	f000 f86e 	bl	80012b4 <MX_SPI1_Init>
  MX_TIM7_Init();
 80011d8:	f000 fa1c 	bl	8001614 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80011dc:	f000 fa70 	bl	80016c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011e0:	f7ff ff7a 	bl	80010d8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <main+0x20>

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b094      	sub	sp, #80	@ 0x50
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2234      	movs	r2, #52	@ 0x34
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 f8ff 	bl	80043fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <SystemClock_Config+0xb8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <SystemClock_Config+0xb8>)
 8001216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800121a:	6413      	str	r3, [r2, #64]	@ 0x40
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <SystemClock_Config+0xb8>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <SystemClock_Config+0xbc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <SystemClock_Config+0xbc>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <SystemClock_Config+0xbc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001250:	2310      	movs	r3, #16
 8001252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f9d9 	bl	8002614 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001268:	f000 f81e 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f000 ff00 	bl	800208c <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001292:	f000 f809 	bl	80012a8 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	@ 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_SPI1_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <MX_SPI1_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_SPI1_Init+0x68>)
 80012c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_SPI1_Init+0x68>)
 80012c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <MX_SPI1_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_SPI1_Init+0x68>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_SPI1_Init+0x68>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_SPI1_Init+0x68>)
 80012e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI1_Init+0x68>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <MX_SPI1_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI1_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <MX_SPI1_Init+0x68>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI1_Init+0x68>)
 8001302:	220a      	movs	r2, #10
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_SPI1_Init+0x68>)
 8001308:	f001 fc22 	bl	8002b50 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001312:	f7ff ffc9 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000244 	.word	0x20000244
 8001320:	40013000 	.word	0x40013000

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_SPI_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800137e:	23a0      	movs	r3, #160	@ 0xa0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <HAL_SPI_MspInit+0x8c>)
 800139a:	f000 fb85 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40013000 	.word	0x40013000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <HAL_MspInit+0x4c>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <HAL_MspInit+0x4c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <NMI_Handler+0x4>

0800140c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 fa1f 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}

08001462 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  return 1;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_kill>:

int _kill(int pid, int sig)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147c:	f003 f810 	bl	80044a0 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	2216      	movs	r2, #22
 8001484:	601a      	str	r2, [r3, #0]
  return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_exit>:

void _exit (int status)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800149a:	f04f 31ff 	mov.w	r1, #4294967295
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffe7 	bl	8001472 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <_exit+0x12>

080014a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00a      	b.n	80014d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ba:	f3af 8000 	nop.w
 80014be:	4601      	mov	r1, r0
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf0      	blt.n	80014ba <_read+0x12>
  }

  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e009      	b.n	8001508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf1      	blt.n	80014f4 <_write+0x12>
  }
  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_close>:

int _close(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001542:	605a      	str	r2, [r3, #4]
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_isatty>:

int _isatty(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 ff74 	bl	80044a0 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	2000029c 	.word	0x2000029c
 80015ec:	20000480 	.word	0x20000480

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001622:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_TIM7_Init+0x60>)
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001626:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_TIM7_Init+0x60>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_TIM7_Init+0x60>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_TIM7_Init+0x60>)
 8001636:	2264      	movs	r2, #100	@ 0x64
 8001638:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_TIM7_Init+0x60>)
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <MX_TIM7_Init+0x60>)
 8001642:	f001 fb0e 	bl	8002c62 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800164c:	f7ff fe2c 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM7_Init+0x60>)
 800165e:	f001 fbfb 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001668:	f7ff fe1e 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002a0 	.word	0x200002a0
 8001678:	40001400 	.word	0x40001400

0800167c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0b      	ldr	r2, [pc, #44]	@ (80016b8 <HAL_TIM_Base_MspInit+0x3c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10d      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 8001698:	f043 0320 	orr.w	r3, r3, #32
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_TIM_Base_MspInit+0x40>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40001400 	.word	0x40001400
 80016bc:	40023800 	.word	0x40023800

080016c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f001 fc2a 	bl	8002f50 <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f7ff fdd1 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002e8 	.word	0x200002e8
 8001710:	40004400 	.word	0x40004400

08001714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_UART_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <HAL_UART_MspInit+0x88>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a17      	ldr	r2, [pc, #92]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	@ (800179c <HAL_UART_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_UART_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176e:	230c      	movs	r3, #12
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <HAL_UART_MspInit+0x8c>)
 800178a:	f000 f98d 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40004400 	.word	0x40004400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a8:	f7ff ff22 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 fe6b 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fcf5 	bl	80011c4 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e8:	08008018 	.word	0x08008018
  ldr r2, =_sbss
 80017ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017f0:	20000480 	.word	0x20000480

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f90d 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fdc2 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f917 	bl	8001a8e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f8ed 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	20000008 	.word	0x20000008
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000330 	.word	0x20000330

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000330 	.word	0x20000330

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	@ (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	@ 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff47 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5c 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff8e 	bl	8001994 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5d 	bl	8001940 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb0 	bl	80019fc <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e165      	b.n	8001d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8154 	bne.w	8001d8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80ae 	beq.w	8001d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b5d      	ldr	r3, [pc, #372]	@ (8001da8 <HAL_GPIO_Init+0x300>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a5c      	ldr	r2, [pc, #368]	@ (8001da8 <HAL_GPIO_Init+0x300>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001da8 <HAL_GPIO_Init+0x300>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4a:	4a58      	ldr	r2, [pc, #352]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4f      	ldr	r2, [pc, #316]	@ (8001db0 <HAL_GPIO_Init+0x308>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d025      	beq.n	8001cc2 <HAL_GPIO_Init+0x21a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4e      	ldr	r2, [pc, #312]	@ (8001db4 <HAL_GPIO_Init+0x30c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <HAL_GPIO_Init+0x216>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4d      	ldr	r2, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x310>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d019      	beq.n	8001cba <HAL_GPIO_Init+0x212>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	@ (8001dbc <HAL_GPIO_Init+0x314>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_GPIO_Init+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_GPIO_Init+0x318>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d00d      	beq.n	8001cb2 <HAL_GPIO_Init+0x20a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc4 <HAL_GPIO_Init+0x31c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0x206>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a49      	ldr	r2, [pc, #292]	@ (8001dc8 <HAL_GPIO_Init+0x320>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_GPIO_Init+0x202>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x21c>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a31      	ldr	r2, [pc, #196]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d36:	4b25      	ldr	r3, [pc, #148]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d84:	4a11      	ldr	r2, [pc, #68]	@ (8001dcc <HAL_GPIO_Init+0x324>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f ae96 	bls.w	8001ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e12b      	b.n	800206e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff f982 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e68:	f000 fa02 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a81      	ldr	r2, [pc, #516]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d807      	bhi.n	8001e88 <HAL_I2C_Init+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a80      	ldr	r2, [pc, #512]	@ (800207c <HAL_I2C_Init+0x278>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e006      	b.n	8001e96 <HAL_I2C_Init+0x92>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002080 <HAL_I2C_Init+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0e7      	b.n	800206e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a78      	ldr	r2, [pc, #480]	@ (8002084 <HAL_I2C_Init+0x280>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_I2C_Init+0xd4>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e009      	b.n	8001eec <HAL_I2C_Init+0xe8>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a69      	ldr	r2, [pc, #420]	@ (8002088 <HAL_I2C_Init+0x284>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	3301      	adds	r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	495c      	ldr	r1, [pc, #368]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d819      	bhi.n	8001f40 <HAL_I2C_Init+0x13c>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e59      	subs	r1, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_I2C_Init+0x138>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e59      	subs	r1, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	e051      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e04f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d111      	bne.n	8001f6c <HAL_I2C_Init+0x168>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e012      	b.n	8001f92 <HAL_I2C_Init+0x18e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x196>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e022      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_I2C_Init+0x1bc>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e58      	subs	r0, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	0099      	lsls	r1, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6809      	ldr	r1, [r1, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800200e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6911      	ldr	r1, [r2, #16]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	000186a0 	.word	0x000186a0
 800207c:	001e847f 	.word	0x001e847f
 8002080:	003d08ff 	.word	0x003d08ff
 8002084:	431bde83 	.word	0x431bde83
 8002088:	10624dd3 	.word	0x10624dd3

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0cc      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b68      	ldr	r3, [pc, #416]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d90c      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b65      	ldr	r3, [pc, #404]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a52      	ldr	r2, [pc, #328]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d044      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e067      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4934      	ldr	r1, [pc, #208]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7ff fba2 	bl	80018c4 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff fb9e 	bl	80018c4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d20c      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f855 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb02 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00
 8002248:	40023800 	.word	0x40023800
 800224c:	08007bc0 	.word	0x08007bc0
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	@ (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	08007bd0 	.word	0x08007bd0

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffdc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0b5b      	lsrs	r3, r3, #13
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	@ (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	08007bd0 	.word	0x08007bd0

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b0a6      	sub	sp, #152	@ 0x98
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e6:	4bc8      	ldr	r3, [pc, #800]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	f200 817e 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x330>
 80022f4:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002331 	.word	0x08002331
 8002300:	080025f1 	.word	0x080025f1
 8002304:	080025f1 	.word	0x080025f1
 8002308:	080025f1 	.word	0x080025f1
 800230c:	08002339 	.word	0x08002339
 8002310:	080025f1 	.word	0x080025f1
 8002314:	080025f1 	.word	0x080025f1
 8002318:	080025f1 	.word	0x080025f1
 800231c:	08002341 	.word	0x08002341
 8002320:	080025f1 	.word	0x080025f1
 8002324:	080025f1 	.word	0x080025f1
 8002328:	080025f1 	.word	0x080025f1
 800232c:	080024ab 	.word	0x080024ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4bb6      	ldr	r3, [pc, #728]	@ (800260c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002336:	e15f      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002338:	4bb5      	ldr	r3, [pc, #724]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x350>)
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800233e:	e15b      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4bb1      	ldr	r3, [pc, #708]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234c:	4bae      	ldr	r3, [pc, #696]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002358:	4bab      	ldr	r3, [pc, #684]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	2200      	movs	r2, #0
 8002360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002364:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	663b      	str	r3, [r7, #96]	@ 0x60
 800236c:	2300      	movs	r3, #0
 800236e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002370:	4ba7      	ldr	r3, [pc, #668]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x350>)
 8002372:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002376:	462a      	mov	r2, r5
 8002378:	fb03 f202 	mul.w	r2, r3, r2
 800237c:	2300      	movs	r3, #0
 800237e:	4621      	mov	r1, r4
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	4aa2      	ldr	r2, [pc, #648]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x350>)
 8002388:	4621      	mov	r1, r4
 800238a:	fba1 1202 	umull	r1, r2, r1, r2
 800238e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002390:	460a      	mov	r2, r1
 8002392:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002394:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002396:	4413      	add	r3, r2
 8002398:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800239a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239e:	2200      	movs	r2, #0
 80023a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80023a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80023a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80023ac:	f7fe fc8c 	bl	8000cc8 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023ba:	e064      	b.n	8002486 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023bc:	4b92      	ldr	r3, [pc, #584]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	2200      	movs	r2, #0
 80023c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80023c6:	657a      	str	r2, [r7, #84]	@ 0x54
 80023c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d0:	2300      	movs	r3, #0
 80023d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0159      	lsls	r1, r3, #5
 80023e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ea:	0150      	lsls	r0, r2, #5
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4621      	mov	r1, r4
 80023f2:	1a51      	subs	r1, r2, r1
 80023f4:	6139      	str	r1, [r7, #16]
 80023f6:	4629      	mov	r1, r5
 80023f8:	eb63 0301 	sbc.w	r3, r3, r1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800240a:	4659      	mov	r1, fp
 800240c:	018b      	lsls	r3, r1, #6
 800240e:	4651      	mov	r1, sl
 8002410:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002414:	4651      	mov	r1, sl
 8002416:	018a      	lsls	r2, r1, #6
 8002418:	4651      	mov	r1, sl
 800241a:	ebb2 0801 	subs.w	r8, r2, r1
 800241e:	4659      	mov	r1, fp
 8002420:	eb63 0901 	sbc.w	r9, r3, r1
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002438:	4690      	mov	r8, r2
 800243a:	4699      	mov	r9, r3
 800243c:	4623      	mov	r3, r4
 800243e:	eb18 0303 	adds.w	r3, r8, r3
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	462b      	mov	r3, r5
 8002446:	eb49 0303 	adc.w	r3, r9, r3
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002458:	4629      	mov	r1, r5
 800245a:	028b      	lsls	r3, r1, #10
 800245c:	4621      	mov	r1, r4
 800245e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002462:	4621      	mov	r1, r4
 8002464:	028a      	lsls	r2, r1, #10
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800246e:	2200      	movs	r2, #0
 8002470:	643b      	str	r3, [r7, #64]	@ 0x40
 8002472:	647a      	str	r2, [r7, #68]	@ 0x44
 8002474:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002478:	f7fe fc26 	bl	8000cc8 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4613      	mov	r3, r2
 8002482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002486:	4b60      	ldr	r3, [pc, #384]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	3301      	adds	r3, #1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002498:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800249c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024a8:	e0a6      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024aa:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b6:	4b54      	ldr	r3, [pc, #336]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d02a      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	2200      	movs	r2, #0
 80024ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024d4:	2100      	movs	r1, #0
 80024d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x350>)
 80024d8:	fb03 f201 	mul.w	r2, r3, r1
 80024dc:	2300      	movs	r3, #0
 80024de:	fb00 f303 	mul.w	r3, r0, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x350>)
 80024e6:	fba0 1202 	umull	r1, r2, r0, r2
 80024ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ec:	460a      	mov	r2, r1
 80024ee:	673a      	str	r2, [r7, #112]	@ 0x70
 80024f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024f2:	4413      	add	r3, r2
 80024f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fa:	2200      	movs	r2, #0
 80024fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8002500:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002504:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002508:	f7fe fbde 	bl	8000cc8 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002516:	e05b      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002518:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	2200      	movs	r2, #0
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0159      	lsls	r1, r3, #5
 8002542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002546:	0150      	lsls	r0, r2, #5
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4641      	mov	r1, r8
 800254e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002552:	4649      	mov	r1, r9
 8002554:	eb63 0b01 	sbc.w	fp, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800256c:	ebb2 040a 	subs.w	r4, r2, sl
 8002570:	eb63 050b 	sbc.w	r5, r3, fp
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	00eb      	lsls	r3, r5, #3
 800257e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002582:	00e2      	lsls	r2, r4, #3
 8002584:	4614      	mov	r4, r2
 8002586:	461d      	mov	r5, r3
 8002588:	4643      	mov	r3, r8
 800258a:	18e3      	adds	r3, r4, r3
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	464b      	mov	r3, r9
 8002590:	eb45 0303 	adc.w	r3, r5, r3
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a2:	4629      	mov	r1, r5
 80025a4:	028b      	lsls	r3, r1, #10
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ac:	4621      	mov	r1, r4
 80025ae:	028a      	lsls	r2, r1, #10
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c2:	f7fe fb81 	bl	8000cc8 <__aeabi_uldivmod>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4613      	mov	r3, r2
 80025cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x348>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0f1b      	lsrs	r3, r3, #28
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80025de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025ee:	e003      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_GetSysClockFreq+0x34c>)
 80025f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3798      	adds	r7, #152	@ 0x98
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	017d7840 	.word	0x017d7840

08002614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e28d      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8083 	beq.w	800273a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002634:	4b94      	ldr	r3, [pc, #592]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d019      	beq.n	8002674 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
        || \
 8002648:	2b08      	cmp	r3, #8
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800264c:	4b8e      	ldr	r3, [pc, #568]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002658:	d00c      	beq.n	8002674 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b8b      	ldr	r3, [pc, #556]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d112      	bne.n	800268c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b88      	ldr	r3, [pc, #544]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b84      	ldr	r3, [pc, #528]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05b      	beq.n	8002738 <HAL_RCC_OscConfig+0x124>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d157      	bne.n	8002738 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e25a      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x90>
 8002696:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7b      	ldr	r2, [pc, #492]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xcc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0xb4>
 80026ae:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a75      	ldr	r2, [pc, #468]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b73      	ldr	r3, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a72      	ldr	r2, [pc, #456]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xcc>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff f8ec 	bl	80018c4 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff f8e8 	bl	80018c4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e21f      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b61      	ldr	r3, [pc, #388]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xdc>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f8d8 	bl	80018c4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff f8d4 	bl	80018c4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e20b      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b57      	ldr	r3, [pc, #348]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x104>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d06f      	beq.n	8002826 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002746:	4b50      	ldr	r3, [pc, #320]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002752:	4b4d      	ldr	r3, [pc, #308]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
        || \
 800275a:	2b08      	cmp	r3, #8
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800275e:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b47      	ldr	r3, [pc, #284]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002776:	4b44      	ldr	r3, [pc, #272]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b41      	ldr	r3, [pc, #260]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x186>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1d3      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4937      	ldr	r1, [pc, #220]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCC_OscConfig+0x278>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff f881 	bl	80018c4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c6:	f7ff f87d 	bl	80018c4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e1b4      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4925      	ldr	r1, [pc, #148]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
 80027f8:	e015      	b.n	8002826 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x278>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff f860 	bl	80018c4 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002808:	f7ff f85c 	bl	80018c4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e193      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d036      	beq.n	80028a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_RCC_OscConfig+0x27c>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff f840 	bl	80018c4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7ff f83c 	bl	80018c4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e173      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_OscConfig+0x274>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x234>
 8002866:	e01b      	b.n	80028a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_RCC_OscConfig+0x27c>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f829 	bl	80018c4 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	e00e      	b.n	8002894 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff f825 	bl	80018c4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d907      	bls.n	8002894 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e15c      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	4b8a      	ldr	r3, [pc, #552]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ea      	bne.n	8002876 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b83      	ldr	r3, [pc, #524]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10f      	bne.n	80028de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028de:	4b79      	ldr	r3, [pc, #484]	@ (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ea:	4b76      	ldr	r3, [pc, #472]	@ (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	@ (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f6:	f7fe ffe5 	bl	80018c4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fe:	f7fe ffe1 	bl	80018c4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e118      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac4 <HAL_RCC_OscConfig+0x4b0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x31e>
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a65      	ldr	r2, [pc, #404]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x358>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x340>
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a60      	ldr	r2, [pc, #384]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	@ 0x70
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0x358>
 8002954:	4b5a      	ldr	r3, [pc, #360]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	4a59      	ldr	r2, [pc, #356]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002960:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002966:	f023 0304 	bic.w	r3, r3, #4
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe ffa6 	bl	80018c4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe ffa2 	bl	80018c4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0d7      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0ee      	beq.n	800297c <HAL_RCC_OscConfig+0x368>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff90 	bl	80018c4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe ff8c 	bl	80018c4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0c1      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	4b40      	ldr	r3, [pc, #256]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ee      	bne.n	80029a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80ad 	beq.w	8002b40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e6:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d060      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d145      	bne.n	8002a86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff60 	bl	80018c4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe ff5c 	bl	80018c4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e093      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b29      	ldr	r3, [pc, #164]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	071b      	lsls	r3, r3, #28
 8002a52:	491b      	ldr	r1, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff31 	bl	80018c4 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe ff2d 	bl	80018c4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e064      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x452>
 8002a84:	e05c      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_OscConfig+0x4b4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ff1a 	bl	80018c4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe ff16 	bl	80018c4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04d      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x480>
 8002ab2:	e045      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e040      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002acc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b4c <HAL_RCC_OscConfig+0x538>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d030      	beq.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d129      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d122      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d119      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d10f      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07b      	b.n	8002c5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b72:	d009      	beq.n	8002b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
 8002b7a:	e005      	b.n	8002b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fbbe 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0c:	ea42 0103 	orr.w	r1, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 0104 	and.w	r1, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	f003 0210 	and.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e041      	b.n	8002cf8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe fcf7 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 f82d 	bl	8002d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a46      	ldr	r2, [pc, #280]	@ (8002e2c <TIM_Base_SetConfig+0x12c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1e:	d00f      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <TIM_Base_SetConfig+0x130>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a42      	ldr	r2, [pc, #264]	@ (8002e34 <TIM_Base_SetConfig+0x134>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a41      	ldr	r2, [pc, #260]	@ (8002e38 <TIM_Base_SetConfig+0x138>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	@ (8002e3c <TIM_Base_SetConfig+0x13c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a35      	ldr	r2, [pc, #212]	@ (8002e2c <TIM_Base_SetConfig+0x12c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d60:	d027      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a32      	ldr	r2, [pc, #200]	@ (8002e30 <TIM_Base_SetConfig+0x130>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d023      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a31      	ldr	r2, [pc, #196]	@ (8002e34 <TIM_Base_SetConfig+0x134>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a30      	ldr	r2, [pc, #192]	@ (8002e38 <TIM_Base_SetConfig+0x138>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e3c <TIM_Base_SetConfig+0x13c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d017      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	@ (8002e40 <TIM_Base_SetConfig+0x140>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e44 <TIM_Base_SetConfig+0x144>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <TIM_Base_SetConfig+0x148>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002e4c <TIM_Base_SetConfig+0x14c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <TIM_Base_SetConfig+0x150>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a29      	ldr	r2, [pc, #164]	@ (8002e54 <TIM_Base_SetConfig+0x154>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d108      	bne.n	8002dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a10      	ldr	r2, [pc, #64]	@ (8002e2c <TIM_Base_SetConfig+0x12c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0xf8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <TIM_Base_SetConfig+0x13c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	611a      	str	r2, [r3, #16]
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40001800 	.word	0x40001800
 8002e50:	40001c00 	.word	0x40001c00
 8002e54:	40002000 	.word	0x40002000

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e05a      	b.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebc:	d01d      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	@ (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a17      	ldr	r2, [pc, #92]	@ (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	@ (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10c      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40010400 	.word	0x40010400
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40001800 	.word	0x40001800

08002f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e042      	b.n	8002fe8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe fbcc 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	@ 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f82b 	bl	8002ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b0c0      	sub	sp, #256	@ 0x100
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	68d9      	ldr	r1, [r3, #12]
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	ea40 0301 	orr.w	r3, r0, r1
 8003018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003048:	f021 010c 	bic.w	r1, r1, #12
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003056:	430b      	orrs	r3, r1
 8003058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	6999      	ldr	r1, [r3, #24]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	ea40 0301 	orr.w	r3, r0, r1
 8003076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b8f      	ldr	r3, [pc, #572]	@ (80032bc <UART_SetConfig+0x2cc>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0xa0>
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8d      	ldr	r3, [pc, #564]	@ (80032c0 <UART_SetConfig+0x2d0>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff f902 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8003094:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309a:	f7ff f8e9 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800309e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ac:	f040 810c 	bne.w	80032c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030ca:	415b      	adcs	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030d2:	4621      	mov	r1, r4
 80030d4:	eb12 0801 	adds.w	r8, r2, r1
 80030d8:	4629      	mov	r1, r5
 80030da:	eb43 0901 	adc.w	r9, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb18 0303 	adds.w	r3, r8, r3
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003100:	462b      	mov	r3, r5
 8003102:	eb49 0303 	adc.w	r3, r9, r3
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800311a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800311e:	460b      	mov	r3, r1
 8003120:	18db      	adds	r3, r3, r3
 8003122:	653b      	str	r3, [r7, #80]	@ 0x50
 8003124:	4613      	mov	r3, r2
 8003126:	eb42 0303 	adc.w	r3, r2, r3
 800312a:	657b      	str	r3, [r7, #84]	@ 0x54
 800312c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003134:	f7fd fdc8 	bl	8000cc8 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <UART_SetConfig+0x2d4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003150:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003160:	415b      	adcs	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003168:	4641      	mov	r1, r8
 800316a:	eb12 0a01 	adds.w	sl, r2, r1
 800316e:	4649      	mov	r1, r9
 8003170:	eb43 0b01 	adc.w	fp, r3, r1
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	4692      	mov	sl, r2
 800318a:	469b      	mov	fp, r3
 800318c:	4643      	mov	r3, r8
 800318e:	eb1a 0303 	adds.w	r3, sl, r3
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003196:	464b      	mov	r3, r9
 8003198:	eb4b 0303 	adc.w	r3, fp, r3
 800319c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031b4:	460b      	mov	r3, r1
 80031b6:	18db      	adds	r3, r3, r3
 80031b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ba:	4613      	mov	r3, r2
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031ca:	f7fd fd7d 	bl	8000cc8 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80031d6:	fba3 2301 	umull	r2, r3, r3, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2264      	movs	r2, #100	@ 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	1acb      	subs	r3, r1, r3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031ea:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 2302 	umull	r2, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031f8:	441c      	add	r4, r3
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003204:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003214:	415b      	adcs	r3, r3
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6339      	str	r1, [r7, #48]	@ 0x30
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003268:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800326c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003286:	f7fd fd1f 	bl	8000cc8 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <UART_SetConfig+0x2d4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	@ 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	@ 0x32
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4422      	add	r2, r4
 80032b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b8:	e106      	b.n	80034c8 <UART_SetConfig+0x4d8>
 80032ba:	bf00      	nop
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	6239      	str	r1, [r7, #32]
 80032e2:	415b      	adcs	r3, r3
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ea:	4641      	mov	r1, r8
 80032ec:	1854      	adds	r4, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0501 	adc.w	r5, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003310:	464b      	mov	r3, r9
 8003312:	eb45 0303 	adc.w	r3, r5, r3
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003336:	4629      	mov	r1, r5
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4621      	mov	r1, r4
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003348:	f7fd fcbe 	bl	8000cc8 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b60      	ldr	r3, [pc, #384]	@ (80034d4 <UART_SetConfig+0x4e4>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011c      	lsls	r4, r3, #4
 800335a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003364:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	1891      	adds	r1, r2, r2
 8003372:	61b9      	str	r1, [r7, #24]
 8003374:	415b      	adcs	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	4641      	mov	r1, r8
 800337e:	1851      	adds	r1, r2, r1
 8003380:	6139      	str	r1, [r7, #16]
 8003382:	4649      	mov	r1, r9
 8003384:	414b      	adcs	r3, r1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003394:	4659      	mov	r1, fp
 8003396:	00cb      	lsls	r3, r1, #3
 8003398:	4651      	mov	r1, sl
 800339a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339e:	4651      	mov	r1, sl
 80033a0:	00ca      	lsls	r2, r1, #3
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	4642      	mov	r2, r8
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b0:	464b      	mov	r3, r9
 80033b2:	460a      	mov	r2, r1
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033d4:	4649      	mov	r1, r9
 80033d6:	008b      	lsls	r3, r1, #2
 80033d8:	4641      	mov	r1, r8
 80033da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033de:	4641      	mov	r1, r8
 80033e0:	008a      	lsls	r2, r1, #2
 80033e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033e6:	f7fd fc6f 	bl	8000cc8 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80033f2:	fba3 2301 	umull	r2, r3, r3, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	@ 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1acb      	subs	r3, r1, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	@ 0x32
 8003404:	4a33      	ldr	r2, [pc, #204]	@ (80034d4 <UART_SetConfig+0x4e4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003410:	441c      	add	r4, r3
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	673b      	str	r3, [r7, #112]	@ 0x70
 800341a:	677a      	str	r2, [r7, #116]	@ 0x74
 800341c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	415b      	adcs	r3, r3
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003430:	4641      	mov	r1, r8
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	4649      	mov	r1, r9
 8003438:	414b      	adcs	r3, r1
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003448:	4659      	mov	r1, fp
 800344a:	00cb      	lsls	r3, r1, #3
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003452:	4651      	mov	r1, sl
 8003454:	00ca      	lsls	r2, r1, #3
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	4603      	mov	r3, r0
 800345c:	4642      	mov	r2, r8
 800345e:	189b      	adds	r3, r3, r2
 8003460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003462:	464b      	mov	r3, r9
 8003464:	460a      	mov	r2, r1
 8003466:	eb42 0303 	adc.w	r3, r2, r3
 800346a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	663b      	str	r3, [r7, #96]	@ 0x60
 8003476:	667a      	str	r2, [r7, #100]	@ 0x64
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003484:	4649      	mov	r1, r9
 8003486:	008b      	lsls	r3, r1, #2
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348e:	4641      	mov	r1, r8
 8003490:	008a      	lsls	r2, r1, #2
 8003492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003496:	f7fd fc17 	bl	8000cc8 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	@ 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	@ 0x32
 80034b2:	4a08      	ldr	r2, [pc, #32]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4422      	add	r2, r4
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034ce:	46bd      	mov	sp, r7
 80034d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <__cvt>:
 80034d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034dc:	ec57 6b10 	vmov	r6, r7, d0
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	460c      	mov	r4, r1
 80034e4:	4619      	mov	r1, r3
 80034e6:	463b      	mov	r3, r7
 80034e8:	bfbb      	ittet	lt
 80034ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80034ee:	461f      	movlt	r7, r3
 80034f0:	2300      	movge	r3, #0
 80034f2:	232d      	movlt	r3, #45	@ 0x2d
 80034f4:	700b      	strb	r3, [r1, #0]
 80034f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80034fc:	4691      	mov	r9, r2
 80034fe:	f023 0820 	bic.w	r8, r3, #32
 8003502:	bfbc      	itt	lt
 8003504:	4632      	movlt	r2, r6
 8003506:	4616      	movlt	r6, r2
 8003508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800350c:	d005      	beq.n	800351a <__cvt+0x42>
 800350e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003512:	d100      	bne.n	8003516 <__cvt+0x3e>
 8003514:	3401      	adds	r4, #1
 8003516:	2102      	movs	r1, #2
 8003518:	e000      	b.n	800351c <__cvt+0x44>
 800351a:	2103      	movs	r1, #3
 800351c:	ab03      	add	r3, sp, #12
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	ab02      	add	r3, sp, #8
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	ec47 6b10 	vmov	d0, r6, r7
 8003528:	4653      	mov	r3, sl
 800352a:	4622      	mov	r2, r4
 800352c:	f001 f874 	bl	8004618 <_dtoa_r>
 8003530:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003534:	4605      	mov	r5, r0
 8003536:	d119      	bne.n	800356c <__cvt+0x94>
 8003538:	f019 0f01 	tst.w	r9, #1
 800353c:	d00e      	beq.n	800355c <__cvt+0x84>
 800353e:	eb00 0904 	add.w	r9, r0, r4
 8003542:	2200      	movs	r2, #0
 8003544:	2300      	movs	r3, #0
 8003546:	4630      	mov	r0, r6
 8003548:	4639      	mov	r1, r7
 800354a:	f7fd fadd 	bl	8000b08 <__aeabi_dcmpeq>
 800354e:	b108      	cbz	r0, 8003554 <__cvt+0x7c>
 8003550:	f8cd 900c 	str.w	r9, [sp, #12]
 8003554:	2230      	movs	r2, #48	@ 0x30
 8003556:	9b03      	ldr	r3, [sp, #12]
 8003558:	454b      	cmp	r3, r9
 800355a:	d31e      	bcc.n	800359a <__cvt+0xc2>
 800355c:	9b03      	ldr	r3, [sp, #12]
 800355e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003560:	1b5b      	subs	r3, r3, r5
 8003562:	4628      	mov	r0, r5
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	b004      	add	sp, #16
 8003568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003570:	eb00 0904 	add.w	r9, r0, r4
 8003574:	d1e5      	bne.n	8003542 <__cvt+0x6a>
 8003576:	7803      	ldrb	r3, [r0, #0]
 8003578:	2b30      	cmp	r3, #48	@ 0x30
 800357a:	d10a      	bne.n	8003592 <__cvt+0xba>
 800357c:	2200      	movs	r2, #0
 800357e:	2300      	movs	r3, #0
 8003580:	4630      	mov	r0, r6
 8003582:	4639      	mov	r1, r7
 8003584:	f7fd fac0 	bl	8000b08 <__aeabi_dcmpeq>
 8003588:	b918      	cbnz	r0, 8003592 <__cvt+0xba>
 800358a:	f1c4 0401 	rsb	r4, r4, #1
 800358e:	f8ca 4000 	str.w	r4, [sl]
 8003592:	f8da 3000 	ldr.w	r3, [sl]
 8003596:	4499      	add	r9, r3
 8003598:	e7d3      	b.n	8003542 <__cvt+0x6a>
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	9103      	str	r1, [sp, #12]
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e7d9      	b.n	8003556 <__cvt+0x7e>

080035a2 <__exponent>:
 80035a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a4:	2900      	cmp	r1, #0
 80035a6:	bfba      	itte	lt
 80035a8:	4249      	neglt	r1, r1
 80035aa:	232d      	movlt	r3, #45	@ 0x2d
 80035ac:	232b      	movge	r3, #43	@ 0x2b
 80035ae:	2909      	cmp	r1, #9
 80035b0:	7002      	strb	r2, [r0, #0]
 80035b2:	7043      	strb	r3, [r0, #1]
 80035b4:	dd29      	ble.n	800360a <__exponent+0x68>
 80035b6:	f10d 0307 	add.w	r3, sp, #7
 80035ba:	461d      	mov	r5, r3
 80035bc:	270a      	movs	r7, #10
 80035be:	461a      	mov	r2, r3
 80035c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80035c4:	fb07 1416 	mls	r4, r7, r6, r1
 80035c8:	3430      	adds	r4, #48	@ 0x30
 80035ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035ce:	460c      	mov	r4, r1
 80035d0:	2c63      	cmp	r4, #99	@ 0x63
 80035d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80035d6:	4631      	mov	r1, r6
 80035d8:	dcf1      	bgt.n	80035be <__exponent+0x1c>
 80035da:	3130      	adds	r1, #48	@ 0x30
 80035dc:	1e94      	subs	r4, r2, #2
 80035de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035e2:	1c41      	adds	r1, r0, #1
 80035e4:	4623      	mov	r3, r4
 80035e6:	42ab      	cmp	r3, r5
 80035e8:	d30a      	bcc.n	8003600 <__exponent+0x5e>
 80035ea:	f10d 0309 	add.w	r3, sp, #9
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	42ac      	cmp	r4, r5
 80035f2:	bf88      	it	hi
 80035f4:	2300      	movhi	r3, #0
 80035f6:	3302      	adds	r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	1a18      	subs	r0, r3, r0
 80035fc:	b003      	add	sp, #12
 80035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003600:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003604:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003608:	e7ed      	b.n	80035e6 <__exponent+0x44>
 800360a:	2330      	movs	r3, #48	@ 0x30
 800360c:	3130      	adds	r1, #48	@ 0x30
 800360e:	7083      	strb	r3, [r0, #2]
 8003610:	70c1      	strb	r1, [r0, #3]
 8003612:	1d03      	adds	r3, r0, #4
 8003614:	e7f1      	b.n	80035fa <__exponent+0x58>
	...

08003618 <_printf_float>:
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	b08d      	sub	sp, #52	@ 0x34
 800361e:	460c      	mov	r4, r1
 8003620:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003624:	4616      	mov	r6, r2
 8003626:	461f      	mov	r7, r3
 8003628:	4605      	mov	r5, r0
 800362a:	f000 feef 	bl	800440c <_localeconv_r>
 800362e:	6803      	ldr	r3, [r0, #0]
 8003630:	9304      	str	r3, [sp, #16]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc fe3c 	bl	80002b0 <strlen>
 8003638:	2300      	movs	r3, #0
 800363a:	930a      	str	r3, [sp, #40]	@ 0x28
 800363c:	f8d8 3000 	ldr.w	r3, [r8]
 8003640:	9005      	str	r0, [sp, #20]
 8003642:	3307      	adds	r3, #7
 8003644:	f023 0307 	bic.w	r3, r3, #7
 8003648:	f103 0208 	add.w	r2, r3, #8
 800364c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003650:	f8d4 b000 	ldr.w	fp, [r4]
 8003654:	f8c8 2000 	str.w	r2, [r8]
 8003658:	e9d3 8900 	ldrd	r8, r9, [r3]
 800365c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003660:	9307      	str	r3, [sp, #28]
 8003662:	f8cd 8018 	str.w	r8, [sp, #24]
 8003666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800366a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800366e:	4b9c      	ldr	r3, [pc, #624]	@ (80038e0 <_printf_float+0x2c8>)
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	f7fd fa7a 	bl	8000b6c <__aeabi_dcmpun>
 8003678:	bb70      	cbnz	r0, 80036d8 <_printf_float+0xc0>
 800367a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800367e:	4b98      	ldr	r3, [pc, #608]	@ (80038e0 <_printf_float+0x2c8>)
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	f7fd fa54 	bl	8000b30 <__aeabi_dcmple>
 8003688:	bb30      	cbnz	r0, 80036d8 <_printf_float+0xc0>
 800368a:	2200      	movs	r2, #0
 800368c:	2300      	movs	r3, #0
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fd fa43 	bl	8000b1c <__aeabi_dcmplt>
 8003696:	b110      	cbz	r0, 800369e <_printf_float+0x86>
 8003698:	232d      	movs	r3, #45	@ 0x2d
 800369a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800369e:	4a91      	ldr	r2, [pc, #580]	@ (80038e4 <_printf_float+0x2cc>)
 80036a0:	4b91      	ldr	r3, [pc, #580]	@ (80038e8 <_printf_float+0x2d0>)
 80036a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80036a6:	bf94      	ite	ls
 80036a8:	4690      	movls	r8, r2
 80036aa:	4698      	movhi	r8, r3
 80036ac:	2303      	movs	r3, #3
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	f02b 0304 	bic.w	r3, fp, #4
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	f04f 0900 	mov.w	r9, #0
 80036ba:	9700      	str	r7, [sp, #0]
 80036bc:	4633      	mov	r3, r6
 80036be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 f9d2 	bl	8003a6c <_printf_common>
 80036c8:	3001      	adds	r0, #1
 80036ca:	f040 808d 	bne.w	80037e8 <_printf_float+0x1d0>
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	b00d      	add	sp, #52	@ 0x34
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	4640      	mov	r0, r8
 80036de:	4649      	mov	r1, r9
 80036e0:	f7fd fa44 	bl	8000b6c <__aeabi_dcmpun>
 80036e4:	b140      	cbz	r0, 80036f8 <_printf_float+0xe0>
 80036e6:	464b      	mov	r3, r9
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bfbc      	itt	lt
 80036ec:	232d      	movlt	r3, #45	@ 0x2d
 80036ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80036f2:	4a7e      	ldr	r2, [pc, #504]	@ (80038ec <_printf_float+0x2d4>)
 80036f4:	4b7e      	ldr	r3, [pc, #504]	@ (80038f0 <_printf_float+0x2d8>)
 80036f6:	e7d4      	b.n	80036a2 <_printf_float+0x8a>
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80036fe:	9206      	str	r2, [sp, #24]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	d13b      	bne.n	800377c <_printf_float+0x164>
 8003704:	2306      	movs	r3, #6
 8003706:	6063      	str	r3, [r4, #4]
 8003708:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800370c:	2300      	movs	r3, #0
 800370e:	6022      	str	r2, [r4, #0]
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	ab0a      	add	r3, sp, #40	@ 0x28
 8003714:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003718:	ab09      	add	r3, sp, #36	@ 0x24
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6861      	ldr	r1, [r4, #4]
 800371e:	ec49 8b10 	vmov	d0, r8, r9
 8003722:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003726:	4628      	mov	r0, r5
 8003728:	f7ff fed6 	bl	80034d8 <__cvt>
 800372c:	9b06      	ldr	r3, [sp, #24]
 800372e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003730:	2b47      	cmp	r3, #71	@ 0x47
 8003732:	4680      	mov	r8, r0
 8003734:	d129      	bne.n	800378a <_printf_float+0x172>
 8003736:	1cc8      	adds	r0, r1, #3
 8003738:	db02      	blt.n	8003740 <_printf_float+0x128>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	dd41      	ble.n	80037c4 <_printf_float+0x1ac>
 8003740:	f1aa 0a02 	sub.w	sl, sl, #2
 8003744:	fa5f fa8a 	uxtb.w	sl, sl
 8003748:	3901      	subs	r1, #1
 800374a:	4652      	mov	r2, sl
 800374c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003750:	9109      	str	r1, [sp, #36]	@ 0x24
 8003752:	f7ff ff26 	bl	80035a2 <__exponent>
 8003756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003758:	1813      	adds	r3, r2, r0
 800375a:	2a01      	cmp	r2, #1
 800375c:	4681      	mov	r9, r0
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	dc02      	bgt.n	8003768 <_printf_float+0x150>
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	07d2      	lsls	r2, r2, #31
 8003766:	d501      	bpl.n	800376c <_printf_float+0x154>
 8003768:	3301      	adds	r3, #1
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0a2      	beq.n	80036ba <_printf_float+0xa2>
 8003774:	232d      	movs	r3, #45	@ 0x2d
 8003776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800377a:	e79e      	b.n	80036ba <_printf_float+0xa2>
 800377c:	9a06      	ldr	r2, [sp, #24]
 800377e:	2a47      	cmp	r2, #71	@ 0x47
 8003780:	d1c2      	bne.n	8003708 <_printf_float+0xf0>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1c0      	bne.n	8003708 <_printf_float+0xf0>
 8003786:	2301      	movs	r3, #1
 8003788:	e7bd      	b.n	8003706 <_printf_float+0xee>
 800378a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800378e:	d9db      	bls.n	8003748 <_printf_float+0x130>
 8003790:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003794:	d118      	bne.n	80037c8 <_printf_float+0x1b0>
 8003796:	2900      	cmp	r1, #0
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	dd0b      	ble.n	80037b4 <_printf_float+0x19c>
 800379c:	6121      	str	r1, [r4, #16]
 800379e:	b913      	cbnz	r3, 80037a6 <_printf_float+0x18e>
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	07d0      	lsls	r0, r2, #31
 80037a4:	d502      	bpl.n	80037ac <_printf_float+0x194>
 80037a6:	3301      	adds	r3, #1
 80037a8:	440b      	add	r3, r1
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80037ae:	f04f 0900 	mov.w	r9, #0
 80037b2:	e7db      	b.n	800376c <_printf_float+0x154>
 80037b4:	b913      	cbnz	r3, 80037bc <_printf_float+0x1a4>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	07d2      	lsls	r2, r2, #31
 80037ba:	d501      	bpl.n	80037c0 <_printf_float+0x1a8>
 80037bc:	3302      	adds	r3, #2
 80037be:	e7f4      	b.n	80037aa <_printf_float+0x192>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e7f2      	b.n	80037aa <_printf_float+0x192>
 80037c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037ca:	4299      	cmp	r1, r3
 80037cc:	db05      	blt.n	80037da <_printf_float+0x1c2>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	6121      	str	r1, [r4, #16]
 80037d2:	07d8      	lsls	r0, r3, #31
 80037d4:	d5ea      	bpl.n	80037ac <_printf_float+0x194>
 80037d6:	1c4b      	adds	r3, r1, #1
 80037d8:	e7e7      	b.n	80037aa <_printf_float+0x192>
 80037da:	2900      	cmp	r1, #0
 80037dc:	bfd4      	ite	le
 80037de:	f1c1 0202 	rsble	r2, r1, #2
 80037e2:	2201      	movgt	r2, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	e7e0      	b.n	80037aa <_printf_float+0x192>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	055a      	lsls	r2, r3, #21
 80037ec:	d407      	bmi.n	80037fe <_printf_float+0x1e6>
 80037ee:	6923      	ldr	r3, [r4, #16]
 80037f0:	4642      	mov	r2, r8
 80037f2:	4631      	mov	r1, r6
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b8      	blx	r7
 80037f8:	3001      	adds	r0, #1
 80037fa:	d12b      	bne.n	8003854 <_printf_float+0x23c>
 80037fc:	e767      	b.n	80036ce <_printf_float+0xb6>
 80037fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003802:	f240 80dd 	bls.w	80039c0 <_printf_float+0x3a8>
 8003806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800380a:	2200      	movs	r2, #0
 800380c:	2300      	movs	r3, #0
 800380e:	f7fd f97b 	bl	8000b08 <__aeabi_dcmpeq>
 8003812:	2800      	cmp	r0, #0
 8003814:	d033      	beq.n	800387e <_printf_float+0x266>
 8003816:	4a37      	ldr	r2, [pc, #220]	@ (80038f4 <_printf_float+0x2dc>)
 8003818:	2301      	movs	r3, #1
 800381a:	4631      	mov	r1, r6
 800381c:	4628      	mov	r0, r5
 800381e:	47b8      	blx	r7
 8003820:	3001      	adds	r0, #1
 8003822:	f43f af54 	beq.w	80036ce <_printf_float+0xb6>
 8003826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800382a:	4543      	cmp	r3, r8
 800382c:	db02      	blt.n	8003834 <_printf_float+0x21c>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	07d8      	lsls	r0, r3, #31
 8003832:	d50f      	bpl.n	8003854 <_printf_float+0x23c>
 8003834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003838:	4631      	mov	r1, r6
 800383a:	4628      	mov	r0, r5
 800383c:	47b8      	blx	r7
 800383e:	3001      	adds	r0, #1
 8003840:	f43f af45 	beq.w	80036ce <_printf_float+0xb6>
 8003844:	f04f 0900 	mov.w	r9, #0
 8003848:	f108 38ff 	add.w	r8, r8, #4294967295
 800384c:	f104 0a1a 	add.w	sl, r4, #26
 8003850:	45c8      	cmp	r8, r9
 8003852:	dc09      	bgt.n	8003868 <_printf_float+0x250>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	f100 8103 	bmi.w	8003a62 <_printf_float+0x44a>
 800385c:	68e0      	ldr	r0, [r4, #12]
 800385e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003860:	4298      	cmp	r0, r3
 8003862:	bfb8      	it	lt
 8003864:	4618      	movlt	r0, r3
 8003866:	e734      	b.n	80036d2 <_printf_float+0xba>
 8003868:	2301      	movs	r3, #1
 800386a:	4652      	mov	r2, sl
 800386c:	4631      	mov	r1, r6
 800386e:	4628      	mov	r0, r5
 8003870:	47b8      	blx	r7
 8003872:	3001      	adds	r0, #1
 8003874:	f43f af2b 	beq.w	80036ce <_printf_float+0xb6>
 8003878:	f109 0901 	add.w	r9, r9, #1
 800387c:	e7e8      	b.n	8003850 <_printf_float+0x238>
 800387e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	dc39      	bgt.n	80038f8 <_printf_float+0x2e0>
 8003884:	4a1b      	ldr	r2, [pc, #108]	@ (80038f4 <_printf_float+0x2dc>)
 8003886:	2301      	movs	r3, #1
 8003888:	4631      	mov	r1, r6
 800388a:	4628      	mov	r0, r5
 800388c:	47b8      	blx	r7
 800388e:	3001      	adds	r0, #1
 8003890:	f43f af1d 	beq.w	80036ce <_printf_float+0xb6>
 8003894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003898:	ea59 0303 	orrs.w	r3, r9, r3
 800389c:	d102      	bne.n	80038a4 <_printf_float+0x28c>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07d9      	lsls	r1, r3, #31
 80038a2:	d5d7      	bpl.n	8003854 <_printf_float+0x23c>
 80038a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038a8:	4631      	mov	r1, r6
 80038aa:	4628      	mov	r0, r5
 80038ac:	47b8      	blx	r7
 80038ae:	3001      	adds	r0, #1
 80038b0:	f43f af0d 	beq.w	80036ce <_printf_float+0xb6>
 80038b4:	f04f 0a00 	mov.w	sl, #0
 80038b8:	f104 0b1a 	add.w	fp, r4, #26
 80038bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038be:	425b      	negs	r3, r3
 80038c0:	4553      	cmp	r3, sl
 80038c2:	dc01      	bgt.n	80038c8 <_printf_float+0x2b0>
 80038c4:	464b      	mov	r3, r9
 80038c6:	e793      	b.n	80037f0 <_printf_float+0x1d8>
 80038c8:	2301      	movs	r3, #1
 80038ca:	465a      	mov	r2, fp
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b8      	blx	r7
 80038d2:	3001      	adds	r0, #1
 80038d4:	f43f aefb 	beq.w	80036ce <_printf_float+0xb6>
 80038d8:	f10a 0a01 	add.w	sl, sl, #1
 80038dc:	e7ee      	b.n	80038bc <_printf_float+0x2a4>
 80038de:	bf00      	nop
 80038e0:	7fefffff 	.word	0x7fefffff
 80038e4:	08007bd8 	.word	0x08007bd8
 80038e8:	08007bdc 	.word	0x08007bdc
 80038ec:	08007be0 	.word	0x08007be0
 80038f0:	08007be4 	.word	0x08007be4
 80038f4:	08007be8 	.word	0x08007be8
 80038f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80038fe:	4553      	cmp	r3, sl
 8003900:	bfa8      	it	ge
 8003902:	4653      	movge	r3, sl
 8003904:	2b00      	cmp	r3, #0
 8003906:	4699      	mov	r9, r3
 8003908:	dc36      	bgt.n	8003978 <_printf_float+0x360>
 800390a:	f04f 0b00 	mov.w	fp, #0
 800390e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003912:	f104 021a 	add.w	r2, r4, #26
 8003916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003918:	9306      	str	r3, [sp, #24]
 800391a:	eba3 0309 	sub.w	r3, r3, r9
 800391e:	455b      	cmp	r3, fp
 8003920:	dc31      	bgt.n	8003986 <_printf_float+0x36e>
 8003922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003924:	459a      	cmp	sl, r3
 8003926:	dc3a      	bgt.n	800399e <_printf_float+0x386>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	07da      	lsls	r2, r3, #31
 800392c:	d437      	bmi.n	800399e <_printf_float+0x386>
 800392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003930:	ebaa 0903 	sub.w	r9, sl, r3
 8003934:	9b06      	ldr	r3, [sp, #24]
 8003936:	ebaa 0303 	sub.w	r3, sl, r3
 800393a:	4599      	cmp	r9, r3
 800393c:	bfa8      	it	ge
 800393e:	4699      	movge	r9, r3
 8003940:	f1b9 0f00 	cmp.w	r9, #0
 8003944:	dc33      	bgt.n	80039ae <_printf_float+0x396>
 8003946:	f04f 0800 	mov.w	r8, #0
 800394a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800394e:	f104 0b1a 	add.w	fp, r4, #26
 8003952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003954:	ebaa 0303 	sub.w	r3, sl, r3
 8003958:	eba3 0309 	sub.w	r3, r3, r9
 800395c:	4543      	cmp	r3, r8
 800395e:	f77f af79 	ble.w	8003854 <_printf_float+0x23c>
 8003962:	2301      	movs	r3, #1
 8003964:	465a      	mov	r2, fp
 8003966:	4631      	mov	r1, r6
 8003968:	4628      	mov	r0, r5
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	f43f aeae 	beq.w	80036ce <_printf_float+0xb6>
 8003972:	f108 0801 	add.w	r8, r8, #1
 8003976:	e7ec      	b.n	8003952 <_printf_float+0x33a>
 8003978:	4642      	mov	r2, r8
 800397a:	4631      	mov	r1, r6
 800397c:	4628      	mov	r0, r5
 800397e:	47b8      	blx	r7
 8003980:	3001      	adds	r0, #1
 8003982:	d1c2      	bne.n	800390a <_printf_float+0x2f2>
 8003984:	e6a3      	b.n	80036ce <_printf_float+0xb6>
 8003986:	2301      	movs	r3, #1
 8003988:	4631      	mov	r1, r6
 800398a:	4628      	mov	r0, r5
 800398c:	9206      	str	r2, [sp, #24]
 800398e:	47b8      	blx	r7
 8003990:	3001      	adds	r0, #1
 8003992:	f43f ae9c 	beq.w	80036ce <_printf_float+0xb6>
 8003996:	9a06      	ldr	r2, [sp, #24]
 8003998:	f10b 0b01 	add.w	fp, fp, #1
 800399c:	e7bb      	b.n	8003916 <_printf_float+0x2fe>
 800399e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b8      	blx	r7
 80039a8:	3001      	adds	r0, #1
 80039aa:	d1c0      	bne.n	800392e <_printf_float+0x316>
 80039ac:	e68f      	b.n	80036ce <_printf_float+0xb6>
 80039ae:	9a06      	ldr	r2, [sp, #24]
 80039b0:	464b      	mov	r3, r9
 80039b2:	4442      	add	r2, r8
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	d1c3      	bne.n	8003946 <_printf_float+0x32e>
 80039be:	e686      	b.n	80036ce <_printf_float+0xb6>
 80039c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80039c4:	f1ba 0f01 	cmp.w	sl, #1
 80039c8:	dc01      	bgt.n	80039ce <_printf_float+0x3b6>
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d536      	bpl.n	8003a3c <_printf_float+0x424>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4642      	mov	r2, r8
 80039d2:	4631      	mov	r1, r6
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f ae78 	beq.w	80036ce <_printf_float+0xb6>
 80039de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e2:	4631      	mov	r1, r6
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b8      	blx	r7
 80039e8:	3001      	adds	r0, #1
 80039ea:	f43f ae70 	beq.w	80036ce <_printf_float+0xb6>
 80039ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039f2:	2200      	movs	r2, #0
 80039f4:	2300      	movs	r3, #0
 80039f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039fa:	f7fd f885 	bl	8000b08 <__aeabi_dcmpeq>
 80039fe:	b9c0      	cbnz	r0, 8003a32 <_printf_float+0x41a>
 8003a00:	4653      	mov	r3, sl
 8003a02:	f108 0201 	add.w	r2, r8, #1
 8003a06:	4631      	mov	r1, r6
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b8      	blx	r7
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d10c      	bne.n	8003a2a <_printf_float+0x412>
 8003a10:	e65d      	b.n	80036ce <_printf_float+0xb6>
 8003a12:	2301      	movs	r3, #1
 8003a14:	465a      	mov	r2, fp
 8003a16:	4631      	mov	r1, r6
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b8      	blx	r7
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f43f ae56 	beq.w	80036ce <_printf_float+0xb6>
 8003a22:	f108 0801 	add.w	r8, r8, #1
 8003a26:	45d0      	cmp	r8, sl
 8003a28:	dbf3      	blt.n	8003a12 <_printf_float+0x3fa>
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a30:	e6df      	b.n	80037f2 <_printf_float+0x1da>
 8003a32:	f04f 0800 	mov.w	r8, #0
 8003a36:	f104 0b1a 	add.w	fp, r4, #26
 8003a3a:	e7f4      	b.n	8003a26 <_printf_float+0x40e>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4642      	mov	r2, r8
 8003a40:	e7e1      	b.n	8003a06 <_printf_float+0x3ee>
 8003a42:	2301      	movs	r3, #1
 8003a44:	464a      	mov	r2, r9
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f ae3e 	beq.w	80036ce <_printf_float+0xb6>
 8003a52:	f108 0801 	add.w	r8, r8, #1
 8003a56:	68e3      	ldr	r3, [r4, #12]
 8003a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	4543      	cmp	r3, r8
 8003a5e:	dcf0      	bgt.n	8003a42 <_printf_float+0x42a>
 8003a60:	e6fc      	b.n	800385c <_printf_float+0x244>
 8003a62:	f04f 0800 	mov.w	r8, #0
 8003a66:	f104 0919 	add.w	r9, r4, #25
 8003a6a:	e7f4      	b.n	8003a56 <_printf_float+0x43e>

08003a6c <_printf_common>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	4616      	mov	r6, r2
 8003a72:	4698      	mov	r8, r3
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	690b      	ldr	r3, [r1, #16]
 8003a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bfb8      	it	lt
 8003a80:	4613      	movlt	r3, r2
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a88:	4607      	mov	r7, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_printf_common+0x26>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	0699      	lsls	r1, r3, #26
 8003a96:	bf42      	ittt	mi
 8003a98:	6833      	ldrmi	r3, [r6, #0]
 8003a9a:	3302      	addmi	r3, #2
 8003a9c:	6033      	strmi	r3, [r6, #0]
 8003a9e:	6825      	ldr	r5, [r4, #0]
 8003aa0:	f015 0506 	ands.w	r5, r5, #6
 8003aa4:	d106      	bne.n	8003ab4 <_printf_common+0x48>
 8003aa6:	f104 0a19 	add.w	sl, r4, #25
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	6832      	ldr	r2, [r6, #0]
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	dc26      	bgt.n	8003b02 <_printf_common+0x96>
 8003ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	3b00      	subs	r3, #0
 8003abc:	bf18      	it	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	0692      	lsls	r2, r2, #26
 8003ac2:	d42b      	bmi.n	8003b1c <_printf_common+0xb0>
 8003ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ac8:	4641      	mov	r1, r8
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c8      	blx	r9
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d01e      	beq.n	8003b10 <_printf_common+0xa4>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf02      	ittt	eq
 8003ade:	68e5      	ldreq	r5, [r4, #12]
 8003ae0:	6833      	ldreq	r3, [r6, #0]
 8003ae2:	1aed      	subeq	r5, r5, r3
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	bf0c      	ite	eq
 8003ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aec:	2500      	movne	r5, #0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bfc4      	itt	gt
 8003af2:	1a9b      	subgt	r3, r3, r2
 8003af4:	18ed      	addgt	r5, r5, r3
 8003af6:	2600      	movs	r6, #0
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xc8>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xa8>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4641      	mov	r1, r8
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c8      	blx	r9
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xac>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c6      	b.n	8003aaa <_printf_common+0x3e>
 8003b1c:	18e1      	adds	r1, r4, r3
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	2030      	movs	r0, #48	@ 0x30
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b26:	4422      	add	r2, r4
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b30:	3302      	adds	r3, #2
 8003b32:	e7c7      	b.n	8003ac4 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4641      	mov	r1, r8
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c8      	blx	r9
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa4>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x8e>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b50:	2f78      	cmp	r7, #120	@ 0x78
 8003b52:	4691      	mov	r9, r2
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	469a      	mov	sl, r3
 8003b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	@ 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d2 	beq.w	8003d0e <_printf_i+0x1c6>
 8003b6a:	2f58      	cmp	r7, #88	@ 0x58
 8003b6c:	f000 80b9 	beq.w	8003ce2 <_printf_i+0x19a>
 8003b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	@ (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf5 	.word	0x08003cf5
 8003bb8:	08003c1f 	.word	0x08003c1f
 8003bbc:	08003caf 	.word	0x08003caf
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d17 	.word	0x08003d17
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c1f 	.word	0x08003c1f
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cb7 	.word	0x08003cb7
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6032      	str	r2, [r6, #0]
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09d      	b.n	8003d30 <_printf_i+0x1e8>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6031      	str	r1, [r6, #0]
 8003bfc:	0606      	lsls	r6, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xbc>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <_printf_i+0xc4>
 8003c04:	0645      	lsls	r5, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xb8>
 8003c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	da03      	bge.n	8003c18 <_printf_i+0xd0>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	426d      	negs	r5, r5
 8003c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c18:	4859      	ldr	r0, [pc, #356]	@ (8003d80 <_printf_i+0x238>)
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	e011      	b.n	8003c42 <_printf_i+0xfa>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	0608      	lsls	r0, r1, #24
 8003c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0xe8>
 8003c2a:	0649      	lsls	r1, r1, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2ad      	uxthmi	r5, r5
 8003c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c32:	4853      	ldr	r0, [pc, #332]	@ (8003d80 <_printf_i+0x238>)
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	bf14      	ite	ne
 8003c38:	230a      	movne	r3, #10
 8003c3a:	2308      	moveq	r3, #8
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c42:	6866      	ldr	r6, [r4, #4]
 8003c44:	60a6      	str	r6, [r4, #8]
 8003c46:	2e00      	cmp	r6, #0
 8003c48:	bfa2      	ittt	ge
 8003c4a:	6821      	ldrge	r1, [r4, #0]
 8003c4c:	f021 0104 	bicge.w	r1, r1, #4
 8003c50:	6021      	strge	r1, [r4, #0]
 8003c52:	b90d      	cbnz	r5, 8003c58 <_printf_i+0x110>
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	d04b      	beq.n	8003cf0 <_printf_i+0x1a8>
 8003c58:	4616      	mov	r6, r2
 8003c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8003c62:	5dc7      	ldrb	r7, [r0, r7]
 8003c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c68:	462f      	mov	r7, r5
 8003c6a:	42bb      	cmp	r3, r7
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	d9f4      	bls.n	8003c5a <_printf_i+0x112>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <_printf_i+0x144>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	07df      	lsls	r7, r3, #31
 8003c78:	d508      	bpl.n	8003c8c <_printf_i+0x144>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	6861      	ldr	r1, [r4, #4]
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	bfde      	ittt	le
 8003c82:	2330      	movle	r3, #48	@ 0x30
 8003c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c8c:	1b92      	subs	r2, r2, r6
 8003c8e:	6122      	str	r2, [r4, #16]
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	464b      	mov	r3, r9
 8003c96:	aa03      	add	r2, sp, #12
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fee6 	bl	8003a6c <_printf_common>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d14a      	bne.n	8003d3a <_printf_i+0x1f2>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b004      	add	sp, #16
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	4833      	ldr	r0, [pc, #204]	@ (8003d84 <_printf_i+0x23c>)
 8003cb8:	2778      	movs	r7, #120	@ 0x78
 8003cba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	6831      	ldr	r1, [r6, #0]
 8003cc2:	061f      	lsls	r7, r3, #24
 8003cc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cc8:	d402      	bmi.n	8003cd0 <_printf_i+0x188>
 8003cca:	065f      	lsls	r7, r3, #25
 8003ccc:	bf48      	it	mi
 8003cce:	b2ad      	uxthmi	r5, r5
 8003cd0:	6031      	str	r1, [r6, #0]
 8003cd2:	07d9      	lsls	r1, r3, #31
 8003cd4:	bf44      	itt	mi
 8003cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8003cda:	6023      	strmi	r3, [r4, #0]
 8003cdc:	b11d      	cbz	r5, 8003ce6 <_printf_i+0x19e>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	e7ac      	b.n	8003c3c <_printf_i+0xf4>
 8003ce2:	4827      	ldr	r0, [pc, #156]	@ (8003d80 <_printf_i+0x238>)
 8003ce4:	e7e9      	b.n	8003cba <_printf_i+0x172>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	e7f6      	b.n	8003cde <_printf_i+0x196>
 8003cf0:	4616      	mov	r6, r2
 8003cf2:	e7bd      	b.n	8003c70 <_printf_i+0x128>
 8003cf4:	6833      	ldr	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	1d18      	adds	r0, r3, #4
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	062e      	lsls	r6, r5, #24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0x1c0>
 8003d04:	6019      	str	r1, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <_printf_i+0x1c6>
 8003d08:	0668      	lsls	r0, r5, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0x1bc>
 8003d0c:	8019      	strh	r1, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	4616      	mov	r6, r2
 8003d14:	e7bc      	b.n	8003c90 <_printf_i+0x148>
 8003d16:	6833      	ldr	r3, [r6, #0]
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	681e      	ldr	r6, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7fc fa74 	bl	8000210 <memchr>
 8003d28:	b108      	cbz	r0, 8003d2e <_printf_i+0x1e6>
 8003d2a:	1b80      	subs	r0, r0, r6
 8003d2c:	6060      	str	r0, [r4, #4]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d38:	e7aa      	b.n	8003c90 <_printf_i+0x148>
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	47d0      	blx	sl
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0ad      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	079b      	lsls	r3, r3, #30
 8003d4c:	d413      	bmi.n	8003d76 <_printf_i+0x22e>
 8003d4e:	68e0      	ldr	r0, [r4, #12]
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	4298      	cmp	r0, r3
 8003d54:	bfb8      	it	lt
 8003d56:	4618      	movlt	r0, r3
 8003d58:	e7a6      	b.n	8003ca8 <_printf_i+0x160>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	47d0      	blx	sl
 8003d64:	3001      	adds	r0, #1
 8003d66:	d09d      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	9903      	ldr	r1, [sp, #12]
 8003d6e:	1a5b      	subs	r3, r3, r1
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dcf2      	bgt.n	8003d5a <_printf_i+0x212>
 8003d74:	e7eb      	b.n	8003d4e <_printf_i+0x206>
 8003d76:	2500      	movs	r5, #0
 8003d78:	f104 0619 	add.w	r6, r4, #25
 8003d7c:	e7f5      	b.n	8003d6a <_printf_i+0x222>
 8003d7e:	bf00      	nop
 8003d80:	08007bea 	.word	0x08007bea
 8003d84:	08007bfb 	.word	0x08007bfb

08003d88 <_scanf_float>:
 8003d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	4617      	mov	r7, r2
 8003d90:	9303      	str	r3, [sp, #12]
 8003d92:	688b      	ldr	r3, [r1, #8]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003d9a:	bf81      	itttt	hi
 8003d9c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003da0:	eb03 0b05 	addhi.w	fp, r3, r5
 8003da4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003da8:	608b      	strhi	r3, [r1, #8]
 8003daa:	680b      	ldr	r3, [r1, #0]
 8003dac:	460a      	mov	r2, r1
 8003dae:	f04f 0500 	mov.w	r5, #0
 8003db2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003db6:	f842 3b1c 	str.w	r3, [r2], #28
 8003dba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	bf98      	it	ls
 8003dc4:	f04f 0b00 	movls.w	fp, #0
 8003dc8:	9201      	str	r2, [sp, #4]
 8003dca:	4616      	mov	r6, r2
 8003dcc:	46aa      	mov	sl, r5
 8003dce:	46a9      	mov	r9, r5
 8003dd0:	9502      	str	r5, [sp, #8]
 8003dd2:	68a2      	ldr	r2, [r4, #8]
 8003dd4:	b152      	cbz	r2, 8003dec <_scanf_float+0x64>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b4e      	cmp	r3, #78	@ 0x4e
 8003ddc:	d864      	bhi.n	8003ea8 <_scanf_float+0x120>
 8003dde:	2b40      	cmp	r3, #64	@ 0x40
 8003de0:	d83c      	bhi.n	8003e5c <_scanf_float+0xd4>
 8003de2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003de6:	b2c8      	uxtb	r0, r1
 8003de8:	280e      	cmp	r0, #14
 8003dea:	d93a      	bls.n	8003e62 <_scanf_float+0xda>
 8003dec:	f1b9 0f00 	cmp.w	r9, #0
 8003df0:	d003      	beq.n	8003dfa <_scanf_float+0x72>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003dfe:	f1ba 0f01 	cmp.w	sl, #1
 8003e02:	f200 8117 	bhi.w	8004034 <_scanf_float+0x2ac>
 8003e06:	9b01      	ldr	r3, [sp, #4]
 8003e08:	429e      	cmp	r6, r3
 8003e0a:	f200 8108 	bhi.w	800401e <_scanf_float+0x296>
 8003e0e:	2001      	movs	r0, #1
 8003e10:	b007      	add	sp, #28
 8003e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e16:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003e1a:	2a0d      	cmp	r2, #13
 8003e1c:	d8e6      	bhi.n	8003dec <_scanf_float+0x64>
 8003e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e24 <_scanf_float+0x9c>)
 8003e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003e24:	08003f6b 	.word	0x08003f6b
 8003e28:	08003ded 	.word	0x08003ded
 8003e2c:	08003ded 	.word	0x08003ded
 8003e30:	08003ded 	.word	0x08003ded
 8003e34:	08003fcb 	.word	0x08003fcb
 8003e38:	08003fa3 	.word	0x08003fa3
 8003e3c:	08003ded 	.word	0x08003ded
 8003e40:	08003ded 	.word	0x08003ded
 8003e44:	08003f79 	.word	0x08003f79
 8003e48:	08003ded 	.word	0x08003ded
 8003e4c:	08003ded 	.word	0x08003ded
 8003e50:	08003ded 	.word	0x08003ded
 8003e54:	08003ded 	.word	0x08003ded
 8003e58:	08003f31 	.word	0x08003f31
 8003e5c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003e60:	e7db      	b.n	8003e1a <_scanf_float+0x92>
 8003e62:	290e      	cmp	r1, #14
 8003e64:	d8c2      	bhi.n	8003dec <_scanf_float+0x64>
 8003e66:	a001      	add	r0, pc, #4	@ (adr r0, 8003e6c <_scanf_float+0xe4>)
 8003e68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003e6c:	08003f21 	.word	0x08003f21
 8003e70:	08003ded 	.word	0x08003ded
 8003e74:	08003f21 	.word	0x08003f21
 8003e78:	08003fb7 	.word	0x08003fb7
 8003e7c:	08003ded 	.word	0x08003ded
 8003e80:	08003ec9 	.word	0x08003ec9
 8003e84:	08003f07 	.word	0x08003f07
 8003e88:	08003f07 	.word	0x08003f07
 8003e8c:	08003f07 	.word	0x08003f07
 8003e90:	08003f07 	.word	0x08003f07
 8003e94:	08003f07 	.word	0x08003f07
 8003e98:	08003f07 	.word	0x08003f07
 8003e9c:	08003f07 	.word	0x08003f07
 8003ea0:	08003f07 	.word	0x08003f07
 8003ea4:	08003f07 	.word	0x08003f07
 8003ea8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003eaa:	d809      	bhi.n	8003ec0 <_scanf_float+0x138>
 8003eac:	2b60      	cmp	r3, #96	@ 0x60
 8003eae:	d8b2      	bhi.n	8003e16 <_scanf_float+0x8e>
 8003eb0:	2b54      	cmp	r3, #84	@ 0x54
 8003eb2:	d07b      	beq.n	8003fac <_scanf_float+0x224>
 8003eb4:	2b59      	cmp	r3, #89	@ 0x59
 8003eb6:	d199      	bne.n	8003dec <_scanf_float+0x64>
 8003eb8:	2d07      	cmp	r5, #7
 8003eba:	d197      	bne.n	8003dec <_scanf_float+0x64>
 8003ebc:	2508      	movs	r5, #8
 8003ebe:	e02c      	b.n	8003f1a <_scanf_float+0x192>
 8003ec0:	2b74      	cmp	r3, #116	@ 0x74
 8003ec2:	d073      	beq.n	8003fac <_scanf_float+0x224>
 8003ec4:	2b79      	cmp	r3, #121	@ 0x79
 8003ec6:	e7f6      	b.n	8003eb6 <_scanf_float+0x12e>
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	05c8      	lsls	r0, r1, #23
 8003ecc:	d51b      	bpl.n	8003f06 <_scanf_float+0x17e>
 8003ece:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003ed2:	6021      	str	r1, [r4, #0]
 8003ed4:	f109 0901 	add.w	r9, r9, #1
 8003ed8:	f1bb 0f00 	cmp.w	fp, #0
 8003edc:	d003      	beq.n	8003ee6 <_scanf_float+0x15e>
 8003ede:	3201      	adds	r2, #1
 8003ee0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ee4:	60a2      	str	r2, [r4, #8]
 8003ee6:	68a3      	ldr	r3, [r4, #8]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60a3      	str	r3, [r4, #8]
 8003eec:	6923      	ldr	r3, [r4, #16]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6123      	str	r3, [r4, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	f340 8087 	ble.w	800400c <_scanf_float+0x284>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	e765      	b.n	8003dd2 <_scanf_float+0x4a>
 8003f06:	eb1a 0105 	adds.w	r1, sl, r5
 8003f0a:	f47f af6f 	bne.w	8003dec <_scanf_float+0x64>
 8003f0e:	6822      	ldr	r2, [r4, #0]
 8003f10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	460d      	mov	r5, r1
 8003f18:	468a      	mov	sl, r1
 8003f1a:	f806 3b01 	strb.w	r3, [r6], #1
 8003f1e:	e7e2      	b.n	8003ee6 <_scanf_float+0x15e>
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	0610      	lsls	r0, r2, #24
 8003f24:	f57f af62 	bpl.w	8003dec <_scanf_float+0x64>
 8003f28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f2c:	6022      	str	r2, [r4, #0]
 8003f2e:	e7f4      	b.n	8003f1a <_scanf_float+0x192>
 8003f30:	f1ba 0f00 	cmp.w	sl, #0
 8003f34:	d10e      	bne.n	8003f54 <_scanf_float+0x1cc>
 8003f36:	f1b9 0f00 	cmp.w	r9, #0
 8003f3a:	d10e      	bne.n	8003f5a <_scanf_float+0x1d2>
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003f42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003f46:	d108      	bne.n	8003f5a <_scanf_float+0x1d2>
 8003f48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	f04f 0a01 	mov.w	sl, #1
 8003f52:	e7e2      	b.n	8003f1a <_scanf_float+0x192>
 8003f54:	f1ba 0f02 	cmp.w	sl, #2
 8003f58:	d055      	beq.n	8004006 <_scanf_float+0x27e>
 8003f5a:	2d01      	cmp	r5, #1
 8003f5c:	d002      	beq.n	8003f64 <_scanf_float+0x1dc>
 8003f5e:	2d04      	cmp	r5, #4
 8003f60:	f47f af44 	bne.w	8003dec <_scanf_float+0x64>
 8003f64:	3501      	adds	r5, #1
 8003f66:	b2ed      	uxtb	r5, r5
 8003f68:	e7d7      	b.n	8003f1a <_scanf_float+0x192>
 8003f6a:	f1ba 0f01 	cmp.w	sl, #1
 8003f6e:	f47f af3d 	bne.w	8003dec <_scanf_float+0x64>
 8003f72:	f04f 0a02 	mov.w	sl, #2
 8003f76:	e7d0      	b.n	8003f1a <_scanf_float+0x192>
 8003f78:	b97d      	cbnz	r5, 8003f9a <_scanf_float+0x212>
 8003f7a:	f1b9 0f00 	cmp.w	r9, #0
 8003f7e:	f47f af38 	bne.w	8003df2 <_scanf_float+0x6a>
 8003f82:	6822      	ldr	r2, [r4, #0]
 8003f84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003f88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003f8c:	f040 8108 	bne.w	80041a0 <_scanf_float+0x418>
 8003f90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003f94:	6022      	str	r2, [r4, #0]
 8003f96:	2501      	movs	r5, #1
 8003f98:	e7bf      	b.n	8003f1a <_scanf_float+0x192>
 8003f9a:	2d03      	cmp	r5, #3
 8003f9c:	d0e2      	beq.n	8003f64 <_scanf_float+0x1dc>
 8003f9e:	2d05      	cmp	r5, #5
 8003fa0:	e7de      	b.n	8003f60 <_scanf_float+0x1d8>
 8003fa2:	2d02      	cmp	r5, #2
 8003fa4:	f47f af22 	bne.w	8003dec <_scanf_float+0x64>
 8003fa8:	2503      	movs	r5, #3
 8003faa:	e7b6      	b.n	8003f1a <_scanf_float+0x192>
 8003fac:	2d06      	cmp	r5, #6
 8003fae:	f47f af1d 	bne.w	8003dec <_scanf_float+0x64>
 8003fb2:	2507      	movs	r5, #7
 8003fb4:	e7b1      	b.n	8003f1a <_scanf_float+0x192>
 8003fb6:	6822      	ldr	r2, [r4, #0]
 8003fb8:	0591      	lsls	r1, r2, #22
 8003fba:	f57f af17 	bpl.w	8003dec <_scanf_float+0x64>
 8003fbe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	f8cd 9008 	str.w	r9, [sp, #8]
 8003fc8:	e7a7      	b.n	8003f1a <_scanf_float+0x192>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003fd0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003fd4:	d006      	beq.n	8003fe4 <_scanf_float+0x25c>
 8003fd6:	0550      	lsls	r0, r2, #21
 8003fd8:	f57f af08 	bpl.w	8003dec <_scanf_float+0x64>
 8003fdc:	f1b9 0f00 	cmp.w	r9, #0
 8003fe0:	f000 80de 	beq.w	80041a0 <_scanf_float+0x418>
 8003fe4:	0591      	lsls	r1, r2, #22
 8003fe6:	bf58      	it	pl
 8003fe8:	9902      	ldrpl	r1, [sp, #8]
 8003fea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003fee:	bf58      	it	pl
 8003ff0:	eba9 0101 	subpl.w	r1, r9, r1
 8003ff4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003ff8:	bf58      	it	pl
 8003ffa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003ffe:	6022      	str	r2, [r4, #0]
 8004000:	f04f 0900 	mov.w	r9, #0
 8004004:	e789      	b.n	8003f1a <_scanf_float+0x192>
 8004006:	f04f 0a03 	mov.w	sl, #3
 800400a:	e786      	b.n	8003f1a <_scanf_float+0x192>
 800400c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004010:	4639      	mov	r1, r7
 8004012:	4640      	mov	r0, r8
 8004014:	4798      	blx	r3
 8004016:	2800      	cmp	r0, #0
 8004018:	f43f aedb 	beq.w	8003dd2 <_scanf_float+0x4a>
 800401c:	e6e6      	b.n	8003dec <_scanf_float+0x64>
 800401e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004022:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004026:	463a      	mov	r2, r7
 8004028:	4640      	mov	r0, r8
 800402a:	4798      	blx	r3
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	3b01      	subs	r3, #1
 8004030:	6123      	str	r3, [r4, #16]
 8004032:	e6e8      	b.n	8003e06 <_scanf_float+0x7e>
 8004034:	1e6b      	subs	r3, r5, #1
 8004036:	2b06      	cmp	r3, #6
 8004038:	d824      	bhi.n	8004084 <_scanf_float+0x2fc>
 800403a:	2d02      	cmp	r5, #2
 800403c:	d836      	bhi.n	80040ac <_scanf_float+0x324>
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	429e      	cmp	r6, r3
 8004042:	f67f aee4 	bls.w	8003e0e <_scanf_float+0x86>
 8004046:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800404a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800404e:	463a      	mov	r2, r7
 8004050:	4640      	mov	r0, r8
 8004052:	4798      	blx	r3
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	3b01      	subs	r3, #1
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	e7f0      	b.n	800403e <_scanf_float+0x2b6>
 800405c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004060:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004064:	463a      	mov	r2, r7
 8004066:	4640      	mov	r0, r8
 8004068:	4798      	blx	r3
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	3b01      	subs	r3, #1
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004074:	fa5f fa8a 	uxtb.w	sl, sl
 8004078:	f1ba 0f02 	cmp.w	sl, #2
 800407c:	d1ee      	bne.n	800405c <_scanf_float+0x2d4>
 800407e:	3d03      	subs	r5, #3
 8004080:	b2ed      	uxtb	r5, r5
 8004082:	1b76      	subs	r6, r6, r5
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	05da      	lsls	r2, r3, #23
 8004088:	d530      	bpl.n	80040ec <_scanf_float+0x364>
 800408a:	055b      	lsls	r3, r3, #21
 800408c:	d511      	bpl.n	80040b2 <_scanf_float+0x32a>
 800408e:	9b01      	ldr	r3, [sp, #4]
 8004090:	429e      	cmp	r6, r3
 8004092:	f67f aebc 	bls.w	8003e0e <_scanf_float+0x86>
 8004096:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800409a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800409e:	463a      	mov	r2, r7
 80040a0:	4640      	mov	r0, r8
 80040a2:	4798      	blx	r3
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	e7f0      	b.n	800408e <_scanf_float+0x306>
 80040ac:	46aa      	mov	sl, r5
 80040ae:	46b3      	mov	fp, r6
 80040b0:	e7de      	b.n	8004070 <_scanf_float+0x2e8>
 80040b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	2965      	cmp	r1, #101	@ 0x65
 80040ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80040be:	f106 35ff 	add.w	r5, r6, #4294967295
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	d00c      	beq.n	80040e0 <_scanf_float+0x358>
 80040c6:	2945      	cmp	r1, #69	@ 0x45
 80040c8:	d00a      	beq.n	80040e0 <_scanf_float+0x358>
 80040ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80040ce:	463a      	mov	r2, r7
 80040d0:	4640      	mov	r0, r8
 80040d2:	4798      	blx	r3
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80040da:	3b01      	subs	r3, #1
 80040dc:	1eb5      	subs	r5, r6, #2
 80040de:	6123      	str	r3, [r4, #16]
 80040e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80040e4:	463a      	mov	r2, r7
 80040e6:	4640      	mov	r0, r8
 80040e8:	4798      	blx	r3
 80040ea:	462e      	mov	r6, r5
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	f012 0210 	ands.w	r2, r2, #16
 80040f2:	d001      	beq.n	80040f8 <_scanf_float+0x370>
 80040f4:	2000      	movs	r0, #0
 80040f6:	e68b      	b.n	8003e10 <_scanf_float+0x88>
 80040f8:	7032      	strb	r2, [r6, #0]
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004104:	d11c      	bne.n	8004140 <_scanf_float+0x3b8>
 8004106:	9b02      	ldr	r3, [sp, #8]
 8004108:	454b      	cmp	r3, r9
 800410a:	eba3 0209 	sub.w	r2, r3, r9
 800410e:	d123      	bne.n	8004158 <_scanf_float+0x3d0>
 8004110:	9901      	ldr	r1, [sp, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	4640      	mov	r0, r8
 8004116:	f002 fbf7 	bl	8006908 <_strtod_r>
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	6821      	ldr	r1, [r4, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f011 0f02 	tst.w	r1, #2
 8004124:	ec57 6b10 	vmov	r6, r7, d0
 8004128:	f103 0204 	add.w	r2, r3, #4
 800412c:	d01f      	beq.n	800416e <_scanf_float+0x3e6>
 800412e:	9903      	ldr	r1, [sp, #12]
 8004130:	600a      	str	r2, [r1, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	e9c3 6700 	strd	r6, r7, [r3]
 8004138:	68e3      	ldr	r3, [r4, #12]
 800413a:	3301      	adds	r3, #1
 800413c:	60e3      	str	r3, [r4, #12]
 800413e:	e7d9      	b.n	80040f4 <_scanf_float+0x36c>
 8004140:	9b04      	ldr	r3, [sp, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0e4      	beq.n	8004110 <_scanf_float+0x388>
 8004146:	9905      	ldr	r1, [sp, #20]
 8004148:	230a      	movs	r3, #10
 800414a:	3101      	adds	r1, #1
 800414c:	4640      	mov	r0, r8
 800414e:	f002 fc5b 	bl	8006a08 <_strtol_r>
 8004152:	9b04      	ldr	r3, [sp, #16]
 8004154:	9e05      	ldr	r6, [sp, #20]
 8004156:	1ac2      	subs	r2, r0, r3
 8004158:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800415c:	429e      	cmp	r6, r3
 800415e:	bf28      	it	cs
 8004160:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004164:	4910      	ldr	r1, [pc, #64]	@ (80041a8 <_scanf_float+0x420>)
 8004166:	4630      	mov	r0, r6
 8004168:	f000 f8e4 	bl	8004334 <siprintf>
 800416c:	e7d0      	b.n	8004110 <_scanf_float+0x388>
 800416e:	f011 0f04 	tst.w	r1, #4
 8004172:	9903      	ldr	r1, [sp, #12]
 8004174:	600a      	str	r2, [r1, #0]
 8004176:	d1dc      	bne.n	8004132 <_scanf_float+0x3aa>
 8004178:	681d      	ldr	r5, [r3, #0]
 800417a:	4632      	mov	r2, r6
 800417c:	463b      	mov	r3, r7
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f7fc fcf3 	bl	8000b6c <__aeabi_dcmpun>
 8004186:	b128      	cbz	r0, 8004194 <_scanf_float+0x40c>
 8004188:	4808      	ldr	r0, [pc, #32]	@ (80041ac <_scanf_float+0x424>)
 800418a:	f000 f9b7 	bl	80044fc <nanf>
 800418e:	ed85 0a00 	vstr	s0, [r5]
 8004192:	e7d1      	b.n	8004138 <_scanf_float+0x3b0>
 8004194:	4630      	mov	r0, r6
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc fd46 	bl	8000c28 <__aeabi_d2f>
 800419c:	6028      	str	r0, [r5, #0]
 800419e:	e7cb      	b.n	8004138 <_scanf_float+0x3b0>
 80041a0:	f04f 0900 	mov.w	r9, #0
 80041a4:	e629      	b.n	8003dfa <_scanf_float+0x72>
 80041a6:	bf00      	nop
 80041a8:	08007c0c 	.word	0x08007c0c
 80041ac:	08007fa5 	.word	0x08007fa5

080041b0 <std>:
 80041b0:	2300      	movs	r3, #0
 80041b2:	b510      	push	{r4, lr}
 80041b4:	4604      	mov	r4, r0
 80041b6:	e9c0 3300 	strd	r3, r3, [r0]
 80041ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041be:	6083      	str	r3, [r0, #8]
 80041c0:	8181      	strh	r1, [r0, #12]
 80041c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80041c4:	81c2      	strh	r2, [r0, #14]
 80041c6:	6183      	str	r3, [r0, #24]
 80041c8:	4619      	mov	r1, r3
 80041ca:	2208      	movs	r2, #8
 80041cc:	305c      	adds	r0, #92	@ 0x5c
 80041ce:	f000 f914 	bl	80043fa <memset>
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <std+0x58>)
 80041d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <std+0x5c>)
 80041d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <std+0x60>)
 80041dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <std+0x64>)
 80041e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <std+0x68>)
 80041e4:	6224      	str	r4, [r4, #32]
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d006      	beq.n	80041f8 <std+0x48>
 80041ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041ee:	4294      	cmp	r4, r2
 80041f0:	d002      	beq.n	80041f8 <std+0x48>
 80041f2:	33d0      	adds	r3, #208	@ 0xd0
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d105      	bne.n	8004204 <std+0x54>
 80041f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004200:	f000 b978 	b.w	80044f4 <__retarget_lock_init_recursive>
 8004204:	bd10      	pop	{r4, pc}
 8004206:	bf00      	nop
 8004208:	08004375 	.word	0x08004375
 800420c:	08004397 	.word	0x08004397
 8004210:	080043cf 	.word	0x080043cf
 8004214:	080043f3 	.word	0x080043f3
 8004218:	20000334 	.word	0x20000334

0800421c <stdio_exit_handler>:
 800421c:	4a02      	ldr	r2, [pc, #8]	@ (8004228 <stdio_exit_handler+0xc>)
 800421e:	4903      	ldr	r1, [pc, #12]	@ (800422c <stdio_exit_handler+0x10>)
 8004220:	4803      	ldr	r0, [pc, #12]	@ (8004230 <stdio_exit_handler+0x14>)
 8004222:	f000 b869 	b.w	80042f8 <_fwalk_sglue>
 8004226:	bf00      	nop
 8004228:	2000000c 	.word	0x2000000c
 800422c:	08006dc5 	.word	0x08006dc5
 8004230:	2000001c 	.word	0x2000001c

08004234 <cleanup_stdio>:
 8004234:	6841      	ldr	r1, [r0, #4]
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <cleanup_stdio+0x34>)
 8004238:	4299      	cmp	r1, r3
 800423a:	b510      	push	{r4, lr}
 800423c:	4604      	mov	r4, r0
 800423e:	d001      	beq.n	8004244 <cleanup_stdio+0x10>
 8004240:	f002 fdc0 	bl	8006dc4 <_fflush_r>
 8004244:	68a1      	ldr	r1, [r4, #8]
 8004246:	4b09      	ldr	r3, [pc, #36]	@ (800426c <cleanup_stdio+0x38>)
 8004248:	4299      	cmp	r1, r3
 800424a:	d002      	beq.n	8004252 <cleanup_stdio+0x1e>
 800424c:	4620      	mov	r0, r4
 800424e:	f002 fdb9 	bl	8006dc4 <_fflush_r>
 8004252:	68e1      	ldr	r1, [r4, #12]
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <cleanup_stdio+0x3c>)
 8004256:	4299      	cmp	r1, r3
 8004258:	d004      	beq.n	8004264 <cleanup_stdio+0x30>
 800425a:	4620      	mov	r0, r4
 800425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004260:	f002 bdb0 	b.w	8006dc4 <_fflush_r>
 8004264:	bd10      	pop	{r4, pc}
 8004266:	bf00      	nop
 8004268:	20000334 	.word	0x20000334
 800426c:	2000039c 	.word	0x2000039c
 8004270:	20000404 	.word	0x20000404

08004274 <global_stdio_init.part.0>:
 8004274:	b510      	push	{r4, lr}
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <global_stdio_init.part.0+0x30>)
 8004278:	4c0b      	ldr	r4, [pc, #44]	@ (80042a8 <global_stdio_init.part.0+0x34>)
 800427a:	4a0c      	ldr	r2, [pc, #48]	@ (80042ac <global_stdio_init.part.0+0x38>)
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	4620      	mov	r0, r4
 8004280:	2200      	movs	r2, #0
 8004282:	2104      	movs	r1, #4
 8004284:	f7ff ff94 	bl	80041b0 <std>
 8004288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800428c:	2201      	movs	r2, #1
 800428e:	2109      	movs	r1, #9
 8004290:	f7ff ff8e 	bl	80041b0 <std>
 8004294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004298:	2202      	movs	r2, #2
 800429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800429e:	2112      	movs	r1, #18
 80042a0:	f7ff bf86 	b.w	80041b0 <std>
 80042a4:	2000046c 	.word	0x2000046c
 80042a8:	20000334 	.word	0x20000334
 80042ac:	0800421d 	.word	0x0800421d

080042b0 <__sfp_lock_acquire>:
 80042b0:	4801      	ldr	r0, [pc, #4]	@ (80042b8 <__sfp_lock_acquire+0x8>)
 80042b2:	f000 b920 	b.w	80044f6 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000475 	.word	0x20000475

080042bc <__sfp_lock_release>:
 80042bc:	4801      	ldr	r0, [pc, #4]	@ (80042c4 <__sfp_lock_release+0x8>)
 80042be:	f000 b91b 	b.w	80044f8 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	20000475 	.word	0x20000475

080042c8 <__sinit>:
 80042c8:	b510      	push	{r4, lr}
 80042ca:	4604      	mov	r4, r0
 80042cc:	f7ff fff0 	bl	80042b0 <__sfp_lock_acquire>
 80042d0:	6a23      	ldr	r3, [r4, #32]
 80042d2:	b11b      	cbz	r3, 80042dc <__sinit+0x14>
 80042d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d8:	f7ff bff0 	b.w	80042bc <__sfp_lock_release>
 80042dc:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <__sinit+0x28>)
 80042de:	6223      	str	r3, [r4, #32]
 80042e0:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <__sinit+0x2c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f5      	bne.n	80042d4 <__sinit+0xc>
 80042e8:	f7ff ffc4 	bl	8004274 <global_stdio_init.part.0>
 80042ec:	e7f2      	b.n	80042d4 <__sinit+0xc>
 80042ee:	bf00      	nop
 80042f0:	08004235 	.word	0x08004235
 80042f4:	2000046c 	.word	0x2000046c

080042f8 <_fwalk_sglue>:
 80042f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042fc:	4607      	mov	r7, r0
 80042fe:	4688      	mov	r8, r1
 8004300:	4614      	mov	r4, r2
 8004302:	2600      	movs	r6, #0
 8004304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004308:	f1b9 0901 	subs.w	r9, r9, #1
 800430c:	d505      	bpl.n	800431a <_fwalk_sglue+0x22>
 800430e:	6824      	ldr	r4, [r4, #0]
 8004310:	2c00      	cmp	r4, #0
 8004312:	d1f7      	bne.n	8004304 <_fwalk_sglue+0xc>
 8004314:	4630      	mov	r0, r6
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800431a:	89ab      	ldrh	r3, [r5, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d907      	bls.n	8004330 <_fwalk_sglue+0x38>
 8004320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004324:	3301      	adds	r3, #1
 8004326:	d003      	beq.n	8004330 <_fwalk_sglue+0x38>
 8004328:	4629      	mov	r1, r5
 800432a:	4638      	mov	r0, r7
 800432c:	47c0      	blx	r8
 800432e:	4306      	orrs	r6, r0
 8004330:	3568      	adds	r5, #104	@ 0x68
 8004332:	e7e9      	b.n	8004308 <_fwalk_sglue+0x10>

08004334 <siprintf>:
 8004334:	b40e      	push	{r1, r2, r3}
 8004336:	b500      	push	{lr}
 8004338:	b09c      	sub	sp, #112	@ 0x70
 800433a:	ab1d      	add	r3, sp, #116	@ 0x74
 800433c:	9002      	str	r0, [sp, #8]
 800433e:	9006      	str	r0, [sp, #24]
 8004340:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004344:	4809      	ldr	r0, [pc, #36]	@ (800436c <siprintf+0x38>)
 8004346:	9107      	str	r1, [sp, #28]
 8004348:	9104      	str	r1, [sp, #16]
 800434a:	4909      	ldr	r1, [pc, #36]	@ (8004370 <siprintf+0x3c>)
 800434c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004350:	9105      	str	r1, [sp, #20]
 8004352:	6800      	ldr	r0, [r0, #0]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	a902      	add	r1, sp, #8
 8004358:	f002 fbb4 	bl	8006ac4 <_svfiprintf_r>
 800435c:	9b02      	ldr	r3, [sp, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	b01c      	add	sp, #112	@ 0x70
 8004364:	f85d eb04 	ldr.w	lr, [sp], #4
 8004368:	b003      	add	sp, #12
 800436a:	4770      	bx	lr
 800436c:	20000018 	.word	0x20000018
 8004370:	ffff0208 	.word	0xffff0208

08004374 <__sread>:
 8004374:	b510      	push	{r4, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f86c 	bl	8004458 <_read_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	bfab      	itete	ge
 8004384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004386:	89a3      	ldrhlt	r3, [r4, #12]
 8004388:	181b      	addge	r3, r3, r0
 800438a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800438e:	bfac      	ite	ge
 8004390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004392:	81a3      	strhlt	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__swrite>:
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	461f      	mov	r7, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	05db      	lsls	r3, r3, #23
 80043a0:	4605      	mov	r5, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4616      	mov	r6, r2
 80043a6:	d505      	bpl.n	80043b4 <__swrite+0x1e>
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	2302      	movs	r3, #2
 80043ae:	2200      	movs	r2, #0
 80043b0:	f000 f840 	bl	8004434 <_lseek_r>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	4628      	mov	r0, r5
 80043c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	f000 b857 	b.w	800447c <_write_r>

080043ce <__sseek>:
 80043ce:	b510      	push	{r4, lr}
 80043d0:	460c      	mov	r4, r1
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 f82d 	bl	8004434 <_lseek_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	bf15      	itete	ne
 80043e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ea:	81a3      	strheq	r3, [r4, #12]
 80043ec:	bf18      	it	ne
 80043ee:	81a3      	strhne	r3, [r4, #12]
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <__sclose>:
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 b80d 	b.w	8004414 <_close_r>

080043fa <memset>:
 80043fa:	4402      	add	r2, r0
 80043fc:	4603      	mov	r3, r0
 80043fe:	4293      	cmp	r3, r2
 8004400:	d100      	bne.n	8004404 <memset+0xa>
 8004402:	4770      	bx	lr
 8004404:	f803 1b01 	strb.w	r1, [r3], #1
 8004408:	e7f9      	b.n	80043fe <memset+0x4>
	...

0800440c <_localeconv_r>:
 800440c:	4800      	ldr	r0, [pc, #0]	@ (8004410 <_localeconv_r+0x4>)
 800440e:	4770      	bx	lr
 8004410:	20000158 	.word	0x20000158

08004414 <_close_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4d06      	ldr	r5, [pc, #24]	@ (8004430 <_close_r+0x1c>)
 8004418:	2300      	movs	r3, #0
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fd f87b 	bl	800151a <_close>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_close_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_close_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000470 	.word	0x20000470

08004434 <_lseek_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d07      	ldr	r5, [pc, #28]	@ (8004454 <_lseek_r+0x20>)
 8004438:	4604      	mov	r4, r0
 800443a:	4608      	mov	r0, r1
 800443c:	4611      	mov	r1, r2
 800443e:	2200      	movs	r2, #0
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f7fd f890 	bl	8001568 <_lseek>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_lseek_r+0x1e>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_lseek_r+0x1e>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	20000470 	.word	0x20000470

08004458 <_read_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4d07      	ldr	r5, [pc, #28]	@ (8004478 <_read_r+0x20>)
 800445c:	4604      	mov	r4, r0
 800445e:	4608      	mov	r0, r1
 8004460:	4611      	mov	r1, r2
 8004462:	2200      	movs	r2, #0
 8004464:	602a      	str	r2, [r5, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	f7fd f81e 	bl	80014a8 <_read>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_read_r+0x1e>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_read_r+0x1e>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000470 	.word	0x20000470

0800447c <_write_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4d07      	ldr	r5, [pc, #28]	@ (800449c <_write_r+0x20>)
 8004480:	4604      	mov	r4, r0
 8004482:	4608      	mov	r0, r1
 8004484:	4611      	mov	r1, r2
 8004486:	2200      	movs	r2, #0
 8004488:	602a      	str	r2, [r5, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f7fd f829 	bl	80014e2 <_write>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_write_r+0x1e>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_write_r+0x1e>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000470 	.word	0x20000470

080044a0 <__errno>:
 80044a0:	4b01      	ldr	r3, [pc, #4]	@ (80044a8 <__errno+0x8>)
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000018 	.word	0x20000018

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4d0d      	ldr	r5, [pc, #52]	@ (80044e4 <__libc_init_array+0x38>)
 80044b0:	4c0d      	ldr	r4, [pc, #52]	@ (80044e8 <__libc_init_array+0x3c>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	2600      	movs	r6, #0
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	4d0b      	ldr	r5, [pc, #44]	@ (80044ec <__libc_init_array+0x40>)
 80044be:	4c0c      	ldr	r4, [pc, #48]	@ (80044f0 <__libc_init_array+0x44>)
 80044c0:	f003 fb70 	bl	8007ba4 <_init>
 80044c4:	1b64      	subs	r4, r4, r5
 80044c6:	10a4      	asrs	r4, r4, #2
 80044c8:	2600      	movs	r6, #0
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	08008010 	.word	0x08008010
 80044e8:	08008010 	.word	0x08008010
 80044ec:	08008010 	.word	0x08008010
 80044f0:	08008014 	.word	0x08008014

080044f4 <__retarget_lock_init_recursive>:
 80044f4:	4770      	bx	lr

080044f6 <__retarget_lock_acquire_recursive>:
 80044f6:	4770      	bx	lr

080044f8 <__retarget_lock_release_recursive>:
 80044f8:	4770      	bx	lr
	...

080044fc <nanf>:
 80044fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004504 <nanf+0x8>
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	7fc00000 	.word	0x7fc00000

08004508 <quorem>:
 8004508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	6903      	ldr	r3, [r0, #16]
 800450e:	690c      	ldr	r4, [r1, #16]
 8004510:	42a3      	cmp	r3, r4
 8004512:	4607      	mov	r7, r0
 8004514:	db7e      	blt.n	8004614 <quorem+0x10c>
 8004516:	3c01      	subs	r4, #1
 8004518:	f101 0814 	add.w	r8, r1, #20
 800451c:	00a3      	lsls	r3, r4, #2
 800451e:	f100 0514 	add.w	r5, r0, #20
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800452e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004532:	3301      	adds	r3, #1
 8004534:	429a      	cmp	r2, r3
 8004536:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800453a:	fbb2 f6f3 	udiv	r6, r2, r3
 800453e:	d32e      	bcc.n	800459e <quorem+0x96>
 8004540:	f04f 0a00 	mov.w	sl, #0
 8004544:	46c4      	mov	ip, r8
 8004546:	46ae      	mov	lr, r5
 8004548:	46d3      	mov	fp, sl
 800454a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800454e:	b298      	uxth	r0, r3
 8004550:	fb06 a000 	mla	r0, r6, r0, sl
 8004554:	0c02      	lsrs	r2, r0, #16
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	fb06 2303 	mla	r3, r6, r3, r2
 800455c:	f8de 2000 	ldr.w	r2, [lr]
 8004560:	b280      	uxth	r0, r0
 8004562:	b292      	uxth	r2, r2
 8004564:	1a12      	subs	r2, r2, r0
 8004566:	445a      	add	r2, fp
 8004568:	f8de 0000 	ldr.w	r0, [lr]
 800456c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004570:	b29b      	uxth	r3, r3
 8004572:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004576:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800457a:	b292      	uxth	r2, r2
 800457c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004580:	45e1      	cmp	r9, ip
 8004582:	f84e 2b04 	str.w	r2, [lr], #4
 8004586:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800458a:	d2de      	bcs.n	800454a <quorem+0x42>
 800458c:	9b00      	ldr	r3, [sp, #0]
 800458e:	58eb      	ldr	r3, [r5, r3]
 8004590:	b92b      	cbnz	r3, 800459e <quorem+0x96>
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	3b04      	subs	r3, #4
 8004596:	429d      	cmp	r5, r3
 8004598:	461a      	mov	r2, r3
 800459a:	d32f      	bcc.n	80045fc <quorem+0xf4>
 800459c:	613c      	str	r4, [r7, #16]
 800459e:	4638      	mov	r0, r7
 80045a0:	f001 f9c2 	bl	8005928 <__mcmp>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	db25      	blt.n	80045f4 <quorem+0xec>
 80045a8:	4629      	mov	r1, r5
 80045aa:	2000      	movs	r0, #0
 80045ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80045b0:	f8d1 c000 	ldr.w	ip, [r1]
 80045b4:	fa1f fe82 	uxth.w	lr, r2
 80045b8:	fa1f f38c 	uxth.w	r3, ip
 80045bc:	eba3 030e 	sub.w	r3, r3, lr
 80045c0:	4403      	add	r3, r0
 80045c2:	0c12      	lsrs	r2, r2, #16
 80045c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045d2:	45c1      	cmp	r9, r8
 80045d4:	f841 3b04 	str.w	r3, [r1], #4
 80045d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045dc:	d2e6      	bcs.n	80045ac <quorem+0xa4>
 80045de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045e6:	b922      	cbnz	r2, 80045f2 <quorem+0xea>
 80045e8:	3b04      	subs	r3, #4
 80045ea:	429d      	cmp	r5, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	d30b      	bcc.n	8004608 <quorem+0x100>
 80045f0:	613c      	str	r4, [r7, #16]
 80045f2:	3601      	adds	r6, #1
 80045f4:	4630      	mov	r0, r6
 80045f6:	b003      	add	sp, #12
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	3b04      	subs	r3, #4
 8004600:	2a00      	cmp	r2, #0
 8004602:	d1cb      	bne.n	800459c <quorem+0x94>
 8004604:	3c01      	subs	r4, #1
 8004606:	e7c6      	b.n	8004596 <quorem+0x8e>
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	3b04      	subs	r3, #4
 800460c:	2a00      	cmp	r2, #0
 800460e:	d1ef      	bne.n	80045f0 <quorem+0xe8>
 8004610:	3c01      	subs	r4, #1
 8004612:	e7ea      	b.n	80045ea <quorem+0xe2>
 8004614:	2000      	movs	r0, #0
 8004616:	e7ee      	b.n	80045f6 <quorem+0xee>

08004618 <_dtoa_r>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	69c7      	ldr	r7, [r0, #28]
 800461e:	b099      	sub	sp, #100	@ 0x64
 8004620:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004624:	ec55 4b10 	vmov	r4, r5, d0
 8004628:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800462a:	9109      	str	r1, [sp, #36]	@ 0x24
 800462c:	4683      	mov	fp, r0
 800462e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004630:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004632:	b97f      	cbnz	r7, 8004654 <_dtoa_r+0x3c>
 8004634:	2010      	movs	r0, #16
 8004636:	f000 fdfd 	bl	8005234 <malloc>
 800463a:	4602      	mov	r2, r0
 800463c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004640:	b920      	cbnz	r0, 800464c <_dtoa_r+0x34>
 8004642:	4ba7      	ldr	r3, [pc, #668]	@ (80048e0 <_dtoa_r+0x2c8>)
 8004644:	21ef      	movs	r1, #239	@ 0xef
 8004646:	48a7      	ldr	r0, [pc, #668]	@ (80048e4 <_dtoa_r+0x2cc>)
 8004648:	f002 fc36 	bl	8006eb8 <__assert_func>
 800464c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004650:	6007      	str	r7, [r0, #0]
 8004652:	60c7      	str	r7, [r0, #12]
 8004654:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	b159      	cbz	r1, 8004674 <_dtoa_r+0x5c>
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	604a      	str	r2, [r1, #4]
 8004660:	2301      	movs	r3, #1
 8004662:	4093      	lsls	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
 8004666:	4658      	mov	r0, fp
 8004668:	f000 feda 	bl	8005420 <_Bfree>
 800466c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	1e2b      	subs	r3, r5, #0
 8004676:	bfb9      	ittee	lt
 8004678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800467c:	9303      	strlt	r3, [sp, #12]
 800467e:	2300      	movge	r3, #0
 8004680:	6033      	strge	r3, [r6, #0]
 8004682:	9f03      	ldr	r7, [sp, #12]
 8004684:	4b98      	ldr	r3, [pc, #608]	@ (80048e8 <_dtoa_r+0x2d0>)
 8004686:	bfbc      	itt	lt
 8004688:	2201      	movlt	r2, #1
 800468a:	6032      	strlt	r2, [r6, #0]
 800468c:	43bb      	bics	r3, r7
 800468e:	d112      	bne.n	80046b6 <_dtoa_r+0x9e>
 8004690:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800469c:	4323      	orrs	r3, r4
 800469e:	f000 854d 	beq.w	800513c <_dtoa_r+0xb24>
 80046a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80048fc <_dtoa_r+0x2e4>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 854f 	beq.w	800514c <_dtoa_r+0xb34>
 80046ae:	f10a 0303 	add.w	r3, sl, #3
 80046b2:	f000 bd49 	b.w	8005148 <_dtoa_r+0xb30>
 80046b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	ec51 0b17 	vmov	r0, r1, d7
 80046c0:	2300      	movs	r3, #0
 80046c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80046c6:	f7fc fa1f 	bl	8000b08 <__aeabi_dcmpeq>
 80046ca:	4680      	mov	r8, r0
 80046cc:	b158      	cbz	r0, 80046e6 <_dtoa_r+0xce>
 80046ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046d0:	2301      	movs	r3, #1
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046d6:	b113      	cbz	r3, 80046de <_dtoa_r+0xc6>
 80046d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80046da:	4b84      	ldr	r3, [pc, #528]	@ (80048ec <_dtoa_r+0x2d4>)
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004900 <_dtoa_r+0x2e8>
 80046e2:	f000 bd33 	b.w	800514c <_dtoa_r+0xb34>
 80046e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80046ea:	aa16      	add	r2, sp, #88	@ 0x58
 80046ec:	a917      	add	r1, sp, #92	@ 0x5c
 80046ee:	4658      	mov	r0, fp
 80046f0:	f001 fa3a 	bl	8005b68 <__d2b>
 80046f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80046f8:	4681      	mov	r9, r0
 80046fa:	2e00      	cmp	r6, #0
 80046fc:	d077      	beq.n	80047ee <_dtoa_r+0x1d6>
 80046fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004700:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800470c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004718:	4619      	mov	r1, r3
 800471a:	2200      	movs	r2, #0
 800471c:	4b74      	ldr	r3, [pc, #464]	@ (80048f0 <_dtoa_r+0x2d8>)
 800471e:	f7fb fdd3 	bl	80002c8 <__aeabi_dsub>
 8004722:	a369      	add	r3, pc, #420	@ (adr r3, 80048c8 <_dtoa_r+0x2b0>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb ff86 	bl	8000638 <__aeabi_dmul>
 800472c:	a368      	add	r3, pc, #416	@ (adr r3, 80048d0 <_dtoa_r+0x2b8>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fdcb 	bl	80002cc <__adddf3>
 8004736:	4604      	mov	r4, r0
 8004738:	4630      	mov	r0, r6
 800473a:	460d      	mov	r5, r1
 800473c:	f7fb ff12 	bl	8000564 <__aeabi_i2d>
 8004740:	a365      	add	r3, pc, #404	@ (adr r3, 80048d8 <_dtoa_r+0x2c0>)
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f7fb ff77 	bl	8000638 <__aeabi_dmul>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fdbb 	bl	80002cc <__adddf3>
 8004756:	4604      	mov	r4, r0
 8004758:	460d      	mov	r5, r1
 800475a:	f7fc fa1d 	bl	8000b98 <__aeabi_d2iz>
 800475e:	2200      	movs	r2, #0
 8004760:	4607      	mov	r7, r0
 8004762:	2300      	movs	r3, #0
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fc f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800476c:	b140      	cbz	r0, 8004780 <_dtoa_r+0x168>
 800476e:	4638      	mov	r0, r7
 8004770:	f7fb fef8 	bl	8000564 <__aeabi_i2d>
 8004774:	4622      	mov	r2, r4
 8004776:	462b      	mov	r3, r5
 8004778:	f7fc f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800477c:	b900      	cbnz	r0, 8004780 <_dtoa_r+0x168>
 800477e:	3f01      	subs	r7, #1
 8004780:	2f16      	cmp	r7, #22
 8004782:	d851      	bhi.n	8004828 <_dtoa_r+0x210>
 8004784:	4b5b      	ldr	r3, [pc, #364]	@ (80048f4 <_dtoa_r+0x2dc>)
 8004786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004792:	f7fc f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8004796:	2800      	cmp	r0, #0
 8004798:	d048      	beq.n	800482c <_dtoa_r+0x214>
 800479a:	3f01      	subs	r7, #1
 800479c:	2300      	movs	r3, #0
 800479e:	9312      	str	r3, [sp, #72]	@ 0x48
 80047a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047a2:	1b9b      	subs	r3, r3, r6
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	bf44      	itt	mi
 80047a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80047ac:	2300      	movmi	r3, #0
 80047ae:	9208      	str	r2, [sp, #32]
 80047b0:	bf54      	ite	pl
 80047b2:	f04f 0800 	movpl.w	r8, #0
 80047b6:	9308      	strmi	r3, [sp, #32]
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	db39      	blt.n	8004830 <_dtoa_r+0x218>
 80047bc:	9b08      	ldr	r3, [sp, #32]
 80047be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80047c0:	443b      	add	r3, r7
 80047c2:	9308      	str	r3, [sp, #32]
 80047c4:	2300      	movs	r3, #0
 80047c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ca:	2b09      	cmp	r3, #9
 80047cc:	d864      	bhi.n	8004898 <_dtoa_r+0x280>
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	bfc4      	itt	gt
 80047d2:	3b04      	subgt	r3, #4
 80047d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80047d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047d8:	f1a3 0302 	sub.w	r3, r3, #2
 80047dc:	bfcc      	ite	gt
 80047de:	2400      	movgt	r4, #0
 80047e0:	2401      	movle	r4, #1
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d863      	bhi.n	80048ae <_dtoa_r+0x296>
 80047e6:	e8df f003 	tbb	[pc, r3]
 80047ea:	372a      	.short	0x372a
 80047ec:	5535      	.short	0x5535
 80047ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80047f2:	441e      	add	r6, r3
 80047f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	bfc1      	itttt	gt
 80047fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004800:	409f      	lslgt	r7, r3
 8004802:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004806:	fa24 f303 	lsrgt.w	r3, r4, r3
 800480a:	bfd6      	itet	le
 800480c:	f1c3 0320 	rsble	r3, r3, #32
 8004810:	ea47 0003 	orrgt.w	r0, r7, r3
 8004814:	fa04 f003 	lslle.w	r0, r4, r3
 8004818:	f7fb fe94 	bl	8000544 <__aeabi_ui2d>
 800481c:	2201      	movs	r2, #1
 800481e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004822:	3e01      	subs	r6, #1
 8004824:	9214      	str	r2, [sp, #80]	@ 0x50
 8004826:	e777      	b.n	8004718 <_dtoa_r+0x100>
 8004828:	2301      	movs	r3, #1
 800482a:	e7b8      	b.n	800479e <_dtoa_r+0x186>
 800482c:	9012      	str	r0, [sp, #72]	@ 0x48
 800482e:	e7b7      	b.n	80047a0 <_dtoa_r+0x188>
 8004830:	427b      	negs	r3, r7
 8004832:	930a      	str	r3, [sp, #40]	@ 0x28
 8004834:	2300      	movs	r3, #0
 8004836:	eba8 0807 	sub.w	r8, r8, r7
 800483a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800483c:	e7c4      	b.n	80047c8 <_dtoa_r+0x1b0>
 800483e:	2300      	movs	r3, #0
 8004840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	dc35      	bgt.n	80048b4 <_dtoa_r+0x29c>
 8004848:	2301      	movs	r3, #1
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	9307      	str	r3, [sp, #28]
 800484e:	461a      	mov	r2, r3
 8004850:	920e      	str	r2, [sp, #56]	@ 0x38
 8004852:	e00b      	b.n	800486c <_dtoa_r+0x254>
 8004854:	2301      	movs	r3, #1
 8004856:	e7f3      	b.n	8004840 <_dtoa_r+0x228>
 8004858:	2300      	movs	r3, #0
 800485a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800485c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	bfb8      	it	lt
 800486a:	2301      	movlt	r3, #1
 800486c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004870:	2100      	movs	r1, #0
 8004872:	2204      	movs	r2, #4
 8004874:	f102 0514 	add.w	r5, r2, #20
 8004878:	429d      	cmp	r5, r3
 800487a:	d91f      	bls.n	80048bc <_dtoa_r+0x2a4>
 800487c:	6041      	str	r1, [r0, #4]
 800487e:	4658      	mov	r0, fp
 8004880:	f000 fd8e 	bl	80053a0 <_Balloc>
 8004884:	4682      	mov	sl, r0
 8004886:	2800      	cmp	r0, #0
 8004888:	d13c      	bne.n	8004904 <_dtoa_r+0x2ec>
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <_dtoa_r+0x2e0>)
 800488c:	4602      	mov	r2, r0
 800488e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004892:	e6d8      	b.n	8004646 <_dtoa_r+0x2e>
 8004894:	2301      	movs	r3, #1
 8004896:	e7e0      	b.n	800485a <_dtoa_r+0x242>
 8004898:	2401      	movs	r4, #1
 800489a:	2300      	movs	r3, #0
 800489c:	9309      	str	r3, [sp, #36]	@ 0x24
 800489e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2312      	movs	r3, #18
 80048ac:	e7d0      	b.n	8004850 <_dtoa_r+0x238>
 80048ae:	2301      	movs	r3, #1
 80048b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048b2:	e7f5      	b.n	80048a0 <_dtoa_r+0x288>
 80048b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	9307      	str	r3, [sp, #28]
 80048ba:	e7d7      	b.n	800486c <_dtoa_r+0x254>
 80048bc:	3101      	adds	r1, #1
 80048be:	0052      	lsls	r2, r2, #1
 80048c0:	e7d8      	b.n	8004874 <_dtoa_r+0x25c>
 80048c2:	bf00      	nop
 80048c4:	f3af 8000 	nop.w
 80048c8:	636f4361 	.word	0x636f4361
 80048cc:	3fd287a7 	.word	0x3fd287a7
 80048d0:	8b60c8b3 	.word	0x8b60c8b3
 80048d4:	3fc68a28 	.word	0x3fc68a28
 80048d8:	509f79fb 	.word	0x509f79fb
 80048dc:	3fd34413 	.word	0x3fd34413
 80048e0:	08007c1e 	.word	0x08007c1e
 80048e4:	08007c35 	.word	0x08007c35
 80048e8:	7ff00000 	.word	0x7ff00000
 80048ec:	08007be9 	.word	0x08007be9
 80048f0:	3ff80000 	.word	0x3ff80000
 80048f4:	08007d30 	.word	0x08007d30
 80048f8:	08007c8d 	.word	0x08007c8d
 80048fc:	08007c1a 	.word	0x08007c1a
 8004900:	08007be8 	.word	0x08007be8
 8004904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004908:	6018      	str	r0, [r3, #0]
 800490a:	9b07      	ldr	r3, [sp, #28]
 800490c:	2b0e      	cmp	r3, #14
 800490e:	f200 80a4 	bhi.w	8004a5a <_dtoa_r+0x442>
 8004912:	2c00      	cmp	r4, #0
 8004914:	f000 80a1 	beq.w	8004a5a <_dtoa_r+0x442>
 8004918:	2f00      	cmp	r7, #0
 800491a:	dd33      	ble.n	8004984 <_dtoa_r+0x36c>
 800491c:	4bad      	ldr	r3, [pc, #692]	@ (8004bd4 <_dtoa_r+0x5bc>)
 800491e:	f007 020f 	and.w	r2, r7, #15
 8004922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004926:	ed93 7b00 	vldr	d7, [r3]
 800492a:	05f8      	lsls	r0, r7, #23
 800492c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004930:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004934:	d516      	bpl.n	8004964 <_dtoa_r+0x34c>
 8004936:	4ba8      	ldr	r3, [pc, #672]	@ (8004bd8 <_dtoa_r+0x5c0>)
 8004938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800493c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004940:	f7fb ffa4 	bl	800088c <__aeabi_ddiv>
 8004944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004948:	f004 040f 	and.w	r4, r4, #15
 800494c:	2603      	movs	r6, #3
 800494e:	4da2      	ldr	r5, [pc, #648]	@ (8004bd8 <_dtoa_r+0x5c0>)
 8004950:	b954      	cbnz	r4, 8004968 <_dtoa_r+0x350>
 8004952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800495a:	f7fb ff97 	bl	800088c <__aeabi_ddiv>
 800495e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004962:	e028      	b.n	80049b6 <_dtoa_r+0x39e>
 8004964:	2602      	movs	r6, #2
 8004966:	e7f2      	b.n	800494e <_dtoa_r+0x336>
 8004968:	07e1      	lsls	r1, r4, #31
 800496a:	d508      	bpl.n	800497e <_dtoa_r+0x366>
 800496c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004974:	f7fb fe60 	bl	8000638 <__aeabi_dmul>
 8004978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800497c:	3601      	adds	r6, #1
 800497e:	1064      	asrs	r4, r4, #1
 8004980:	3508      	adds	r5, #8
 8004982:	e7e5      	b.n	8004950 <_dtoa_r+0x338>
 8004984:	f000 80d2 	beq.w	8004b2c <_dtoa_r+0x514>
 8004988:	427c      	negs	r4, r7
 800498a:	4b92      	ldr	r3, [pc, #584]	@ (8004bd4 <_dtoa_r+0x5bc>)
 800498c:	4d92      	ldr	r5, [pc, #584]	@ (8004bd8 <_dtoa_r+0x5c0>)
 800498e:	f004 020f 	and.w	r2, r4, #15
 8004992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800499e:	f7fb fe4b 	bl	8000638 <__aeabi_dmul>
 80049a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a6:	1124      	asrs	r4, r4, #4
 80049a8:	2300      	movs	r3, #0
 80049aa:	2602      	movs	r6, #2
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	f040 80b2 	bne.w	8004b16 <_dtoa_r+0x4fe>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d3      	bne.n	800495e <_dtoa_r+0x346>
 80049b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b7 	beq.w	8004b30 <_dtoa_r+0x518>
 80049c2:	4b86      	ldr	r3, [pc, #536]	@ (8004bdc <_dtoa_r+0x5c4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f8a7 	bl	8000b1c <__aeabi_dcmplt>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f000 80ae 	beq.w	8004b30 <_dtoa_r+0x518>
 80049d4:	9b07      	ldr	r3, [sp, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 80aa 	beq.w	8004b30 <_dtoa_r+0x518>
 80049dc:	9b00      	ldr	r3, [sp, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd37      	ble.n	8004a52 <_dtoa_r+0x43a>
 80049e2:	1e7b      	subs	r3, r7, #1
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	4620      	mov	r0, r4
 80049e8:	4b7d      	ldr	r3, [pc, #500]	@ (8004be0 <_dtoa_r+0x5c8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fe23 	bl	8000638 <__aeabi_dmul>
 80049f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f6:	9c00      	ldr	r4, [sp, #0]
 80049f8:	3601      	adds	r6, #1
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7fb fdb2 	bl	8000564 <__aeabi_i2d>
 8004a00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a04:	f7fb fe18 	bl	8000638 <__aeabi_dmul>
 8004a08:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <_dtoa_r+0x5cc>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f7fb fc5e 	bl	80002cc <__adddf3>
 8004a10:	4605      	mov	r5, r0
 8004a12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	f040 808d 	bne.w	8004b36 <_dtoa_r+0x51e>
 8004a1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a20:	4b71      	ldr	r3, [pc, #452]	@ (8004be8 <_dtoa_r+0x5d0>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7fb fc50 	bl	80002c8 <__aeabi_dsub>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a30:	462a      	mov	r2, r5
 8004a32:	4633      	mov	r3, r6
 8004a34:	f7fc f890 	bl	8000b58 <__aeabi_dcmpgt>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 828b 	bne.w	8004f54 <_dtoa_r+0x93c>
 8004a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a42:	462a      	mov	r2, r5
 8004a44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a48:	f7fc f868 	bl	8000b1c <__aeabi_dcmplt>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f040 8128 	bne.w	8004ca2 <_dtoa_r+0x68a>
 8004a52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f2c0 815a 	blt.w	8004d16 <_dtoa_r+0x6fe>
 8004a62:	2f0e      	cmp	r7, #14
 8004a64:	f300 8157 	bgt.w	8004d16 <_dtoa_r+0x6fe>
 8004a68:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd4 <_dtoa_r+0x5bc>)
 8004a6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a6e:	ed93 7b00 	vldr	d7, [r3]
 8004a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	ed8d 7b00 	vstr	d7, [sp]
 8004a7a:	da03      	bge.n	8004a84 <_dtoa_r+0x46c>
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f340 8101 	ble.w	8004c86 <_dtoa_r+0x66e>
 8004a84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a88:	4656      	mov	r6, sl
 8004a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4629      	mov	r1, r5
 8004a92:	f7fb fefb 	bl	800088c <__aeabi_ddiv>
 8004a96:	f7fc f87f 	bl	8000b98 <__aeabi_d2iz>
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	f7fb fd62 	bl	8000564 <__aeabi_i2d>
 8004aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aa4:	f7fb fdc8 	bl	8000638 <__aeabi_dmul>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4620      	mov	r0, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ab4:	f7fb fc08 	bl	80002c8 <__aeabi_dsub>
 8004ab8:	f806 4b01 	strb.w	r4, [r6], #1
 8004abc:	9d07      	ldr	r5, [sp, #28]
 8004abe:	eba6 040a 	sub.w	r4, r6, sl
 8004ac2:	42a5      	cmp	r5, r4
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	f040 8117 	bne.w	8004cfa <_dtoa_r+0x6e2>
 8004acc:	f7fb fbfe 	bl	80002cc <__adddf3>
 8004ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	460d      	mov	r5, r1
 8004ad8:	f7fc f83e 	bl	8000b58 <__aeabi_dcmpgt>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	f040 80f9 	bne.w	8004cd4 <_dtoa_r+0x6bc>
 8004ae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7fc f80d 	bl	8000b08 <__aeabi_dcmpeq>
 8004aee:	b118      	cbz	r0, 8004af8 <_dtoa_r+0x4e0>
 8004af0:	f018 0f01 	tst.w	r8, #1
 8004af4:	f040 80ee 	bne.w	8004cd4 <_dtoa_r+0x6bc>
 8004af8:	4649      	mov	r1, r9
 8004afa:	4658      	mov	r0, fp
 8004afc:	f000 fc90 	bl	8005420 <_Bfree>
 8004b00:	2300      	movs	r3, #0
 8004b02:	7033      	strb	r3, [r6, #0]
 8004b04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004b06:	3701      	adds	r7, #1
 8004b08:	601f      	str	r7, [r3, #0]
 8004b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 831d 	beq.w	800514c <_dtoa_r+0xb34>
 8004b12:	601e      	str	r6, [r3, #0]
 8004b14:	e31a      	b.n	800514c <_dtoa_r+0xb34>
 8004b16:	07e2      	lsls	r2, r4, #31
 8004b18:	d505      	bpl.n	8004b26 <_dtoa_r+0x50e>
 8004b1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b1e:	f7fb fd8b 	bl	8000638 <__aeabi_dmul>
 8004b22:	3601      	adds	r6, #1
 8004b24:	2301      	movs	r3, #1
 8004b26:	1064      	asrs	r4, r4, #1
 8004b28:	3508      	adds	r5, #8
 8004b2a:	e73f      	b.n	80049ac <_dtoa_r+0x394>
 8004b2c:	2602      	movs	r6, #2
 8004b2e:	e742      	b.n	80049b6 <_dtoa_r+0x39e>
 8004b30:	9c07      	ldr	r4, [sp, #28]
 8004b32:	9704      	str	r7, [sp, #16]
 8004b34:	e761      	b.n	80049fa <_dtoa_r+0x3e2>
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <_dtoa_r+0x5bc>)
 8004b38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b42:	4454      	add	r4, sl
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d053      	beq.n	8004bf0 <_dtoa_r+0x5d8>
 8004b48:	4928      	ldr	r1, [pc, #160]	@ (8004bec <_dtoa_r+0x5d4>)
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fb fe9e 	bl	800088c <__aeabi_ddiv>
 8004b50:	4633      	mov	r3, r6
 8004b52:	462a      	mov	r2, r5
 8004b54:	f7fb fbb8 	bl	80002c8 <__aeabi_dsub>
 8004b58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b5c:	4656      	mov	r6, sl
 8004b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b62:	f7fc f819 	bl	8000b98 <__aeabi_d2iz>
 8004b66:	4605      	mov	r5, r0
 8004b68:	f7fb fcfc 	bl	8000564 <__aeabi_i2d>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b74:	f7fb fba8 	bl	80002c8 <__aeabi_dsub>
 8004b78:	3530      	adds	r5, #48	@ 0x30
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b82:	f806 5b01 	strb.w	r5, [r6], #1
 8004b86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b8a:	f7fb ffc7 	bl	8000b1c <__aeabi_dcmplt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d171      	bne.n	8004c76 <_dtoa_r+0x65e>
 8004b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b96:	4911      	ldr	r1, [pc, #68]	@ (8004bdc <_dtoa_r+0x5c4>)
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fb fb95 	bl	80002c8 <__aeabi_dsub>
 8004b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ba2:	f7fb ffbb 	bl	8000b1c <__aeabi_dcmplt>
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f040 8095 	bne.w	8004cd6 <_dtoa_r+0x6be>
 8004bac:	42a6      	cmp	r6, r4
 8004bae:	f43f af50 	beq.w	8004a52 <_dtoa_r+0x43a>
 8004bb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <_dtoa_r+0x5c8>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fb fd3d 	bl	8000638 <__aeabi_dmul>
 8004bbe:	4b08      	ldr	r3, [pc, #32]	@ (8004be0 <_dtoa_r+0x5c8>)
 8004bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bca:	f7fb fd35 	bl	8000638 <__aeabi_dmul>
 8004bce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd2:	e7c4      	b.n	8004b5e <_dtoa_r+0x546>
 8004bd4:	08007d30 	.word	0x08007d30
 8004bd8:	08007d08 	.word	0x08007d08
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	40240000 	.word	0x40240000
 8004be4:	401c0000 	.word	0x401c0000
 8004be8:	40140000 	.word	0x40140000
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f7fb fd20 	bl	8000638 <__aeabi_dmul>
 8004bf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bfc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004bfe:	4656      	mov	r6, sl
 8004c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c04:	f7fb ffc8 	bl	8000b98 <__aeabi_d2iz>
 8004c08:	4605      	mov	r5, r0
 8004c0a:	f7fb fcab 	bl	8000564 <__aeabi_i2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c16:	f7fb fb57 	bl	80002c8 <__aeabi_dsub>
 8004c1a:	3530      	adds	r5, #48	@ 0x30
 8004c1c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	42a6      	cmp	r6, r4
 8004c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	d124      	bne.n	8004c7a <_dtoa_r+0x662>
 8004c30:	4bac      	ldr	r3, [pc, #688]	@ (8004ee4 <_dtoa_r+0x8cc>)
 8004c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c36:	f7fb fb49 	bl	80002cc <__adddf3>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c42:	f7fb ff89 	bl	8000b58 <__aeabi_dcmpgt>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d145      	bne.n	8004cd6 <_dtoa_r+0x6be>
 8004c4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c4e:	49a5      	ldr	r1, [pc, #660]	@ (8004ee4 <_dtoa_r+0x8cc>)
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7fb fb39 	bl	80002c8 <__aeabi_dsub>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5e:	f7fb ff5d 	bl	8000b1c <__aeabi_dcmplt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	f43f aef5 	beq.w	8004a52 <_dtoa_r+0x43a>
 8004c68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c6a:	1e73      	subs	r3, r6, #1
 8004c6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c72:	2b30      	cmp	r3, #48	@ 0x30
 8004c74:	d0f8      	beq.n	8004c68 <_dtoa_r+0x650>
 8004c76:	9f04      	ldr	r7, [sp, #16]
 8004c78:	e73e      	b.n	8004af8 <_dtoa_r+0x4e0>
 8004c7a:	4b9b      	ldr	r3, [pc, #620]	@ (8004ee8 <_dtoa_r+0x8d0>)
 8004c7c:	f7fb fcdc 	bl	8000638 <__aeabi_dmul>
 8004c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c84:	e7bc      	b.n	8004c00 <_dtoa_r+0x5e8>
 8004c86:	d10c      	bne.n	8004ca2 <_dtoa_r+0x68a>
 8004c88:	4b98      	ldr	r3, [pc, #608]	@ (8004eec <_dtoa_r+0x8d4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c90:	f7fb fcd2 	bl	8000638 <__aeabi_dmul>
 8004c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c98:	f7fb ff54 	bl	8000b44 <__aeabi_dcmpge>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f000 8157 	beq.w	8004f50 <_dtoa_r+0x938>
 8004ca2:	2400      	movs	r4, #0
 8004ca4:	4625      	mov	r5, r4
 8004ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	9304      	str	r3, [sp, #16]
 8004cac:	4656      	mov	r6, sl
 8004cae:	2700      	movs	r7, #0
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f000 fbb4 	bl	8005420 <_Bfree>
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	d0dc      	beq.n	8004c76 <_dtoa_r+0x65e>
 8004cbc:	b12f      	cbz	r7, 8004cca <_dtoa_r+0x6b2>
 8004cbe:	42af      	cmp	r7, r5
 8004cc0:	d003      	beq.n	8004cca <_dtoa_r+0x6b2>
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	4658      	mov	r0, fp
 8004cc6:	f000 fbab 	bl	8005420 <_Bfree>
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4658      	mov	r0, fp
 8004cce:	f000 fba7 	bl	8005420 <_Bfree>
 8004cd2:	e7d0      	b.n	8004c76 <_dtoa_r+0x65e>
 8004cd4:	9704      	str	r7, [sp, #16]
 8004cd6:	4633      	mov	r3, r6
 8004cd8:	461e      	mov	r6, r3
 8004cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cde:	2a39      	cmp	r2, #57	@ 0x39
 8004ce0:	d107      	bne.n	8004cf2 <_dtoa_r+0x6da>
 8004ce2:	459a      	cmp	sl, r3
 8004ce4:	d1f8      	bne.n	8004cd8 <_dtoa_r+0x6c0>
 8004ce6:	9a04      	ldr	r2, [sp, #16]
 8004ce8:	3201      	adds	r2, #1
 8004cea:	9204      	str	r2, [sp, #16]
 8004cec:	2230      	movs	r2, #48	@ 0x30
 8004cee:	f88a 2000 	strb.w	r2, [sl]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	3201      	adds	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	e7bd      	b.n	8004c76 <_dtoa_r+0x65e>
 8004cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee8 <_dtoa_r+0x8d0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f7fb fc9b 	bl	8000638 <__aeabi_dmul>
 8004d02:	2200      	movs	r2, #0
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	f7fb fefd 	bl	8000b08 <__aeabi_dcmpeq>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f43f aebb 	beq.w	8004a8a <_dtoa_r+0x472>
 8004d14:	e6f0      	b.n	8004af8 <_dtoa_r+0x4e0>
 8004d16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	f000 80db 	beq.w	8004ed4 <_dtoa_r+0x8bc>
 8004d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d20:	2a01      	cmp	r2, #1
 8004d22:	f300 80bf 	bgt.w	8004ea4 <_dtoa_r+0x88c>
 8004d26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	f000 80b7 	beq.w	8004e9c <_dtoa_r+0x884>
 8004d2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d34:	4646      	mov	r6, r8
 8004d36:	9a08      	ldr	r2, [sp, #32]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	441a      	add	r2, r3
 8004d3c:	4658      	mov	r0, fp
 8004d3e:	4498      	add	r8, r3
 8004d40:	9208      	str	r2, [sp, #32]
 8004d42:	f000 fc6b 	bl	800561c <__i2b>
 8004d46:	4605      	mov	r5, r0
 8004d48:	b15e      	cbz	r6, 8004d62 <_dtoa_r+0x74a>
 8004d4a:	9b08      	ldr	r3, [sp, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dd08      	ble.n	8004d62 <_dtoa_r+0x74a>
 8004d50:	42b3      	cmp	r3, r6
 8004d52:	9a08      	ldr	r2, [sp, #32]
 8004d54:	bfa8      	it	ge
 8004d56:	4633      	movge	r3, r6
 8004d58:	eba8 0803 	sub.w	r8, r8, r3
 8004d5c:	1af6      	subs	r6, r6, r3
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	9308      	str	r3, [sp, #32]
 8004d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d64:	b1f3      	cbz	r3, 8004da4 <_dtoa_r+0x78c>
 8004d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80b7 	beq.w	8004edc <_dtoa_r+0x8c4>
 8004d6e:	b18c      	cbz	r4, 8004d94 <_dtoa_r+0x77c>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4622      	mov	r2, r4
 8004d74:	4658      	mov	r0, fp
 8004d76:	f000 fd11 	bl	800579c <__pow5mult>
 8004d7a:	464a      	mov	r2, r9
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	4605      	mov	r5, r0
 8004d80:	4658      	mov	r0, fp
 8004d82:	f000 fc61 	bl	8005648 <__multiply>
 8004d86:	4649      	mov	r1, r9
 8004d88:	9004      	str	r0, [sp, #16]
 8004d8a:	4658      	mov	r0, fp
 8004d8c:	f000 fb48 	bl	8005420 <_Bfree>
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	4699      	mov	r9, r3
 8004d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d96:	1b1a      	subs	r2, r3, r4
 8004d98:	d004      	beq.n	8004da4 <_dtoa_r+0x78c>
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4658      	mov	r0, fp
 8004d9e:	f000 fcfd 	bl	800579c <__pow5mult>
 8004da2:	4681      	mov	r9, r0
 8004da4:	2101      	movs	r1, #1
 8004da6:	4658      	mov	r0, fp
 8004da8:	f000 fc38 	bl	800561c <__i2b>
 8004dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dae:	4604      	mov	r4, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 81cf 	beq.w	8005154 <_dtoa_r+0xb3c>
 8004db6:	461a      	mov	r2, r3
 8004db8:	4601      	mov	r1, r0
 8004dba:	4658      	mov	r0, fp
 8004dbc:	f000 fcee 	bl	800579c <__pow5mult>
 8004dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	f300 8095 	bgt.w	8004ef4 <_dtoa_r+0x8dc>
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 8087 	bne.w	8004ee0 <_dtoa_r+0x8c8>
 8004dd2:	9b03      	ldr	r3, [sp, #12]
 8004dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8089 	bne.w	8004ef0 <_dtoa_r+0x8d8>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	051b      	lsls	r3, r3, #20
 8004de8:	b12b      	cbz	r3, 8004df6 <_dtoa_r+0x7de>
 8004dea:	9b08      	ldr	r3, [sp, #32]
 8004dec:	3301      	adds	r3, #1
 8004dee:	9308      	str	r3, [sp, #32]
 8004df0:	f108 0801 	add.w	r8, r8, #1
 8004df4:	2301      	movs	r3, #1
 8004df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 81b0 	beq.w	8005160 <_dtoa_r+0xb48>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e06:	6918      	ldr	r0, [r3, #16]
 8004e08:	f000 fbbc 	bl	8005584 <__hi0bits>
 8004e0c:	f1c0 0020 	rsb	r0, r0, #32
 8004e10:	9b08      	ldr	r3, [sp, #32]
 8004e12:	4418      	add	r0, r3
 8004e14:	f010 001f 	ands.w	r0, r0, #31
 8004e18:	d077      	beq.n	8004f0a <_dtoa_r+0x8f2>
 8004e1a:	f1c0 0320 	rsb	r3, r0, #32
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	dd6b      	ble.n	8004efa <_dtoa_r+0x8e2>
 8004e22:	9b08      	ldr	r3, [sp, #32]
 8004e24:	f1c0 001c 	rsb	r0, r0, #28
 8004e28:	4403      	add	r3, r0
 8004e2a:	4480      	add	r8, r0
 8004e2c:	4406      	add	r6, r0
 8004e2e:	9308      	str	r3, [sp, #32]
 8004e30:	f1b8 0f00 	cmp.w	r8, #0
 8004e34:	dd05      	ble.n	8004e42 <_dtoa_r+0x82a>
 8004e36:	4649      	mov	r1, r9
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4658      	mov	r0, fp
 8004e3c:	f000 fd08 	bl	8005850 <__lshift>
 8004e40:	4681      	mov	r9, r0
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dd05      	ble.n	8004e54 <_dtoa_r+0x83c>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fcff 	bl	8005850 <__lshift>
 8004e52:	4604      	mov	r4, r0
 8004e54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d059      	beq.n	8004f0e <_dtoa_r+0x8f6>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4648      	mov	r0, r9
 8004e5e:	f000 fd63 	bl	8005928 <__mcmp>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	da53      	bge.n	8004f0e <_dtoa_r+0x8f6>
 8004e66:	1e7b      	subs	r3, r7, #1
 8004e68:	9304      	str	r3, [sp, #16]
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 faf7 	bl	8005464 <__multadd>
 8004e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e78:	4681      	mov	r9, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8172 	beq.w	8005164 <_dtoa_r+0xb4c>
 8004e80:	2300      	movs	r3, #0
 8004e82:	4629      	mov	r1, r5
 8004e84:	220a      	movs	r2, #10
 8004e86:	4658      	mov	r0, fp
 8004e88:	f000 faec 	bl	8005464 <__multadd>
 8004e8c:	9b00      	ldr	r3, [sp, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	4605      	mov	r5, r0
 8004e92:	dc67      	bgt.n	8004f64 <_dtoa_r+0x94c>
 8004e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	dc41      	bgt.n	8004f1e <_dtoa_r+0x906>
 8004e9a:	e063      	b.n	8004f64 <_dtoa_r+0x94c>
 8004e9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004e9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ea2:	e746      	b.n	8004d32 <_dtoa_r+0x71a>
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	1e5c      	subs	r4, r3, #1
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eaa:	42a3      	cmp	r3, r4
 8004eac:	bfbf      	itttt	lt
 8004eae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004eb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004eb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eb4:	1ae3      	sublt	r3, r4, r3
 8004eb6:	bfb4      	ite	lt
 8004eb8:	18d2      	addlt	r2, r2, r3
 8004eba:	1b1c      	subge	r4, r3, r4
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	bfbc      	itt	lt
 8004ec0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ec2:	2400      	movlt	r4, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfb5      	itete	lt
 8004ec8:	eba8 0603 	sublt.w	r6, r8, r3
 8004ecc:	9b07      	ldrge	r3, [sp, #28]
 8004ece:	2300      	movlt	r3, #0
 8004ed0:	4646      	movge	r6, r8
 8004ed2:	e730      	b.n	8004d36 <_dtoa_r+0x71e>
 8004ed4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ed6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ed8:	4646      	mov	r6, r8
 8004eda:	e735      	b.n	8004d48 <_dtoa_r+0x730>
 8004edc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ede:	e75c      	b.n	8004d9a <_dtoa_r+0x782>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e788      	b.n	8004df6 <_dtoa_r+0x7de>
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	40240000 	.word	0x40240000
 8004eec:	40140000 	.word	0x40140000
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	e780      	b.n	8004df6 <_dtoa_r+0x7de>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ef8:	e782      	b.n	8004e00 <_dtoa_r+0x7e8>
 8004efa:	d099      	beq.n	8004e30 <_dtoa_r+0x818>
 8004efc:	9a08      	ldr	r2, [sp, #32]
 8004efe:	331c      	adds	r3, #28
 8004f00:	441a      	add	r2, r3
 8004f02:	4498      	add	r8, r3
 8004f04:	441e      	add	r6, r3
 8004f06:	9208      	str	r2, [sp, #32]
 8004f08:	e792      	b.n	8004e30 <_dtoa_r+0x818>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e7f6      	b.n	8004efc <_dtoa_r+0x8e4>
 8004f0e:	9b07      	ldr	r3, [sp, #28]
 8004f10:	9704      	str	r7, [sp, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc20      	bgt.n	8004f58 <_dtoa_r+0x940>
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	dd1e      	ble.n	8004f5c <_dtoa_r+0x944>
 8004f1e:	9b00      	ldr	r3, [sp, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f aec0 	bne.w	8004ca6 <_dtoa_r+0x68e>
 8004f26:	4621      	mov	r1, r4
 8004f28:	2205      	movs	r2, #5
 8004f2a:	4658      	mov	r0, fp
 8004f2c:	f000 fa9a 	bl	8005464 <__multadd>
 8004f30:	4601      	mov	r1, r0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4648      	mov	r0, r9
 8004f36:	f000 fcf7 	bl	8005928 <__mcmp>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	f77f aeb3 	ble.w	8004ca6 <_dtoa_r+0x68e>
 8004f40:	4656      	mov	r6, sl
 8004f42:	2331      	movs	r3, #49	@ 0x31
 8004f44:	f806 3b01 	strb.w	r3, [r6], #1
 8004f48:	9b04      	ldr	r3, [sp, #16]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	9304      	str	r3, [sp, #16]
 8004f4e:	e6ae      	b.n	8004cae <_dtoa_r+0x696>
 8004f50:	9c07      	ldr	r4, [sp, #28]
 8004f52:	9704      	str	r7, [sp, #16]
 8004f54:	4625      	mov	r5, r4
 8004f56:	e7f3      	b.n	8004f40 <_dtoa_r+0x928>
 8004f58:	9b07      	ldr	r3, [sp, #28]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8104 	beq.w	800516c <_dtoa_r+0xb54>
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	dd05      	ble.n	8004f74 <_dtoa_r+0x95c>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	f000 fc6f 	bl	8005850 <__lshift>
 8004f72:	4605      	mov	r5, r0
 8004f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d05a      	beq.n	8005030 <_dtoa_r+0xa18>
 8004f7a:	6869      	ldr	r1, [r5, #4]
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 fa0f 	bl	80053a0 <_Balloc>
 8004f82:	4606      	mov	r6, r0
 8004f84:	b928      	cbnz	r0, 8004f92 <_dtoa_r+0x97a>
 8004f86:	4b84      	ldr	r3, [pc, #528]	@ (8005198 <_dtoa_r+0xb80>)
 8004f88:	4602      	mov	r2, r0
 8004f8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f8e:	f7ff bb5a 	b.w	8004646 <_dtoa_r+0x2e>
 8004f92:	692a      	ldr	r2, [r5, #16]
 8004f94:	3202      	adds	r2, #2
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	f105 010c 	add.w	r1, r5, #12
 8004f9c:	300c      	adds	r0, #12
 8004f9e:	f001 ff75 	bl	8006e8c <memcpy>
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	f000 fc52 	bl	8005850 <__lshift>
 8004fac:	f10a 0301 	add.w	r3, sl, #1
 8004fb0:	9307      	str	r3, [sp, #28]
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	4453      	add	r3, sl
 8004fb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fb8:	9b02      	ldr	r3, [sp, #8]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	462f      	mov	r7, r5
 8004fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	9b07      	ldr	r3, [sp, #28]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4648      	mov	r0, r9
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	f7ff fa9b 	bl	8004508 <quorem>
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	9002      	str	r0, [sp, #8]
 8004fd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fda:	4648      	mov	r0, r9
 8004fdc:	f000 fca4 	bl	8005928 <__mcmp>
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	9008      	str	r0, [sp, #32]
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4658      	mov	r0, fp
 8004fe8:	f000 fcba 	bl	8005960 <__mdiff>
 8004fec:	68c2      	ldr	r2, [r0, #12]
 8004fee:	4606      	mov	r6, r0
 8004ff0:	bb02      	cbnz	r2, 8005034 <_dtoa_r+0xa1c>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4648      	mov	r0, r9
 8004ff6:	f000 fc97 	bl	8005928 <__mcmp>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4658      	mov	r0, fp
 8005000:	920e      	str	r2, [sp, #56]	@ 0x38
 8005002:	f000 fa0d 	bl	8005420 <_Bfree>
 8005006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800500a:	9e07      	ldr	r6, [sp, #28]
 800500c:	ea43 0102 	orr.w	r1, r3, r2
 8005010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005012:	4319      	orrs	r1, r3
 8005014:	d110      	bne.n	8005038 <_dtoa_r+0xa20>
 8005016:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800501a:	d029      	beq.n	8005070 <_dtoa_r+0xa58>
 800501c:	9b08      	ldr	r3, [sp, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd02      	ble.n	8005028 <_dtoa_r+0xa10>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005028:	9b00      	ldr	r3, [sp, #0]
 800502a:	f883 8000 	strb.w	r8, [r3]
 800502e:	e63f      	b.n	8004cb0 <_dtoa_r+0x698>
 8005030:	4628      	mov	r0, r5
 8005032:	e7bb      	b.n	8004fac <_dtoa_r+0x994>
 8005034:	2201      	movs	r2, #1
 8005036:	e7e1      	b.n	8004ffc <_dtoa_r+0x9e4>
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	2b00      	cmp	r3, #0
 800503c:	db04      	blt.n	8005048 <_dtoa_r+0xa30>
 800503e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005040:	430b      	orrs	r3, r1
 8005042:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005044:	430b      	orrs	r3, r1
 8005046:	d120      	bne.n	800508a <_dtoa_r+0xa72>
 8005048:	2a00      	cmp	r2, #0
 800504a:	dded      	ble.n	8005028 <_dtoa_r+0xa10>
 800504c:	4649      	mov	r1, r9
 800504e:	2201      	movs	r2, #1
 8005050:	4658      	mov	r0, fp
 8005052:	f000 fbfd 	bl	8005850 <__lshift>
 8005056:	4621      	mov	r1, r4
 8005058:	4681      	mov	r9, r0
 800505a:	f000 fc65 	bl	8005928 <__mcmp>
 800505e:	2800      	cmp	r0, #0
 8005060:	dc03      	bgt.n	800506a <_dtoa_r+0xa52>
 8005062:	d1e1      	bne.n	8005028 <_dtoa_r+0xa10>
 8005064:	f018 0f01 	tst.w	r8, #1
 8005068:	d0de      	beq.n	8005028 <_dtoa_r+0xa10>
 800506a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800506e:	d1d8      	bne.n	8005022 <_dtoa_r+0xa0a>
 8005070:	9a00      	ldr	r2, [sp, #0]
 8005072:	2339      	movs	r3, #57	@ 0x39
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	4633      	mov	r3, r6
 8005078:	461e      	mov	r6, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005080:	2a39      	cmp	r2, #57	@ 0x39
 8005082:	d052      	beq.n	800512a <_dtoa_r+0xb12>
 8005084:	3201      	adds	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e612      	b.n	8004cb0 <_dtoa_r+0x698>
 800508a:	2a00      	cmp	r2, #0
 800508c:	dd07      	ble.n	800509e <_dtoa_r+0xa86>
 800508e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005092:	d0ed      	beq.n	8005070 <_dtoa_r+0xa58>
 8005094:	9a00      	ldr	r2, [sp, #0]
 8005096:	f108 0301 	add.w	r3, r8, #1
 800509a:	7013      	strb	r3, [r2, #0]
 800509c:	e608      	b.n	8004cb0 <_dtoa_r+0x698>
 800509e:	9b07      	ldr	r3, [sp, #28]
 80050a0:	9a07      	ldr	r2, [sp, #28]
 80050a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80050a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d028      	beq.n	80050fe <_dtoa_r+0xae6>
 80050ac:	4649      	mov	r1, r9
 80050ae:	2300      	movs	r3, #0
 80050b0:	220a      	movs	r2, #10
 80050b2:	4658      	mov	r0, fp
 80050b4:	f000 f9d6 	bl	8005464 <__multadd>
 80050b8:	42af      	cmp	r7, r5
 80050ba:	4681      	mov	r9, r0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f04f 020a 	mov.w	r2, #10
 80050c4:	4639      	mov	r1, r7
 80050c6:	4658      	mov	r0, fp
 80050c8:	d107      	bne.n	80050da <_dtoa_r+0xac2>
 80050ca:	f000 f9cb 	bl	8005464 <__multadd>
 80050ce:	4607      	mov	r7, r0
 80050d0:	4605      	mov	r5, r0
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	9307      	str	r3, [sp, #28]
 80050d8:	e774      	b.n	8004fc4 <_dtoa_r+0x9ac>
 80050da:	f000 f9c3 	bl	8005464 <__multadd>
 80050de:	4629      	mov	r1, r5
 80050e0:	4607      	mov	r7, r0
 80050e2:	2300      	movs	r3, #0
 80050e4:	220a      	movs	r2, #10
 80050e6:	4658      	mov	r0, fp
 80050e8:	f000 f9bc 	bl	8005464 <__multadd>
 80050ec:	4605      	mov	r5, r0
 80050ee:	e7f0      	b.n	80050d2 <_dtoa_r+0xaba>
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfcc      	ite	gt
 80050f6:	461e      	movgt	r6, r3
 80050f8:	2601      	movle	r6, #1
 80050fa:	4456      	add	r6, sl
 80050fc:	2700      	movs	r7, #0
 80050fe:	4649      	mov	r1, r9
 8005100:	2201      	movs	r2, #1
 8005102:	4658      	mov	r0, fp
 8005104:	f000 fba4 	bl	8005850 <__lshift>
 8005108:	4621      	mov	r1, r4
 800510a:	4681      	mov	r9, r0
 800510c:	f000 fc0c 	bl	8005928 <__mcmp>
 8005110:	2800      	cmp	r0, #0
 8005112:	dcb0      	bgt.n	8005076 <_dtoa_r+0xa5e>
 8005114:	d102      	bne.n	800511c <_dtoa_r+0xb04>
 8005116:	f018 0f01 	tst.w	r8, #1
 800511a:	d1ac      	bne.n	8005076 <_dtoa_r+0xa5e>
 800511c:	4633      	mov	r3, r6
 800511e:	461e      	mov	r6, r3
 8005120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005124:	2a30      	cmp	r2, #48	@ 0x30
 8005126:	d0fa      	beq.n	800511e <_dtoa_r+0xb06>
 8005128:	e5c2      	b.n	8004cb0 <_dtoa_r+0x698>
 800512a:	459a      	cmp	sl, r3
 800512c:	d1a4      	bne.n	8005078 <_dtoa_r+0xa60>
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	2331      	movs	r3, #49	@ 0x31
 8005136:	f88a 3000 	strb.w	r3, [sl]
 800513a:	e5b9      	b.n	8004cb0 <_dtoa_r+0x698>
 800513c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800513e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800519c <_dtoa_r+0xb84>
 8005142:	b11b      	cbz	r3, 800514c <_dtoa_r+0xb34>
 8005144:	f10a 0308 	add.w	r3, sl, #8
 8005148:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	4650      	mov	r0, sl
 800514e:	b019      	add	sp, #100	@ 0x64
 8005150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005156:	2b01      	cmp	r3, #1
 8005158:	f77f ae37 	ble.w	8004dca <_dtoa_r+0x7b2>
 800515c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800515e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005160:	2001      	movs	r0, #1
 8005162:	e655      	b.n	8004e10 <_dtoa_r+0x7f8>
 8005164:	9b00      	ldr	r3, [sp, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f77f aed6 	ble.w	8004f18 <_dtoa_r+0x900>
 800516c:	4656      	mov	r6, sl
 800516e:	4621      	mov	r1, r4
 8005170:	4648      	mov	r0, r9
 8005172:	f7ff f9c9 	bl	8004508 <quorem>
 8005176:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800517a:	f806 8b01 	strb.w	r8, [r6], #1
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	eba6 020a 	sub.w	r2, r6, sl
 8005184:	4293      	cmp	r3, r2
 8005186:	ddb3      	ble.n	80050f0 <_dtoa_r+0xad8>
 8005188:	4649      	mov	r1, r9
 800518a:	2300      	movs	r3, #0
 800518c:	220a      	movs	r2, #10
 800518e:	4658      	mov	r0, fp
 8005190:	f000 f968 	bl	8005464 <__multadd>
 8005194:	4681      	mov	r9, r0
 8005196:	e7ea      	b.n	800516e <_dtoa_r+0xb56>
 8005198:	08007c8d 	.word	0x08007c8d
 800519c:	08007c11 	.word	0x08007c11

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d041      	beq.n	800522c <_free_r+0x8c>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f8e8 	bl	8005388 <__malloc_lock>
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <_free_r+0x90>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b8e4 	b.w	8005394 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	4408      	add	r0, r1
 8005208:	6010      	str	r0, [r2, #0]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf04      	itt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	bf04      	itt	eq
 8005224:	1809      	addeq	r1, r1, r0
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	6054      	str	r4, [r2, #4]
 800522a:	e7ca      	b.n	80051c2 <_free_r+0x22>
 800522c:	bd38      	pop	{r3, r4, r5, pc}
 800522e:	bf00      	nop
 8005230:	2000047c 	.word	0x2000047c

08005234 <malloc>:
 8005234:	4b02      	ldr	r3, [pc, #8]	@ (8005240 <malloc+0xc>)
 8005236:	4601      	mov	r1, r0
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	f000 b825 	b.w	8005288 <_malloc_r>
 800523e:	bf00      	nop
 8005240:	20000018 	.word	0x20000018

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0f      	ldr	r6, [pc, #60]	@ (8005284 <sbrk_aligned+0x40>)
 8005248:	460c      	mov	r4, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	b911      	cbnz	r1, 8005256 <sbrk_aligned+0x12>
 8005250:	f001 fe0c 	bl	8006e6c <_sbrk_r>
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f001 fe07 	bl	8006e6c <_sbrk_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d103      	bne.n	800526a <sbrk_aligned+0x26>
 8005262:	f04f 34ff 	mov.w	r4, #4294967295
 8005266:	4620      	mov	r0, r4
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	1cc4      	adds	r4, r0, #3
 800526c:	f024 0403 	bic.w	r4, r4, #3
 8005270:	42a0      	cmp	r0, r4
 8005272:	d0f8      	beq.n	8005266 <sbrk_aligned+0x22>
 8005274:	1a21      	subs	r1, r4, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f001 fdf8 	bl	8006e6c <_sbrk_r>
 800527c:	3001      	adds	r0, #1
 800527e:	d1f2      	bne.n	8005266 <sbrk_aligned+0x22>
 8005280:	e7ef      	b.n	8005262 <sbrk_aligned+0x1e>
 8005282:	bf00      	nop
 8005284:	20000478 	.word	0x20000478

08005288 <_malloc_r>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	1ccd      	adds	r5, r1, #3
 800528e:	f025 0503 	bic.w	r5, r5, #3
 8005292:	3508      	adds	r5, #8
 8005294:	2d0c      	cmp	r5, #12
 8005296:	bf38      	it	cc
 8005298:	250c      	movcc	r5, #12
 800529a:	2d00      	cmp	r5, #0
 800529c:	4606      	mov	r6, r0
 800529e:	db01      	blt.n	80052a4 <_malloc_r+0x1c>
 80052a0:	42a9      	cmp	r1, r5
 80052a2:	d904      	bls.n	80052ae <_malloc_r+0x26>
 80052a4:	230c      	movs	r3, #12
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	2000      	movs	r0, #0
 80052aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005384 <_malloc_r+0xfc>
 80052b2:	f000 f869 	bl	8005388 <__malloc_lock>
 80052b6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ba:	461c      	mov	r4, r3
 80052bc:	bb44      	cbnz	r4, 8005310 <_malloc_r+0x88>
 80052be:	4629      	mov	r1, r5
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff ffbf 	bl	8005244 <sbrk_aligned>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	4604      	mov	r4, r0
 80052ca:	d158      	bne.n	800537e <_malloc_r+0xf6>
 80052cc:	f8d8 4000 	ldr.w	r4, [r8]
 80052d0:	4627      	mov	r7, r4
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	d143      	bne.n	800535e <_malloc_r+0xd6>
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d04b      	beq.n	8005372 <_malloc_r+0xea>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	4639      	mov	r1, r7
 80052de:	4630      	mov	r0, r6
 80052e0:	eb04 0903 	add.w	r9, r4, r3
 80052e4:	f001 fdc2 	bl	8006e6c <_sbrk_r>
 80052e8:	4581      	cmp	r9, r0
 80052ea:	d142      	bne.n	8005372 <_malloc_r+0xea>
 80052ec:	6821      	ldr	r1, [r4, #0]
 80052ee:	1a6d      	subs	r5, r5, r1
 80052f0:	4629      	mov	r1, r5
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffa6 	bl	8005244 <sbrk_aligned>
 80052f8:	3001      	adds	r0, #1
 80052fa:	d03a      	beq.n	8005372 <_malloc_r+0xea>
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	442b      	add	r3, r5
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	f8d8 3000 	ldr.w	r3, [r8]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	bb62      	cbnz	r2, 8005364 <_malloc_r+0xdc>
 800530a:	f8c8 7000 	str.w	r7, [r8]
 800530e:	e00f      	b.n	8005330 <_malloc_r+0xa8>
 8005310:	6822      	ldr	r2, [r4, #0]
 8005312:	1b52      	subs	r2, r2, r5
 8005314:	d420      	bmi.n	8005358 <_malloc_r+0xd0>
 8005316:	2a0b      	cmp	r2, #11
 8005318:	d917      	bls.n	800534a <_malloc_r+0xc2>
 800531a:	1961      	adds	r1, r4, r5
 800531c:	42a3      	cmp	r3, r4
 800531e:	6025      	str	r5, [r4, #0]
 8005320:	bf18      	it	ne
 8005322:	6059      	strne	r1, [r3, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	bf08      	it	eq
 8005328:	f8c8 1000 	streq.w	r1, [r8]
 800532c:	5162      	str	r2, [r4, r5]
 800532e:	604b      	str	r3, [r1, #4]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f82f 	bl	8005394 <__malloc_unlock>
 8005336:	f104 000b 	add.w	r0, r4, #11
 800533a:	1d23      	adds	r3, r4, #4
 800533c:	f020 0007 	bic.w	r0, r0, #7
 8005340:	1ac2      	subs	r2, r0, r3
 8005342:	bf1c      	itt	ne
 8005344:	1a1b      	subne	r3, r3, r0
 8005346:	50a3      	strne	r3, [r4, r2]
 8005348:	e7af      	b.n	80052aa <_malloc_r+0x22>
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	42a3      	cmp	r3, r4
 800534e:	bf0c      	ite	eq
 8005350:	f8c8 2000 	streq.w	r2, [r8]
 8005354:	605a      	strne	r2, [r3, #4]
 8005356:	e7eb      	b.n	8005330 <_malloc_r+0xa8>
 8005358:	4623      	mov	r3, r4
 800535a:	6864      	ldr	r4, [r4, #4]
 800535c:	e7ae      	b.n	80052bc <_malloc_r+0x34>
 800535e:	463c      	mov	r4, r7
 8005360:	687f      	ldr	r7, [r7, #4]
 8005362:	e7b6      	b.n	80052d2 <_malloc_r+0x4a>
 8005364:	461a      	mov	r2, r3
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	42a3      	cmp	r3, r4
 800536a:	d1fb      	bne.n	8005364 <_malloc_r+0xdc>
 800536c:	2300      	movs	r3, #0
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	e7de      	b.n	8005330 <_malloc_r+0xa8>
 8005372:	230c      	movs	r3, #12
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f80c 	bl	8005394 <__malloc_unlock>
 800537c:	e794      	b.n	80052a8 <_malloc_r+0x20>
 800537e:	6005      	str	r5, [r0, #0]
 8005380:	e7d6      	b.n	8005330 <_malloc_r+0xa8>
 8005382:	bf00      	nop
 8005384:	2000047c 	.word	0x2000047c

08005388 <__malloc_lock>:
 8005388:	4801      	ldr	r0, [pc, #4]	@ (8005390 <__malloc_lock+0x8>)
 800538a:	f7ff b8b4 	b.w	80044f6 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20000474 	.word	0x20000474

08005394 <__malloc_unlock>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__malloc_unlock+0x8>)
 8005396:	f7ff b8af 	b.w	80044f8 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20000474 	.word	0x20000474

080053a0 <_Balloc>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	69c6      	ldr	r6, [r0, #28]
 80053a4:	4604      	mov	r4, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	b976      	cbnz	r6, 80053c8 <_Balloc+0x28>
 80053aa:	2010      	movs	r0, #16
 80053ac:	f7ff ff42 	bl	8005234 <malloc>
 80053b0:	4602      	mov	r2, r0
 80053b2:	61e0      	str	r0, [r4, #28]
 80053b4:	b920      	cbnz	r0, 80053c0 <_Balloc+0x20>
 80053b6:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <_Balloc+0x78>)
 80053b8:	4818      	ldr	r0, [pc, #96]	@ (800541c <_Balloc+0x7c>)
 80053ba:	216b      	movs	r1, #107	@ 0x6b
 80053bc:	f001 fd7c 	bl	8006eb8 <__assert_func>
 80053c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053c4:	6006      	str	r6, [r0, #0]
 80053c6:	60c6      	str	r6, [r0, #12]
 80053c8:	69e6      	ldr	r6, [r4, #28]
 80053ca:	68f3      	ldr	r3, [r6, #12]
 80053cc:	b183      	cbz	r3, 80053f0 <_Balloc+0x50>
 80053ce:	69e3      	ldr	r3, [r4, #28]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053d6:	b9b8      	cbnz	r0, 8005408 <_Balloc+0x68>
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f605 	lsl.w	r6, r1, r5
 80053de:	1d72      	adds	r2, r6, #5
 80053e0:	0092      	lsls	r2, r2, #2
 80053e2:	4620      	mov	r0, r4
 80053e4:	f001 fd86 	bl	8006ef4 <_calloc_r>
 80053e8:	b160      	cbz	r0, 8005404 <_Balloc+0x64>
 80053ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053ee:	e00e      	b.n	800540e <_Balloc+0x6e>
 80053f0:	2221      	movs	r2, #33	@ 0x21
 80053f2:	2104      	movs	r1, #4
 80053f4:	4620      	mov	r0, r4
 80053f6:	f001 fd7d 	bl	8006ef4 <_calloc_r>
 80053fa:	69e3      	ldr	r3, [r4, #28]
 80053fc:	60f0      	str	r0, [r6, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e4      	bne.n	80053ce <_Balloc+0x2e>
 8005404:	2000      	movs	r0, #0
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800540e:	2300      	movs	r3, #0
 8005410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005414:	e7f7      	b.n	8005406 <_Balloc+0x66>
 8005416:	bf00      	nop
 8005418:	08007c1e 	.word	0x08007c1e
 800541c:	08007c9e 	.word	0x08007c9e

08005420 <_Bfree>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	69c6      	ldr	r6, [r0, #28]
 8005424:	4605      	mov	r5, r0
 8005426:	460c      	mov	r4, r1
 8005428:	b976      	cbnz	r6, 8005448 <_Bfree+0x28>
 800542a:	2010      	movs	r0, #16
 800542c:	f7ff ff02 	bl	8005234 <malloc>
 8005430:	4602      	mov	r2, r0
 8005432:	61e8      	str	r0, [r5, #28]
 8005434:	b920      	cbnz	r0, 8005440 <_Bfree+0x20>
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <_Bfree+0x3c>)
 8005438:	4809      	ldr	r0, [pc, #36]	@ (8005460 <_Bfree+0x40>)
 800543a:	218f      	movs	r1, #143	@ 0x8f
 800543c:	f001 fd3c 	bl	8006eb8 <__assert_func>
 8005440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005444:	6006      	str	r6, [r0, #0]
 8005446:	60c6      	str	r6, [r0, #12]
 8005448:	b13c      	cbz	r4, 800545a <_Bfree+0x3a>
 800544a:	69eb      	ldr	r3, [r5, #28]
 800544c:	6862      	ldr	r2, [r4, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005454:	6021      	str	r1, [r4, #0]
 8005456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	08007c1e 	.word	0x08007c1e
 8005460:	08007c9e 	.word	0x08007c9e

08005464 <__multadd>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	690d      	ldr	r5, [r1, #16]
 800546a:	4607      	mov	r7, r0
 800546c:	460c      	mov	r4, r1
 800546e:	461e      	mov	r6, r3
 8005470:	f101 0c14 	add.w	ip, r1, #20
 8005474:	2000      	movs	r0, #0
 8005476:	f8dc 3000 	ldr.w	r3, [ip]
 800547a:	b299      	uxth	r1, r3
 800547c:	fb02 6101 	mla	r1, r2, r1, r6
 8005480:	0c1e      	lsrs	r6, r3, #16
 8005482:	0c0b      	lsrs	r3, r1, #16
 8005484:	fb02 3306 	mla	r3, r2, r6, r3
 8005488:	b289      	uxth	r1, r1
 800548a:	3001      	adds	r0, #1
 800548c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005490:	4285      	cmp	r5, r0
 8005492:	f84c 1b04 	str.w	r1, [ip], #4
 8005496:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800549a:	dcec      	bgt.n	8005476 <__multadd+0x12>
 800549c:	b30e      	cbz	r6, 80054e2 <__multadd+0x7e>
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dc19      	bgt.n	80054d8 <__multadd+0x74>
 80054a4:	6861      	ldr	r1, [r4, #4]
 80054a6:	4638      	mov	r0, r7
 80054a8:	3101      	adds	r1, #1
 80054aa:	f7ff ff79 	bl	80053a0 <_Balloc>
 80054ae:	4680      	mov	r8, r0
 80054b0:	b928      	cbnz	r0, 80054be <__multadd+0x5a>
 80054b2:	4602      	mov	r2, r0
 80054b4:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <__multadd+0x84>)
 80054b6:	480d      	ldr	r0, [pc, #52]	@ (80054ec <__multadd+0x88>)
 80054b8:	21ba      	movs	r1, #186	@ 0xba
 80054ba:	f001 fcfd 	bl	8006eb8 <__assert_func>
 80054be:	6922      	ldr	r2, [r4, #16]
 80054c0:	3202      	adds	r2, #2
 80054c2:	f104 010c 	add.w	r1, r4, #12
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	300c      	adds	r0, #12
 80054ca:	f001 fcdf 	bl	8006e8c <memcpy>
 80054ce:	4621      	mov	r1, r4
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7ff ffa5 	bl	8005420 <_Bfree>
 80054d6:	4644      	mov	r4, r8
 80054d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054dc:	3501      	adds	r5, #1
 80054de:	615e      	str	r6, [r3, #20]
 80054e0:	6125      	str	r5, [r4, #16]
 80054e2:	4620      	mov	r0, r4
 80054e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e8:	08007c8d 	.word	0x08007c8d
 80054ec:	08007c9e 	.word	0x08007c9e

080054f0 <__s2b>:
 80054f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	4615      	mov	r5, r2
 80054f8:	461f      	mov	r7, r3
 80054fa:	2209      	movs	r2, #9
 80054fc:	3308      	adds	r3, #8
 80054fe:	4606      	mov	r6, r0
 8005500:	fb93 f3f2 	sdiv	r3, r3, r2
 8005504:	2100      	movs	r1, #0
 8005506:	2201      	movs	r2, #1
 8005508:	429a      	cmp	r2, r3
 800550a:	db09      	blt.n	8005520 <__s2b+0x30>
 800550c:	4630      	mov	r0, r6
 800550e:	f7ff ff47 	bl	80053a0 <_Balloc>
 8005512:	b940      	cbnz	r0, 8005526 <__s2b+0x36>
 8005514:	4602      	mov	r2, r0
 8005516:	4b19      	ldr	r3, [pc, #100]	@ (800557c <__s2b+0x8c>)
 8005518:	4819      	ldr	r0, [pc, #100]	@ (8005580 <__s2b+0x90>)
 800551a:	21d3      	movs	r1, #211	@ 0xd3
 800551c:	f001 fccc 	bl	8006eb8 <__assert_func>
 8005520:	0052      	lsls	r2, r2, #1
 8005522:	3101      	adds	r1, #1
 8005524:	e7f0      	b.n	8005508 <__s2b+0x18>
 8005526:	9b08      	ldr	r3, [sp, #32]
 8005528:	6143      	str	r3, [r0, #20]
 800552a:	2d09      	cmp	r5, #9
 800552c:	f04f 0301 	mov.w	r3, #1
 8005530:	6103      	str	r3, [r0, #16]
 8005532:	dd16      	ble.n	8005562 <__s2b+0x72>
 8005534:	f104 0909 	add.w	r9, r4, #9
 8005538:	46c8      	mov	r8, r9
 800553a:	442c      	add	r4, r5
 800553c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005540:	4601      	mov	r1, r0
 8005542:	3b30      	subs	r3, #48	@ 0x30
 8005544:	220a      	movs	r2, #10
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ff8c 	bl	8005464 <__multadd>
 800554c:	45a0      	cmp	r8, r4
 800554e:	d1f5      	bne.n	800553c <__s2b+0x4c>
 8005550:	f1a5 0408 	sub.w	r4, r5, #8
 8005554:	444c      	add	r4, r9
 8005556:	1b2d      	subs	r5, r5, r4
 8005558:	1963      	adds	r3, r4, r5
 800555a:	42bb      	cmp	r3, r7
 800555c:	db04      	blt.n	8005568 <__s2b+0x78>
 800555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005562:	340a      	adds	r4, #10
 8005564:	2509      	movs	r5, #9
 8005566:	e7f6      	b.n	8005556 <__s2b+0x66>
 8005568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800556c:	4601      	mov	r1, r0
 800556e:	3b30      	subs	r3, #48	@ 0x30
 8005570:	220a      	movs	r2, #10
 8005572:	4630      	mov	r0, r6
 8005574:	f7ff ff76 	bl	8005464 <__multadd>
 8005578:	e7ee      	b.n	8005558 <__s2b+0x68>
 800557a:	bf00      	nop
 800557c:	08007c8d 	.word	0x08007c8d
 8005580:	08007c9e 	.word	0x08007c9e

08005584 <__hi0bits>:
 8005584:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005588:	4603      	mov	r3, r0
 800558a:	bf36      	itet	cc
 800558c:	0403      	lslcc	r3, r0, #16
 800558e:	2000      	movcs	r0, #0
 8005590:	2010      	movcc	r0, #16
 8005592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005596:	bf3c      	itt	cc
 8005598:	021b      	lslcc	r3, r3, #8
 800559a:	3008      	addcc	r0, #8
 800559c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055a0:	bf3c      	itt	cc
 80055a2:	011b      	lslcc	r3, r3, #4
 80055a4:	3004      	addcc	r0, #4
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	bf3c      	itt	cc
 80055ac:	009b      	lslcc	r3, r3, #2
 80055ae:	3002      	addcc	r0, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	db05      	blt.n	80055c0 <__hi0bits+0x3c>
 80055b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80055b8:	f100 0001 	add.w	r0, r0, #1
 80055bc:	bf08      	it	eq
 80055be:	2020      	moveq	r0, #32
 80055c0:	4770      	bx	lr

080055c2 <__lo0bits>:
 80055c2:	6803      	ldr	r3, [r0, #0]
 80055c4:	4602      	mov	r2, r0
 80055c6:	f013 0007 	ands.w	r0, r3, #7
 80055ca:	d00b      	beq.n	80055e4 <__lo0bits+0x22>
 80055cc:	07d9      	lsls	r1, r3, #31
 80055ce:	d421      	bmi.n	8005614 <__lo0bits+0x52>
 80055d0:	0798      	lsls	r0, r3, #30
 80055d2:	bf49      	itett	mi
 80055d4:	085b      	lsrmi	r3, r3, #1
 80055d6:	089b      	lsrpl	r3, r3, #2
 80055d8:	2001      	movmi	r0, #1
 80055da:	6013      	strmi	r3, [r2, #0]
 80055dc:	bf5c      	itt	pl
 80055de:	6013      	strpl	r3, [r2, #0]
 80055e0:	2002      	movpl	r0, #2
 80055e2:	4770      	bx	lr
 80055e4:	b299      	uxth	r1, r3
 80055e6:	b909      	cbnz	r1, 80055ec <__lo0bits+0x2a>
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	2010      	movs	r0, #16
 80055ec:	b2d9      	uxtb	r1, r3
 80055ee:	b909      	cbnz	r1, 80055f4 <__lo0bits+0x32>
 80055f0:	3008      	adds	r0, #8
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	0719      	lsls	r1, r3, #28
 80055f6:	bf04      	itt	eq
 80055f8:	091b      	lsreq	r3, r3, #4
 80055fa:	3004      	addeq	r0, #4
 80055fc:	0799      	lsls	r1, r3, #30
 80055fe:	bf04      	itt	eq
 8005600:	089b      	lsreq	r3, r3, #2
 8005602:	3002      	addeq	r0, #2
 8005604:	07d9      	lsls	r1, r3, #31
 8005606:	d403      	bmi.n	8005610 <__lo0bits+0x4e>
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	f100 0001 	add.w	r0, r0, #1
 800560e:	d003      	beq.n	8005618 <__lo0bits+0x56>
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4770      	bx	lr
 8005614:	2000      	movs	r0, #0
 8005616:	4770      	bx	lr
 8005618:	2020      	movs	r0, #32
 800561a:	4770      	bx	lr

0800561c <__i2b>:
 800561c:	b510      	push	{r4, lr}
 800561e:	460c      	mov	r4, r1
 8005620:	2101      	movs	r1, #1
 8005622:	f7ff febd 	bl	80053a0 <_Balloc>
 8005626:	4602      	mov	r2, r0
 8005628:	b928      	cbnz	r0, 8005636 <__i2b+0x1a>
 800562a:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <__i2b+0x24>)
 800562c:	4805      	ldr	r0, [pc, #20]	@ (8005644 <__i2b+0x28>)
 800562e:	f240 1145 	movw	r1, #325	@ 0x145
 8005632:	f001 fc41 	bl	8006eb8 <__assert_func>
 8005636:	2301      	movs	r3, #1
 8005638:	6144      	str	r4, [r0, #20]
 800563a:	6103      	str	r3, [r0, #16]
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	08007c8d 	.word	0x08007c8d
 8005644:	08007c9e 	.word	0x08007c9e

08005648 <__multiply>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4614      	mov	r4, r2
 800564e:	690a      	ldr	r2, [r1, #16]
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	bfa8      	it	ge
 8005656:	4623      	movge	r3, r4
 8005658:	460f      	mov	r7, r1
 800565a:	bfa4      	itt	ge
 800565c:	460c      	movge	r4, r1
 800565e:	461f      	movge	r7, r3
 8005660:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005664:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	6861      	ldr	r1, [r4, #4]
 800566c:	eb0a 0609 	add.w	r6, sl, r9
 8005670:	42b3      	cmp	r3, r6
 8005672:	b085      	sub	sp, #20
 8005674:	bfb8      	it	lt
 8005676:	3101      	addlt	r1, #1
 8005678:	f7ff fe92 	bl	80053a0 <_Balloc>
 800567c:	b930      	cbnz	r0, 800568c <__multiply+0x44>
 800567e:	4602      	mov	r2, r0
 8005680:	4b44      	ldr	r3, [pc, #272]	@ (8005794 <__multiply+0x14c>)
 8005682:	4845      	ldr	r0, [pc, #276]	@ (8005798 <__multiply+0x150>)
 8005684:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005688:	f001 fc16 	bl	8006eb8 <__assert_func>
 800568c:	f100 0514 	add.w	r5, r0, #20
 8005690:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005694:	462b      	mov	r3, r5
 8005696:	2200      	movs	r2, #0
 8005698:	4543      	cmp	r3, r8
 800569a:	d321      	bcc.n	80056e0 <__multiply+0x98>
 800569c:	f107 0114 	add.w	r1, r7, #20
 80056a0:	f104 0214 	add.w	r2, r4, #20
 80056a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80056a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80056ac:	9302      	str	r3, [sp, #8]
 80056ae:	1b13      	subs	r3, r2, r4
 80056b0:	3b15      	subs	r3, #21
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	3304      	adds	r3, #4
 80056b8:	f104 0715 	add.w	r7, r4, #21
 80056bc:	42ba      	cmp	r2, r7
 80056be:	bf38      	it	cc
 80056c0:	2304      	movcc	r3, #4
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	9b02      	ldr	r3, [sp, #8]
 80056c6:	9103      	str	r1, [sp, #12]
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d80c      	bhi.n	80056e6 <__multiply+0x9e>
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	dd03      	ble.n	80056d8 <__multiply+0x90>
 80056d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05b      	beq.n	8005790 <__multiply+0x148>
 80056d8:	6106      	str	r6, [r0, #16]
 80056da:	b005      	add	sp, #20
 80056dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e0:	f843 2b04 	str.w	r2, [r3], #4
 80056e4:	e7d8      	b.n	8005698 <__multiply+0x50>
 80056e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80056ea:	f1ba 0f00 	cmp.w	sl, #0
 80056ee:	d024      	beq.n	800573a <__multiply+0xf2>
 80056f0:	f104 0e14 	add.w	lr, r4, #20
 80056f4:	46a9      	mov	r9, r5
 80056f6:	f04f 0c00 	mov.w	ip, #0
 80056fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056fe:	f8d9 3000 	ldr.w	r3, [r9]
 8005702:	fa1f fb87 	uxth.w	fp, r7
 8005706:	b29b      	uxth	r3, r3
 8005708:	fb0a 330b 	mla	r3, sl, fp, r3
 800570c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005710:	f8d9 7000 	ldr.w	r7, [r9]
 8005714:	4463      	add	r3, ip
 8005716:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800571a:	fb0a c70b 	mla	r7, sl, fp, ip
 800571e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005722:	b29b      	uxth	r3, r3
 8005724:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005728:	4572      	cmp	r2, lr
 800572a:	f849 3b04 	str.w	r3, [r9], #4
 800572e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005732:	d8e2      	bhi.n	80056fa <__multiply+0xb2>
 8005734:	9b01      	ldr	r3, [sp, #4]
 8005736:	f845 c003 	str.w	ip, [r5, r3]
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005740:	3104      	adds	r1, #4
 8005742:	f1b9 0f00 	cmp.w	r9, #0
 8005746:	d021      	beq.n	800578c <__multiply+0x144>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	f104 0c14 	add.w	ip, r4, #20
 800574e:	46ae      	mov	lr, r5
 8005750:	f04f 0a00 	mov.w	sl, #0
 8005754:	f8bc b000 	ldrh.w	fp, [ip]
 8005758:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800575c:	fb09 770b 	mla	r7, r9, fp, r7
 8005760:	4457      	add	r7, sl
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005768:	f84e 3b04 	str.w	r3, [lr], #4
 800576c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005774:	f8be 3000 	ldrh.w	r3, [lr]
 8005778:	fb09 330a 	mla	r3, r9, sl, r3
 800577c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005780:	4562      	cmp	r2, ip
 8005782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005786:	d8e5      	bhi.n	8005754 <__multiply+0x10c>
 8005788:	9f01      	ldr	r7, [sp, #4]
 800578a:	51eb      	str	r3, [r5, r7]
 800578c:	3504      	adds	r5, #4
 800578e:	e799      	b.n	80056c4 <__multiply+0x7c>
 8005790:	3e01      	subs	r6, #1
 8005792:	e79b      	b.n	80056cc <__multiply+0x84>
 8005794:	08007c8d 	.word	0x08007c8d
 8005798:	08007c9e 	.word	0x08007c9e

0800579c <__pow5mult>:
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a0:	4615      	mov	r5, r2
 80057a2:	f012 0203 	ands.w	r2, r2, #3
 80057a6:	4607      	mov	r7, r0
 80057a8:	460e      	mov	r6, r1
 80057aa:	d007      	beq.n	80057bc <__pow5mult+0x20>
 80057ac:	4c25      	ldr	r4, [pc, #148]	@ (8005844 <__pow5mult+0xa8>)
 80057ae:	3a01      	subs	r2, #1
 80057b0:	2300      	movs	r3, #0
 80057b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057b6:	f7ff fe55 	bl	8005464 <__multadd>
 80057ba:	4606      	mov	r6, r0
 80057bc:	10ad      	asrs	r5, r5, #2
 80057be:	d03d      	beq.n	800583c <__pow5mult+0xa0>
 80057c0:	69fc      	ldr	r4, [r7, #28]
 80057c2:	b97c      	cbnz	r4, 80057e4 <__pow5mult+0x48>
 80057c4:	2010      	movs	r0, #16
 80057c6:	f7ff fd35 	bl	8005234 <malloc>
 80057ca:	4602      	mov	r2, r0
 80057cc:	61f8      	str	r0, [r7, #28]
 80057ce:	b928      	cbnz	r0, 80057dc <__pow5mult+0x40>
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <__pow5mult+0xac>)
 80057d2:	481e      	ldr	r0, [pc, #120]	@ (800584c <__pow5mult+0xb0>)
 80057d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057d8:	f001 fb6e 	bl	8006eb8 <__assert_func>
 80057dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057e0:	6004      	str	r4, [r0, #0]
 80057e2:	60c4      	str	r4, [r0, #12]
 80057e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057ec:	b94c      	cbnz	r4, 8005802 <__pow5mult+0x66>
 80057ee:	f240 2171 	movw	r1, #625	@ 0x271
 80057f2:	4638      	mov	r0, r7
 80057f4:	f7ff ff12 	bl	800561c <__i2b>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80057fe:	4604      	mov	r4, r0
 8005800:	6003      	str	r3, [r0, #0]
 8005802:	f04f 0900 	mov.w	r9, #0
 8005806:	07eb      	lsls	r3, r5, #31
 8005808:	d50a      	bpl.n	8005820 <__pow5mult+0x84>
 800580a:	4631      	mov	r1, r6
 800580c:	4622      	mov	r2, r4
 800580e:	4638      	mov	r0, r7
 8005810:	f7ff ff1a 	bl	8005648 <__multiply>
 8005814:	4631      	mov	r1, r6
 8005816:	4680      	mov	r8, r0
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff fe01 	bl	8005420 <_Bfree>
 800581e:	4646      	mov	r6, r8
 8005820:	106d      	asrs	r5, r5, #1
 8005822:	d00b      	beq.n	800583c <__pow5mult+0xa0>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	b938      	cbnz	r0, 8005838 <__pow5mult+0x9c>
 8005828:	4622      	mov	r2, r4
 800582a:	4621      	mov	r1, r4
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff ff0b 	bl	8005648 <__multiply>
 8005832:	6020      	str	r0, [r4, #0]
 8005834:	f8c0 9000 	str.w	r9, [r0]
 8005838:	4604      	mov	r4, r0
 800583a:	e7e4      	b.n	8005806 <__pow5mult+0x6a>
 800583c:	4630      	mov	r0, r6
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005842:	bf00      	nop
 8005844:	08007cf8 	.word	0x08007cf8
 8005848:	08007c1e 	.word	0x08007c1e
 800584c:	08007c9e 	.word	0x08007c9e

08005850 <__lshift>:
 8005850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	460c      	mov	r4, r1
 8005856:	6849      	ldr	r1, [r1, #4]
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	4607      	mov	r7, r0
 8005862:	4691      	mov	r9, r2
 8005864:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005868:	f108 0601 	add.w	r6, r8, #1
 800586c:	42b3      	cmp	r3, r6
 800586e:	db0b      	blt.n	8005888 <__lshift+0x38>
 8005870:	4638      	mov	r0, r7
 8005872:	f7ff fd95 	bl	80053a0 <_Balloc>
 8005876:	4605      	mov	r5, r0
 8005878:	b948      	cbnz	r0, 800588e <__lshift+0x3e>
 800587a:	4602      	mov	r2, r0
 800587c:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <__lshift+0xd0>)
 800587e:	4829      	ldr	r0, [pc, #164]	@ (8005924 <__lshift+0xd4>)
 8005880:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005884:	f001 fb18 	bl	8006eb8 <__assert_func>
 8005888:	3101      	adds	r1, #1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	e7ee      	b.n	800586c <__lshift+0x1c>
 800588e:	2300      	movs	r3, #0
 8005890:	f100 0114 	add.w	r1, r0, #20
 8005894:	f100 0210 	add.w	r2, r0, #16
 8005898:	4618      	mov	r0, r3
 800589a:	4553      	cmp	r3, sl
 800589c:	db33      	blt.n	8005906 <__lshift+0xb6>
 800589e:	6920      	ldr	r0, [r4, #16]
 80058a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058a4:	f104 0314 	add.w	r3, r4, #20
 80058a8:	f019 091f 	ands.w	r9, r9, #31
 80058ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058b4:	d02b      	beq.n	800590e <__lshift+0xbe>
 80058b6:	f1c9 0e20 	rsb	lr, r9, #32
 80058ba:	468a      	mov	sl, r1
 80058bc:	2200      	movs	r2, #0
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	fa00 f009 	lsl.w	r0, r0, r9
 80058c4:	4310      	orrs	r0, r2
 80058c6:	f84a 0b04 	str.w	r0, [sl], #4
 80058ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ce:	459c      	cmp	ip, r3
 80058d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80058d4:	d8f3      	bhi.n	80058be <__lshift+0x6e>
 80058d6:	ebac 0304 	sub.w	r3, ip, r4
 80058da:	3b15      	subs	r3, #21
 80058dc:	f023 0303 	bic.w	r3, r3, #3
 80058e0:	3304      	adds	r3, #4
 80058e2:	f104 0015 	add.w	r0, r4, #21
 80058e6:	4584      	cmp	ip, r0
 80058e8:	bf38      	it	cc
 80058ea:	2304      	movcc	r3, #4
 80058ec:	50ca      	str	r2, [r1, r3]
 80058ee:	b10a      	cbz	r2, 80058f4 <__lshift+0xa4>
 80058f0:	f108 0602 	add.w	r6, r8, #2
 80058f4:	3e01      	subs	r6, #1
 80058f6:	4638      	mov	r0, r7
 80058f8:	612e      	str	r6, [r5, #16]
 80058fa:	4621      	mov	r1, r4
 80058fc:	f7ff fd90 	bl	8005420 <_Bfree>
 8005900:	4628      	mov	r0, r5
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	f842 0f04 	str.w	r0, [r2, #4]!
 800590a:	3301      	adds	r3, #1
 800590c:	e7c5      	b.n	800589a <__lshift+0x4a>
 800590e:	3904      	subs	r1, #4
 8005910:	f853 2b04 	ldr.w	r2, [r3], #4
 8005914:	f841 2f04 	str.w	r2, [r1, #4]!
 8005918:	459c      	cmp	ip, r3
 800591a:	d8f9      	bhi.n	8005910 <__lshift+0xc0>
 800591c:	e7ea      	b.n	80058f4 <__lshift+0xa4>
 800591e:	bf00      	nop
 8005920:	08007c8d 	.word	0x08007c8d
 8005924:	08007c9e 	.word	0x08007c9e

08005928 <__mcmp>:
 8005928:	690a      	ldr	r2, [r1, #16]
 800592a:	4603      	mov	r3, r0
 800592c:	6900      	ldr	r0, [r0, #16]
 800592e:	1a80      	subs	r0, r0, r2
 8005930:	b530      	push	{r4, r5, lr}
 8005932:	d10e      	bne.n	8005952 <__mcmp+0x2a>
 8005934:	3314      	adds	r3, #20
 8005936:	3114      	adds	r1, #20
 8005938:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800593c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005940:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005944:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005948:	4295      	cmp	r5, r2
 800594a:	d003      	beq.n	8005954 <__mcmp+0x2c>
 800594c:	d205      	bcs.n	800595a <__mcmp+0x32>
 800594e:	f04f 30ff 	mov.w	r0, #4294967295
 8005952:	bd30      	pop	{r4, r5, pc}
 8005954:	42a3      	cmp	r3, r4
 8005956:	d3f3      	bcc.n	8005940 <__mcmp+0x18>
 8005958:	e7fb      	b.n	8005952 <__mcmp+0x2a>
 800595a:	2001      	movs	r0, #1
 800595c:	e7f9      	b.n	8005952 <__mcmp+0x2a>
	...

08005960 <__mdiff>:
 8005960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	4689      	mov	r9, r1
 8005966:	4606      	mov	r6, r0
 8005968:	4611      	mov	r1, r2
 800596a:	4648      	mov	r0, r9
 800596c:	4614      	mov	r4, r2
 800596e:	f7ff ffdb 	bl	8005928 <__mcmp>
 8005972:	1e05      	subs	r5, r0, #0
 8005974:	d112      	bne.n	800599c <__mdiff+0x3c>
 8005976:	4629      	mov	r1, r5
 8005978:	4630      	mov	r0, r6
 800597a:	f7ff fd11 	bl	80053a0 <_Balloc>
 800597e:	4602      	mov	r2, r0
 8005980:	b928      	cbnz	r0, 800598e <__mdiff+0x2e>
 8005982:	4b3f      	ldr	r3, [pc, #252]	@ (8005a80 <__mdiff+0x120>)
 8005984:	f240 2137 	movw	r1, #567	@ 0x237
 8005988:	483e      	ldr	r0, [pc, #248]	@ (8005a84 <__mdiff+0x124>)
 800598a:	f001 fa95 	bl	8006eb8 <__assert_func>
 800598e:	2301      	movs	r3, #1
 8005990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005994:	4610      	mov	r0, r2
 8005996:	b003      	add	sp, #12
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	bfbc      	itt	lt
 800599e:	464b      	movlt	r3, r9
 80059a0:	46a1      	movlt	r9, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059a8:	bfba      	itte	lt
 80059aa:	461c      	movlt	r4, r3
 80059ac:	2501      	movlt	r5, #1
 80059ae:	2500      	movge	r5, #0
 80059b0:	f7ff fcf6 	bl	80053a0 <_Balloc>
 80059b4:	4602      	mov	r2, r0
 80059b6:	b918      	cbnz	r0, 80059c0 <__mdiff+0x60>
 80059b8:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <__mdiff+0x120>)
 80059ba:	f240 2145 	movw	r1, #581	@ 0x245
 80059be:	e7e3      	b.n	8005988 <__mdiff+0x28>
 80059c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059c4:	6926      	ldr	r6, [r4, #16]
 80059c6:	60c5      	str	r5, [r0, #12]
 80059c8:	f109 0310 	add.w	r3, r9, #16
 80059cc:	f109 0514 	add.w	r5, r9, #20
 80059d0:	f104 0e14 	add.w	lr, r4, #20
 80059d4:	f100 0b14 	add.w	fp, r0, #20
 80059d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	46d9      	mov	r9, fp
 80059e4:	f04f 0c00 	mov.w	ip, #0
 80059e8:	9b01      	ldr	r3, [sp, #4]
 80059ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	fa1f f38a 	uxth.w	r3, sl
 80059f8:	4619      	mov	r1, r3
 80059fa:	b283      	uxth	r3, r0
 80059fc:	1acb      	subs	r3, r1, r3
 80059fe:	0c00      	lsrs	r0, r0, #16
 8005a00:	4463      	add	r3, ip
 8005a02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a10:	4576      	cmp	r6, lr
 8005a12:	f849 3b04 	str.w	r3, [r9], #4
 8005a16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a1a:	d8e5      	bhi.n	80059e8 <__mdiff+0x88>
 8005a1c:	1b33      	subs	r3, r6, r4
 8005a1e:	3b15      	subs	r3, #21
 8005a20:	f023 0303 	bic.w	r3, r3, #3
 8005a24:	3415      	adds	r4, #21
 8005a26:	3304      	adds	r3, #4
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	bf38      	it	cc
 8005a2c:	2304      	movcc	r3, #4
 8005a2e:	441d      	add	r5, r3
 8005a30:	445b      	add	r3, fp
 8005a32:	461e      	mov	r6, r3
 8005a34:	462c      	mov	r4, r5
 8005a36:	4544      	cmp	r4, r8
 8005a38:	d30e      	bcc.n	8005a58 <__mdiff+0xf8>
 8005a3a:	f108 0103 	add.w	r1, r8, #3
 8005a3e:	1b49      	subs	r1, r1, r5
 8005a40:	f021 0103 	bic.w	r1, r1, #3
 8005a44:	3d03      	subs	r5, #3
 8005a46:	45a8      	cmp	r8, r5
 8005a48:	bf38      	it	cc
 8005a4a:	2100      	movcc	r1, #0
 8005a4c:	440b      	add	r3, r1
 8005a4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a52:	b191      	cbz	r1, 8005a7a <__mdiff+0x11a>
 8005a54:	6117      	str	r7, [r2, #16]
 8005a56:	e79d      	b.n	8005994 <__mdiff+0x34>
 8005a58:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a5c:	46e6      	mov	lr, ip
 8005a5e:	0c08      	lsrs	r0, r1, #16
 8005a60:	fa1c fc81 	uxtah	ip, ip, r1
 8005a64:	4471      	add	r1, lr
 8005a66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a6a:	b289      	uxth	r1, r1
 8005a6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a70:	f846 1b04 	str.w	r1, [r6], #4
 8005a74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a78:	e7dd      	b.n	8005a36 <__mdiff+0xd6>
 8005a7a:	3f01      	subs	r7, #1
 8005a7c:	e7e7      	b.n	8005a4e <__mdiff+0xee>
 8005a7e:	bf00      	nop
 8005a80:	08007c8d 	.word	0x08007c8d
 8005a84:	08007c9e 	.word	0x08007c9e

08005a88 <__ulp>:
 8005a88:	b082      	sub	sp, #8
 8005a8a:	ed8d 0b00 	vstr	d0, [sp]
 8005a8e:	9a01      	ldr	r2, [sp, #4]
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <__ulp+0x48>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	dc08      	bgt.n	8005aae <__ulp+0x26>
 8005a9c:	425b      	negs	r3, r3
 8005a9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005aa2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005aa6:	da04      	bge.n	8005ab2 <__ulp+0x2a>
 8005aa8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005aac:	4113      	asrs	r3, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	e008      	b.n	8005ac4 <__ulp+0x3c>
 8005ab2:	f1a2 0314 	sub.w	r3, r2, #20
 8005ab6:	2b1e      	cmp	r3, #30
 8005ab8:	bfda      	itte	le
 8005aba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005abe:	40da      	lsrle	r2, r3
 8005ac0:	2201      	movgt	r2, #1
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	ec41 0b10 	vmov	d0, r0, r1
 8005acc:	b002      	add	sp, #8
 8005ace:	4770      	bx	lr
 8005ad0:	7ff00000 	.word	0x7ff00000

08005ad4 <__b2d>:
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	6906      	ldr	r6, [r0, #16]
 8005ada:	f100 0814 	add.w	r8, r0, #20
 8005ade:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005ae2:	1f37      	subs	r7, r6, #4
 8005ae4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f7ff fd4b 	bl	8005584 <__hi0bits>
 8005aee:	f1c0 0320 	rsb	r3, r0, #32
 8005af2:	280a      	cmp	r0, #10
 8005af4:	600b      	str	r3, [r1, #0]
 8005af6:	491b      	ldr	r1, [pc, #108]	@ (8005b64 <__b2d+0x90>)
 8005af8:	dc15      	bgt.n	8005b26 <__b2d+0x52>
 8005afa:	f1c0 0c0b 	rsb	ip, r0, #11
 8005afe:	fa22 f30c 	lsr.w	r3, r2, ip
 8005b02:	45b8      	cmp	r8, r7
 8005b04:	ea43 0501 	orr.w	r5, r3, r1
 8005b08:	bf34      	ite	cc
 8005b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005b0e:	2300      	movcs	r3, #0
 8005b10:	3015      	adds	r0, #21
 8005b12:	fa02 f000 	lsl.w	r0, r2, r0
 8005b16:	fa23 f30c 	lsr.w	r3, r3, ip
 8005b1a:	4303      	orrs	r3, r0
 8005b1c:	461c      	mov	r4, r3
 8005b1e:	ec45 4b10 	vmov	d0, r4, r5
 8005b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b26:	45b8      	cmp	r8, r7
 8005b28:	bf3a      	itte	cc
 8005b2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005b2e:	f1a6 0708 	subcc.w	r7, r6, #8
 8005b32:	2300      	movcs	r3, #0
 8005b34:	380b      	subs	r0, #11
 8005b36:	d012      	beq.n	8005b5e <__b2d+0x8a>
 8005b38:	f1c0 0120 	rsb	r1, r0, #32
 8005b3c:	fa23 f401 	lsr.w	r4, r3, r1
 8005b40:	4082      	lsls	r2, r0
 8005b42:	4322      	orrs	r2, r4
 8005b44:	4547      	cmp	r7, r8
 8005b46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005b4a:	bf8c      	ite	hi
 8005b4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005b50:	2200      	movls	r2, #0
 8005b52:	4083      	lsls	r3, r0
 8005b54:	40ca      	lsrs	r2, r1
 8005b56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	e7de      	b.n	8005b1c <__b2d+0x48>
 8005b5e:	ea42 0501 	orr.w	r5, r2, r1
 8005b62:	e7db      	b.n	8005b1c <__b2d+0x48>
 8005b64:	3ff00000 	.word	0x3ff00000

08005b68 <__d2b>:
 8005b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b6c:	460f      	mov	r7, r1
 8005b6e:	2101      	movs	r1, #1
 8005b70:	ec59 8b10 	vmov	r8, r9, d0
 8005b74:	4616      	mov	r6, r2
 8005b76:	f7ff fc13 	bl	80053a0 <_Balloc>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	b930      	cbnz	r0, 8005b8c <__d2b+0x24>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b23      	ldr	r3, [pc, #140]	@ (8005c10 <__d2b+0xa8>)
 8005b82:	4824      	ldr	r0, [pc, #144]	@ (8005c14 <__d2b+0xac>)
 8005b84:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b88:	f001 f996 	bl	8006eb8 <__assert_func>
 8005b8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b94:	b10d      	cbz	r5, 8005b9a <__d2b+0x32>
 8005b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8005ba0:	d023      	beq.n	8005bea <__d2b+0x82>
 8005ba2:	4668      	mov	r0, sp
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	f7ff fd0c 	bl	80055c2 <__lo0bits>
 8005baa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005bae:	b1d0      	cbz	r0, 8005be6 <__d2b+0x7e>
 8005bb0:	f1c0 0320 	rsb	r3, r0, #32
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	40c2      	lsrs	r2, r0
 8005bbc:	6163      	str	r3, [r4, #20]
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	9b01      	ldr	r3, [sp, #4]
 8005bc2:	61a3      	str	r3, [r4, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2201      	moveq	r2, #1
 8005bca:	2202      	movne	r2, #2
 8005bcc:	6122      	str	r2, [r4, #16]
 8005bce:	b1a5      	cbz	r5, 8005bfa <__d2b+0x92>
 8005bd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005bd4:	4405      	add	r5, r0
 8005bd6:	603d      	str	r5, [r7, #0]
 8005bd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	4620      	mov	r0, r4
 8005be0:	b003      	add	sp, #12
 8005be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005be6:	6161      	str	r1, [r4, #20]
 8005be8:	e7ea      	b.n	8005bc0 <__d2b+0x58>
 8005bea:	a801      	add	r0, sp, #4
 8005bec:	f7ff fce9 	bl	80055c2 <__lo0bits>
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	6163      	str	r3, [r4, #20]
 8005bf4:	3020      	adds	r0, #32
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	e7e8      	b.n	8005bcc <__d2b+0x64>
 8005bfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c02:	6038      	str	r0, [r7, #0]
 8005c04:	6918      	ldr	r0, [r3, #16]
 8005c06:	f7ff fcbd 	bl	8005584 <__hi0bits>
 8005c0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c0e:	e7e5      	b.n	8005bdc <__d2b+0x74>
 8005c10:	08007c8d 	.word	0x08007c8d
 8005c14:	08007c9e 	.word	0x08007c9e

08005c18 <__ratio>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	e9cd 1000 	strd	r1, r0, [sp]
 8005c22:	a902      	add	r1, sp, #8
 8005c24:	f7ff ff56 	bl	8005ad4 <__b2d>
 8005c28:	9800      	ldr	r0, [sp, #0]
 8005c2a:	a903      	add	r1, sp, #12
 8005c2c:	ec55 4b10 	vmov	r4, r5, d0
 8005c30:	f7ff ff50 	bl	8005ad4 <__b2d>
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	6919      	ldr	r1, [r3, #16]
 8005c38:	9b00      	ldr	r3, [sp, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	1ac9      	subs	r1, r1, r3
 8005c3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c42:	1a9b      	subs	r3, r3, r2
 8005c44:	ec5b ab10 	vmov	sl, fp, d0
 8005c48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfce      	itee	gt
 8005c50:	462a      	movgt	r2, r5
 8005c52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005c56:	465a      	movle	r2, fp
 8005c58:	462f      	mov	r7, r5
 8005c5a:	46d9      	mov	r9, fp
 8005c5c:	bfcc      	ite	gt
 8005c5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005c62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005c66:	464b      	mov	r3, r9
 8005c68:	4652      	mov	r2, sl
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fe0d 	bl	800088c <__aeabi_ddiv>
 8005c72:	ec41 0b10 	vmov	d0, r0, r1
 8005c76:	b005      	add	sp, #20
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c7c <__copybits>:
 8005c7c:	3901      	subs	r1, #1
 8005c7e:	b570      	push	{r4, r5, r6, lr}
 8005c80:	1149      	asrs	r1, r1, #5
 8005c82:	6914      	ldr	r4, [r2, #16]
 8005c84:	3101      	adds	r1, #1
 8005c86:	f102 0314 	add.w	r3, r2, #20
 8005c8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005c8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005c92:	1f05      	subs	r5, r0, #4
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d30c      	bcc.n	8005cb2 <__copybits+0x36>
 8005c98:	1aa3      	subs	r3, r4, r2
 8005c9a:	3b11      	subs	r3, #17
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	3211      	adds	r2, #17
 8005ca2:	42a2      	cmp	r2, r4
 8005ca4:	bf88      	it	hi
 8005ca6:	2300      	movhi	r3, #0
 8005ca8:	4418      	add	r0, r3
 8005caa:	2300      	movs	r3, #0
 8005cac:	4288      	cmp	r0, r1
 8005cae:	d305      	bcc.n	8005cbc <__copybits+0x40>
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8005cb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8005cba:	e7eb      	b.n	8005c94 <__copybits+0x18>
 8005cbc:	f840 3b04 	str.w	r3, [r0], #4
 8005cc0:	e7f4      	b.n	8005cac <__copybits+0x30>

08005cc2 <__any_on>:
 8005cc2:	f100 0214 	add.w	r2, r0, #20
 8005cc6:	6900      	ldr	r0, [r0, #16]
 8005cc8:	114b      	asrs	r3, r1, #5
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	db11      	blt.n	8005cf4 <__any_on+0x32>
 8005cd0:	dd0a      	ble.n	8005ce8 <__any_on+0x26>
 8005cd2:	f011 011f 	ands.w	r1, r1, #31
 8005cd6:	d007      	beq.n	8005ce8 <__any_on+0x26>
 8005cd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005cdc:	fa24 f001 	lsr.w	r0, r4, r1
 8005ce0:	fa00 f101 	lsl.w	r1, r0, r1
 8005ce4:	428c      	cmp	r4, r1
 8005ce6:	d10b      	bne.n	8005d00 <__any_on+0x3e>
 8005ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d803      	bhi.n	8005cf8 <__any_on+0x36>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	bd10      	pop	{r4, pc}
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	e7f7      	b.n	8005ce8 <__any_on+0x26>
 8005cf8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	d0f5      	beq.n	8005cec <__any_on+0x2a>
 8005d00:	2001      	movs	r0, #1
 8005d02:	e7f6      	b.n	8005cf2 <__any_on+0x30>

08005d04 <sulp>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4604      	mov	r4, r0
 8005d08:	460d      	mov	r5, r1
 8005d0a:	ec45 4b10 	vmov	d0, r4, r5
 8005d0e:	4616      	mov	r6, r2
 8005d10:	f7ff feba 	bl	8005a88 <__ulp>
 8005d14:	ec51 0b10 	vmov	r0, r1, d0
 8005d18:	b17e      	cbz	r6, 8005d3a <sulp+0x36>
 8005d1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd09      	ble.n	8005d3a <sulp+0x36>
 8005d26:	051b      	lsls	r3, r3, #20
 8005d28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005d32:	4622      	mov	r2, r4
 8005d34:	462b      	mov	r3, r5
 8005d36:	f7fa fc7f 	bl	8000638 <__aeabi_dmul>
 8005d3a:	ec41 0b10 	vmov	d0, r0, r1
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}

08005d40 <_strtod_l>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	b09f      	sub	sp, #124	@ 0x7c
 8005d46:	460c      	mov	r4, r1
 8005d48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005d4e:	9005      	str	r0, [sp, #20]
 8005d50:	f04f 0a00 	mov.w	sl, #0
 8005d54:	f04f 0b00 	mov.w	fp, #0
 8005d58:	460a      	mov	r2, r1
 8005d5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d5c:	7811      	ldrb	r1, [r2, #0]
 8005d5e:	292b      	cmp	r1, #43	@ 0x2b
 8005d60:	d04a      	beq.n	8005df8 <_strtod_l+0xb8>
 8005d62:	d838      	bhi.n	8005dd6 <_strtod_l+0x96>
 8005d64:	290d      	cmp	r1, #13
 8005d66:	d832      	bhi.n	8005dce <_strtod_l+0x8e>
 8005d68:	2908      	cmp	r1, #8
 8005d6a:	d832      	bhi.n	8005dd2 <_strtod_l+0x92>
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d03b      	beq.n	8005de8 <_strtod_l+0xa8>
 8005d70:	2200      	movs	r2, #0
 8005d72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005d76:	782a      	ldrb	r2, [r5, #0]
 8005d78:	2a30      	cmp	r2, #48	@ 0x30
 8005d7a:	f040 80b3 	bne.w	8005ee4 <_strtod_l+0x1a4>
 8005d7e:	786a      	ldrb	r2, [r5, #1]
 8005d80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d84:	2a58      	cmp	r2, #88	@ 0x58
 8005d86:	d16e      	bne.n	8005e66 <_strtod_l+0x126>
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	4a8e      	ldr	r2, [pc, #568]	@ (8005fcc <_strtod_l+0x28c>)
 8005d94:	9805      	ldr	r0, [sp, #20]
 8005d96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005d98:	a919      	add	r1, sp, #100	@ 0x64
 8005d9a:	f001 f927 	bl	8006fec <__gethex>
 8005d9e:	f010 060f 	ands.w	r6, r0, #15
 8005da2:	4604      	mov	r4, r0
 8005da4:	d005      	beq.n	8005db2 <_strtod_l+0x72>
 8005da6:	2e06      	cmp	r6, #6
 8005da8:	d128      	bne.n	8005dfc <_strtod_l+0xbc>
 8005daa:	3501      	adds	r5, #1
 8005dac:	2300      	movs	r3, #0
 8005dae:	9519      	str	r5, [sp, #100]	@ 0x64
 8005db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005db2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 858e 	bne.w	80068d6 <_strtod_l+0xb96>
 8005dba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dbc:	b1cb      	cbz	r3, 8005df2 <_strtod_l+0xb2>
 8005dbe:	4652      	mov	r2, sl
 8005dc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005dc4:	ec43 2b10 	vmov	d0, r2, r3
 8005dc8:	b01f      	add	sp, #124	@ 0x7c
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	2920      	cmp	r1, #32
 8005dd0:	d1ce      	bne.n	8005d70 <_strtod_l+0x30>
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	e7c1      	b.n	8005d5a <_strtod_l+0x1a>
 8005dd6:	292d      	cmp	r1, #45	@ 0x2d
 8005dd8:	d1ca      	bne.n	8005d70 <_strtod_l+0x30>
 8005dda:	2101      	movs	r1, #1
 8005ddc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005dde:	1c51      	adds	r1, r2, #1
 8005de0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005de2:	7852      	ldrb	r2, [r2, #1]
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d1c5      	bne.n	8005d74 <_strtod_l+0x34>
 8005de8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005dea:	9419      	str	r4, [sp, #100]	@ 0x64
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 8570 	bne.w	80068d2 <_strtod_l+0xb92>
 8005df2:	4652      	mov	r2, sl
 8005df4:	465b      	mov	r3, fp
 8005df6:	e7e5      	b.n	8005dc4 <_strtod_l+0x84>
 8005df8:	2100      	movs	r1, #0
 8005dfa:	e7ef      	b.n	8005ddc <_strtod_l+0x9c>
 8005dfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005dfe:	b13a      	cbz	r2, 8005e10 <_strtod_l+0xd0>
 8005e00:	2135      	movs	r1, #53	@ 0x35
 8005e02:	a81c      	add	r0, sp, #112	@ 0x70
 8005e04:	f7ff ff3a 	bl	8005c7c <__copybits>
 8005e08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e0a:	9805      	ldr	r0, [sp, #20]
 8005e0c:	f7ff fb08 	bl	8005420 <_Bfree>
 8005e10:	3e01      	subs	r6, #1
 8005e12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005e14:	2e04      	cmp	r6, #4
 8005e16:	d806      	bhi.n	8005e26 <_strtod_l+0xe6>
 8005e18:	e8df f006 	tbb	[pc, r6]
 8005e1c:	201d0314 	.word	0x201d0314
 8005e20:	14          	.byte	0x14
 8005e21:	00          	.byte	0x00
 8005e22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005e26:	05e1      	lsls	r1, r4, #23
 8005e28:	bf48      	it	mi
 8005e2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005e2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005e32:	0d1b      	lsrs	r3, r3, #20
 8005e34:	051b      	lsls	r3, r3, #20
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1bb      	bne.n	8005db2 <_strtod_l+0x72>
 8005e3a:	f7fe fb31 	bl	80044a0 <__errno>
 8005e3e:	2322      	movs	r3, #34	@ 0x22
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	e7b6      	b.n	8005db2 <_strtod_l+0x72>
 8005e44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005e48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005e4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e54:	e7e7      	b.n	8005e26 <_strtod_l+0xe6>
 8005e56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005fd4 <_strtod_l+0x294>
 8005e5a:	e7e4      	b.n	8005e26 <_strtod_l+0xe6>
 8005e5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005e60:	f04f 3aff 	mov.w	sl, #4294967295
 8005e64:	e7df      	b.n	8005e26 <_strtod_l+0xe6>
 8005e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	2b30      	cmp	r3, #48	@ 0x30
 8005e70:	d0f9      	beq.n	8005e66 <_strtod_l+0x126>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d09d      	beq.n	8005db2 <_strtod_l+0x72>
 8005e76:	2301      	movs	r3, #1
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9308      	str	r3, [sp, #32]
 8005e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e84:	461f      	mov	r7, r3
 8005e86:	220a      	movs	r2, #10
 8005e88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005e8a:	7805      	ldrb	r5, [r0, #0]
 8005e8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005e90:	b2d9      	uxtb	r1, r3
 8005e92:	2909      	cmp	r1, #9
 8005e94:	d928      	bls.n	8005ee8 <_strtod_l+0x1a8>
 8005e96:	494e      	ldr	r1, [pc, #312]	@ (8005fd0 <_strtod_l+0x290>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f000 ffd5 	bl	8006e48 <strncmp>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d032      	beq.n	8005f08 <_strtod_l+0x1c8>
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4681      	mov	r9, r0
 8005ea8:	463d      	mov	r5, r7
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2a65      	cmp	r2, #101	@ 0x65
 8005eae:	d001      	beq.n	8005eb4 <_strtod_l+0x174>
 8005eb0:	2a45      	cmp	r2, #69	@ 0x45
 8005eb2:	d114      	bne.n	8005ede <_strtod_l+0x19e>
 8005eb4:	b91d      	cbnz	r5, 8005ebe <_strtod_l+0x17e>
 8005eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eb8:	4302      	orrs	r2, r0
 8005eba:	d095      	beq.n	8005de8 <_strtod_l+0xa8>
 8005ebc:	2500      	movs	r5, #0
 8005ebe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005ec0:	1c62      	adds	r2, r4, #1
 8005ec2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ec4:	7862      	ldrb	r2, [r4, #1]
 8005ec6:	2a2b      	cmp	r2, #43	@ 0x2b
 8005ec8:	d077      	beq.n	8005fba <_strtod_l+0x27a>
 8005eca:	2a2d      	cmp	r2, #45	@ 0x2d
 8005ecc:	d07b      	beq.n	8005fc6 <_strtod_l+0x286>
 8005ece:	f04f 0c00 	mov.w	ip, #0
 8005ed2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005ed6:	2909      	cmp	r1, #9
 8005ed8:	f240 8082 	bls.w	8005fe0 <_strtod_l+0x2a0>
 8005edc:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	e0a2      	b.n	800602a <_strtod_l+0x2ea>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e7c7      	b.n	8005e78 <_strtod_l+0x138>
 8005ee8:	2f08      	cmp	r7, #8
 8005eea:	bfd5      	itete	le
 8005eec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005eee:	9908      	ldrgt	r1, [sp, #32]
 8005ef0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ef4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ef8:	f100 0001 	add.w	r0, r0, #1
 8005efc:	bfd4      	ite	le
 8005efe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005f00:	9308      	strgt	r3, [sp, #32]
 8005f02:	3701      	adds	r7, #1
 8005f04:	9019      	str	r0, [sp, #100]	@ 0x64
 8005f06:	e7bf      	b.n	8005e88 <_strtod_l+0x148>
 8005f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f0e:	785a      	ldrb	r2, [r3, #1]
 8005f10:	b37f      	cbz	r7, 8005f72 <_strtod_l+0x232>
 8005f12:	4681      	mov	r9, r0
 8005f14:	463d      	mov	r5, r7
 8005f16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d912      	bls.n	8005f44 <_strtod_l+0x204>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7c4      	b.n	8005eac <_strtod_l+0x16c>
 8005f22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f28:	785a      	ldrb	r2, [r3, #1]
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	2a30      	cmp	r2, #48	@ 0x30
 8005f2e:	d0f8      	beq.n	8005f22 <_strtod_l+0x1e2>
 8005f30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	f200 84d3 	bhi.w	80068e0 <_strtod_l+0xba0>
 8005f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f3e:	4681      	mov	r9, r0
 8005f40:	2000      	movs	r0, #0
 8005f42:	4605      	mov	r5, r0
 8005f44:	3a30      	subs	r2, #48	@ 0x30
 8005f46:	f100 0301 	add.w	r3, r0, #1
 8005f4a:	d02a      	beq.n	8005fa2 <_strtod_l+0x262>
 8005f4c:	4499      	add	r9, r3
 8005f4e:	eb00 0c05 	add.w	ip, r0, r5
 8005f52:	462b      	mov	r3, r5
 8005f54:	210a      	movs	r1, #10
 8005f56:	4563      	cmp	r3, ip
 8005f58:	d10d      	bne.n	8005f76 <_strtod_l+0x236>
 8005f5a:	1c69      	adds	r1, r5, #1
 8005f5c:	4401      	add	r1, r0
 8005f5e:	4428      	add	r0, r5
 8005f60:	2808      	cmp	r0, #8
 8005f62:	dc16      	bgt.n	8005f92 <_strtod_l+0x252>
 8005f64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f66:	230a      	movs	r3, #10
 8005f68:	fb03 2300 	mla	r3, r3, r0, r2
 8005f6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e018      	b.n	8005fa4 <_strtod_l+0x264>
 8005f72:	4638      	mov	r0, r7
 8005f74:	e7da      	b.n	8005f2c <_strtod_l+0x1ec>
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	f103 0301 	add.w	r3, r3, #1
 8005f7c:	dc03      	bgt.n	8005f86 <_strtod_l+0x246>
 8005f7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005f80:	434e      	muls	r6, r1
 8005f82:	960a      	str	r6, [sp, #40]	@ 0x28
 8005f84:	e7e7      	b.n	8005f56 <_strtod_l+0x216>
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	bfde      	ittt	le
 8005f8a:	9e08      	ldrle	r6, [sp, #32]
 8005f8c:	434e      	mulle	r6, r1
 8005f8e:	9608      	strle	r6, [sp, #32]
 8005f90:	e7e1      	b.n	8005f56 <_strtod_l+0x216>
 8005f92:	280f      	cmp	r0, #15
 8005f94:	dceb      	bgt.n	8005f6e <_strtod_l+0x22e>
 8005f96:	9808      	ldr	r0, [sp, #32]
 8005f98:	230a      	movs	r3, #10
 8005f9a:	fb03 2300 	mla	r3, r3, r0, r2
 8005f9e:	9308      	str	r3, [sp, #32]
 8005fa0:	e7e5      	b.n	8005f6e <_strtod_l+0x22e>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fa6:	1c50      	adds	r0, r2, #1
 8005fa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8005faa:	7852      	ldrb	r2, [r2, #1]
 8005fac:	4618      	mov	r0, r3
 8005fae:	460d      	mov	r5, r1
 8005fb0:	e7b1      	b.n	8005f16 <_strtod_l+0x1d6>
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e77d      	b.n	8005eb6 <_strtod_l+0x176>
 8005fba:	f04f 0c00 	mov.w	ip, #0
 8005fbe:	1ca2      	adds	r2, r4, #2
 8005fc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fc2:	78a2      	ldrb	r2, [r4, #2]
 8005fc4:	e785      	b.n	8005ed2 <_strtod_l+0x192>
 8005fc6:	f04f 0c01 	mov.w	ip, #1
 8005fca:	e7f8      	b.n	8005fbe <_strtod_l+0x27e>
 8005fcc:	08007e10 	.word	0x08007e10
 8005fd0:	08007df8 	.word	0x08007df8
 8005fd4:	7ff00000 	.word	0x7ff00000
 8005fd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fda:	1c51      	adds	r1, r2, #1
 8005fdc:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fde:	7852      	ldrb	r2, [r2, #1]
 8005fe0:	2a30      	cmp	r2, #48	@ 0x30
 8005fe2:	d0f9      	beq.n	8005fd8 <_strtod_l+0x298>
 8005fe4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005fe8:	2908      	cmp	r1, #8
 8005fea:	f63f af78 	bhi.w	8005ede <_strtod_l+0x19e>
 8005fee:	3a30      	subs	r2, #48	@ 0x30
 8005ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ff2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ff4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005ff6:	f04f 080a 	mov.w	r8, #10
 8005ffa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ffc:	1c56      	adds	r6, r2, #1
 8005ffe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006000:	7852      	ldrb	r2, [r2, #1]
 8006002:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006006:	f1be 0f09 	cmp.w	lr, #9
 800600a:	d939      	bls.n	8006080 <_strtod_l+0x340>
 800600c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800600e:	1a76      	subs	r6, r6, r1
 8006010:	2e08      	cmp	r6, #8
 8006012:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006016:	dc03      	bgt.n	8006020 <_strtod_l+0x2e0>
 8006018:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800601a:	4588      	cmp	r8, r1
 800601c:	bfa8      	it	ge
 800601e:	4688      	movge	r8, r1
 8006020:	f1bc 0f00 	cmp.w	ip, #0
 8006024:	d001      	beq.n	800602a <_strtod_l+0x2ea>
 8006026:	f1c8 0800 	rsb	r8, r8, #0
 800602a:	2d00      	cmp	r5, #0
 800602c:	d14e      	bne.n	80060cc <_strtod_l+0x38c>
 800602e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006030:	4308      	orrs	r0, r1
 8006032:	f47f aebe 	bne.w	8005db2 <_strtod_l+0x72>
 8006036:	2b00      	cmp	r3, #0
 8006038:	f47f aed6 	bne.w	8005de8 <_strtod_l+0xa8>
 800603c:	2a69      	cmp	r2, #105	@ 0x69
 800603e:	d028      	beq.n	8006092 <_strtod_l+0x352>
 8006040:	dc25      	bgt.n	800608e <_strtod_l+0x34e>
 8006042:	2a49      	cmp	r2, #73	@ 0x49
 8006044:	d025      	beq.n	8006092 <_strtod_l+0x352>
 8006046:	2a4e      	cmp	r2, #78	@ 0x4e
 8006048:	f47f aece 	bne.w	8005de8 <_strtod_l+0xa8>
 800604c:	499b      	ldr	r1, [pc, #620]	@ (80062bc <_strtod_l+0x57c>)
 800604e:	a819      	add	r0, sp, #100	@ 0x64
 8006050:	f001 f9ee 	bl	8007430 <__match>
 8006054:	2800      	cmp	r0, #0
 8006056:	f43f aec7 	beq.w	8005de8 <_strtod_l+0xa8>
 800605a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b28      	cmp	r3, #40	@ 0x28
 8006060:	d12e      	bne.n	80060c0 <_strtod_l+0x380>
 8006062:	4997      	ldr	r1, [pc, #604]	@ (80062c0 <_strtod_l+0x580>)
 8006064:	aa1c      	add	r2, sp, #112	@ 0x70
 8006066:	a819      	add	r0, sp, #100	@ 0x64
 8006068:	f001 f9f6 	bl	8007458 <__hexnan>
 800606c:	2805      	cmp	r0, #5
 800606e:	d127      	bne.n	80060c0 <_strtod_l+0x380>
 8006070:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006072:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006076:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800607a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800607e:	e698      	b.n	8005db2 <_strtod_l+0x72>
 8006080:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006082:	fb08 2101 	mla	r1, r8, r1, r2
 8006086:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800608a:	920e      	str	r2, [sp, #56]	@ 0x38
 800608c:	e7b5      	b.n	8005ffa <_strtod_l+0x2ba>
 800608e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006090:	e7da      	b.n	8006048 <_strtod_l+0x308>
 8006092:	498c      	ldr	r1, [pc, #560]	@ (80062c4 <_strtod_l+0x584>)
 8006094:	a819      	add	r0, sp, #100	@ 0x64
 8006096:	f001 f9cb 	bl	8007430 <__match>
 800609a:	2800      	cmp	r0, #0
 800609c:	f43f aea4 	beq.w	8005de8 <_strtod_l+0xa8>
 80060a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060a2:	4989      	ldr	r1, [pc, #548]	@ (80062c8 <_strtod_l+0x588>)
 80060a4:	3b01      	subs	r3, #1
 80060a6:	a819      	add	r0, sp, #100	@ 0x64
 80060a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80060aa:	f001 f9c1 	bl	8007430 <__match>
 80060ae:	b910      	cbnz	r0, 80060b6 <_strtod_l+0x376>
 80060b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060b2:	3301      	adds	r3, #1
 80060b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80060b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80062d8 <_strtod_l+0x598>
 80060ba:	f04f 0a00 	mov.w	sl, #0
 80060be:	e678      	b.n	8005db2 <_strtod_l+0x72>
 80060c0:	4882      	ldr	r0, [pc, #520]	@ (80062cc <_strtod_l+0x58c>)
 80060c2:	f000 fef1 	bl	8006ea8 <nan>
 80060c6:	ec5b ab10 	vmov	sl, fp, d0
 80060ca:	e672      	b.n	8005db2 <_strtod_l+0x72>
 80060cc:	eba8 0309 	sub.w	r3, r8, r9
 80060d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060d4:	2f00      	cmp	r7, #0
 80060d6:	bf08      	it	eq
 80060d8:	462f      	moveq	r7, r5
 80060da:	2d10      	cmp	r5, #16
 80060dc:	462c      	mov	r4, r5
 80060de:	bfa8      	it	ge
 80060e0:	2410      	movge	r4, #16
 80060e2:	f7fa fa2f 	bl	8000544 <__aeabi_ui2d>
 80060e6:	2d09      	cmp	r5, #9
 80060e8:	4682      	mov	sl, r0
 80060ea:	468b      	mov	fp, r1
 80060ec:	dc13      	bgt.n	8006116 <_strtod_l+0x3d6>
 80060ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f43f ae5e 	beq.w	8005db2 <_strtod_l+0x72>
 80060f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f8:	dd78      	ble.n	80061ec <_strtod_l+0x4ac>
 80060fa:	2b16      	cmp	r3, #22
 80060fc:	dc5f      	bgt.n	80061be <_strtod_l+0x47e>
 80060fe:	4974      	ldr	r1, [pc, #464]	@ (80062d0 <_strtod_l+0x590>)
 8006100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006108:	4652      	mov	r2, sl
 800610a:	465b      	mov	r3, fp
 800610c:	f7fa fa94 	bl	8000638 <__aeabi_dmul>
 8006110:	4682      	mov	sl, r0
 8006112:	468b      	mov	fp, r1
 8006114:	e64d      	b.n	8005db2 <_strtod_l+0x72>
 8006116:	4b6e      	ldr	r3, [pc, #440]	@ (80062d0 <_strtod_l+0x590>)
 8006118:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800611c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006120:	f7fa fa8a 	bl	8000638 <__aeabi_dmul>
 8006124:	4682      	mov	sl, r0
 8006126:	9808      	ldr	r0, [sp, #32]
 8006128:	468b      	mov	fp, r1
 800612a:	f7fa fa0b 	bl	8000544 <__aeabi_ui2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4650      	mov	r0, sl
 8006134:	4659      	mov	r1, fp
 8006136:	f7fa f8c9 	bl	80002cc <__adddf3>
 800613a:	2d0f      	cmp	r5, #15
 800613c:	4682      	mov	sl, r0
 800613e:	468b      	mov	fp, r1
 8006140:	ddd5      	ble.n	80060ee <_strtod_l+0x3ae>
 8006142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006144:	1b2c      	subs	r4, r5, r4
 8006146:	441c      	add	r4, r3
 8006148:	2c00      	cmp	r4, #0
 800614a:	f340 8096 	ble.w	800627a <_strtod_l+0x53a>
 800614e:	f014 030f 	ands.w	r3, r4, #15
 8006152:	d00a      	beq.n	800616a <_strtod_l+0x42a>
 8006154:	495e      	ldr	r1, [pc, #376]	@ (80062d0 <_strtod_l+0x590>)
 8006156:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800615a:	4652      	mov	r2, sl
 800615c:	465b      	mov	r3, fp
 800615e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006162:	f7fa fa69 	bl	8000638 <__aeabi_dmul>
 8006166:	4682      	mov	sl, r0
 8006168:	468b      	mov	fp, r1
 800616a:	f034 040f 	bics.w	r4, r4, #15
 800616e:	d073      	beq.n	8006258 <_strtod_l+0x518>
 8006170:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006174:	dd48      	ble.n	8006208 <_strtod_l+0x4c8>
 8006176:	2400      	movs	r4, #0
 8006178:	46a0      	mov	r8, r4
 800617a:	940a      	str	r4, [sp, #40]	@ 0x28
 800617c:	46a1      	mov	r9, r4
 800617e:	9a05      	ldr	r2, [sp, #20]
 8006180:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80062d8 <_strtod_l+0x598>
 8006184:	2322      	movs	r3, #34	@ 0x22
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	f04f 0a00 	mov.w	sl, #0
 800618c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f ae0f 	beq.w	8005db2 <_strtod_l+0x72>
 8006194:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006196:	9805      	ldr	r0, [sp, #20]
 8006198:	f7ff f942 	bl	8005420 <_Bfree>
 800619c:	9805      	ldr	r0, [sp, #20]
 800619e:	4649      	mov	r1, r9
 80061a0:	f7ff f93e 	bl	8005420 <_Bfree>
 80061a4:	9805      	ldr	r0, [sp, #20]
 80061a6:	4641      	mov	r1, r8
 80061a8:	f7ff f93a 	bl	8005420 <_Bfree>
 80061ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	f7ff f936 	bl	8005420 <_Bfree>
 80061b4:	9805      	ldr	r0, [sp, #20]
 80061b6:	4621      	mov	r1, r4
 80061b8:	f7ff f932 	bl	8005420 <_Bfree>
 80061bc:	e5f9      	b.n	8005db2 <_strtod_l+0x72>
 80061be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dbbc      	blt.n	8006142 <_strtod_l+0x402>
 80061c8:	4c41      	ldr	r4, [pc, #260]	@ (80062d0 <_strtod_l+0x590>)
 80061ca:	f1c5 050f 	rsb	r5, r5, #15
 80061ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80061d2:	4652      	mov	r2, sl
 80061d4:	465b      	mov	r3, fp
 80061d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061da:	f7fa fa2d 	bl	8000638 <__aeabi_dmul>
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	1b5d      	subs	r5, r3, r5
 80061e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80061e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061ea:	e78f      	b.n	800610c <_strtod_l+0x3cc>
 80061ec:	3316      	adds	r3, #22
 80061ee:	dba8      	blt.n	8006142 <_strtod_l+0x402>
 80061f0:	4b37      	ldr	r3, [pc, #220]	@ (80062d0 <_strtod_l+0x590>)
 80061f2:	eba9 0808 	sub.w	r8, r9, r8
 80061f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80061fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80061fe:	4650      	mov	r0, sl
 8006200:	4659      	mov	r1, fp
 8006202:	f7fa fb43 	bl	800088c <__aeabi_ddiv>
 8006206:	e783      	b.n	8006110 <_strtod_l+0x3d0>
 8006208:	4b32      	ldr	r3, [pc, #200]	@ (80062d4 <_strtod_l+0x594>)
 800620a:	9308      	str	r3, [sp, #32]
 800620c:	2300      	movs	r3, #0
 800620e:	1124      	asrs	r4, r4, #4
 8006210:	4650      	mov	r0, sl
 8006212:	4659      	mov	r1, fp
 8006214:	461e      	mov	r6, r3
 8006216:	2c01      	cmp	r4, #1
 8006218:	dc21      	bgt.n	800625e <_strtod_l+0x51e>
 800621a:	b10b      	cbz	r3, 8006220 <_strtod_l+0x4e0>
 800621c:	4682      	mov	sl, r0
 800621e:	468b      	mov	fp, r1
 8006220:	492c      	ldr	r1, [pc, #176]	@ (80062d4 <_strtod_l+0x594>)
 8006222:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006226:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800622a:	4652      	mov	r2, sl
 800622c:	465b      	mov	r3, fp
 800622e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006232:	f7fa fa01 	bl	8000638 <__aeabi_dmul>
 8006236:	4b28      	ldr	r3, [pc, #160]	@ (80062d8 <_strtod_l+0x598>)
 8006238:	460a      	mov	r2, r1
 800623a:	400b      	ands	r3, r1
 800623c:	4927      	ldr	r1, [pc, #156]	@ (80062dc <_strtod_l+0x59c>)
 800623e:	428b      	cmp	r3, r1
 8006240:	4682      	mov	sl, r0
 8006242:	d898      	bhi.n	8006176 <_strtod_l+0x436>
 8006244:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006248:	428b      	cmp	r3, r1
 800624a:	bf86      	itte	hi
 800624c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80062e0 <_strtod_l+0x5a0>
 8006250:	f04f 3aff 	movhi.w	sl, #4294967295
 8006254:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006258:	2300      	movs	r3, #0
 800625a:	9308      	str	r3, [sp, #32]
 800625c:	e07a      	b.n	8006354 <_strtod_l+0x614>
 800625e:	07e2      	lsls	r2, r4, #31
 8006260:	d505      	bpl.n	800626e <_strtod_l+0x52e>
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f9e6 	bl	8000638 <__aeabi_dmul>
 800626c:	2301      	movs	r3, #1
 800626e:	9a08      	ldr	r2, [sp, #32]
 8006270:	3208      	adds	r2, #8
 8006272:	3601      	adds	r6, #1
 8006274:	1064      	asrs	r4, r4, #1
 8006276:	9208      	str	r2, [sp, #32]
 8006278:	e7cd      	b.n	8006216 <_strtod_l+0x4d6>
 800627a:	d0ed      	beq.n	8006258 <_strtod_l+0x518>
 800627c:	4264      	negs	r4, r4
 800627e:	f014 020f 	ands.w	r2, r4, #15
 8006282:	d00a      	beq.n	800629a <_strtod_l+0x55a>
 8006284:	4b12      	ldr	r3, [pc, #72]	@ (80062d0 <_strtod_l+0x590>)
 8006286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800628a:	4650      	mov	r0, sl
 800628c:	4659      	mov	r1, fp
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa fafb 	bl	800088c <__aeabi_ddiv>
 8006296:	4682      	mov	sl, r0
 8006298:	468b      	mov	fp, r1
 800629a:	1124      	asrs	r4, r4, #4
 800629c:	d0dc      	beq.n	8006258 <_strtod_l+0x518>
 800629e:	2c1f      	cmp	r4, #31
 80062a0:	dd20      	ble.n	80062e4 <_strtod_l+0x5a4>
 80062a2:	2400      	movs	r4, #0
 80062a4:	46a0      	mov	r8, r4
 80062a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80062a8:	46a1      	mov	r9, r4
 80062aa:	9a05      	ldr	r2, [sp, #20]
 80062ac:	2322      	movs	r3, #34	@ 0x22
 80062ae:	f04f 0a00 	mov.w	sl, #0
 80062b2:	f04f 0b00 	mov.w	fp, #0
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	e768      	b.n	800618c <_strtod_l+0x44c>
 80062ba:	bf00      	nop
 80062bc:	08007be5 	.word	0x08007be5
 80062c0:	08007dfc 	.word	0x08007dfc
 80062c4:	08007bdd 	.word	0x08007bdd
 80062c8:	08007c14 	.word	0x08007c14
 80062cc:	08007fa5 	.word	0x08007fa5
 80062d0:	08007d30 	.word	0x08007d30
 80062d4:	08007d08 	.word	0x08007d08
 80062d8:	7ff00000 	.word	0x7ff00000
 80062dc:	7ca00000 	.word	0x7ca00000
 80062e0:	7fefffff 	.word	0x7fefffff
 80062e4:	f014 0310 	ands.w	r3, r4, #16
 80062e8:	bf18      	it	ne
 80062ea:	236a      	movne	r3, #106	@ 0x6a
 80062ec:	4ea9      	ldr	r6, [pc, #676]	@ (8006594 <_strtod_l+0x854>)
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	4650      	mov	r0, sl
 80062f2:	4659      	mov	r1, fp
 80062f4:	2300      	movs	r3, #0
 80062f6:	07e2      	lsls	r2, r4, #31
 80062f8:	d504      	bpl.n	8006304 <_strtod_l+0x5c4>
 80062fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062fe:	f7fa f99b 	bl	8000638 <__aeabi_dmul>
 8006302:	2301      	movs	r3, #1
 8006304:	1064      	asrs	r4, r4, #1
 8006306:	f106 0608 	add.w	r6, r6, #8
 800630a:	d1f4      	bne.n	80062f6 <_strtod_l+0x5b6>
 800630c:	b10b      	cbz	r3, 8006312 <_strtod_l+0x5d2>
 800630e:	4682      	mov	sl, r0
 8006310:	468b      	mov	fp, r1
 8006312:	9b08      	ldr	r3, [sp, #32]
 8006314:	b1b3      	cbz	r3, 8006344 <_strtod_l+0x604>
 8006316:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800631a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800631e:	2b00      	cmp	r3, #0
 8006320:	4659      	mov	r1, fp
 8006322:	dd0f      	ble.n	8006344 <_strtod_l+0x604>
 8006324:	2b1f      	cmp	r3, #31
 8006326:	dd55      	ble.n	80063d4 <_strtod_l+0x694>
 8006328:	2b34      	cmp	r3, #52	@ 0x34
 800632a:	bfde      	ittt	le
 800632c:	f04f 33ff 	movle.w	r3, #4294967295
 8006330:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006334:	4093      	lslle	r3, r2
 8006336:	f04f 0a00 	mov.w	sl, #0
 800633a:	bfcc      	ite	gt
 800633c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006340:	ea03 0b01 	andle.w	fp, r3, r1
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4650      	mov	r0, sl
 800634a:	4659      	mov	r1, fp
 800634c:	f7fa fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 8006350:	2800      	cmp	r0, #0
 8006352:	d1a6      	bne.n	80062a2 <_strtod_l+0x562>
 8006354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800635a:	9805      	ldr	r0, [sp, #20]
 800635c:	462b      	mov	r3, r5
 800635e:	463a      	mov	r2, r7
 8006360:	f7ff f8c6 	bl	80054f0 <__s2b>
 8006364:	900a      	str	r0, [sp, #40]	@ 0x28
 8006366:	2800      	cmp	r0, #0
 8006368:	f43f af05 	beq.w	8006176 <_strtod_l+0x436>
 800636c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800636e:	2a00      	cmp	r2, #0
 8006370:	eba9 0308 	sub.w	r3, r9, r8
 8006374:	bfa8      	it	ge
 8006376:	2300      	movge	r3, #0
 8006378:	9312      	str	r3, [sp, #72]	@ 0x48
 800637a:	2400      	movs	r4, #0
 800637c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006380:	9316      	str	r3, [sp, #88]	@ 0x58
 8006382:	46a0      	mov	r8, r4
 8006384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006386:	9805      	ldr	r0, [sp, #20]
 8006388:	6859      	ldr	r1, [r3, #4]
 800638a:	f7ff f809 	bl	80053a0 <_Balloc>
 800638e:	4681      	mov	r9, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	f43f aef4 	beq.w	800617e <_strtod_l+0x43e>
 8006396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	3202      	adds	r2, #2
 800639c:	f103 010c 	add.w	r1, r3, #12
 80063a0:	0092      	lsls	r2, r2, #2
 80063a2:	300c      	adds	r0, #12
 80063a4:	f000 fd72 	bl	8006e8c <memcpy>
 80063a8:	ec4b ab10 	vmov	d0, sl, fp
 80063ac:	9805      	ldr	r0, [sp, #20]
 80063ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80063b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80063b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80063b6:	f7ff fbd7 	bl	8005b68 <__d2b>
 80063ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80063bc:	2800      	cmp	r0, #0
 80063be:	f43f aede 	beq.w	800617e <_strtod_l+0x43e>
 80063c2:	9805      	ldr	r0, [sp, #20]
 80063c4:	2101      	movs	r1, #1
 80063c6:	f7ff f929 	bl	800561c <__i2b>
 80063ca:	4680      	mov	r8, r0
 80063cc:	b948      	cbnz	r0, 80063e2 <_strtod_l+0x6a2>
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	e6d4      	b.n	800617e <_strtod_l+0x43e>
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	ea03 0a0a 	and.w	sl, r3, sl
 80063e0:	e7b0      	b.n	8006344 <_strtod_l+0x604>
 80063e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80063e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	bfab      	itete	ge
 80063ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80063ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80063ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80063f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80063f2:	bfac      	ite	ge
 80063f4:	18ef      	addge	r7, r5, r3
 80063f6:	1b5e      	sublt	r6, r3, r5
 80063f8:	9b08      	ldr	r3, [sp, #32]
 80063fa:	1aed      	subs	r5, r5, r3
 80063fc:	4415      	add	r5, r2
 80063fe:	4b66      	ldr	r3, [pc, #408]	@ (8006598 <_strtod_l+0x858>)
 8006400:	3d01      	subs	r5, #1
 8006402:	429d      	cmp	r5, r3
 8006404:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006408:	da50      	bge.n	80064ac <_strtod_l+0x76c>
 800640a:	1b5b      	subs	r3, r3, r5
 800640c:	2b1f      	cmp	r3, #31
 800640e:	eba2 0203 	sub.w	r2, r2, r3
 8006412:	f04f 0101 	mov.w	r1, #1
 8006416:	dc3d      	bgt.n	8006494 <_strtod_l+0x754>
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800641e:	2300      	movs	r3, #0
 8006420:	9310      	str	r3, [sp, #64]	@ 0x40
 8006422:	18bd      	adds	r5, r7, r2
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	42af      	cmp	r7, r5
 8006428:	4416      	add	r6, r2
 800642a:	441e      	add	r6, r3
 800642c:	463b      	mov	r3, r7
 800642e:	bfa8      	it	ge
 8006430:	462b      	movge	r3, r5
 8006432:	42b3      	cmp	r3, r6
 8006434:	bfa8      	it	ge
 8006436:	4633      	movge	r3, r6
 8006438:	2b00      	cmp	r3, #0
 800643a:	bfc2      	ittt	gt
 800643c:	1aed      	subgt	r5, r5, r3
 800643e:	1af6      	subgt	r6, r6, r3
 8006440:	1aff      	subgt	r7, r7, r3
 8006442:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006444:	2b00      	cmp	r3, #0
 8006446:	dd16      	ble.n	8006476 <_strtod_l+0x736>
 8006448:	4641      	mov	r1, r8
 800644a:	9805      	ldr	r0, [sp, #20]
 800644c:	461a      	mov	r2, r3
 800644e:	f7ff f9a5 	bl	800579c <__pow5mult>
 8006452:	4680      	mov	r8, r0
 8006454:	2800      	cmp	r0, #0
 8006456:	d0ba      	beq.n	80063ce <_strtod_l+0x68e>
 8006458:	4601      	mov	r1, r0
 800645a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800645c:	9805      	ldr	r0, [sp, #20]
 800645e:	f7ff f8f3 	bl	8005648 <__multiply>
 8006462:	900e      	str	r0, [sp, #56]	@ 0x38
 8006464:	2800      	cmp	r0, #0
 8006466:	f43f ae8a 	beq.w	800617e <_strtod_l+0x43e>
 800646a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800646c:	9805      	ldr	r0, [sp, #20]
 800646e:	f7fe ffd7 	bl	8005420 <_Bfree>
 8006472:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006474:	931a      	str	r3, [sp, #104]	@ 0x68
 8006476:	2d00      	cmp	r5, #0
 8006478:	dc1d      	bgt.n	80064b6 <_strtod_l+0x776>
 800647a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd23      	ble.n	80064c8 <_strtod_l+0x788>
 8006480:	4649      	mov	r1, r9
 8006482:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006484:	9805      	ldr	r0, [sp, #20]
 8006486:	f7ff f989 	bl	800579c <__pow5mult>
 800648a:	4681      	mov	r9, r0
 800648c:	b9e0      	cbnz	r0, 80064c8 <_strtod_l+0x788>
 800648e:	f04f 0900 	mov.w	r9, #0
 8006492:	e674      	b.n	800617e <_strtod_l+0x43e>
 8006494:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006498:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800649c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80064a0:	35e2      	adds	r5, #226	@ 0xe2
 80064a2:	fa01 f305 	lsl.w	r3, r1, r5
 80064a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80064a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80064aa:	e7ba      	b.n	8006422 <_strtod_l+0x6e2>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80064b0:	2301      	movs	r3, #1
 80064b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064b4:	e7b5      	b.n	8006422 <_strtod_l+0x6e2>
 80064b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064b8:	9805      	ldr	r0, [sp, #20]
 80064ba:	462a      	mov	r2, r5
 80064bc:	f7ff f9c8 	bl	8005850 <__lshift>
 80064c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d1d9      	bne.n	800647a <_strtod_l+0x73a>
 80064c6:	e65a      	b.n	800617e <_strtod_l+0x43e>
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	dd07      	ble.n	80064dc <_strtod_l+0x79c>
 80064cc:	4649      	mov	r1, r9
 80064ce:	9805      	ldr	r0, [sp, #20]
 80064d0:	4632      	mov	r2, r6
 80064d2:	f7ff f9bd 	bl	8005850 <__lshift>
 80064d6:	4681      	mov	r9, r0
 80064d8:	2800      	cmp	r0, #0
 80064da:	d0d8      	beq.n	800648e <_strtod_l+0x74e>
 80064dc:	2f00      	cmp	r7, #0
 80064de:	dd08      	ble.n	80064f2 <_strtod_l+0x7b2>
 80064e0:	4641      	mov	r1, r8
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	463a      	mov	r2, r7
 80064e6:	f7ff f9b3 	bl	8005850 <__lshift>
 80064ea:	4680      	mov	r8, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f ae46 	beq.w	800617e <_strtod_l+0x43e>
 80064f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064f4:	9805      	ldr	r0, [sp, #20]
 80064f6:	464a      	mov	r2, r9
 80064f8:	f7ff fa32 	bl	8005960 <__mdiff>
 80064fc:	4604      	mov	r4, r0
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f ae3d 	beq.w	800617e <_strtod_l+0x43e>
 8006504:	68c3      	ldr	r3, [r0, #12]
 8006506:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006508:	2300      	movs	r3, #0
 800650a:	60c3      	str	r3, [r0, #12]
 800650c:	4641      	mov	r1, r8
 800650e:	f7ff fa0b 	bl	8005928 <__mcmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	da46      	bge.n	80065a4 <_strtod_l+0x864>
 8006516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006518:	ea53 030a 	orrs.w	r3, r3, sl
 800651c:	d16c      	bne.n	80065f8 <_strtod_l+0x8b8>
 800651e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006522:	2b00      	cmp	r3, #0
 8006524:	d168      	bne.n	80065f8 <_strtod_l+0x8b8>
 8006526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800652a:	0d1b      	lsrs	r3, r3, #20
 800652c:	051b      	lsls	r3, r3, #20
 800652e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006532:	d961      	bls.n	80065f8 <_strtod_l+0x8b8>
 8006534:	6963      	ldr	r3, [r4, #20]
 8006536:	b913      	cbnz	r3, 800653e <_strtod_l+0x7fe>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	2b01      	cmp	r3, #1
 800653c:	dd5c      	ble.n	80065f8 <_strtod_l+0x8b8>
 800653e:	4621      	mov	r1, r4
 8006540:	2201      	movs	r2, #1
 8006542:	9805      	ldr	r0, [sp, #20]
 8006544:	f7ff f984 	bl	8005850 <__lshift>
 8006548:	4641      	mov	r1, r8
 800654a:	4604      	mov	r4, r0
 800654c:	f7ff f9ec 	bl	8005928 <__mcmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	dd51      	ble.n	80065f8 <_strtod_l+0x8b8>
 8006554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006558:	9a08      	ldr	r2, [sp, #32]
 800655a:	0d1b      	lsrs	r3, r3, #20
 800655c:	051b      	lsls	r3, r3, #20
 800655e:	2a00      	cmp	r2, #0
 8006560:	d06b      	beq.n	800663a <_strtod_l+0x8fa>
 8006562:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006566:	d868      	bhi.n	800663a <_strtod_l+0x8fa>
 8006568:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800656c:	f67f ae9d 	bls.w	80062aa <_strtod_l+0x56a>
 8006570:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <_strtod_l+0x85c>)
 8006572:	4650      	mov	r0, sl
 8006574:	4659      	mov	r1, fp
 8006576:	2200      	movs	r2, #0
 8006578:	f7fa f85e 	bl	8000638 <__aeabi_dmul>
 800657c:	4b08      	ldr	r3, [pc, #32]	@ (80065a0 <_strtod_l+0x860>)
 800657e:	400b      	ands	r3, r1
 8006580:	4682      	mov	sl, r0
 8006582:	468b      	mov	fp, r1
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f ae05 	bne.w	8006194 <_strtod_l+0x454>
 800658a:	9a05      	ldr	r2, [sp, #20]
 800658c:	2322      	movs	r3, #34	@ 0x22
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e600      	b.n	8006194 <_strtod_l+0x454>
 8006592:	bf00      	nop
 8006594:	08007e28 	.word	0x08007e28
 8006598:	fffffc02 	.word	0xfffffc02
 800659c:	39500000 	.word	0x39500000
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80065a8:	d165      	bne.n	8006676 <_strtod_l+0x936>
 80065aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80065ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065b0:	b35a      	cbz	r2, 800660a <_strtod_l+0x8ca>
 80065b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006830 <_strtod_l+0xaf0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d12b      	bne.n	8006610 <_strtod_l+0x8d0>
 80065b8:	9b08      	ldr	r3, [sp, #32]
 80065ba:	4651      	mov	r1, sl
 80065bc:	b303      	cbz	r3, 8006600 <_strtod_l+0x8c0>
 80065be:	4b9d      	ldr	r3, [pc, #628]	@ (8006834 <_strtod_l+0xaf4>)
 80065c0:	465a      	mov	r2, fp
 80065c2:	4013      	ands	r3, r2
 80065c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295
 80065cc:	d81b      	bhi.n	8006606 <_strtod_l+0x8c6>
 80065ce:	0d1b      	lsrs	r3, r3, #20
 80065d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	4299      	cmp	r1, r3
 80065da:	d119      	bne.n	8006610 <_strtod_l+0x8d0>
 80065dc:	4b96      	ldr	r3, [pc, #600]	@ (8006838 <_strtod_l+0xaf8>)
 80065de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d102      	bne.n	80065ea <_strtod_l+0x8aa>
 80065e4:	3101      	adds	r1, #1
 80065e6:	f43f adca 	beq.w	800617e <_strtod_l+0x43e>
 80065ea:	4b92      	ldr	r3, [pc, #584]	@ (8006834 <_strtod_l+0xaf4>)
 80065ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065ee:	401a      	ands	r2, r3
 80065f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80065f4:	f04f 0a00 	mov.w	sl, #0
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1b8      	bne.n	8006570 <_strtod_l+0x830>
 80065fe:	e5c9      	b.n	8006194 <_strtod_l+0x454>
 8006600:	f04f 33ff 	mov.w	r3, #4294967295
 8006604:	e7e8      	b.n	80065d8 <_strtod_l+0x898>
 8006606:	4613      	mov	r3, r2
 8006608:	e7e6      	b.n	80065d8 <_strtod_l+0x898>
 800660a:	ea53 030a 	orrs.w	r3, r3, sl
 800660e:	d0a1      	beq.n	8006554 <_strtod_l+0x814>
 8006610:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006612:	b1db      	cbz	r3, 800664c <_strtod_l+0x90c>
 8006614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006616:	4213      	tst	r3, r2
 8006618:	d0ee      	beq.n	80065f8 <_strtod_l+0x8b8>
 800661a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800661c:	9a08      	ldr	r2, [sp, #32]
 800661e:	4650      	mov	r0, sl
 8006620:	4659      	mov	r1, fp
 8006622:	b1bb      	cbz	r3, 8006654 <_strtod_l+0x914>
 8006624:	f7ff fb6e 	bl	8005d04 <sulp>
 8006628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800662c:	ec53 2b10 	vmov	r2, r3, d0
 8006630:	f7f9 fe4c 	bl	80002cc <__adddf3>
 8006634:	4682      	mov	sl, r0
 8006636:	468b      	mov	fp, r1
 8006638:	e7de      	b.n	80065f8 <_strtod_l+0x8b8>
 800663a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800663e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006642:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006646:	f04f 3aff 	mov.w	sl, #4294967295
 800664a:	e7d5      	b.n	80065f8 <_strtod_l+0x8b8>
 800664c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800664e:	ea13 0f0a 	tst.w	r3, sl
 8006652:	e7e1      	b.n	8006618 <_strtod_l+0x8d8>
 8006654:	f7ff fb56 	bl	8005d04 <sulp>
 8006658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800665c:	ec53 2b10 	vmov	r2, r3, d0
 8006660:	f7f9 fe32 	bl	80002c8 <__aeabi_dsub>
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	f7fa fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 8006670:	2800      	cmp	r0, #0
 8006672:	d0c1      	beq.n	80065f8 <_strtod_l+0x8b8>
 8006674:	e619      	b.n	80062aa <_strtod_l+0x56a>
 8006676:	4641      	mov	r1, r8
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff facd 	bl	8005c18 <__ratio>
 800667e:	ec57 6b10 	vmov	r6, r7, d0
 8006682:	2200      	movs	r2, #0
 8006684:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7fa fa50 	bl	8000b30 <__aeabi_dcmple>
 8006690:	2800      	cmp	r0, #0
 8006692:	d06f      	beq.n	8006774 <_strtod_l+0xa34>
 8006694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d17a      	bne.n	8006790 <_strtod_l+0xa50>
 800669a:	f1ba 0f00 	cmp.w	sl, #0
 800669e:	d158      	bne.n	8006752 <_strtod_l+0xa12>
 80066a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d15a      	bne.n	8006760 <_strtod_l+0xa20>
 80066aa:	4b64      	ldr	r3, [pc, #400]	@ (800683c <_strtod_l+0xafc>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	4630      	mov	r0, r6
 80066b0:	4639      	mov	r1, r7
 80066b2:	f7fa fa33 	bl	8000b1c <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d159      	bne.n	800676e <_strtod_l+0xa2e>
 80066ba:	4630      	mov	r0, r6
 80066bc:	4639      	mov	r1, r7
 80066be:	4b60      	ldr	r3, [pc, #384]	@ (8006840 <_strtod_l+0xb00>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7f9 ffb9 	bl	8000638 <__aeabi_dmul>
 80066c6:	4606      	mov	r6, r0
 80066c8:	460f      	mov	r7, r1
 80066ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80066ce:	9606      	str	r6, [sp, #24]
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066d6:	4d57      	ldr	r5, [pc, #348]	@ (8006834 <_strtod_l+0xaf4>)
 80066d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80066dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066de:	401d      	ands	r5, r3
 80066e0:	4b58      	ldr	r3, [pc, #352]	@ (8006844 <_strtod_l+0xb04>)
 80066e2:	429d      	cmp	r5, r3
 80066e4:	f040 80b2 	bne.w	800684c <_strtod_l+0xb0c>
 80066e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80066ee:	ec4b ab10 	vmov	d0, sl, fp
 80066f2:	f7ff f9c9 	bl	8005a88 <__ulp>
 80066f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066fa:	ec51 0b10 	vmov	r0, r1, d0
 80066fe:	f7f9 ff9b 	bl	8000638 <__aeabi_dmul>
 8006702:	4652      	mov	r2, sl
 8006704:	465b      	mov	r3, fp
 8006706:	f7f9 fde1 	bl	80002cc <__adddf3>
 800670a:	460b      	mov	r3, r1
 800670c:	4949      	ldr	r1, [pc, #292]	@ (8006834 <_strtod_l+0xaf4>)
 800670e:	4a4e      	ldr	r2, [pc, #312]	@ (8006848 <_strtod_l+0xb08>)
 8006710:	4019      	ands	r1, r3
 8006712:	4291      	cmp	r1, r2
 8006714:	4682      	mov	sl, r0
 8006716:	d942      	bls.n	800679e <_strtod_l+0xa5e>
 8006718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800671a:	4b47      	ldr	r3, [pc, #284]	@ (8006838 <_strtod_l+0xaf8>)
 800671c:	429a      	cmp	r2, r3
 800671e:	d103      	bne.n	8006728 <_strtod_l+0x9e8>
 8006720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006722:	3301      	adds	r3, #1
 8006724:	f43f ad2b 	beq.w	800617e <_strtod_l+0x43e>
 8006728:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006838 <_strtod_l+0xaf8>
 800672c:	f04f 3aff 	mov.w	sl, #4294967295
 8006730:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	f7fe fe74 	bl	8005420 <_Bfree>
 8006738:	9805      	ldr	r0, [sp, #20]
 800673a:	4649      	mov	r1, r9
 800673c:	f7fe fe70 	bl	8005420 <_Bfree>
 8006740:	9805      	ldr	r0, [sp, #20]
 8006742:	4641      	mov	r1, r8
 8006744:	f7fe fe6c 	bl	8005420 <_Bfree>
 8006748:	9805      	ldr	r0, [sp, #20]
 800674a:	4621      	mov	r1, r4
 800674c:	f7fe fe68 	bl	8005420 <_Bfree>
 8006750:	e618      	b.n	8006384 <_strtod_l+0x644>
 8006752:	f1ba 0f01 	cmp.w	sl, #1
 8006756:	d103      	bne.n	8006760 <_strtod_l+0xa20>
 8006758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675a:	2b00      	cmp	r3, #0
 800675c:	f43f ada5 	beq.w	80062aa <_strtod_l+0x56a>
 8006760:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006810 <_strtod_l+0xad0>
 8006764:	4f35      	ldr	r7, [pc, #212]	@ (800683c <_strtod_l+0xafc>)
 8006766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800676a:	2600      	movs	r6, #0
 800676c:	e7b1      	b.n	80066d2 <_strtod_l+0x992>
 800676e:	4f34      	ldr	r7, [pc, #208]	@ (8006840 <_strtod_l+0xb00>)
 8006770:	2600      	movs	r6, #0
 8006772:	e7aa      	b.n	80066ca <_strtod_l+0x98a>
 8006774:	4b32      	ldr	r3, [pc, #200]	@ (8006840 <_strtod_l+0xb00>)
 8006776:	4630      	mov	r0, r6
 8006778:	4639      	mov	r1, r7
 800677a:	2200      	movs	r2, #0
 800677c:	f7f9 ff5c 	bl	8000638 <__aeabi_dmul>
 8006780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d09f      	beq.n	80066ca <_strtod_l+0x98a>
 800678a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800678e:	e7a0      	b.n	80066d2 <_strtod_l+0x992>
 8006790:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006818 <_strtod_l+0xad8>
 8006794:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006798:	ec57 6b17 	vmov	r6, r7, d7
 800679c:	e799      	b.n	80066d2 <_strtod_l+0x992>
 800679e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1c1      	bne.n	8006730 <_strtod_l+0x9f0>
 80067ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067b0:	0d1b      	lsrs	r3, r3, #20
 80067b2:	051b      	lsls	r3, r3, #20
 80067b4:	429d      	cmp	r5, r3
 80067b6:	d1bb      	bne.n	8006730 <_strtod_l+0x9f0>
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa fa9c 	bl	8000cf8 <__aeabi_d2lz>
 80067c0:	f7f9 ff0c 	bl	80005dc <__aeabi_l2d>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7f9 fd7c 	bl	80002c8 <__aeabi_dsub>
 80067d0:	460b      	mov	r3, r1
 80067d2:	4602      	mov	r2, r0
 80067d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80067dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067de:	ea46 060a 	orr.w	r6, r6, sl
 80067e2:	431e      	orrs	r6, r3
 80067e4:	d06f      	beq.n	80068c6 <_strtod_l+0xb86>
 80067e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006820 <_strtod_l+0xae0>)
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7fa f996 	bl	8000b1c <__aeabi_dcmplt>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	f47f accf 	bne.w	8006194 <_strtod_l+0x454>
 80067f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006828 <_strtod_l+0xae8>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006800:	f7fa f9aa 	bl	8000b58 <__aeabi_dcmpgt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d093      	beq.n	8006730 <_strtod_l+0x9f0>
 8006808:	e4c4      	b.n	8006194 <_strtod_l+0x454>
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w
 8006810:	00000000 	.word	0x00000000
 8006814:	bff00000 	.word	0xbff00000
 8006818:	00000000 	.word	0x00000000
 800681c:	3ff00000 	.word	0x3ff00000
 8006820:	94a03595 	.word	0x94a03595
 8006824:	3fdfffff 	.word	0x3fdfffff
 8006828:	35afe535 	.word	0x35afe535
 800682c:	3fe00000 	.word	0x3fe00000
 8006830:	000fffff 	.word	0x000fffff
 8006834:	7ff00000 	.word	0x7ff00000
 8006838:	7fefffff 	.word	0x7fefffff
 800683c:	3ff00000 	.word	0x3ff00000
 8006840:	3fe00000 	.word	0x3fe00000
 8006844:	7fe00000 	.word	0x7fe00000
 8006848:	7c9fffff 	.word	0x7c9fffff
 800684c:	9b08      	ldr	r3, [sp, #32]
 800684e:	b323      	cbz	r3, 800689a <_strtod_l+0xb5a>
 8006850:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006854:	d821      	bhi.n	800689a <_strtod_l+0xb5a>
 8006856:	a328      	add	r3, pc, #160	@ (adr r3, 80068f8 <_strtod_l+0xbb8>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7fa f966 	bl	8000b30 <__aeabi_dcmple>
 8006864:	b1a0      	cbz	r0, 8006890 <_strtod_l+0xb50>
 8006866:	4639      	mov	r1, r7
 8006868:	4630      	mov	r0, r6
 800686a:	f7fa f9bd 	bl	8000be8 <__aeabi_d2uiz>
 800686e:	2801      	cmp	r0, #1
 8006870:	bf38      	it	cc
 8006872:	2001      	movcc	r0, #1
 8006874:	f7f9 fe66 	bl	8000544 <__aeabi_ui2d>
 8006878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	b9fb      	cbnz	r3, 80068c0 <_strtod_l+0xb80>
 8006880:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006884:	9014      	str	r0, [sp, #80]	@ 0x50
 8006886:	9315      	str	r3, [sp, #84]	@ 0x54
 8006888:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800688c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006890:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006892:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006896:	1b5b      	subs	r3, r3, r5
 8006898:	9311      	str	r3, [sp, #68]	@ 0x44
 800689a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800689e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80068a2:	f7ff f8f1 	bl	8005a88 <__ulp>
 80068a6:	4650      	mov	r0, sl
 80068a8:	ec53 2b10 	vmov	r2, r3, d0
 80068ac:	4659      	mov	r1, fp
 80068ae:	f7f9 fec3 	bl	8000638 <__aeabi_dmul>
 80068b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80068b6:	f7f9 fd09 	bl	80002cc <__adddf3>
 80068ba:	4682      	mov	sl, r0
 80068bc:	468b      	mov	fp, r1
 80068be:	e770      	b.n	80067a2 <_strtod_l+0xa62>
 80068c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80068c4:	e7e0      	b.n	8006888 <_strtod_l+0xb48>
 80068c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006900 <_strtod_l+0xbc0>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7fa f926 	bl	8000b1c <__aeabi_dcmplt>
 80068d0:	e798      	b.n	8006804 <_strtod_l+0xac4>
 80068d2:	2300      	movs	r3, #0
 80068d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80068d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	f7ff ba6d 	b.w	8005dba <_strtod_l+0x7a>
 80068e0:	2a65      	cmp	r2, #101	@ 0x65
 80068e2:	f43f ab66 	beq.w	8005fb2 <_strtod_l+0x272>
 80068e6:	2a45      	cmp	r2, #69	@ 0x45
 80068e8:	f43f ab63 	beq.w	8005fb2 <_strtod_l+0x272>
 80068ec:	2301      	movs	r3, #1
 80068ee:	f7ff bb9e 	b.w	800602e <_strtod_l+0x2ee>
 80068f2:	bf00      	nop
 80068f4:	f3af 8000 	nop.w
 80068f8:	ffc00000 	.word	0xffc00000
 80068fc:	41dfffff 	.word	0x41dfffff
 8006900:	94a03595 	.word	0x94a03595
 8006904:	3fcfffff 	.word	0x3fcfffff

08006908 <_strtod_r>:
 8006908:	4b01      	ldr	r3, [pc, #4]	@ (8006910 <_strtod_r+0x8>)
 800690a:	f7ff ba19 	b.w	8005d40 <_strtod_l>
 800690e:	bf00      	nop
 8006910:	20000068 	.word	0x20000068

08006914 <_strtol_l.constprop.0>:
 8006914:	2b24      	cmp	r3, #36	@ 0x24
 8006916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691a:	4686      	mov	lr, r0
 800691c:	4690      	mov	r8, r2
 800691e:	d801      	bhi.n	8006924 <_strtol_l.constprop.0+0x10>
 8006920:	2b01      	cmp	r3, #1
 8006922:	d106      	bne.n	8006932 <_strtol_l.constprop.0+0x1e>
 8006924:	f7fd fdbc 	bl	80044a0 <__errno>
 8006928:	2316      	movs	r3, #22
 800692a:	6003      	str	r3, [r0, #0]
 800692c:	2000      	movs	r0, #0
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	4834      	ldr	r0, [pc, #208]	@ (8006a04 <_strtol_l.constprop.0+0xf0>)
 8006934:	460d      	mov	r5, r1
 8006936:	462a      	mov	r2, r5
 8006938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800693c:	5d06      	ldrb	r6, [r0, r4]
 800693e:	f016 0608 	ands.w	r6, r6, #8
 8006942:	d1f8      	bne.n	8006936 <_strtol_l.constprop.0+0x22>
 8006944:	2c2d      	cmp	r4, #45	@ 0x2d
 8006946:	d12d      	bne.n	80069a4 <_strtol_l.constprop.0+0x90>
 8006948:	782c      	ldrb	r4, [r5, #0]
 800694a:	2601      	movs	r6, #1
 800694c:	1c95      	adds	r5, r2, #2
 800694e:	f033 0210 	bics.w	r2, r3, #16
 8006952:	d109      	bne.n	8006968 <_strtol_l.constprop.0+0x54>
 8006954:	2c30      	cmp	r4, #48	@ 0x30
 8006956:	d12a      	bne.n	80069ae <_strtol_l.constprop.0+0x9a>
 8006958:	782a      	ldrb	r2, [r5, #0]
 800695a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800695e:	2a58      	cmp	r2, #88	@ 0x58
 8006960:	d125      	bne.n	80069ae <_strtol_l.constprop.0+0x9a>
 8006962:	786c      	ldrb	r4, [r5, #1]
 8006964:	2310      	movs	r3, #16
 8006966:	3502      	adds	r5, #2
 8006968:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800696c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006970:	2200      	movs	r2, #0
 8006972:	fbbc f9f3 	udiv	r9, ip, r3
 8006976:	4610      	mov	r0, r2
 8006978:	fb03 ca19 	mls	sl, r3, r9, ip
 800697c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006980:	2f09      	cmp	r7, #9
 8006982:	d81b      	bhi.n	80069bc <_strtol_l.constprop.0+0xa8>
 8006984:	463c      	mov	r4, r7
 8006986:	42a3      	cmp	r3, r4
 8006988:	dd27      	ble.n	80069da <_strtol_l.constprop.0+0xc6>
 800698a:	1c57      	adds	r7, r2, #1
 800698c:	d007      	beq.n	800699e <_strtol_l.constprop.0+0x8a>
 800698e:	4581      	cmp	r9, r0
 8006990:	d320      	bcc.n	80069d4 <_strtol_l.constprop.0+0xc0>
 8006992:	d101      	bne.n	8006998 <_strtol_l.constprop.0+0x84>
 8006994:	45a2      	cmp	sl, r4
 8006996:	db1d      	blt.n	80069d4 <_strtol_l.constprop.0+0xc0>
 8006998:	fb00 4003 	mla	r0, r0, r3, r4
 800699c:	2201      	movs	r2, #1
 800699e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069a2:	e7eb      	b.n	800697c <_strtol_l.constprop.0+0x68>
 80069a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80069a6:	bf04      	itt	eq
 80069a8:	782c      	ldrbeq	r4, [r5, #0]
 80069aa:	1c95      	addeq	r5, r2, #2
 80069ac:	e7cf      	b.n	800694e <_strtol_l.constprop.0+0x3a>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1da      	bne.n	8006968 <_strtol_l.constprop.0+0x54>
 80069b2:	2c30      	cmp	r4, #48	@ 0x30
 80069b4:	bf0c      	ite	eq
 80069b6:	2308      	moveq	r3, #8
 80069b8:	230a      	movne	r3, #10
 80069ba:	e7d5      	b.n	8006968 <_strtol_l.constprop.0+0x54>
 80069bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80069c0:	2f19      	cmp	r7, #25
 80069c2:	d801      	bhi.n	80069c8 <_strtol_l.constprop.0+0xb4>
 80069c4:	3c37      	subs	r4, #55	@ 0x37
 80069c6:	e7de      	b.n	8006986 <_strtol_l.constprop.0+0x72>
 80069c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80069cc:	2f19      	cmp	r7, #25
 80069ce:	d804      	bhi.n	80069da <_strtol_l.constprop.0+0xc6>
 80069d0:	3c57      	subs	r4, #87	@ 0x57
 80069d2:	e7d8      	b.n	8006986 <_strtol_l.constprop.0+0x72>
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295
 80069d8:	e7e1      	b.n	800699e <_strtol_l.constprop.0+0x8a>
 80069da:	1c53      	adds	r3, r2, #1
 80069dc:	d108      	bne.n	80069f0 <_strtol_l.constprop.0+0xdc>
 80069de:	2322      	movs	r3, #34	@ 0x22
 80069e0:	f8ce 3000 	str.w	r3, [lr]
 80069e4:	4660      	mov	r0, ip
 80069e6:	f1b8 0f00 	cmp.w	r8, #0
 80069ea:	d0a0      	beq.n	800692e <_strtol_l.constprop.0+0x1a>
 80069ec:	1e69      	subs	r1, r5, #1
 80069ee:	e006      	b.n	80069fe <_strtol_l.constprop.0+0xea>
 80069f0:	b106      	cbz	r6, 80069f4 <_strtol_l.constprop.0+0xe0>
 80069f2:	4240      	negs	r0, r0
 80069f4:	f1b8 0f00 	cmp.w	r8, #0
 80069f8:	d099      	beq.n	800692e <_strtol_l.constprop.0+0x1a>
 80069fa:	2a00      	cmp	r2, #0
 80069fc:	d1f6      	bne.n	80069ec <_strtol_l.constprop.0+0xd8>
 80069fe:	f8c8 1000 	str.w	r1, [r8]
 8006a02:	e794      	b.n	800692e <_strtol_l.constprop.0+0x1a>
 8006a04:	08007e51 	.word	0x08007e51

08006a08 <_strtol_r>:
 8006a08:	f7ff bf84 	b.w	8006914 <_strtol_l.constprop.0>

08006a0c <__ssputs_r>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	688e      	ldr	r6, [r1, #8]
 8006a12:	461f      	mov	r7, r3
 8006a14:	42be      	cmp	r6, r7
 8006a16:	680b      	ldr	r3, [r1, #0]
 8006a18:	4682      	mov	sl, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4690      	mov	r8, r2
 8006a1e:	d82d      	bhi.n	8006a7c <__ssputs_r+0x70>
 8006a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a28:	d026      	beq.n	8006a78 <__ssputs_r+0x6c>
 8006a2a:	6965      	ldr	r5, [r4, #20]
 8006a2c:	6909      	ldr	r1, [r1, #16]
 8006a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a32:	eba3 0901 	sub.w	r9, r3, r1
 8006a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a3a:	1c7b      	adds	r3, r7, #1
 8006a3c:	444b      	add	r3, r9
 8006a3e:	106d      	asrs	r5, r5, #1
 8006a40:	429d      	cmp	r5, r3
 8006a42:	bf38      	it	cc
 8006a44:	461d      	movcc	r5, r3
 8006a46:	0553      	lsls	r3, r2, #21
 8006a48:	d527      	bpl.n	8006a9a <__ssputs_r+0x8e>
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	f7fe fc1c 	bl	8005288 <_malloc_r>
 8006a50:	4606      	mov	r6, r0
 8006a52:	b360      	cbz	r0, 8006aae <__ssputs_r+0xa2>
 8006a54:	6921      	ldr	r1, [r4, #16]
 8006a56:	464a      	mov	r2, r9
 8006a58:	f000 fa18 	bl	8006e8c <memcpy>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	6126      	str	r6, [r4, #16]
 8006a6a:	6165      	str	r5, [r4, #20]
 8006a6c:	444e      	add	r6, r9
 8006a6e:	eba5 0509 	sub.w	r5, r5, r9
 8006a72:	6026      	str	r6, [r4, #0]
 8006a74:	60a5      	str	r5, [r4, #8]
 8006a76:	463e      	mov	r6, r7
 8006a78:	42be      	cmp	r6, r7
 8006a7a:	d900      	bls.n	8006a7e <__ssputs_r+0x72>
 8006a7c:	463e      	mov	r6, r7
 8006a7e:	6820      	ldr	r0, [r4, #0]
 8006a80:	4632      	mov	r2, r6
 8006a82:	4641      	mov	r1, r8
 8006a84:	f000 f9c6 	bl	8006e14 <memmove>
 8006a88:	68a3      	ldr	r3, [r4, #8]
 8006a8a:	1b9b      	subs	r3, r3, r6
 8006a8c:	60a3      	str	r3, [r4, #8]
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	4433      	add	r3, r6
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	2000      	movs	r0, #0
 8006a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	f000 fd89 	bl	80075b2 <_realloc_r>
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d1e0      	bne.n	8006a68 <__ssputs_r+0x5c>
 8006aa6:	6921      	ldr	r1, [r4, #16]
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	f7fe fb79 	bl	80051a0 <_free_r>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	f8ca 3000 	str.w	r3, [sl]
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	e7e9      	b.n	8006a96 <__ssputs_r+0x8a>
	...

08006ac4 <_svfiprintf_r>:
 8006ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac8:	4698      	mov	r8, r3
 8006aca:	898b      	ldrh	r3, [r1, #12]
 8006acc:	061b      	lsls	r3, r3, #24
 8006ace:	b09d      	sub	sp, #116	@ 0x74
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	4614      	mov	r4, r2
 8006ad6:	d510      	bpl.n	8006afa <_svfiprintf_r+0x36>
 8006ad8:	690b      	ldr	r3, [r1, #16]
 8006ada:	b973      	cbnz	r3, 8006afa <_svfiprintf_r+0x36>
 8006adc:	2140      	movs	r1, #64	@ 0x40
 8006ade:	f7fe fbd3 	bl	8005288 <_malloc_r>
 8006ae2:	6028      	str	r0, [r5, #0]
 8006ae4:	6128      	str	r0, [r5, #16]
 8006ae6:	b930      	cbnz	r0, 8006af6 <_svfiprintf_r+0x32>
 8006ae8:	230c      	movs	r3, #12
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	b01d      	add	sp, #116	@ 0x74
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	2340      	movs	r3, #64	@ 0x40
 8006af8:	616b      	str	r3, [r5, #20]
 8006afa:	2300      	movs	r3, #0
 8006afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006afe:	2320      	movs	r3, #32
 8006b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b08:	2330      	movs	r3, #48	@ 0x30
 8006b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ca8 <_svfiprintf_r+0x1e4>
 8006b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b12:	f04f 0901 	mov.w	r9, #1
 8006b16:	4623      	mov	r3, r4
 8006b18:	469a      	mov	sl, r3
 8006b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b1e:	b10a      	cbz	r2, 8006b24 <_svfiprintf_r+0x60>
 8006b20:	2a25      	cmp	r2, #37	@ 0x25
 8006b22:	d1f9      	bne.n	8006b18 <_svfiprintf_r+0x54>
 8006b24:	ebba 0b04 	subs.w	fp, sl, r4
 8006b28:	d00b      	beq.n	8006b42 <_svfiprintf_r+0x7e>
 8006b2a:	465b      	mov	r3, fp
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff ff6b 	bl	8006a0c <__ssputs_r>
 8006b36:	3001      	adds	r0, #1
 8006b38:	f000 80a7 	beq.w	8006c8a <_svfiprintf_r+0x1c6>
 8006b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b3e:	445a      	add	r2, fp
 8006b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b42:	f89a 3000 	ldrb.w	r3, [sl]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 809f 	beq.w	8006c8a <_svfiprintf_r+0x1c6>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b56:	f10a 0a01 	add.w	sl, sl, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9307      	str	r3, [sp, #28]
 8006b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b64:	4654      	mov	r4, sl
 8006b66:	2205      	movs	r2, #5
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	484e      	ldr	r0, [pc, #312]	@ (8006ca8 <_svfiprintf_r+0x1e4>)
 8006b6e:	f7f9 fb4f 	bl	8000210 <memchr>
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	b9d8      	cbnz	r0, 8006bae <_svfiprintf_r+0xea>
 8006b76:	06d0      	lsls	r0, r2, #27
 8006b78:	bf44      	itt	mi
 8006b7a:	2320      	movmi	r3, #32
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b80:	0711      	lsls	r1, r2, #28
 8006b82:	bf44      	itt	mi
 8006b84:	232b      	movmi	r3, #43	@ 0x2b
 8006b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b90:	d015      	beq.n	8006bbe <_svfiprintf_r+0xfa>
 8006b92:	9a07      	ldr	r2, [sp, #28]
 8006b94:	4654      	mov	r4, sl
 8006b96:	2000      	movs	r0, #0
 8006b98:	f04f 0c0a 	mov.w	ip, #10
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba2:	3b30      	subs	r3, #48	@ 0x30
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d94b      	bls.n	8006c40 <_svfiprintf_r+0x17c>
 8006ba8:	b1b0      	cbz	r0, 8006bd8 <_svfiprintf_r+0x114>
 8006baa:	9207      	str	r2, [sp, #28]
 8006bac:	e014      	b.n	8006bd8 <_svfiprintf_r+0x114>
 8006bae:	eba0 0308 	sub.w	r3, r0, r8
 8006bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	46a2      	mov	sl, r4
 8006bbc:	e7d2      	b.n	8006b64 <_svfiprintf_r+0xa0>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	1d19      	adds	r1, r3, #4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	9103      	str	r1, [sp, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfbb      	ittet	lt
 8006bca:	425b      	neglt	r3, r3
 8006bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd0:	9307      	strge	r3, [sp, #28]
 8006bd2:	9307      	strlt	r3, [sp, #28]
 8006bd4:	bfb8      	it	lt
 8006bd6:	9204      	strlt	r2, [sp, #16]
 8006bd8:	7823      	ldrb	r3, [r4, #0]
 8006bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bdc:	d10a      	bne.n	8006bf4 <_svfiprintf_r+0x130>
 8006bde:	7863      	ldrb	r3, [r4, #1]
 8006be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be2:	d132      	bne.n	8006c4a <_svfiprintf_r+0x186>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	9203      	str	r2, [sp, #12]
 8006bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bf0:	3402      	adds	r4, #2
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006cb8 <_svfiprintf_r+0x1f4>
 8006bf8:	7821      	ldrb	r1, [r4, #0]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	f7f9 fb07 	bl	8000210 <memchr>
 8006c02:	b138      	cbz	r0, 8006c14 <_svfiprintf_r+0x150>
 8006c04:	9b04      	ldr	r3, [sp, #16]
 8006c06:	eba0 000a 	sub.w	r0, r0, sl
 8006c0a:	2240      	movs	r2, #64	@ 0x40
 8006c0c:	4082      	lsls	r2, r0
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	3401      	adds	r4, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c18:	4824      	ldr	r0, [pc, #144]	@ (8006cac <_svfiprintf_r+0x1e8>)
 8006c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c1e:	2206      	movs	r2, #6
 8006c20:	f7f9 faf6 	bl	8000210 <memchr>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d036      	beq.n	8006c96 <_svfiprintf_r+0x1d2>
 8006c28:	4b21      	ldr	r3, [pc, #132]	@ (8006cb0 <_svfiprintf_r+0x1ec>)
 8006c2a:	bb1b      	cbnz	r3, 8006c74 <_svfiprintf_r+0x1b0>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	3307      	adds	r3, #7
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	3308      	adds	r3, #8
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3a:	4433      	add	r3, r6
 8006c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c3e:	e76a      	b.n	8006b16 <_svfiprintf_r+0x52>
 8006c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c44:	460c      	mov	r4, r1
 8006c46:	2001      	movs	r0, #1
 8006c48:	e7a8      	b.n	8006b9c <_svfiprintf_r+0xd8>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	3401      	adds	r4, #1
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f04f 0c0a 	mov.w	ip, #10
 8006c56:	4620      	mov	r0, r4
 8006c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c5c:	3a30      	subs	r2, #48	@ 0x30
 8006c5e:	2a09      	cmp	r2, #9
 8006c60:	d903      	bls.n	8006c6a <_svfiprintf_r+0x1a6>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0c6      	beq.n	8006bf4 <_svfiprintf_r+0x130>
 8006c66:	9105      	str	r1, [sp, #20]
 8006c68:	e7c4      	b.n	8006bf4 <_svfiprintf_r+0x130>
 8006c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c6e:	4604      	mov	r4, r0
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7f0      	b.n	8006c56 <_svfiprintf_r+0x192>
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	462a      	mov	r2, r5
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb4 <_svfiprintf_r+0x1f0>)
 8006c7c:	a904      	add	r1, sp, #16
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7fc fcca 	bl	8003618 <_printf_float>
 8006c84:	1c42      	adds	r2, r0, #1
 8006c86:	4606      	mov	r6, r0
 8006c88:	d1d6      	bne.n	8006c38 <_svfiprintf_r+0x174>
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	065b      	lsls	r3, r3, #25
 8006c8e:	f53f af2d 	bmi.w	8006aec <_svfiprintf_r+0x28>
 8006c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c94:	e72c      	b.n	8006af0 <_svfiprintf_r+0x2c>
 8006c96:	ab03      	add	r3, sp, #12
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4b05      	ldr	r3, [pc, #20]	@ (8006cb4 <_svfiprintf_r+0x1f0>)
 8006c9e:	a904      	add	r1, sp, #16
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7fc ff51 	bl	8003b48 <_printf_i>
 8006ca6:	e7ed      	b.n	8006c84 <_svfiprintf_r+0x1c0>
 8006ca8:	08007f51 	.word	0x08007f51
 8006cac:	08007f5b 	.word	0x08007f5b
 8006cb0:	08003619 	.word	0x08003619
 8006cb4:	08006a0d 	.word	0x08006a0d
 8006cb8:	08007f57 	.word	0x08007f57

08006cbc <__sflush_r>:
 8006cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc4:	0716      	lsls	r6, r2, #28
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	d454      	bmi.n	8006d76 <__sflush_r+0xba>
 8006ccc:	684b      	ldr	r3, [r1, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dc02      	bgt.n	8006cd8 <__sflush_r+0x1c>
 8006cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dd48      	ble.n	8006d6a <__sflush_r+0xae>
 8006cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d045      	beq.n	8006d6a <__sflush_r+0xae>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ce4:	682f      	ldr	r7, [r5, #0]
 8006ce6:	6a21      	ldr	r1, [r4, #32]
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	d030      	beq.n	8006d4e <__sflush_r+0x92>
 8006cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	0759      	lsls	r1, r3, #29
 8006cf2:	d505      	bpl.n	8006d00 <__sflush_r+0x44>
 8006cf4:	6863      	ldr	r3, [r4, #4]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006cfa:	b10b      	cbz	r3, 8006d00 <__sflush_r+0x44>
 8006cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	2300      	movs	r3, #0
 8006d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d04:	6a21      	ldr	r1, [r4, #32]
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b0      	blx	r6
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	d106      	bne.n	8006d1e <__sflush_r+0x62>
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	291d      	cmp	r1, #29
 8006d14:	d82b      	bhi.n	8006d6e <__sflush_r+0xb2>
 8006d16:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc0 <__sflush_r+0x104>)
 8006d18:	410a      	asrs	r2, r1
 8006d1a:	07d6      	lsls	r6, r2, #31
 8006d1c:	d427      	bmi.n	8006d6e <__sflush_r+0xb2>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	6062      	str	r2, [r4, #4]
 8006d22:	04d9      	lsls	r1, r3, #19
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	d504      	bpl.n	8006d34 <__sflush_r+0x78>
 8006d2a:	1c42      	adds	r2, r0, #1
 8006d2c:	d101      	bne.n	8006d32 <__sflush_r+0x76>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b903      	cbnz	r3, 8006d34 <__sflush_r+0x78>
 8006d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d36:	602f      	str	r7, [r5, #0]
 8006d38:	b1b9      	cbz	r1, 8006d6a <__sflush_r+0xae>
 8006d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	d002      	beq.n	8006d48 <__sflush_r+0x8c>
 8006d42:	4628      	mov	r0, r5
 8006d44:	f7fe fa2c 	bl	80051a0 <_free_r>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d4c:	e00d      	b.n	8006d6a <__sflush_r+0xae>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b0      	blx	r6
 8006d54:	4602      	mov	r2, r0
 8006d56:	1c50      	adds	r0, r2, #1
 8006d58:	d1c9      	bne.n	8006cee <__sflush_r+0x32>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0c6      	beq.n	8006cee <__sflush_r+0x32>
 8006d60:	2b1d      	cmp	r3, #29
 8006d62:	d001      	beq.n	8006d68 <__sflush_r+0xac>
 8006d64:	2b16      	cmp	r3, #22
 8006d66:	d11e      	bne.n	8006da6 <__sflush_r+0xea>
 8006d68:	602f      	str	r7, [r5, #0]
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e022      	b.n	8006db4 <__sflush_r+0xf8>
 8006d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d72:	b21b      	sxth	r3, r3
 8006d74:	e01b      	b.n	8006dae <__sflush_r+0xf2>
 8006d76:	690f      	ldr	r7, [r1, #16]
 8006d78:	2f00      	cmp	r7, #0
 8006d7a:	d0f6      	beq.n	8006d6a <__sflush_r+0xae>
 8006d7c:	0793      	lsls	r3, r2, #30
 8006d7e:	680e      	ldr	r6, [r1, #0]
 8006d80:	bf08      	it	eq
 8006d82:	694b      	ldreq	r3, [r1, #20]
 8006d84:	600f      	str	r7, [r1, #0]
 8006d86:	bf18      	it	ne
 8006d88:	2300      	movne	r3, #0
 8006d8a:	eba6 0807 	sub.w	r8, r6, r7
 8006d8e:	608b      	str	r3, [r1, #8]
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	dde9      	ble.n	8006d6a <__sflush_r+0xae>
 8006d96:	6a21      	ldr	r1, [r4, #32]
 8006d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d9a:	4643      	mov	r3, r8
 8006d9c:	463a      	mov	r2, r7
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b0      	blx	r6
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc08      	bgt.n	8006db8 <__sflush_r+0xfc>
 8006da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	4407      	add	r7, r0
 8006dba:	eba8 0800 	sub.w	r8, r8, r0
 8006dbe:	e7e7      	b.n	8006d90 <__sflush_r+0xd4>
 8006dc0:	dfbffffe 	.word	0xdfbffffe

08006dc4 <_fflush_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	690b      	ldr	r3, [r1, #16]
 8006dc8:	4605      	mov	r5, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	b913      	cbnz	r3, 8006dd4 <_fflush_r+0x10>
 8006dce:	2500      	movs	r5, #0
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	b118      	cbz	r0, 8006dde <_fflush_r+0x1a>
 8006dd6:	6a03      	ldr	r3, [r0, #32]
 8006dd8:	b90b      	cbnz	r3, 8006dde <_fflush_r+0x1a>
 8006dda:	f7fd fa75 	bl	80042c8 <__sinit>
 8006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f3      	beq.n	8006dce <_fflush_r+0xa>
 8006de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006de8:	07d0      	lsls	r0, r2, #31
 8006dea:	d404      	bmi.n	8006df6 <_fflush_r+0x32>
 8006dec:	0599      	lsls	r1, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_fflush_r+0x32>
 8006df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006df2:	f7fd fb80 	bl	80044f6 <__retarget_lock_acquire_recursive>
 8006df6:	4628      	mov	r0, r5
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f7ff ff5f 	bl	8006cbc <__sflush_r>
 8006dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	4605      	mov	r5, r0
 8006e04:	d4e4      	bmi.n	8006dd0 <_fflush_r+0xc>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	059b      	lsls	r3, r3, #22
 8006e0a:	d4e1      	bmi.n	8006dd0 <_fflush_r+0xc>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e0e:	f7fd fb73 	bl	80044f8 <__retarget_lock_release_recursive>
 8006e12:	e7dd      	b.n	8006dd0 <_fflush_r+0xc>

08006e14 <memmove>:
 8006e14:	4288      	cmp	r0, r1
 8006e16:	b510      	push	{r4, lr}
 8006e18:	eb01 0402 	add.w	r4, r1, r2
 8006e1c:	d902      	bls.n	8006e24 <memmove+0x10>
 8006e1e:	4284      	cmp	r4, r0
 8006e20:	4623      	mov	r3, r4
 8006e22:	d807      	bhi.n	8006e34 <memmove+0x20>
 8006e24:	1e43      	subs	r3, r0, #1
 8006e26:	42a1      	cmp	r1, r4
 8006e28:	d008      	beq.n	8006e3c <memmove+0x28>
 8006e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e32:	e7f8      	b.n	8006e26 <memmove+0x12>
 8006e34:	4402      	add	r2, r0
 8006e36:	4601      	mov	r1, r0
 8006e38:	428a      	cmp	r2, r1
 8006e3a:	d100      	bne.n	8006e3e <memmove+0x2a>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e46:	e7f7      	b.n	8006e38 <memmove+0x24>

08006e48 <strncmp>:
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	b16a      	cbz	r2, 8006e68 <strncmp+0x20>
 8006e4c:	3901      	subs	r1, #1
 8006e4e:	1884      	adds	r4, r0, r2
 8006e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d103      	bne.n	8006e64 <strncmp+0x1c>
 8006e5c:	42a0      	cmp	r0, r4
 8006e5e:	d001      	beq.n	8006e64 <strncmp+0x1c>
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1f5      	bne.n	8006e50 <strncmp+0x8>
 8006e64:	1ad0      	subs	r0, r2, r3
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	4610      	mov	r0, r2
 8006e6a:	e7fc      	b.n	8006e66 <strncmp+0x1e>

08006e6c <_sbrk_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d06      	ldr	r5, [pc, #24]	@ (8006e88 <_sbrk_r+0x1c>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	f7fa fb84 	bl	8001584 <_sbrk>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_sbrk_r+0x1a>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_sbrk_r+0x1a>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	20000470 	.word	0x20000470

08006e8c <memcpy>:
 8006e8c:	440a      	add	r2, r1
 8006e8e:	4291      	cmp	r1, r2
 8006e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e94:	d100      	bne.n	8006e98 <memcpy+0xc>
 8006e96:	4770      	bx	lr
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ea2:	4291      	cmp	r1, r2
 8006ea4:	d1f9      	bne.n	8006e9a <memcpy+0xe>
 8006ea6:	bd10      	pop	{r4, pc}

08006ea8 <nan>:
 8006ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006eb0 <nan+0x8>
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	7ff80000 	.word	0x7ff80000

08006eb8 <__assert_func>:
 8006eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4b09      	ldr	r3, [pc, #36]	@ (8006ee4 <__assert_func+0x2c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	68d8      	ldr	r0, [r3, #12]
 8006ec6:	b954      	cbnz	r4, 8006ede <__assert_func+0x26>
 8006ec8:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <__assert_func+0x30>)
 8006eca:	461c      	mov	r4, r3
 8006ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ed0:	9100      	str	r1, [sp, #0]
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	4905      	ldr	r1, [pc, #20]	@ (8006eec <__assert_func+0x34>)
 8006ed6:	f000 fba7 	bl	8007628 <fiprintf>
 8006eda:	f000 fbb7 	bl	800764c <abort>
 8006ede:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <__assert_func+0x38>)
 8006ee0:	e7f4      	b.n	8006ecc <__assert_func+0x14>
 8006ee2:	bf00      	nop
 8006ee4:	20000018 	.word	0x20000018
 8006ee8:	08007fa5 	.word	0x08007fa5
 8006eec:	08007f77 	.word	0x08007f77
 8006ef0:	08007f6a 	.word	0x08007f6a

08006ef4 <_calloc_r>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	fba1 5402 	umull	r5, r4, r1, r2
 8006efa:	b93c      	cbnz	r4, 8006f0c <_calloc_r+0x18>
 8006efc:	4629      	mov	r1, r5
 8006efe:	f7fe f9c3 	bl	8005288 <_malloc_r>
 8006f02:	4606      	mov	r6, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <_calloc_r+0x1e>
 8006f06:	2600      	movs	r6, #0
 8006f08:	4630      	mov	r0, r6
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	220c      	movs	r2, #12
 8006f0e:	6002      	str	r2, [r0, #0]
 8006f10:	e7f9      	b.n	8006f06 <_calloc_r+0x12>
 8006f12:	462a      	mov	r2, r5
 8006f14:	4621      	mov	r1, r4
 8006f16:	f7fd fa70 	bl	80043fa <memset>
 8006f1a:	e7f5      	b.n	8006f08 <_calloc_r+0x14>

08006f1c <rshift>:
 8006f1c:	6903      	ldr	r3, [r0, #16]
 8006f1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f2a:	f100 0414 	add.w	r4, r0, #20
 8006f2e:	dd45      	ble.n	8006fbc <rshift+0xa0>
 8006f30:	f011 011f 	ands.w	r1, r1, #31
 8006f34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f3c:	d10c      	bne.n	8006f58 <rshift+0x3c>
 8006f3e:	f100 0710 	add.w	r7, r0, #16
 8006f42:	4629      	mov	r1, r5
 8006f44:	42b1      	cmp	r1, r6
 8006f46:	d334      	bcc.n	8006fb2 <rshift+0x96>
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	1eea      	subs	r2, r5, #3
 8006f4e:	4296      	cmp	r6, r2
 8006f50:	bf38      	it	cc
 8006f52:	2300      	movcc	r3, #0
 8006f54:	4423      	add	r3, r4
 8006f56:	e015      	b.n	8006f84 <rshift+0x68>
 8006f58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f5c:	f1c1 0820 	rsb	r8, r1, #32
 8006f60:	40cf      	lsrs	r7, r1
 8006f62:	f105 0e04 	add.w	lr, r5, #4
 8006f66:	46a1      	mov	r9, r4
 8006f68:	4576      	cmp	r6, lr
 8006f6a:	46f4      	mov	ip, lr
 8006f6c:	d815      	bhi.n	8006f9a <rshift+0x7e>
 8006f6e:	1a9a      	subs	r2, r3, r2
 8006f70:	0092      	lsls	r2, r2, #2
 8006f72:	3a04      	subs	r2, #4
 8006f74:	3501      	adds	r5, #1
 8006f76:	42ae      	cmp	r6, r5
 8006f78:	bf38      	it	cc
 8006f7a:	2200      	movcc	r2, #0
 8006f7c:	18a3      	adds	r3, r4, r2
 8006f7e:	50a7      	str	r7, [r4, r2]
 8006f80:	b107      	cbz	r7, 8006f84 <rshift+0x68>
 8006f82:	3304      	adds	r3, #4
 8006f84:	1b1a      	subs	r2, r3, r4
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f8c:	bf08      	it	eq
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	6102      	str	r2, [r0, #16]
 8006f92:	bf08      	it	eq
 8006f94:	6143      	streq	r3, [r0, #20]
 8006f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	f8dc c000 	ldr.w	ip, [ip]
 8006f9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006fa2:	ea4c 0707 	orr.w	r7, ip, r7
 8006fa6:	f849 7b04 	str.w	r7, [r9], #4
 8006faa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fae:	40cf      	lsrs	r7, r1
 8006fb0:	e7da      	b.n	8006f68 <rshift+0x4c>
 8006fb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8006fb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8006fba:	e7c3      	b.n	8006f44 <rshift+0x28>
 8006fbc:	4623      	mov	r3, r4
 8006fbe:	e7e1      	b.n	8006f84 <rshift+0x68>

08006fc0 <__hexdig_fun>:
 8006fc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006fc4:	2b09      	cmp	r3, #9
 8006fc6:	d802      	bhi.n	8006fce <__hexdig_fun+0xe>
 8006fc8:	3820      	subs	r0, #32
 8006fca:	b2c0      	uxtb	r0, r0
 8006fcc:	4770      	bx	lr
 8006fce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d801      	bhi.n	8006fda <__hexdig_fun+0x1a>
 8006fd6:	3847      	subs	r0, #71	@ 0x47
 8006fd8:	e7f7      	b.n	8006fca <__hexdig_fun+0xa>
 8006fda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d801      	bhi.n	8006fe6 <__hexdig_fun+0x26>
 8006fe2:	3827      	subs	r0, #39	@ 0x27
 8006fe4:	e7f1      	b.n	8006fca <__hexdig_fun+0xa>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	4770      	bx	lr
	...

08006fec <__gethex>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	468a      	mov	sl, r1
 8006ff4:	9302      	str	r3, [sp, #8]
 8006ff6:	680b      	ldr	r3, [r1, #0]
 8006ff8:	9001      	str	r0, [sp, #4]
 8006ffa:	4690      	mov	r8, r2
 8006ffc:	1c9c      	adds	r4, r3, #2
 8006ffe:	46a1      	mov	r9, r4
 8007000:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007004:	2830      	cmp	r0, #48	@ 0x30
 8007006:	d0fa      	beq.n	8006ffe <__gethex+0x12>
 8007008:	eba9 0303 	sub.w	r3, r9, r3
 800700c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007010:	f7ff ffd6 	bl	8006fc0 <__hexdig_fun>
 8007014:	4605      	mov	r5, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d168      	bne.n	80070ec <__gethex+0x100>
 800701a:	49a0      	ldr	r1, [pc, #640]	@ (800729c <__gethex+0x2b0>)
 800701c:	2201      	movs	r2, #1
 800701e:	4648      	mov	r0, r9
 8007020:	f7ff ff12 	bl	8006e48 <strncmp>
 8007024:	4607      	mov	r7, r0
 8007026:	2800      	cmp	r0, #0
 8007028:	d167      	bne.n	80070fa <__gethex+0x10e>
 800702a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800702e:	4626      	mov	r6, r4
 8007030:	f7ff ffc6 	bl	8006fc0 <__hexdig_fun>
 8007034:	2800      	cmp	r0, #0
 8007036:	d062      	beq.n	80070fe <__gethex+0x112>
 8007038:	4623      	mov	r3, r4
 800703a:	7818      	ldrb	r0, [r3, #0]
 800703c:	2830      	cmp	r0, #48	@ 0x30
 800703e:	4699      	mov	r9, r3
 8007040:	f103 0301 	add.w	r3, r3, #1
 8007044:	d0f9      	beq.n	800703a <__gethex+0x4e>
 8007046:	f7ff ffbb 	bl	8006fc0 <__hexdig_fun>
 800704a:	fab0 f580 	clz	r5, r0
 800704e:	096d      	lsrs	r5, r5, #5
 8007050:	f04f 0b01 	mov.w	fp, #1
 8007054:	464a      	mov	r2, r9
 8007056:	4616      	mov	r6, r2
 8007058:	3201      	adds	r2, #1
 800705a:	7830      	ldrb	r0, [r6, #0]
 800705c:	f7ff ffb0 	bl	8006fc0 <__hexdig_fun>
 8007060:	2800      	cmp	r0, #0
 8007062:	d1f8      	bne.n	8007056 <__gethex+0x6a>
 8007064:	498d      	ldr	r1, [pc, #564]	@ (800729c <__gethex+0x2b0>)
 8007066:	2201      	movs	r2, #1
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff feed 	bl	8006e48 <strncmp>
 800706e:	2800      	cmp	r0, #0
 8007070:	d13f      	bne.n	80070f2 <__gethex+0x106>
 8007072:	b944      	cbnz	r4, 8007086 <__gethex+0x9a>
 8007074:	1c74      	adds	r4, r6, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4616      	mov	r6, r2
 800707a:	3201      	adds	r2, #1
 800707c:	7830      	ldrb	r0, [r6, #0]
 800707e:	f7ff ff9f 	bl	8006fc0 <__hexdig_fun>
 8007082:	2800      	cmp	r0, #0
 8007084:	d1f8      	bne.n	8007078 <__gethex+0x8c>
 8007086:	1ba4      	subs	r4, r4, r6
 8007088:	00a7      	lsls	r7, r4, #2
 800708a:	7833      	ldrb	r3, [r6, #0]
 800708c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007090:	2b50      	cmp	r3, #80	@ 0x50
 8007092:	d13e      	bne.n	8007112 <__gethex+0x126>
 8007094:	7873      	ldrb	r3, [r6, #1]
 8007096:	2b2b      	cmp	r3, #43	@ 0x2b
 8007098:	d033      	beq.n	8007102 <__gethex+0x116>
 800709a:	2b2d      	cmp	r3, #45	@ 0x2d
 800709c:	d034      	beq.n	8007108 <__gethex+0x11c>
 800709e:	1c71      	adds	r1, r6, #1
 80070a0:	2400      	movs	r4, #0
 80070a2:	7808      	ldrb	r0, [r1, #0]
 80070a4:	f7ff ff8c 	bl	8006fc0 <__hexdig_fun>
 80070a8:	1e43      	subs	r3, r0, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b18      	cmp	r3, #24
 80070ae:	d830      	bhi.n	8007112 <__gethex+0x126>
 80070b0:	f1a0 0210 	sub.w	r2, r0, #16
 80070b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80070b8:	f7ff ff82 	bl	8006fc0 <__hexdig_fun>
 80070bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80070c0:	fa5f fc8c 	uxtb.w	ip, ip
 80070c4:	f1bc 0f18 	cmp.w	ip, #24
 80070c8:	f04f 030a 	mov.w	r3, #10
 80070cc:	d91e      	bls.n	800710c <__gethex+0x120>
 80070ce:	b104      	cbz	r4, 80070d2 <__gethex+0xe6>
 80070d0:	4252      	negs	r2, r2
 80070d2:	4417      	add	r7, r2
 80070d4:	f8ca 1000 	str.w	r1, [sl]
 80070d8:	b1ed      	cbz	r5, 8007116 <__gethex+0x12a>
 80070da:	f1bb 0f00 	cmp.w	fp, #0
 80070de:	bf0c      	ite	eq
 80070e0:	2506      	moveq	r5, #6
 80070e2:	2500      	movne	r5, #0
 80070e4:	4628      	mov	r0, r5
 80070e6:	b005      	add	sp, #20
 80070e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ec:	2500      	movs	r5, #0
 80070ee:	462c      	mov	r4, r5
 80070f0:	e7b0      	b.n	8007054 <__gethex+0x68>
 80070f2:	2c00      	cmp	r4, #0
 80070f4:	d1c7      	bne.n	8007086 <__gethex+0x9a>
 80070f6:	4627      	mov	r7, r4
 80070f8:	e7c7      	b.n	800708a <__gethex+0x9e>
 80070fa:	464e      	mov	r6, r9
 80070fc:	462f      	mov	r7, r5
 80070fe:	2501      	movs	r5, #1
 8007100:	e7c3      	b.n	800708a <__gethex+0x9e>
 8007102:	2400      	movs	r4, #0
 8007104:	1cb1      	adds	r1, r6, #2
 8007106:	e7cc      	b.n	80070a2 <__gethex+0xb6>
 8007108:	2401      	movs	r4, #1
 800710a:	e7fb      	b.n	8007104 <__gethex+0x118>
 800710c:	fb03 0002 	mla	r0, r3, r2, r0
 8007110:	e7ce      	b.n	80070b0 <__gethex+0xc4>
 8007112:	4631      	mov	r1, r6
 8007114:	e7de      	b.n	80070d4 <__gethex+0xe8>
 8007116:	eba6 0309 	sub.w	r3, r6, r9
 800711a:	3b01      	subs	r3, #1
 800711c:	4629      	mov	r1, r5
 800711e:	2b07      	cmp	r3, #7
 8007120:	dc0a      	bgt.n	8007138 <__gethex+0x14c>
 8007122:	9801      	ldr	r0, [sp, #4]
 8007124:	f7fe f93c 	bl	80053a0 <_Balloc>
 8007128:	4604      	mov	r4, r0
 800712a:	b940      	cbnz	r0, 800713e <__gethex+0x152>
 800712c:	4b5c      	ldr	r3, [pc, #368]	@ (80072a0 <__gethex+0x2b4>)
 800712e:	4602      	mov	r2, r0
 8007130:	21e4      	movs	r1, #228	@ 0xe4
 8007132:	485c      	ldr	r0, [pc, #368]	@ (80072a4 <__gethex+0x2b8>)
 8007134:	f7ff fec0 	bl	8006eb8 <__assert_func>
 8007138:	3101      	adds	r1, #1
 800713a:	105b      	asrs	r3, r3, #1
 800713c:	e7ef      	b.n	800711e <__gethex+0x132>
 800713e:	f100 0a14 	add.w	sl, r0, #20
 8007142:	2300      	movs	r3, #0
 8007144:	4655      	mov	r5, sl
 8007146:	469b      	mov	fp, r3
 8007148:	45b1      	cmp	r9, r6
 800714a:	d337      	bcc.n	80071bc <__gethex+0x1d0>
 800714c:	f845 bb04 	str.w	fp, [r5], #4
 8007150:	eba5 050a 	sub.w	r5, r5, sl
 8007154:	10ad      	asrs	r5, r5, #2
 8007156:	6125      	str	r5, [r4, #16]
 8007158:	4658      	mov	r0, fp
 800715a:	f7fe fa13 	bl	8005584 <__hi0bits>
 800715e:	016d      	lsls	r5, r5, #5
 8007160:	f8d8 6000 	ldr.w	r6, [r8]
 8007164:	1a2d      	subs	r5, r5, r0
 8007166:	42b5      	cmp	r5, r6
 8007168:	dd54      	ble.n	8007214 <__gethex+0x228>
 800716a:	1bad      	subs	r5, r5, r6
 800716c:	4629      	mov	r1, r5
 800716e:	4620      	mov	r0, r4
 8007170:	f7fe fda7 	bl	8005cc2 <__any_on>
 8007174:	4681      	mov	r9, r0
 8007176:	b178      	cbz	r0, 8007198 <__gethex+0x1ac>
 8007178:	1e6b      	subs	r3, r5, #1
 800717a:	1159      	asrs	r1, r3, #5
 800717c:	f003 021f 	and.w	r2, r3, #31
 8007180:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007184:	f04f 0901 	mov.w	r9, #1
 8007188:	fa09 f202 	lsl.w	r2, r9, r2
 800718c:	420a      	tst	r2, r1
 800718e:	d003      	beq.n	8007198 <__gethex+0x1ac>
 8007190:	454b      	cmp	r3, r9
 8007192:	dc36      	bgt.n	8007202 <__gethex+0x216>
 8007194:	f04f 0902 	mov.w	r9, #2
 8007198:	4629      	mov	r1, r5
 800719a:	4620      	mov	r0, r4
 800719c:	f7ff febe 	bl	8006f1c <rshift>
 80071a0:	442f      	add	r7, r5
 80071a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071a6:	42bb      	cmp	r3, r7
 80071a8:	da42      	bge.n	8007230 <__gethex+0x244>
 80071aa:	9801      	ldr	r0, [sp, #4]
 80071ac:	4621      	mov	r1, r4
 80071ae:	f7fe f937 	bl	8005420 <_Bfree>
 80071b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071b4:	2300      	movs	r3, #0
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	25a3      	movs	r5, #163	@ 0xa3
 80071ba:	e793      	b.n	80070e4 <__gethex+0xf8>
 80071bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80071c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80071c2:	d012      	beq.n	80071ea <__gethex+0x1fe>
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d104      	bne.n	80071d2 <__gethex+0x1e6>
 80071c8:	f845 bb04 	str.w	fp, [r5], #4
 80071cc:	f04f 0b00 	mov.w	fp, #0
 80071d0:	465b      	mov	r3, fp
 80071d2:	7830      	ldrb	r0, [r6, #0]
 80071d4:	9303      	str	r3, [sp, #12]
 80071d6:	f7ff fef3 	bl	8006fc0 <__hexdig_fun>
 80071da:	9b03      	ldr	r3, [sp, #12]
 80071dc:	f000 000f 	and.w	r0, r0, #15
 80071e0:	4098      	lsls	r0, r3
 80071e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80071e6:	3304      	adds	r3, #4
 80071e8:	e7ae      	b.n	8007148 <__gethex+0x15c>
 80071ea:	45b1      	cmp	r9, r6
 80071ec:	d8ea      	bhi.n	80071c4 <__gethex+0x1d8>
 80071ee:	492b      	ldr	r1, [pc, #172]	@ (800729c <__gethex+0x2b0>)
 80071f0:	9303      	str	r3, [sp, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff fe27 	bl	8006e48 <strncmp>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1e1      	bne.n	80071c4 <__gethex+0x1d8>
 8007200:	e7a2      	b.n	8007148 <__gethex+0x15c>
 8007202:	1ea9      	subs	r1, r5, #2
 8007204:	4620      	mov	r0, r4
 8007206:	f7fe fd5c 	bl	8005cc2 <__any_on>
 800720a:	2800      	cmp	r0, #0
 800720c:	d0c2      	beq.n	8007194 <__gethex+0x1a8>
 800720e:	f04f 0903 	mov.w	r9, #3
 8007212:	e7c1      	b.n	8007198 <__gethex+0x1ac>
 8007214:	da09      	bge.n	800722a <__gethex+0x23e>
 8007216:	1b75      	subs	r5, r6, r5
 8007218:	4621      	mov	r1, r4
 800721a:	9801      	ldr	r0, [sp, #4]
 800721c:	462a      	mov	r2, r5
 800721e:	f7fe fb17 	bl	8005850 <__lshift>
 8007222:	1b7f      	subs	r7, r7, r5
 8007224:	4604      	mov	r4, r0
 8007226:	f100 0a14 	add.w	sl, r0, #20
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	e7b8      	b.n	80071a2 <__gethex+0x1b6>
 8007230:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007234:	42bd      	cmp	r5, r7
 8007236:	dd6f      	ble.n	8007318 <__gethex+0x32c>
 8007238:	1bed      	subs	r5, r5, r7
 800723a:	42ae      	cmp	r6, r5
 800723c:	dc34      	bgt.n	80072a8 <__gethex+0x2bc>
 800723e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d022      	beq.n	800728c <__gethex+0x2a0>
 8007246:	2b03      	cmp	r3, #3
 8007248:	d024      	beq.n	8007294 <__gethex+0x2a8>
 800724a:	2b01      	cmp	r3, #1
 800724c:	d115      	bne.n	800727a <__gethex+0x28e>
 800724e:	42ae      	cmp	r6, r5
 8007250:	d113      	bne.n	800727a <__gethex+0x28e>
 8007252:	2e01      	cmp	r6, #1
 8007254:	d10b      	bne.n	800726e <__gethex+0x282>
 8007256:	9a02      	ldr	r2, [sp, #8]
 8007258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	f8ca 3000 	str.w	r3, [sl]
 8007266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007268:	2562      	movs	r5, #98	@ 0x62
 800726a:	601c      	str	r4, [r3, #0]
 800726c:	e73a      	b.n	80070e4 <__gethex+0xf8>
 800726e:	1e71      	subs	r1, r6, #1
 8007270:	4620      	mov	r0, r4
 8007272:	f7fe fd26 	bl	8005cc2 <__any_on>
 8007276:	2800      	cmp	r0, #0
 8007278:	d1ed      	bne.n	8007256 <__gethex+0x26a>
 800727a:	9801      	ldr	r0, [sp, #4]
 800727c:	4621      	mov	r1, r4
 800727e:	f7fe f8cf 	bl	8005420 <_Bfree>
 8007282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007284:	2300      	movs	r3, #0
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	2550      	movs	r5, #80	@ 0x50
 800728a:	e72b      	b.n	80070e4 <__gethex+0xf8>
 800728c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f3      	bne.n	800727a <__gethex+0x28e>
 8007292:	e7e0      	b.n	8007256 <__gethex+0x26a>
 8007294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1dd      	bne.n	8007256 <__gethex+0x26a>
 800729a:	e7ee      	b.n	800727a <__gethex+0x28e>
 800729c:	08007df8 	.word	0x08007df8
 80072a0:	08007c8d 	.word	0x08007c8d
 80072a4:	08007fa6 	.word	0x08007fa6
 80072a8:	1e6f      	subs	r7, r5, #1
 80072aa:	f1b9 0f00 	cmp.w	r9, #0
 80072ae:	d130      	bne.n	8007312 <__gethex+0x326>
 80072b0:	b127      	cbz	r7, 80072bc <__gethex+0x2d0>
 80072b2:	4639      	mov	r1, r7
 80072b4:	4620      	mov	r0, r4
 80072b6:	f7fe fd04 	bl	8005cc2 <__any_on>
 80072ba:	4681      	mov	r9, r0
 80072bc:	117a      	asrs	r2, r7, #5
 80072be:	2301      	movs	r3, #1
 80072c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80072c4:	f007 071f 	and.w	r7, r7, #31
 80072c8:	40bb      	lsls	r3, r7
 80072ca:	4213      	tst	r3, r2
 80072cc:	4629      	mov	r1, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	bf18      	it	ne
 80072d2:	f049 0902 	orrne.w	r9, r9, #2
 80072d6:	f7ff fe21 	bl	8006f1c <rshift>
 80072da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80072de:	1b76      	subs	r6, r6, r5
 80072e0:	2502      	movs	r5, #2
 80072e2:	f1b9 0f00 	cmp.w	r9, #0
 80072e6:	d047      	beq.n	8007378 <__gethex+0x38c>
 80072e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d015      	beq.n	800731c <__gethex+0x330>
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d017      	beq.n	8007324 <__gethex+0x338>
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d109      	bne.n	800730c <__gethex+0x320>
 80072f8:	f019 0f02 	tst.w	r9, #2
 80072fc:	d006      	beq.n	800730c <__gethex+0x320>
 80072fe:	f8da 3000 	ldr.w	r3, [sl]
 8007302:	ea49 0903 	orr.w	r9, r9, r3
 8007306:	f019 0f01 	tst.w	r9, #1
 800730a:	d10e      	bne.n	800732a <__gethex+0x33e>
 800730c:	f045 0510 	orr.w	r5, r5, #16
 8007310:	e032      	b.n	8007378 <__gethex+0x38c>
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	e7d1      	b.n	80072bc <__gethex+0x2d0>
 8007318:	2501      	movs	r5, #1
 800731a:	e7e2      	b.n	80072e2 <__gethex+0x2f6>
 800731c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800731e:	f1c3 0301 	rsb	r3, r3, #1
 8007322:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f0      	beq.n	800730c <__gethex+0x320>
 800732a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800732e:	f104 0314 	add.w	r3, r4, #20
 8007332:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007336:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800733a:	f04f 0c00 	mov.w	ip, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f853 2b04 	ldr.w	r2, [r3], #4
 8007344:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007348:	d01b      	beq.n	8007382 <__gethex+0x396>
 800734a:	3201      	adds	r2, #1
 800734c:	6002      	str	r2, [r0, #0]
 800734e:	2d02      	cmp	r5, #2
 8007350:	f104 0314 	add.w	r3, r4, #20
 8007354:	d13c      	bne.n	80073d0 <__gethex+0x3e4>
 8007356:	f8d8 2000 	ldr.w	r2, [r8]
 800735a:	3a01      	subs	r2, #1
 800735c:	42b2      	cmp	r2, r6
 800735e:	d109      	bne.n	8007374 <__gethex+0x388>
 8007360:	1171      	asrs	r1, r6, #5
 8007362:	2201      	movs	r2, #1
 8007364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007368:	f006 061f 	and.w	r6, r6, #31
 800736c:	fa02 f606 	lsl.w	r6, r2, r6
 8007370:	421e      	tst	r6, r3
 8007372:	d13a      	bne.n	80073ea <__gethex+0x3fe>
 8007374:	f045 0520 	orr.w	r5, r5, #32
 8007378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737a:	601c      	str	r4, [r3, #0]
 800737c:	9b02      	ldr	r3, [sp, #8]
 800737e:	601f      	str	r7, [r3, #0]
 8007380:	e6b0      	b.n	80070e4 <__gethex+0xf8>
 8007382:	4299      	cmp	r1, r3
 8007384:	f843 cc04 	str.w	ip, [r3, #-4]
 8007388:	d8d9      	bhi.n	800733e <__gethex+0x352>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	459b      	cmp	fp, r3
 800738e:	db17      	blt.n	80073c0 <__gethex+0x3d4>
 8007390:	6861      	ldr	r1, [r4, #4]
 8007392:	9801      	ldr	r0, [sp, #4]
 8007394:	3101      	adds	r1, #1
 8007396:	f7fe f803 	bl	80053a0 <_Balloc>
 800739a:	4681      	mov	r9, r0
 800739c:	b918      	cbnz	r0, 80073a6 <__gethex+0x3ba>
 800739e:	4b1a      	ldr	r3, [pc, #104]	@ (8007408 <__gethex+0x41c>)
 80073a0:	4602      	mov	r2, r0
 80073a2:	2184      	movs	r1, #132	@ 0x84
 80073a4:	e6c5      	b.n	8007132 <__gethex+0x146>
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	3202      	adds	r2, #2
 80073aa:	f104 010c 	add.w	r1, r4, #12
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	300c      	adds	r0, #12
 80073b2:	f7ff fd6b 	bl	8006e8c <memcpy>
 80073b6:	4621      	mov	r1, r4
 80073b8:	9801      	ldr	r0, [sp, #4]
 80073ba:	f7fe f831 	bl	8005420 <_Bfree>
 80073be:	464c      	mov	r4, r9
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073c8:	6122      	str	r2, [r4, #16]
 80073ca:	2201      	movs	r2, #1
 80073cc:	615a      	str	r2, [r3, #20]
 80073ce:	e7be      	b.n	800734e <__gethex+0x362>
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	455a      	cmp	r2, fp
 80073d4:	dd0b      	ble.n	80073ee <__gethex+0x402>
 80073d6:	2101      	movs	r1, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff fd9f 	bl	8006f1c <rshift>
 80073de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073e2:	3701      	adds	r7, #1
 80073e4:	42bb      	cmp	r3, r7
 80073e6:	f6ff aee0 	blt.w	80071aa <__gethex+0x1be>
 80073ea:	2501      	movs	r5, #1
 80073ec:	e7c2      	b.n	8007374 <__gethex+0x388>
 80073ee:	f016 061f 	ands.w	r6, r6, #31
 80073f2:	d0fa      	beq.n	80073ea <__gethex+0x3fe>
 80073f4:	4453      	add	r3, sl
 80073f6:	f1c6 0620 	rsb	r6, r6, #32
 80073fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80073fe:	f7fe f8c1 	bl	8005584 <__hi0bits>
 8007402:	42b0      	cmp	r0, r6
 8007404:	dbe7      	blt.n	80073d6 <__gethex+0x3ea>
 8007406:	e7f0      	b.n	80073ea <__gethex+0x3fe>
 8007408:	08007c8d 	.word	0x08007c8d

0800740c <L_shift>:
 800740c:	f1c2 0208 	rsb	r2, r2, #8
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	f1c2 0620 	rsb	r6, r2, #32
 8007418:	6843      	ldr	r3, [r0, #4]
 800741a:	6804      	ldr	r4, [r0, #0]
 800741c:	fa03 f506 	lsl.w	r5, r3, r6
 8007420:	432c      	orrs	r4, r5
 8007422:	40d3      	lsrs	r3, r2
 8007424:	6004      	str	r4, [r0, #0]
 8007426:	f840 3f04 	str.w	r3, [r0, #4]!
 800742a:	4288      	cmp	r0, r1
 800742c:	d3f4      	bcc.n	8007418 <L_shift+0xc>
 800742e:	bd70      	pop	{r4, r5, r6, pc}

08007430 <__match>:
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	6803      	ldr	r3, [r0, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	b914      	cbnz	r4, 8007442 <__match+0x12>
 800743c:	6003      	str	r3, [r0, #0]
 800743e:	2001      	movs	r0, #1
 8007440:	bd30      	pop	{r4, r5, pc}
 8007442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007446:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800744a:	2d19      	cmp	r5, #25
 800744c:	bf98      	it	ls
 800744e:	3220      	addls	r2, #32
 8007450:	42a2      	cmp	r2, r4
 8007452:	d0f0      	beq.n	8007436 <__match+0x6>
 8007454:	2000      	movs	r0, #0
 8007456:	e7f3      	b.n	8007440 <__match+0x10>

08007458 <__hexnan>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	680b      	ldr	r3, [r1, #0]
 800745e:	6801      	ldr	r1, [r0, #0]
 8007460:	115e      	asrs	r6, r3, #5
 8007462:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007466:	f013 031f 	ands.w	r3, r3, #31
 800746a:	b087      	sub	sp, #28
 800746c:	bf18      	it	ne
 800746e:	3604      	addne	r6, #4
 8007470:	2500      	movs	r5, #0
 8007472:	1f37      	subs	r7, r6, #4
 8007474:	4682      	mov	sl, r0
 8007476:	4690      	mov	r8, r2
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	f846 5c04 	str.w	r5, [r6, #-4]
 800747e:	46b9      	mov	r9, r7
 8007480:	463c      	mov	r4, r7
 8007482:	9502      	str	r5, [sp, #8]
 8007484:	46ab      	mov	fp, r5
 8007486:	784a      	ldrb	r2, [r1, #1]
 8007488:	1c4b      	adds	r3, r1, #1
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	b342      	cbz	r2, 80074e0 <__hexnan+0x88>
 800748e:	4610      	mov	r0, r2
 8007490:	9105      	str	r1, [sp, #20]
 8007492:	9204      	str	r2, [sp, #16]
 8007494:	f7ff fd94 	bl	8006fc0 <__hexdig_fun>
 8007498:	2800      	cmp	r0, #0
 800749a:	d151      	bne.n	8007540 <__hexnan+0xe8>
 800749c:	9a04      	ldr	r2, [sp, #16]
 800749e:	9905      	ldr	r1, [sp, #20]
 80074a0:	2a20      	cmp	r2, #32
 80074a2:	d818      	bhi.n	80074d6 <__hexnan+0x7e>
 80074a4:	9b02      	ldr	r3, [sp, #8]
 80074a6:	459b      	cmp	fp, r3
 80074a8:	dd13      	ble.n	80074d2 <__hexnan+0x7a>
 80074aa:	454c      	cmp	r4, r9
 80074ac:	d206      	bcs.n	80074bc <__hexnan+0x64>
 80074ae:	2d07      	cmp	r5, #7
 80074b0:	dc04      	bgt.n	80074bc <__hexnan+0x64>
 80074b2:	462a      	mov	r2, r5
 80074b4:	4649      	mov	r1, r9
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff ffa8 	bl	800740c <L_shift>
 80074bc:	4544      	cmp	r4, r8
 80074be:	d952      	bls.n	8007566 <__hexnan+0x10e>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f1a4 0904 	sub.w	r9, r4, #4
 80074c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80074ca:	f8cd b008 	str.w	fp, [sp, #8]
 80074ce:	464c      	mov	r4, r9
 80074d0:	461d      	mov	r5, r3
 80074d2:	9903      	ldr	r1, [sp, #12]
 80074d4:	e7d7      	b.n	8007486 <__hexnan+0x2e>
 80074d6:	2a29      	cmp	r2, #41	@ 0x29
 80074d8:	d157      	bne.n	800758a <__hexnan+0x132>
 80074da:	3102      	adds	r1, #2
 80074dc:	f8ca 1000 	str.w	r1, [sl]
 80074e0:	f1bb 0f00 	cmp.w	fp, #0
 80074e4:	d051      	beq.n	800758a <__hexnan+0x132>
 80074e6:	454c      	cmp	r4, r9
 80074e8:	d206      	bcs.n	80074f8 <__hexnan+0xa0>
 80074ea:	2d07      	cmp	r5, #7
 80074ec:	dc04      	bgt.n	80074f8 <__hexnan+0xa0>
 80074ee:	462a      	mov	r2, r5
 80074f0:	4649      	mov	r1, r9
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7ff ff8a 	bl	800740c <L_shift>
 80074f8:	4544      	cmp	r4, r8
 80074fa:	d936      	bls.n	800756a <__hexnan+0x112>
 80074fc:	f1a8 0204 	sub.w	r2, r8, #4
 8007500:	4623      	mov	r3, r4
 8007502:	f853 1b04 	ldr.w	r1, [r3], #4
 8007506:	f842 1f04 	str.w	r1, [r2, #4]!
 800750a:	429f      	cmp	r7, r3
 800750c:	d2f9      	bcs.n	8007502 <__hexnan+0xaa>
 800750e:	1b3b      	subs	r3, r7, r4
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	3304      	adds	r3, #4
 8007516:	3401      	adds	r4, #1
 8007518:	3e03      	subs	r6, #3
 800751a:	42b4      	cmp	r4, r6
 800751c:	bf88      	it	hi
 800751e:	2304      	movhi	r3, #4
 8007520:	4443      	add	r3, r8
 8007522:	2200      	movs	r2, #0
 8007524:	f843 2b04 	str.w	r2, [r3], #4
 8007528:	429f      	cmp	r7, r3
 800752a:	d2fb      	bcs.n	8007524 <__hexnan+0xcc>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	b91b      	cbnz	r3, 8007538 <__hexnan+0xe0>
 8007530:	4547      	cmp	r7, r8
 8007532:	d128      	bne.n	8007586 <__hexnan+0x12e>
 8007534:	2301      	movs	r3, #1
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	2005      	movs	r0, #5
 800753a:	b007      	add	sp, #28
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	3501      	adds	r5, #1
 8007542:	2d08      	cmp	r5, #8
 8007544:	f10b 0b01 	add.w	fp, fp, #1
 8007548:	dd06      	ble.n	8007558 <__hexnan+0x100>
 800754a:	4544      	cmp	r4, r8
 800754c:	d9c1      	bls.n	80074d2 <__hexnan+0x7a>
 800754e:	2300      	movs	r3, #0
 8007550:	f844 3c04 	str.w	r3, [r4, #-4]
 8007554:	2501      	movs	r5, #1
 8007556:	3c04      	subs	r4, #4
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	f000 000f 	and.w	r0, r0, #15
 800755e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007562:	6020      	str	r0, [r4, #0]
 8007564:	e7b5      	b.n	80074d2 <__hexnan+0x7a>
 8007566:	2508      	movs	r5, #8
 8007568:	e7b3      	b.n	80074d2 <__hexnan+0x7a>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0dd      	beq.n	800752c <__hexnan+0xd4>
 8007570:	f1c3 0320 	rsb	r3, r3, #32
 8007574:	f04f 32ff 	mov.w	r2, #4294967295
 8007578:	40da      	lsrs	r2, r3
 800757a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800757e:	4013      	ands	r3, r2
 8007580:	f846 3c04 	str.w	r3, [r6, #-4]
 8007584:	e7d2      	b.n	800752c <__hexnan+0xd4>
 8007586:	3f04      	subs	r7, #4
 8007588:	e7d0      	b.n	800752c <__hexnan+0xd4>
 800758a:	2004      	movs	r0, #4
 800758c:	e7d5      	b.n	800753a <__hexnan+0xe2>

0800758e <__ascii_mbtowc>:
 800758e:	b082      	sub	sp, #8
 8007590:	b901      	cbnz	r1, 8007594 <__ascii_mbtowc+0x6>
 8007592:	a901      	add	r1, sp, #4
 8007594:	b142      	cbz	r2, 80075a8 <__ascii_mbtowc+0x1a>
 8007596:	b14b      	cbz	r3, 80075ac <__ascii_mbtowc+0x1e>
 8007598:	7813      	ldrb	r3, [r2, #0]
 800759a:	600b      	str	r3, [r1, #0]
 800759c:	7812      	ldrb	r2, [r2, #0]
 800759e:	1e10      	subs	r0, r2, #0
 80075a0:	bf18      	it	ne
 80075a2:	2001      	movne	r0, #1
 80075a4:	b002      	add	sp, #8
 80075a6:	4770      	bx	lr
 80075a8:	4610      	mov	r0, r2
 80075aa:	e7fb      	b.n	80075a4 <__ascii_mbtowc+0x16>
 80075ac:	f06f 0001 	mvn.w	r0, #1
 80075b0:	e7f8      	b.n	80075a4 <__ascii_mbtowc+0x16>

080075b2 <_realloc_r>:
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	4680      	mov	r8, r0
 80075b8:	4615      	mov	r5, r2
 80075ba:	460c      	mov	r4, r1
 80075bc:	b921      	cbnz	r1, 80075c8 <_realloc_r+0x16>
 80075be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	4611      	mov	r1, r2
 80075c4:	f7fd be60 	b.w	8005288 <_malloc_r>
 80075c8:	b92a      	cbnz	r2, 80075d6 <_realloc_r+0x24>
 80075ca:	f7fd fde9 	bl	80051a0 <_free_r>
 80075ce:	2400      	movs	r4, #0
 80075d0:	4620      	mov	r0, r4
 80075d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d6:	f000 f840 	bl	800765a <_malloc_usable_size_r>
 80075da:	4285      	cmp	r5, r0
 80075dc:	4606      	mov	r6, r0
 80075de:	d802      	bhi.n	80075e6 <_realloc_r+0x34>
 80075e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075e4:	d8f4      	bhi.n	80075d0 <_realloc_r+0x1e>
 80075e6:	4629      	mov	r1, r5
 80075e8:	4640      	mov	r0, r8
 80075ea:	f7fd fe4d 	bl	8005288 <_malloc_r>
 80075ee:	4607      	mov	r7, r0
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d0ec      	beq.n	80075ce <_realloc_r+0x1c>
 80075f4:	42b5      	cmp	r5, r6
 80075f6:	462a      	mov	r2, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	bf28      	it	cs
 80075fc:	4632      	movcs	r2, r6
 80075fe:	f7ff fc45 	bl	8006e8c <memcpy>
 8007602:	4621      	mov	r1, r4
 8007604:	4640      	mov	r0, r8
 8007606:	f7fd fdcb 	bl	80051a0 <_free_r>
 800760a:	463c      	mov	r4, r7
 800760c:	e7e0      	b.n	80075d0 <_realloc_r+0x1e>

0800760e <__ascii_wctomb>:
 800760e:	4603      	mov	r3, r0
 8007610:	4608      	mov	r0, r1
 8007612:	b141      	cbz	r1, 8007626 <__ascii_wctomb+0x18>
 8007614:	2aff      	cmp	r2, #255	@ 0xff
 8007616:	d904      	bls.n	8007622 <__ascii_wctomb+0x14>
 8007618:	228a      	movs	r2, #138	@ 0x8a
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	4770      	bx	lr
 8007622:	700a      	strb	r2, [r1, #0]
 8007624:	2001      	movs	r0, #1
 8007626:	4770      	bx	lr

08007628 <fiprintf>:
 8007628:	b40e      	push	{r1, r2, r3}
 800762a:	b503      	push	{r0, r1, lr}
 800762c:	4601      	mov	r1, r0
 800762e:	ab03      	add	r3, sp, #12
 8007630:	4805      	ldr	r0, [pc, #20]	@ (8007648 <fiprintf+0x20>)
 8007632:	f853 2b04 	ldr.w	r2, [r3], #4
 8007636:	6800      	ldr	r0, [r0, #0]
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	f000 f83f 	bl	80076bc <_vfiprintf_r>
 800763e:	b002      	add	sp, #8
 8007640:	f85d eb04 	ldr.w	lr, [sp], #4
 8007644:	b003      	add	sp, #12
 8007646:	4770      	bx	lr
 8007648:	20000018 	.word	0x20000018

0800764c <abort>:
 800764c:	b508      	push	{r3, lr}
 800764e:	2006      	movs	r0, #6
 8007650:	f000 fa08 	bl	8007a64 <raise>
 8007654:	2001      	movs	r0, #1
 8007656:	f7f9 ff1c 	bl	8001492 <_exit>

0800765a <_malloc_usable_size_r>:
 800765a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765e:	1f18      	subs	r0, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfbc      	itt	lt
 8007664:	580b      	ldrlt	r3, [r1, r0]
 8007666:	18c0      	addlt	r0, r0, r3
 8007668:	4770      	bx	lr

0800766a <__sfputc_r>:
 800766a:	6893      	ldr	r3, [r2, #8]
 800766c:	3b01      	subs	r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	b410      	push	{r4}
 8007672:	6093      	str	r3, [r2, #8]
 8007674:	da08      	bge.n	8007688 <__sfputc_r+0x1e>
 8007676:	6994      	ldr	r4, [r2, #24]
 8007678:	42a3      	cmp	r3, r4
 800767a:	db01      	blt.n	8007680 <__sfputc_r+0x16>
 800767c:	290a      	cmp	r1, #10
 800767e:	d103      	bne.n	8007688 <__sfputc_r+0x1e>
 8007680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007684:	f000 b932 	b.w	80078ec <__swbuf_r>
 8007688:	6813      	ldr	r3, [r2, #0]
 800768a:	1c58      	adds	r0, r3, #1
 800768c:	6010      	str	r0, [r2, #0]
 800768e:	7019      	strb	r1, [r3, #0]
 8007690:	4608      	mov	r0, r1
 8007692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007696:	4770      	bx	lr

08007698 <__sfputs_r>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	4614      	mov	r4, r2
 80076a0:	18d5      	adds	r5, r2, r3
 80076a2:	42ac      	cmp	r4, r5
 80076a4:	d101      	bne.n	80076aa <__sfputs_r+0x12>
 80076a6:	2000      	movs	r0, #0
 80076a8:	e007      	b.n	80076ba <__sfputs_r+0x22>
 80076aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ae:	463a      	mov	r2, r7
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff ffda 	bl	800766a <__sfputc_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d1f3      	bne.n	80076a2 <__sfputs_r+0xa>
 80076ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076bc <_vfiprintf_r>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	460d      	mov	r5, r1
 80076c2:	b09d      	sub	sp, #116	@ 0x74
 80076c4:	4614      	mov	r4, r2
 80076c6:	4698      	mov	r8, r3
 80076c8:	4606      	mov	r6, r0
 80076ca:	b118      	cbz	r0, 80076d4 <_vfiprintf_r+0x18>
 80076cc:	6a03      	ldr	r3, [r0, #32]
 80076ce:	b90b      	cbnz	r3, 80076d4 <_vfiprintf_r+0x18>
 80076d0:	f7fc fdfa 	bl	80042c8 <__sinit>
 80076d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076d6:	07d9      	lsls	r1, r3, #31
 80076d8:	d405      	bmi.n	80076e6 <_vfiprintf_r+0x2a>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	059a      	lsls	r2, r3, #22
 80076de:	d402      	bmi.n	80076e6 <_vfiprintf_r+0x2a>
 80076e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076e2:	f7fc ff08 	bl	80044f6 <__retarget_lock_acquire_recursive>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	071b      	lsls	r3, r3, #28
 80076ea:	d501      	bpl.n	80076f0 <_vfiprintf_r+0x34>
 80076ec:	692b      	ldr	r3, [r5, #16]
 80076ee:	b99b      	cbnz	r3, 8007718 <_vfiprintf_r+0x5c>
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f938 	bl	8007968 <__swsetup_r>
 80076f8:	b170      	cbz	r0, 8007718 <_vfiprintf_r+0x5c>
 80076fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076fc:	07dc      	lsls	r4, r3, #31
 80076fe:	d504      	bpl.n	800770a <_vfiprintf_r+0x4e>
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	b01d      	add	sp, #116	@ 0x74
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	0598      	lsls	r0, r3, #22
 800770e:	d4f7      	bmi.n	8007700 <_vfiprintf_r+0x44>
 8007710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007712:	f7fc fef1 	bl	80044f8 <__retarget_lock_release_recursive>
 8007716:	e7f3      	b.n	8007700 <_vfiprintf_r+0x44>
 8007718:	2300      	movs	r3, #0
 800771a:	9309      	str	r3, [sp, #36]	@ 0x24
 800771c:	2320      	movs	r3, #32
 800771e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007722:	f8cd 800c 	str.w	r8, [sp, #12]
 8007726:	2330      	movs	r3, #48	@ 0x30
 8007728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078d8 <_vfiprintf_r+0x21c>
 800772c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007730:	f04f 0901 	mov.w	r9, #1
 8007734:	4623      	mov	r3, r4
 8007736:	469a      	mov	sl, r3
 8007738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773c:	b10a      	cbz	r2, 8007742 <_vfiprintf_r+0x86>
 800773e:	2a25      	cmp	r2, #37	@ 0x25
 8007740:	d1f9      	bne.n	8007736 <_vfiprintf_r+0x7a>
 8007742:	ebba 0b04 	subs.w	fp, sl, r4
 8007746:	d00b      	beq.n	8007760 <_vfiprintf_r+0xa4>
 8007748:	465b      	mov	r3, fp
 800774a:	4622      	mov	r2, r4
 800774c:	4629      	mov	r1, r5
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ffa2 	bl	8007698 <__sfputs_r>
 8007754:	3001      	adds	r0, #1
 8007756:	f000 80a7 	beq.w	80078a8 <_vfiprintf_r+0x1ec>
 800775a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775c:	445a      	add	r2, fp
 800775e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007760:	f89a 3000 	ldrb.w	r3, [sl]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 809f 	beq.w	80078a8 <_vfiprintf_r+0x1ec>
 800776a:	2300      	movs	r3, #0
 800776c:	f04f 32ff 	mov.w	r2, #4294967295
 8007770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007774:	f10a 0a01 	add.w	sl, sl, #1
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	9307      	str	r3, [sp, #28]
 800777c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007780:	931a      	str	r3, [sp, #104]	@ 0x68
 8007782:	4654      	mov	r4, sl
 8007784:	2205      	movs	r2, #5
 8007786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778a:	4853      	ldr	r0, [pc, #332]	@ (80078d8 <_vfiprintf_r+0x21c>)
 800778c:	f7f8 fd40 	bl	8000210 <memchr>
 8007790:	9a04      	ldr	r2, [sp, #16]
 8007792:	b9d8      	cbnz	r0, 80077cc <_vfiprintf_r+0x110>
 8007794:	06d1      	lsls	r1, r2, #27
 8007796:	bf44      	itt	mi
 8007798:	2320      	movmi	r3, #32
 800779a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800779e:	0713      	lsls	r3, r2, #28
 80077a0:	bf44      	itt	mi
 80077a2:	232b      	movmi	r3, #43	@ 0x2b
 80077a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ae:	d015      	beq.n	80077dc <_vfiprintf_r+0x120>
 80077b0:	9a07      	ldr	r2, [sp, #28]
 80077b2:	4654      	mov	r4, sl
 80077b4:	2000      	movs	r0, #0
 80077b6:	f04f 0c0a 	mov.w	ip, #10
 80077ba:	4621      	mov	r1, r4
 80077bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c0:	3b30      	subs	r3, #48	@ 0x30
 80077c2:	2b09      	cmp	r3, #9
 80077c4:	d94b      	bls.n	800785e <_vfiprintf_r+0x1a2>
 80077c6:	b1b0      	cbz	r0, 80077f6 <_vfiprintf_r+0x13a>
 80077c8:	9207      	str	r2, [sp, #28]
 80077ca:	e014      	b.n	80077f6 <_vfiprintf_r+0x13a>
 80077cc:	eba0 0308 	sub.w	r3, r0, r8
 80077d0:	fa09 f303 	lsl.w	r3, r9, r3
 80077d4:	4313      	orrs	r3, r2
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	46a2      	mov	sl, r4
 80077da:	e7d2      	b.n	8007782 <_vfiprintf_r+0xc6>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	1d19      	adds	r1, r3, #4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	9103      	str	r1, [sp, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfbb      	ittet	lt
 80077e8:	425b      	neglt	r3, r3
 80077ea:	f042 0202 	orrlt.w	r2, r2, #2
 80077ee:	9307      	strge	r3, [sp, #28]
 80077f0:	9307      	strlt	r3, [sp, #28]
 80077f2:	bfb8      	it	lt
 80077f4:	9204      	strlt	r2, [sp, #16]
 80077f6:	7823      	ldrb	r3, [r4, #0]
 80077f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fa:	d10a      	bne.n	8007812 <_vfiprintf_r+0x156>
 80077fc:	7863      	ldrb	r3, [r4, #1]
 80077fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007800:	d132      	bne.n	8007868 <_vfiprintf_r+0x1ac>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	9203      	str	r2, [sp, #12]
 800780a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800780e:	3402      	adds	r4, #2
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078e8 <_vfiprintf_r+0x22c>
 8007816:	7821      	ldrb	r1, [r4, #0]
 8007818:	2203      	movs	r2, #3
 800781a:	4650      	mov	r0, sl
 800781c:	f7f8 fcf8 	bl	8000210 <memchr>
 8007820:	b138      	cbz	r0, 8007832 <_vfiprintf_r+0x176>
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	eba0 000a 	sub.w	r0, r0, sl
 8007828:	2240      	movs	r2, #64	@ 0x40
 800782a:	4082      	lsls	r2, r0
 800782c:	4313      	orrs	r3, r2
 800782e:	3401      	adds	r4, #1
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007836:	4829      	ldr	r0, [pc, #164]	@ (80078dc <_vfiprintf_r+0x220>)
 8007838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800783c:	2206      	movs	r2, #6
 800783e:	f7f8 fce7 	bl	8000210 <memchr>
 8007842:	2800      	cmp	r0, #0
 8007844:	d03f      	beq.n	80078c6 <_vfiprintf_r+0x20a>
 8007846:	4b26      	ldr	r3, [pc, #152]	@ (80078e0 <_vfiprintf_r+0x224>)
 8007848:	bb1b      	cbnz	r3, 8007892 <_vfiprintf_r+0x1d6>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	3307      	adds	r3, #7
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	3308      	adds	r3, #8
 8007854:	9303      	str	r3, [sp, #12]
 8007856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007858:	443b      	add	r3, r7
 800785a:	9309      	str	r3, [sp, #36]	@ 0x24
 800785c:	e76a      	b.n	8007734 <_vfiprintf_r+0x78>
 800785e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007862:	460c      	mov	r4, r1
 8007864:	2001      	movs	r0, #1
 8007866:	e7a8      	b.n	80077ba <_vfiprintf_r+0xfe>
 8007868:	2300      	movs	r3, #0
 800786a:	3401      	adds	r4, #1
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	4619      	mov	r1, r3
 8007870:	f04f 0c0a 	mov.w	ip, #10
 8007874:	4620      	mov	r0, r4
 8007876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787a:	3a30      	subs	r2, #48	@ 0x30
 800787c:	2a09      	cmp	r2, #9
 800787e:	d903      	bls.n	8007888 <_vfiprintf_r+0x1cc>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0c6      	beq.n	8007812 <_vfiprintf_r+0x156>
 8007884:	9105      	str	r1, [sp, #20]
 8007886:	e7c4      	b.n	8007812 <_vfiprintf_r+0x156>
 8007888:	fb0c 2101 	mla	r1, ip, r1, r2
 800788c:	4604      	mov	r4, r0
 800788e:	2301      	movs	r3, #1
 8007890:	e7f0      	b.n	8007874 <_vfiprintf_r+0x1b8>
 8007892:	ab03      	add	r3, sp, #12
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	462a      	mov	r2, r5
 8007898:	4b12      	ldr	r3, [pc, #72]	@ (80078e4 <_vfiprintf_r+0x228>)
 800789a:	a904      	add	r1, sp, #16
 800789c:	4630      	mov	r0, r6
 800789e:	f7fb febb 	bl	8003618 <_printf_float>
 80078a2:	4607      	mov	r7, r0
 80078a4:	1c78      	adds	r0, r7, #1
 80078a6:	d1d6      	bne.n	8007856 <_vfiprintf_r+0x19a>
 80078a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078aa:	07d9      	lsls	r1, r3, #31
 80078ac:	d405      	bmi.n	80078ba <_vfiprintf_r+0x1fe>
 80078ae:	89ab      	ldrh	r3, [r5, #12]
 80078b0:	059a      	lsls	r2, r3, #22
 80078b2:	d402      	bmi.n	80078ba <_vfiprintf_r+0x1fe>
 80078b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078b6:	f7fc fe1f 	bl	80044f8 <__retarget_lock_release_recursive>
 80078ba:	89ab      	ldrh	r3, [r5, #12]
 80078bc:	065b      	lsls	r3, r3, #25
 80078be:	f53f af1f 	bmi.w	8007700 <_vfiprintf_r+0x44>
 80078c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078c4:	e71e      	b.n	8007704 <_vfiprintf_r+0x48>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <_vfiprintf_r+0x228>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7fc f939 	bl	8003b48 <_printf_i>
 80078d6:	e7e4      	b.n	80078a2 <_vfiprintf_r+0x1e6>
 80078d8:	08007f51 	.word	0x08007f51
 80078dc:	08007f5b 	.word	0x08007f5b
 80078e0:	08003619 	.word	0x08003619
 80078e4:	08007699 	.word	0x08007699
 80078e8:	08007f57 	.word	0x08007f57

080078ec <__swbuf_r>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	460e      	mov	r6, r1
 80078f0:	4614      	mov	r4, r2
 80078f2:	4605      	mov	r5, r0
 80078f4:	b118      	cbz	r0, 80078fe <__swbuf_r+0x12>
 80078f6:	6a03      	ldr	r3, [r0, #32]
 80078f8:	b90b      	cbnz	r3, 80078fe <__swbuf_r+0x12>
 80078fa:	f7fc fce5 	bl	80042c8 <__sinit>
 80078fe:	69a3      	ldr	r3, [r4, #24]
 8007900:	60a3      	str	r3, [r4, #8]
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	071a      	lsls	r2, r3, #28
 8007906:	d501      	bpl.n	800790c <__swbuf_r+0x20>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b943      	cbnz	r3, 800791e <__swbuf_r+0x32>
 800790c:	4621      	mov	r1, r4
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f82a 	bl	8007968 <__swsetup_r>
 8007914:	b118      	cbz	r0, 800791e <__swbuf_r+0x32>
 8007916:	f04f 37ff 	mov.w	r7, #4294967295
 800791a:	4638      	mov	r0, r7
 800791c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	1a98      	subs	r0, r3, r2
 8007924:	6963      	ldr	r3, [r4, #20]
 8007926:	b2f6      	uxtb	r6, r6
 8007928:	4283      	cmp	r3, r0
 800792a:	4637      	mov	r7, r6
 800792c:	dc05      	bgt.n	800793a <__swbuf_r+0x4e>
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f7ff fa47 	bl	8006dc4 <_fflush_r>
 8007936:	2800      	cmp	r0, #0
 8007938:	d1ed      	bne.n	8007916 <__swbuf_r+0x2a>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	3b01      	subs	r3, #1
 800793e:	60a3      	str	r3, [r4, #8]
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	701e      	strb	r6, [r3, #0]
 8007948:	6962      	ldr	r2, [r4, #20]
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	429a      	cmp	r2, r3
 800794e:	d004      	beq.n	800795a <__swbuf_r+0x6e>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	07db      	lsls	r3, r3, #31
 8007954:	d5e1      	bpl.n	800791a <__swbuf_r+0x2e>
 8007956:	2e0a      	cmp	r6, #10
 8007958:	d1df      	bne.n	800791a <__swbuf_r+0x2e>
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f7ff fa31 	bl	8006dc4 <_fflush_r>
 8007962:	2800      	cmp	r0, #0
 8007964:	d0d9      	beq.n	800791a <__swbuf_r+0x2e>
 8007966:	e7d6      	b.n	8007916 <__swbuf_r+0x2a>

08007968 <__swsetup_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4b29      	ldr	r3, [pc, #164]	@ (8007a10 <__swsetup_r+0xa8>)
 800796c:	4605      	mov	r5, r0
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	460c      	mov	r4, r1
 8007972:	b118      	cbz	r0, 800797c <__swsetup_r+0x14>
 8007974:	6a03      	ldr	r3, [r0, #32]
 8007976:	b90b      	cbnz	r3, 800797c <__swsetup_r+0x14>
 8007978:	f7fc fca6 	bl	80042c8 <__sinit>
 800797c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007980:	0719      	lsls	r1, r3, #28
 8007982:	d422      	bmi.n	80079ca <__swsetup_r+0x62>
 8007984:	06da      	lsls	r2, r3, #27
 8007986:	d407      	bmi.n	8007998 <__swsetup_r+0x30>
 8007988:	2209      	movs	r2, #9
 800798a:	602a      	str	r2, [r5, #0]
 800798c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	f04f 30ff 	mov.w	r0, #4294967295
 8007996:	e033      	b.n	8007a00 <__swsetup_r+0x98>
 8007998:	0758      	lsls	r0, r3, #29
 800799a:	d512      	bpl.n	80079c2 <__swsetup_r+0x5a>
 800799c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800799e:	b141      	cbz	r1, 80079b2 <__swsetup_r+0x4a>
 80079a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <__swsetup_r+0x46>
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7fd fbf9 	bl	80051a0 <_free_r>
 80079ae:	2300      	movs	r3, #0
 80079b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f043 0308 	orr.w	r3, r3, #8
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	b94b      	cbnz	r3, 80079e2 <__swsetup_r+0x7a>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079d8:	d003      	beq.n	80079e2 <__swsetup_r+0x7a>
 80079da:	4621      	mov	r1, r4
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f883 	bl	8007ae8 <__smakebuf_r>
 80079e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e6:	f013 0201 	ands.w	r2, r3, #1
 80079ea:	d00a      	beq.n	8007a02 <__swsetup_r+0x9a>
 80079ec:	2200      	movs	r2, #0
 80079ee:	60a2      	str	r2, [r4, #8]
 80079f0:	6962      	ldr	r2, [r4, #20]
 80079f2:	4252      	negs	r2, r2
 80079f4:	61a2      	str	r2, [r4, #24]
 80079f6:	6922      	ldr	r2, [r4, #16]
 80079f8:	b942      	cbnz	r2, 8007a0c <__swsetup_r+0xa4>
 80079fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80079fe:	d1c5      	bne.n	800798c <__swsetup_r+0x24>
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	0799      	lsls	r1, r3, #30
 8007a04:	bf58      	it	pl
 8007a06:	6962      	ldrpl	r2, [r4, #20]
 8007a08:	60a2      	str	r2, [r4, #8]
 8007a0a:	e7f4      	b.n	80079f6 <__swsetup_r+0x8e>
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e7f7      	b.n	8007a00 <__swsetup_r+0x98>
 8007a10:	20000018 	.word	0x20000018

08007a14 <_raise_r>:
 8007a14:	291f      	cmp	r1, #31
 8007a16:	b538      	push	{r3, r4, r5, lr}
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	d904      	bls.n	8007a28 <_raise_r+0x14>
 8007a1e:	2316      	movs	r3, #22
 8007a20:	6003      	str	r3, [r0, #0]
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a2a:	b112      	cbz	r2, 8007a32 <_raise_r+0x1e>
 8007a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a30:	b94b      	cbnz	r3, 8007a46 <_raise_r+0x32>
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f830 	bl	8007a98 <_getpid_r>
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a42:	f000 b817 	b.w	8007a74 <_kill_r>
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d00a      	beq.n	8007a60 <_raise_r+0x4c>
 8007a4a:	1c59      	adds	r1, r3, #1
 8007a4c:	d103      	bne.n	8007a56 <_raise_r+0x42>
 8007a4e:	2316      	movs	r3, #22
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	2001      	movs	r0, #1
 8007a54:	e7e7      	b.n	8007a26 <_raise_r+0x12>
 8007a56:	2100      	movs	r1, #0
 8007a58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4798      	blx	r3
 8007a60:	2000      	movs	r0, #0
 8007a62:	e7e0      	b.n	8007a26 <_raise_r+0x12>

08007a64 <raise>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	@ (8007a70 <raise+0xc>)
 8007a66:	4601      	mov	r1, r0
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f7ff bfd3 	b.w	8007a14 <_raise_r>
 8007a6e:	bf00      	nop
 8007a70:	20000018 	.word	0x20000018

08007a74 <_kill_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d07      	ldr	r5, [pc, #28]	@ (8007a94 <_kill_r+0x20>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	f7f9 fcf6 	bl	8001472 <_kill>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d102      	bne.n	8007a90 <_kill_r+0x1c>
 8007a8a:	682b      	ldr	r3, [r5, #0]
 8007a8c:	b103      	cbz	r3, 8007a90 <_kill_r+0x1c>
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
 8007a92:	bf00      	nop
 8007a94:	20000470 	.word	0x20000470

08007a98 <_getpid_r>:
 8007a98:	f7f9 bce3 	b.w	8001462 <_getpid>

08007a9c <__swhatbuf_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	b096      	sub	sp, #88	@ 0x58
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	461e      	mov	r6, r3
 8007aac:	da0d      	bge.n	8007aca <__swhatbuf_r+0x2e>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ab4:	f04f 0100 	mov.w	r1, #0
 8007ab8:	bf14      	ite	ne
 8007aba:	2340      	movne	r3, #64	@ 0x40
 8007abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	6031      	str	r1, [r6, #0]
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	b016      	add	sp, #88	@ 0x58
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	466a      	mov	r2, sp
 8007acc:	f000 f848 	bl	8007b60 <_fstat_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	dbec      	blt.n	8007aae <__swhatbuf_r+0x12>
 8007ad4:	9901      	ldr	r1, [sp, #4]
 8007ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ade:	4259      	negs	r1, r3
 8007ae0:	4159      	adcs	r1, r3
 8007ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ae6:	e7eb      	b.n	8007ac0 <__swhatbuf_r+0x24>

08007ae8 <__smakebuf_r>:
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aec:	079d      	lsls	r5, r3, #30
 8007aee:	4606      	mov	r6, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	d507      	bpl.n	8007b04 <__smakebuf_r+0x1c>
 8007af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	6123      	str	r3, [r4, #16]
 8007afc:	2301      	movs	r3, #1
 8007afe:	6163      	str	r3, [r4, #20]
 8007b00:	b003      	add	sp, #12
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b04:	ab01      	add	r3, sp, #4
 8007b06:	466a      	mov	r2, sp
 8007b08:	f7ff ffc8 	bl	8007a9c <__swhatbuf_r>
 8007b0c:	9f00      	ldr	r7, [sp, #0]
 8007b0e:	4605      	mov	r5, r0
 8007b10:	4639      	mov	r1, r7
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7fd fbb8 	bl	8005288 <_malloc_r>
 8007b18:	b948      	cbnz	r0, 8007b2e <__smakebuf_r+0x46>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	059a      	lsls	r2, r3, #22
 8007b20:	d4ee      	bmi.n	8007b00 <__smakebuf_r+0x18>
 8007b22:	f023 0303 	bic.w	r3, r3, #3
 8007b26:	f043 0302 	orr.w	r3, r3, #2
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	e7e2      	b.n	8007af4 <__smakebuf_r+0xc>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	6020      	str	r0, [r4, #0]
 8007b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b3e:	b15b      	cbz	r3, 8007b58 <__smakebuf_r+0x70>
 8007b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f81d 	bl	8007b84 <_isatty_r>
 8007b4a:	b128      	cbz	r0, 8007b58 <__smakebuf_r+0x70>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	431d      	orrs	r5, r3
 8007b5c:	81a5      	strh	r5, [r4, #12]
 8007b5e:	e7cf      	b.n	8007b00 <__smakebuf_r+0x18>

08007b60 <_fstat_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	@ (8007b80 <_fstat_r+0x20>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	f7f9 fce0 	bl	8001532 <_fstat>
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	d102      	bne.n	8007b7c <_fstat_r+0x1c>
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	b103      	cbz	r3, 8007b7c <_fstat_r+0x1c>
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000470 	.word	0x20000470

08007b84 <_isatty_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	4d06      	ldr	r5, [pc, #24]	@ (8007ba0 <_isatty_r+0x1c>)
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	f7f9 fcdf 	bl	8001552 <_isatty>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_isatty_r+0x1a>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_isatty_r+0x1a>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	20000470 	.word	0x20000470

08007ba4 <_init>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr

08007bb0 <_fini>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr
