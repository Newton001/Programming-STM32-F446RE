
Project_RFID_SD_Card_Buzzer_ADC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e4  080063e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080063ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000068  08006454  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08006454  000084d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdad  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c8  00000000  00000000  00014e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00017310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b7  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fe9  00000000  00000000  0001873f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ac  00000000  00000000  0003b728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd26b  00000000  00000000  0004acd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117f3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f4  00000000  00000000  00117f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0011b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059c8 	.word	0x080059c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080059c8 	.word	0x080059c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b35      	ldr	r3, [pc, #212]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a34      	ldr	r2, [pc, #208]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2d      	ldr	r2, [pc, #180]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <MX_GPIO_Init+0xf0>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <MX_GPIO_Init+0xf0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000610:	4820      	ldr	r0, [pc, #128]	@ (8000694 <MX_GPIO_Init+0xf4>)
 8000612:	f001 f8d1 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin|LCD_CS_N_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 800061c:	481e      	ldr	r0, [pc, #120]	@ (8000698 <MX_GPIO_Init+0xf8>)
 800061e:	f001 f8cb 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000628:	481c      	ldr	r0, [pc, #112]	@ (800069c <MX_GPIO_Init+0xfc>)
 800062a:	f001 f8c5 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 800062e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <MX_GPIO_Init+0xf4>)
 8000648:	f000 ff22 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFRC522_CS_N_Pin|LCD_CS_N_Pin;
 800064c:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8000650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_GPIO_Init+0xf8>)
 8000666:	f000 ff13 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFRC522_RESET_Pin;
 800066a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MFRC522_RESET_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4806      	ldr	r0, [pc, #24]	@ (800069c <MX_GPIO_Init+0xfc>)
 8000684:	f000 ff04 	bl	8001490 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800

080006a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a4:	f000 fd78 	bl	8001198 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a8:	f000 f81a 	bl	80006e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ac:	f7ff ff78 	bl	80005a0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006b0:	f000 fcd6 	bl	8001060 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80006b4:	f000 fac8 	bl	8000c48 <MX_SPI1_Init>
	MX_SPI2_Init();
 80006b8:	f000 fafe 	bl	8000cb8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	// Initialize the LCD
	lcd_initialize();
 80006bc:	f000 f88c 	bl	80007d8 <lcd_initialize>

	//Initialize PCD
	PCD_Init();
 80006c0:	f003 fbe2 	bl	8003e88 <PCD_Init>
	printf("Checking for cards...\n");
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <main+0x3c>)
 80006c6:	f004 fad9 	bl	8004c7c <puts>
	HAL_ReadCardUIDAndReadBlocks();
 80006ca:	f000 f8df 	bl	800088c <HAL_ReadCardUIDAndReadBlocks>
	HAL_WriteToBlocks();
 80006ce:	f000 fa07 	bl	8000ae0 <HAL_WriteToBlocks>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Write a value to the register

		HAL_Delay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006d6:	f000 fdd1 	bl	800127c <HAL_Delay>
 80006da:	e7fa      	b.n	80006d2 <main+0x32>
 80006dc:	080059e0 	.word	0x080059e0

080006e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	@ 0x50
 80006e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2234      	movs	r2, #52	@ 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fba4 	bl	8004e3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xb8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xb8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	@ 0x40
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xb8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <SystemClock_Config+0xbc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <SystemClock_Config+0xbc>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <SystemClock_Config+0xbc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fb0d 	bl	8001d74 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000760:	f000 fa6c 	bl	8000c3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f834 	bl	80017ec <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800078a:	f000 fa57 	bl	8000c3c <Error_Handler>
	}
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <_write>:

/* USER CODE BEGIN 4 */

// printf Inclusion on Screen for Debugging
int _write(int fd, char*ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <_write+0x34>)
 80007b8:	f002 fb9c 	bl	8002ef4 <HAL_UART_Transmit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <_write+0x26>
		return len;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	e001      	b.n	80007ca <_write+0x2a>
	else
		return -1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000138 	.word	0x20000138

080007d8 <lcd_initialize>:

// Initialize the LCD_Driver in a few lines

void lcd_initialize(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af02      	add	r7, sp, #8
	lcd_init();
 80007de:	f002 ffcc 	bl	800377a <lcd_init>
	lcd_clear();
 80007e2:	f003 f825 	bl	8003830 <lcd_clear>
	// Set it to some line
	lcd_setLine(127, 0, 127, 31, 1);
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	231f      	movs	r3, #31
 80007ec:	227f      	movs	r2, #127	@ 0x7f
 80007ee:	2100      	movs	r1, #0
 80007f0:	207f      	movs	r0, #127	@ 0x7f
 80007f2:	f003 f8db 	bl	80039ac <lcd_setLine>
	lcd_setLine(0, 0, 0, 31, 1);
 80007f6:	2301      	movs	r3, #1
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	231f      	movs	r3, #31
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2000      	movs	r0, #0
 8000802:	f003 f8d3 	bl	80039ac <lcd_setLine>
	lcd_setString(4, 3, "System Initialization Test ", LCD_FONT_8, false);
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	4a17      	ldr	r2, [pc, #92]	@ (800086c <lcd_initialize+0x94>)
 800080e:	2103      	movs	r1, #3
 8000810:	2004      	movs	r0, #4
 8000812:	f003 f899 	bl	8003948 <lcd_setString>
	lcd_setString(4, 15, "I2C connection Done", LCD_FONT_8, false);
 8000816:	2300      	movs	r3, #0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <lcd_initialize+0x98>)
 800081e:	210f      	movs	r1, #15
 8000820:	2004      	movs	r0, #4
 8000822:	f003 f891 	bl	8003948 <lcd_setString>
	lcd_setString(4, 25, "Accelerometer connection Done", LCD_FONT_8, false);
 8000826:	2300      	movs	r3, #0
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2300      	movs	r3, #0
 800082c:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <lcd_initialize+0x9c>)
 800082e:	2119      	movs	r1, #25
 8000830:	2004      	movs	r0, #4
 8000832:	f003 f889 	bl	8003948 <lcd_setString>
	lcd_show();
 8000836:	f003 f9d7 	bl	8003be8 <lcd_show>
	HAL_Delay(2500);
 800083a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800083e:	f000 fd1d 	bl	800127c <HAL_Delay>
	lcd_clear();
 8000842:	f002 fff5 	bl	8003830 <lcd_clear>

	puts("******** LETS PRACTICE ******** \r\n");
 8000846:	480c      	ldr	r0, [pc, #48]	@ (8000878 <lcd_initialize+0xa0>)
 8000848:	f004 fa18 	bl	8004c7c <puts>
	puts("- Uart connection ... Done\r\n");
 800084c:	480b      	ldr	r0, [pc, #44]	@ (800087c <lcd_initialize+0xa4>)
 800084e:	f004 fa15 	bl	8004c7c <puts>
	puts("- printf retargeting to uart ... Done\r\n");
 8000852:	480b      	ldr	r0, [pc, #44]	@ (8000880 <lcd_initialize+0xa8>)
 8000854:	f004 fa12 	bl	8004c7c <puts>
	puts("- Temperature Sensor connection ... Done\r\n");
 8000858:	480a      	ldr	r0, [pc, #40]	@ (8000884 <lcd_initialize+0xac>)
 800085a:	f004 fa0f 	bl	8004c7c <puts>
	puts("***************************** \r\n");
 800085e:	480a      	ldr	r0, [pc, #40]	@ (8000888 <lcd_initialize+0xb0>)
 8000860:	f004 fa0c 	bl	8004c7c <puts>
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080059f8 	.word	0x080059f8
 8000870:	08005a14 	.word	0x08005a14
 8000874:	08005a28 	.word	0x08005a28
 8000878:	08005a48 	.word	0x08005a48
 800087c:	08005a6c 	.word	0x08005a6c
 8000880:	08005a8c 	.word	0x08005a8c
 8000884:	08005ab4 	.word	0x08005ab4
 8000888:	08005ae0 	.word	0x08005ae0

0800088c <HAL_ReadCardUIDAndReadBlocks>:

// Test the Registers

void HAL_ReadCardUIDAndReadBlocks() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0
    Uid uid;
    MIFARE_Key key = { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} }; // Default key
 8000892:	4a82      	ldr	r2, [pc, #520]	@ (8000a9c <HAL_ReadCardUIDAndReadBlocks+0x210>)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	6018      	str	r0, [r3, #0]
 800089e:	3304      	adds	r3, #4
 80008a0:	8019      	strh	r1, [r3, #0]
    uint8_t buffer[18];
    uint8_t bufferSize = sizeof(buffer);
 80008a2:	2312      	movs	r3, #18
 80008a4:	70fb      	strb	r3, [r7, #3]
    uint8_t status;

    printf("Starting RFID card detection and block reading...\n");
 80008a6:	487e      	ldr	r0, [pc, #504]	@ (8000aa0 <HAL_ReadCardUIDAndReadBlocks+0x214>)
 80008a8:	f004 f9e8 	bl	8004c7c <puts>

    // Check for a new card
    if (!PICC_IsNewCardPresent()) {
 80008ac:	f003 ffc5 	bl	800483a <PICC_IsNewCardPresent>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f083 0301 	eor.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <HAL_ReadCardUIDAndReadBlocks+0x38>
        printf("No new card detected.\n");
 80008bc:	4879      	ldr	r0, [pc, #484]	@ (8000aa4 <HAL_ReadCardUIDAndReadBlocks+0x218>)
 80008be:	f004 f9dd 	bl	8004c7c <puts>
        return;
 80008c2:	e0e8      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    if (!PICC_ReadCardSerial(&uid)) {
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 ffd9 	bl	8004880 <PICC_ReadCardSerial>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f083 0301 	eor.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <HAL_ReadCardUIDAndReadBlocks+0x56>
        printf("Failed to read card serial.\n");
 80008da:	4873      	ldr	r0, [pc, #460]	@ (8000aa8 <HAL_ReadCardUIDAndReadBlocks+0x21c>)
 80008dc:	f004 f9ce 	bl	8004c7c <puts>
        return;
 80008e0:	e0d9      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    // Output UID
    printf("Card UID: ");
 80008e2:	4872      	ldr	r0, [pc, #456]	@ (8000aac <HAL_ReadCardUIDAndReadBlocks+0x220>)
 80008e4:	f004 f95a 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < uid.size; i++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80008ee:	e00e      	b.n	800090e <HAL_ReadCardUIDAndReadBlocks+0x82>
        printf("%02X ", uid.uidByte[i]);
 80008f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f4:	3330      	adds	r3, #48	@ 0x30
 80008f6:	443b      	add	r3, r7
 80008f8:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 80008fc:	4619      	mov	r1, r3
 80008fe:	486c      	ldr	r0, [pc, #432]	@ (8000ab0 <HAL_ReadCardUIDAndReadBlocks+0x224>)
 8000900:	f004 f94c 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < uid.size; i++) {
 8000904:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000908:	3301      	adds	r3, #1
 800090a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800090e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000912:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000916:	429a      	cmp	r2, r3
 8000918:	d3ea      	bcc.n	80008f0 <HAL_ReadCardUIDAndReadBlocks+0x64>
    }
    printf("\n");
 800091a:	200a      	movs	r0, #10
 800091c:	f004 f950 	bl	8004bc0 <putchar>

    // Authenticate and read block 4
    printf("Authenticating block 4...\n");
 8000920:	4864      	ldr	r0, [pc, #400]	@ (8000ab4 <HAL_ReadCardUIDAndReadBlocks+0x228>)
 8000922:	f004 f9ab 	bl	8004c7c <puts>
    status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, 4, &key, &uid);
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	f107 0218 	add.w	r2, r7, #24
 800092e:	2104      	movs	r1, #4
 8000930:	2060      	movs	r0, #96	@ 0x60
 8000932:	f003 fef8 	bl	8004726 <PCD_Authenticate>
 8000936:	4603      	mov	r3, r0
 8000938:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    if (status != STATUS_OK) {
 800093c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00c      	beq.n	800095e <HAL_ReadCardUIDAndReadBlocks+0xd2>
        printf("Authentication failed for block 4: %s\n", GetStatusCodeName(status));
 8000944:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f819 	bl	8004980 <GetStatusCodeName>
 800094e:	4603      	mov	r3, r0
 8000950:	4619      	mov	r1, r3
 8000952:	4859      	ldr	r0, [pc, #356]	@ (8000ab8 <HAL_ReadCardUIDAndReadBlocks+0x22c>)
 8000954:	f004 f922 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000958:	f003 ff2f 	bl	80047ba <PCD_StopCrypto1>
        return;
 800095c:	e09b      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    printf("Reading block 4...\n");
 800095e:	4857      	ldr	r0, [pc, #348]	@ (8000abc <HAL_ReadCardUIDAndReadBlocks+0x230>)
 8000960:	f004 f98c 	bl	8004c7c <puts>
    status = MIFARE_Read(4, buffer, &bufferSize);
 8000964:	1cfa      	adds	r2, r7, #3
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	4619      	mov	r1, r3
 800096a:	2004      	movs	r0, #4
 800096c:	f003 ff2d 	bl	80047ca <MIFARE_Read>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    if (status != STATUS_OK) {
 8000976:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800097a:	2b01      	cmp	r3, #1
 800097c:	d00c      	beq.n	8000998 <HAL_ReadCardUIDAndReadBlocks+0x10c>
        printf("Read failed for block 4: %s\n", GetStatusCodeName(status));
 800097e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fffc 	bl	8004980 <GetStatusCodeName>
 8000988:	4603      	mov	r3, r0
 800098a:	4619      	mov	r1, r3
 800098c:	484c      	ldr	r0, [pc, #304]	@ (8000ac0 <HAL_ReadCardUIDAndReadBlocks+0x234>)
 800098e:	f004 f905 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000992:	f003 ff12 	bl	80047ba <PCD_StopCrypto1>
        return;
 8000996:	e07e      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    printf("Block 4 Data: ");
 8000998:	484a      	ldr	r0, [pc, #296]	@ (8000ac4 <HAL_ReadCardUIDAndReadBlocks+0x238>)
 800099a:	f004 f8ff 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < bufferSize; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80009a4:	e00e      	b.n	80009c4 <HAL_ReadCardUIDAndReadBlocks+0x138>
        printf("%02X ", buffer[i]);
 80009a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009aa:	3330      	adds	r3, #48	@ 0x30
 80009ac:	443b      	add	r3, r7
 80009ae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80009b2:	4619      	mov	r1, r3
 80009b4:	483e      	ldr	r0, [pc, #248]	@ (8000ab0 <HAL_ReadCardUIDAndReadBlocks+0x224>)
 80009b6:	f004 f8f1 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < bufferSize; i++) {
 80009ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009be:	3301      	adds	r3, #1
 80009c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3eb      	bcc.n	80009a6 <HAL_ReadCardUIDAndReadBlocks+0x11a>
    }
    printf("\n");
 80009ce:	200a      	movs	r0, #10
 80009d0:	f004 f8f6 	bl	8004bc0 <putchar>

    // Authenticate and read block 7
    printf("Authenticating block 7...\n");
 80009d4:	483c      	ldr	r0, [pc, #240]	@ (8000ac8 <HAL_ReadCardUIDAndReadBlocks+0x23c>)
 80009d6:	f004 f951 	bl	8004c7c <puts>
    status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, &key, &uid);
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	f107 0218 	add.w	r2, r7, #24
 80009e2:	2107      	movs	r1, #7
 80009e4:	2060      	movs	r0, #96	@ 0x60
 80009e6:	f003 fe9e 	bl	8004726 <PCD_Authenticate>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    if (status != STATUS_OK) {
 80009f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00c      	beq.n	8000a12 <HAL_ReadCardUIDAndReadBlocks+0x186>
        printf("Authentication failed for block 7: %s\n", GetStatusCodeName(status));
 80009f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 ffbf 	bl	8004980 <GetStatusCodeName>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4831      	ldr	r0, [pc, #196]	@ (8000acc <HAL_ReadCardUIDAndReadBlocks+0x240>)
 8000a08:	f004 f8c8 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000a0c:	f003 fed5 	bl	80047ba <PCD_StopCrypto1>
        return;
 8000a10:	e041      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    printf("Reading block 7...\n");
 8000a12:	482f      	ldr	r0, [pc, #188]	@ (8000ad0 <HAL_ReadCardUIDAndReadBlocks+0x244>)
 8000a14:	f004 f932 	bl	8004c7c <puts>
    bufferSize = sizeof(buffer); // Reset buffer size
 8000a18:	2312      	movs	r3, #18
 8000a1a:	70fb      	strb	r3, [r7, #3]
    status = MIFARE_Read(7, buffer, &bufferSize);
 8000a1c:	1cfa      	adds	r2, r7, #3
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	2007      	movs	r0, #7
 8000a24:	f003 fed1 	bl	80047ca <MIFARE_Read>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    if (status != STATUS_OK) {
 8000a2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d00c      	beq.n	8000a50 <HAL_ReadCardUIDAndReadBlocks+0x1c4>
        printf("Read failed for block 7: %s\n", GetStatusCodeName(status));
 8000a36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 ffa0 	bl	8004980 <GetStatusCodeName>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4823      	ldr	r0, [pc, #140]	@ (8000ad4 <HAL_ReadCardUIDAndReadBlocks+0x248>)
 8000a46:	f004 f8a9 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000a4a:	f003 feb6 	bl	80047ba <PCD_StopCrypto1>
        return;
 8000a4e:	e022      	b.n	8000a96 <HAL_ReadCardUIDAndReadBlocks+0x20a>
    }

    printf("Block 7 Data: ");
 8000a50:	4821      	ldr	r0, [pc, #132]	@ (8000ad8 <HAL_ReadCardUIDAndReadBlocks+0x24c>)
 8000a52:	f004 f8a3 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < bufferSize; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000a5c:	e00e      	b.n	8000a7c <HAL_ReadCardUIDAndReadBlocks+0x1f0>
        printf("%02X ", buffer[i]);
 8000a5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a62:	3330      	adds	r3, #48	@ 0x30
 8000a64:	443b      	add	r3, r7
 8000a66:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	@ (8000ab0 <HAL_ReadCardUIDAndReadBlocks+0x224>)
 8000a6e:	f004 f895 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < bufferSize; i++) {
 8000a72:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a76:	3301      	adds	r3, #1
 8000a78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3eb      	bcc.n	8000a5e <HAL_ReadCardUIDAndReadBlocks+0x1d2>
    }
    printf("\n");
 8000a86:	200a      	movs	r0, #10
 8000a88:	f004 f89a 	bl	8004bc0 <putchar>

    // Stop crypto operations
    PCD_StopCrypto1();
 8000a8c:	f003 fe95 	bl	80047ba <PCD_StopCrypto1>
    printf("Finished reading blocks 4 and 7.\n");
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_ReadCardUIDAndReadBlocks+0x250>)
 8000a92:	f004 f8f3 	bl	8004c7c <puts>
}
 8000a96:	3730      	adds	r7, #48	@ 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08005cb4 	.word	0x08005cb4
 8000aa0:	08005b04 	.word	0x08005b04
 8000aa4:	08005b38 	.word	0x08005b38
 8000aa8:	08005b50 	.word	0x08005b50
 8000aac:	08005b6c 	.word	0x08005b6c
 8000ab0:	08005b78 	.word	0x08005b78
 8000ab4:	08005b80 	.word	0x08005b80
 8000ab8:	08005b9c 	.word	0x08005b9c
 8000abc:	08005bc4 	.word	0x08005bc4
 8000ac0:	08005bd8 	.word	0x08005bd8
 8000ac4:	08005bf8 	.word	0x08005bf8
 8000ac8:	08005c08 	.word	0x08005c08
 8000acc:	08005c24 	.word	0x08005c24
 8000ad0:	08005c4c 	.word	0x08005c4c
 8000ad4:	08005c60 	.word	0x08005c60
 8000ad8:	08005c80 	.word	0x08005c80
 8000adc:	08005c90 	.word	0x08005c90

08000ae0 <HAL_WriteToBlocks>:


void HAL_WriteToBlocks() {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b08b      	sub	sp, #44	@ 0x2c
 8000ae4:	af00      	add	r7, sp, #0
    Uid uid;
    MIFARE_Key key = { {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} }; // Default key
 8000ae6:	4a48      	ldr	r2, [pc, #288]	@ (8000c08 <HAL_WriteToBlocks+0x128>)
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	6018      	str	r0, [r3, #0]
 8000af2:	3304      	adds	r3, #4
 8000af4:	8019      	strh	r1, [r3, #0]
    uint8_t writeBufferBlock5[16] = {
 8000af6:	4b45      	ldr	r3, [pc, #276]	@ (8000c0c <HAL_WriteToBlocks+0x12c>)
 8000af8:	463c      	mov	r4, r7
 8000afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            'S', 'e', 's', 's', 'i', 'o', 'n', 's',
            ' ', '2', ' ', ' ', ' ', ' ', ' ', ' '
    }; // Data for block 5: "Sessions 2"
    uint8_t status;

    printf("Starting RFID card detection and block writing...");
 8000b00:	4843      	ldr	r0, [pc, #268]	@ (8000c10 <HAL_WriteToBlocks+0x130>)
 8000b02:	f004 f84b 	bl	8004b9c <iprintf>

    // Check for a new card
    if (!PICC_IsNewCardPresent()) {
 8000b06:	f003 fe98 	bl	800483a <PICC_IsNewCardPresent>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_WriteToBlocks+0x3e>
        printf("No new card detected.");
 8000b16:	483f      	ldr	r0, [pc, #252]	@ (8000c14 <HAL_WriteToBlocks+0x134>)
 8000b18:	f004 f840 	bl	8004b9c <iprintf>
        return;
 8000b1c:	e070      	b.n	8000c00 <HAL_WriteToBlocks+0x120>
    }

    if (!PICC_ReadCardSerial(&uid)) {
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 feac 	bl	8004880 <PICC_ReadCardSerial>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	f083 0301 	eor.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_WriteToBlocks+0x5c>
        printf("Failed to read card serial.");
 8000b34:	4838      	ldr	r0, [pc, #224]	@ (8000c18 <HAL_WriteToBlocks+0x138>)
 8000b36:	f004 f831 	bl	8004b9c <iprintf>
        return;
 8000b3a:	e061      	b.n	8000c00 <HAL_WriteToBlocks+0x120>
    }

    // Output UID
    printf("Card UID: ");
 8000b3c:	4837      	ldr	r0, [pc, #220]	@ (8000c1c <HAL_WriteToBlocks+0x13c>)
 8000b3e:	f004 f82d 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < uid.size; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000b48:	e00e      	b.n	8000b68 <HAL_WriteToBlocks+0x88>
        printf("%02X ", uid.uidByte[i]);
 8000b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b4e:	3328      	adds	r3, #40	@ 0x28
 8000b50:	443b      	add	r3, r7
 8000b52:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4831      	ldr	r0, [pc, #196]	@ (8000c20 <HAL_WriteToBlocks+0x140>)
 8000b5a:	f004 f81f 	bl	8004b9c <iprintf>
    for (uint8_t i = 0; i < uid.size; i++) {
 8000b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b62:	3301      	adds	r3, #1
 8000b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000b68:	7e3b      	ldrb	r3, [r7, #24]
 8000b6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3eb      	bcc.n	8000b4a <HAL_WriteToBlocks+0x6a>
    }
    printf("\n");
 8000b72:	200a      	movs	r0, #10
 8000b74:	f004 f824 	bl	8004bc0 <putchar>

    // Authenticate and write to block 7
    printf("Authenticating block 7...");
 8000b78:	482a      	ldr	r0, [pc, #168]	@ (8000c24 <HAL_WriteToBlocks+0x144>)
 8000b7a:	f004 f80f 	bl	8004b9c <iprintf>
    status = PCD_Authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, &key, &uid);
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	f107 0210 	add.w	r2, r7, #16
 8000b86:	2107      	movs	r1, #7
 8000b88:	2060      	movs	r0, #96	@ 0x60
 8000b8a:	f003 fdcc 	bl	8004726 <PCD_Authenticate>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (status != STATUS_OK) {
 8000b94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d00c      	beq.n	8000bb6 <HAL_WriteToBlocks+0xd6>
        printf("Authentication failed for block 7: %s", GetStatusCodeName(status));
 8000b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 feed 	bl	8004980 <GetStatusCodeName>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481f      	ldr	r0, [pc, #124]	@ (8000c28 <HAL_WriteToBlocks+0x148>)
 8000bac:	f003 fff6 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000bb0:	f003 fe03 	bl	80047ba <PCD_StopCrypto1>
        return;
 8000bb4:	e024      	b.n	8000c00 <HAL_WriteToBlocks+0x120>
    }

    printf("Writing to block 7...");
 8000bb6:	481d      	ldr	r0, [pc, #116]	@ (8000c2c <HAL_WriteToBlocks+0x14c>)
 8000bb8:	f003 fff0 	bl	8004b9c <iprintf>
    status = MIFARE_Write(7, writeBufferBlock5, sizeof(writeBufferBlock5));
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f003 fe70 	bl	80048a8 <MIFARE_Write>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (status != STATUS_OK) {
 8000bce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00c      	beq.n	8000bf0 <HAL_WriteToBlocks+0x110>
        printf("Write failed for block 7: %s", GetStatusCodeName(status));
 8000bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fed0 	bl	8004980 <GetStatusCodeName>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <HAL_WriteToBlocks+0x150>)
 8000be6:	f003 ffd9 	bl	8004b9c <iprintf>
        PCD_StopCrypto1();
 8000bea:	f003 fde6 	bl	80047ba <PCD_StopCrypto1>
        return;
 8000bee:	e007      	b.n	8000c00 <HAL_WriteToBlocks+0x120>
    }

    printf("Data written successfully to block 7.");
 8000bf0:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <HAL_WriteToBlocks+0x154>)
 8000bf2:	f003 ffd3 	bl	8004b9c <iprintf>

    // Stop crypto operations
    PCD_StopCrypto1();
 8000bf6:	f003 fde0 	bl	80047ba <PCD_StopCrypto1>
    printf("Finished writing to block 7.");
 8000bfa:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <HAL_WriteToBlocks+0x158>)
 8000bfc:	f003 ffce 	bl	8004b9c <iprintf>
}
 8000c00:	372c      	adds	r7, #44	@ 0x2c
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd90      	pop	{r4, r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08005cb4 	.word	0x08005cb4
 8000c0c:	08005d98 	.word	0x08005d98
 8000c10:	08005cbc 	.word	0x08005cbc
 8000c14:	08005b38 	.word	0x08005b38
 8000c18:	08005b50 	.word	0x08005b50
 8000c1c:	08005b6c 	.word	0x08005b6c
 8000c20:	08005b78 	.word	0x08005b78
 8000c24:	08005c08 	.word	0x08005c08
 8000c28:	08005cf0 	.word	0x08005cf0
 8000c2c:	08005d18 	.word	0x08005d18
 8000c30:	08005d30 	.word	0x08005d30
 8000c34:	08005d50 	.word	0x08005d50
 8000c38:	08005d78 	.word	0x08005d78

08000c3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c4e:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <MX_SPI1_Init+0x6c>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c60:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c7e:	2218      	movs	r2, #24
 8000c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c96:	220a      	movs	r2, #10
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_SPI1_Init+0x68>)
 8000c9c:	f001 fb08 	bl	80022b0 <HAL_SPI_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f7ff ffc9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000084 	.word	0x20000084
 8000cb4:	40013000 	.word	0x40013000

08000cb8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <MX_SPI2_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000d04:	220a      	movs	r2, #10
 8000d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_SPI2_Init+0x64>)
 8000d0a:	f001 fad1 	bl	80022b0 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d14:	f7ff ff92 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000dc 	.word	0x200000dc
 8000d20:	40003800 	.word	0x40003800

08000d24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a49      	ldr	r2, [pc, #292]	@ (8000e68 <HAL_SPI_MspInit+0x144>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12c      	bne.n	8000da0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	4b48      	ldr	r3, [pc, #288]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a47      	ldr	r2, [pc, #284]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	4b41      	ldr	r3, [pc, #260]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a40      	ldr	r2, [pc, #256]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b3e      	ldr	r3, [pc, #248]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000d7e:	23a0      	movs	r3, #160	@ 0xa0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4835      	ldr	r0, [pc, #212]	@ (8000e70 <HAL_SPI_MspInit+0x14c>)
 8000d9a:	f000 fb79 	bl	8001490 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d9e:	e05f      	b.n	8000e60 <HAL_SPI_MspInit+0x13c>
  else if(spiHandle->Instance==SPI2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a33      	ldr	r2, [pc, #204]	@ (8000e74 <HAL_SPI_MspInit+0x150>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d15a      	bne.n	8000e60 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a27      	ldr	r2, [pc, #156]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a20      	ldr	r2, [pc, #128]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <HAL_SPI_MspInit+0x148>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MFRC522_MOSI_Pin;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MFRC522_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4817      	ldr	r0, [pc, #92]	@ (8000e78 <HAL_SPI_MspInit+0x154>)
 8000e1a:	f000 fb39 	bl	8001490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MFRC522_MISO_Pin;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MFRC522_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	@ (8000e78 <HAL_SPI_MspInit+0x154>)
 8000e3a:	f000 fb29 	bl	8001490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MFRC522_SCLK_Pin;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e50:	2305      	movs	r3, #5
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MFRC522_SCLK_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <HAL_SPI_MspInit+0x158>)
 8000e5c:	f000 fb18 	bl	8001490 <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	@ 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40003800 	.word	0x40003800
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020400 	.word	0x40020400

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f989 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00a      	b.n	8000f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f40:	f3af 8000 	nop.w
 8000f44:	4601      	mov	r1, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf0      	blt.n	8000f40 <_read+0x12>
  }

  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f90:	605a      	str	r2, [r3, #4]
  return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_isatty>:

int _isatty(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f003 ff6a 	bl	8004ed8 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000134 	.word	0x20000134
 8001038:	200004d0 	.word	0x200004d0

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f001 fedc 	bl	8002e54 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f7ff fdcb 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000138 	.word	0x20000138
 80010b0:	40004400 	.word	0x40004400

080010b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <HAL_UART_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_UART_MspInit+0x88>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_UART_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_UART_MspInit+0x8c>)
 800112a:	f000 f9b1 	bl	8001490 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800117c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001148:	f7ff ff78 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001172:	f003 feb7 	bl	8004ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa93 	bl	80006a0 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001188:	080063ec 	.word	0x080063ec
  ldr r2, =_sbss
 800118c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001190:	200004d0 	.word	0x200004d0

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f931 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fe58 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f93b 	bl	8001476 <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f911 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000180 	.word	0x20000180

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000180 	.word	0x20000180

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff47 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff5c 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffb0 	bl	80013e4 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	e165      	b.n	8001778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8154 	bne.w	8001772 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d005      	beq.n	80014e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d130      	bne.n	8001544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80ae 	beq.w	8001772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <HAL_GPIO_Init+0x300>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a5c      	ldr	r2, [pc, #368]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b5a      	ldr	r3, [pc, #360]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001632:	4a58      	ldr	r2, [pc, #352]	@ (8001794 <HAL_GPIO_Init+0x304>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	@ (8001798 <HAL_GPIO_Init+0x308>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x21a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4e      	ldr	r2, [pc, #312]	@ (800179c <HAL_GPIO_Init+0x30c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x216>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4d      	ldr	r2, [pc, #308]	@ (80017a0 <HAL_GPIO_Init+0x310>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x212>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4c      	ldr	r2, [pc, #304]	@ (80017a4 <HAL_GPIO_Init+0x314>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4b      	ldr	r2, [pc, #300]	@ (80017a8 <HAL_GPIO_Init+0x318>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x20a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4a      	ldr	r2, [pc, #296]	@ (80017ac <HAL_GPIO_Init+0x31c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x206>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a49      	ldr	r2, [pc, #292]	@ (80017b0 <HAL_GPIO_Init+0x320>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x202>
 800168e:	2306      	movs	r3, #6
 8001690:	e00c      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 8001692:	2307      	movs	r3, #7
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 8001696:	2305      	movs	r3, #5
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_GPIO_Init+0x304>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f ae96 	bls.w	80014ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0cc      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b68      	ldr	r3, [pc, #416]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d90c      	bls.n	8001828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b65      	ldr	r3, [pc, #404]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a58      	ldr	r2, [pc, #352]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800184a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a52      	ldr	r2, [pc, #328]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d044      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d119      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b3f      	ldr	r3, [pc, #252]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e067      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4934      	ldr	r1, [pc, #208]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fcc2 	bl	8001264 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fcbe 	bl	8001264 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d20c      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f855 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	@ (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc22 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00
 80019a8:	40023800 	.word	0x40023800
 80019ac:	0800600c 	.word	0x0800600c
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_RCC_GetHCLKFreq+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff0 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	0a9b      	lsrs	r3, r3, #10
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	@ (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	0800601c 	.word	0x0800601c

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffdc 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	0b5b      	lsrs	r3, r3, #13
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	@ (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	0800601c 	.word	0x0800601c

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b0a6      	sub	sp, #152	@ 0x98
 8001a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a46:	4bc8      	ldr	r3, [pc, #800]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	f200 817e 	bhi.w	8001d50 <HAL_RCC_GetSysClockFreq+0x330>
 8001a54:	a201      	add	r2, pc, #4	@ (adr r2, 8001a5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5a:	bf00      	nop
 8001a5c:	08001a91 	.word	0x08001a91
 8001a60:	08001d51 	.word	0x08001d51
 8001a64:	08001d51 	.word	0x08001d51
 8001a68:	08001d51 	.word	0x08001d51
 8001a6c:	08001a99 	.word	0x08001a99
 8001a70:	08001d51 	.word	0x08001d51
 8001a74:	08001d51 	.word	0x08001d51
 8001a78:	08001d51 	.word	0x08001d51
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001d51 	.word	0x08001d51
 8001a84:	08001d51 	.word	0x08001d51
 8001a88:	08001d51 	.word	0x08001d51
 8001a8c:	08001c0b 	.word	0x08001c0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4bb6      	ldr	r3, [pc, #728]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a96:	e15f      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a98:	4bb5      	ldr	r3, [pc, #724]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a9e:	e15b      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4bb1      	ldr	r3, [pc, #708]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aac:	4bae      	ldr	r3, [pc, #696]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d031      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab8:	4bab      	ldr	r3, [pc, #684]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	2200      	movs	r2, #0
 8001ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ac2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8001acc:	2300      	movs	r3, #0
 8001ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ad0:	4ba7      	ldr	r3, [pc, #668]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ad2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	fb03 f202 	mul.w	r2, r3, r2
 8001adc:	2300      	movs	r3, #0
 8001ade:	4621      	mov	r1, r4
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4aa2      	ldr	r2, [pc, #648]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ae8:	4621      	mov	r1, r4
 8001aea:	fba1 1202 	umull	r1, r2, r1, r2
 8001aee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001af0:	460a      	mov	r2, r1
 8001af2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001af4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001af6:	4413      	add	r3, r2
 8001af8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001afe:	2200      	movs	r2, #0
 8001b00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001b04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001b0c:	f7fe fbd0 	bl	80002b0 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b1a:	e064      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1c:	4b92      	ldr	r3, [pc, #584]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	2200      	movs	r2, #0
 8001b24:	653b      	str	r3, [r7, #80]	@ 0x50
 8001b26:	657a      	str	r2, [r7, #84]	@ 0x54
 8001b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001b38:	4622      	mov	r2, r4
 8001b3a:	462b      	mov	r3, r5
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	0159      	lsls	r1, r3, #5
 8001b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4a:	0150      	lsls	r0, r2, #5
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4621      	mov	r1, r4
 8001b52:	1a51      	subs	r1, r2, r1
 8001b54:	6139      	str	r1, [r7, #16]
 8001b56:	4629      	mov	r1, r5
 8001b58:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	018b      	lsls	r3, r1, #6
 8001b6e:	4651      	mov	r1, sl
 8001b70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b74:	4651      	mov	r1, sl
 8001b76:	018a      	lsls	r2, r1, #6
 8001b78:	4651      	mov	r1, sl
 8001b7a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b7e:	4659      	mov	r1, fp
 8001b80:	eb63 0901 	sbc.w	r9, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b98:	4690      	mov	r8, r2
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	eb18 0303 	adds.w	r3, r8, r3
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	eb49 0303 	adc.w	r3, r9, r3
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bb8:	4629      	mov	r1, r5
 8001bba:	028b      	lsls	r3, r1, #10
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	028a      	lsls	r2, r1, #10
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8001bd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001bd8:	f7fe fb6a 	bl	80002b0 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001be6:	4b60      	ldr	r3, [pc, #384]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001bf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001c08:	e0a6      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0a:	4b57      	ldr	r3, [pc, #348]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c16:	4b54      	ldr	r3, [pc, #336]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d02a      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b51      	ldr	r3, [pc, #324]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c34:	2100      	movs	r1, #0
 8001c36:	4b4e      	ldr	r3, [pc, #312]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c38:	fb03 f201 	mul.w	r2, r3, r1
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	fb00 f303 	mul.w	r3, r0, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	4a4a      	ldr	r2, [pc, #296]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001c46:	fba0 1202 	umull	r1, r2, r0, r2
 8001c4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c4c:	460a      	mov	r2, r1
 8001c4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001c52:	4413      	add	r3, r2
 8001c54:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c68:	f7fe fb22 	bl	80002b0 <__aeabi_uldivmod>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4613      	mov	r3, r2
 8001c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c76:	e05b      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	61fa      	str	r2, [r7, #28]
 8001d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d22:	f7fe fac5 	bl	80002b0 <__aeabi_uldivmod>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0f1b      	lsrs	r3, r3, #28
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d4e:	e003      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3798      	adds	r7, #152	@ 0x98
 8001d60:	46bd      	mov	sp, r7
 8001d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	017d7840 	.word	0x017d7840

08001d74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e28d      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8083 	beq.w	8001e9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d94:	4b94      	ldr	r3, [pc, #592]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d019      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001da0:	4b91      	ldr	r3, [pc, #580]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001dac:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db8:	d00c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d112      	bne.n	8001dec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b88      	ldr	r3, [pc, #544]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b84      	ldr	r3, [pc, #528]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x124>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d157      	bne.n	8001e98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e25a      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x90>
 8001df6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7b      	ldr	r2, [pc, #492]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xcc>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0xb4>
 8001e0e:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b73      	ldr	r3, [pc, #460]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a72      	ldr	r2, [pc, #456]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xcc>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fa0c 	bl	8001264 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fa08 	bl	8001264 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e21f      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xdc>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f9f8 	bl	8001264 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff f9f4 	bl	8001264 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	@ 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e20b      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x104>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06f      	beq.n	8001f86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ea6:	4b50      	ldr	r3, [pc, #320]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d105      	bne.n	8001eca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d11c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x186>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e1d3      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4937      	ldr	r1, [pc, #220]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	e03a      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f18:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <HAL_RCC_OscConfig+0x278>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f9a1 	bl	8001264 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff f99d 	bl	8001264 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1b4      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4925      	ldr	r1, [pc, #148]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_RCC_OscConfig+0x278>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f980 	bl	8001264 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff f97c 	bl	8001264 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e193      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d036      	beq.n	8002000 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f960 	bl	8001264 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff f95c 	bl	8001264 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e173      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x234>
 8001fc6:	e01b      	b.n	8002000 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_RCC_OscConfig+0x27c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff f949 	bl	8001264 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	e00e      	b.n	8001ff4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f945 	bl	8001264 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d907      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e15c      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	42470000 	.word	0x42470000
 8001ff0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b8a      	ldr	r3, [pc, #552]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ea      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8097 	beq.w	800213c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b83      	ldr	r3, [pc, #524]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b7f      	ldr	r3, [pc, #508]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4a7e      	ldr	r2, [pc, #504]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	@ 0x40
 800202e:	4b7c      	ldr	r3, [pc, #496]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b79      	ldr	r3, [pc, #484]	@ (8002224 <HAL_RCC_OscConfig+0x4b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204a:	4b76      	ldr	r3, [pc, #472]	@ (8002224 <HAL_RCC_OscConfig+0x4b0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a75      	ldr	r2, [pc, #468]	@ (8002224 <HAL_RCC_OscConfig+0x4b0>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002056:	f7ff f905 	bl	8001264 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205e:	f7ff f901 	bl	8001264 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e118      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b6c      	ldr	r3, [pc, #432]	@ (8002224 <HAL_RCC_OscConfig+0x4b0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x31e>
 8002084:	4b66      	ldr	r3, [pc, #408]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a65      	ldr	r2, [pc, #404]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002090:	e01c      	b.n	80020cc <HAL_RCC_OscConfig+0x358>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x340>
 800209a:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	4a60      	ldr	r2, [pc, #384]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0x358>
 80020b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	4a59      	ldr	r2, [pc, #356]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c0:	4b57      	ldr	r3, [pc, #348]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a56      	ldr	r2, [pc, #344]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d015      	beq.n	8002100 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7ff f8c6 	bl	8001264 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7ff f8c2 	bl	8001264 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0d7      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0ee      	beq.n	80020dc <HAL_RCC_OscConfig+0x368>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff f8b0 	bl	8001264 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff f8ac 	bl	8001264 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0c1      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211e:	4b40      	ldr	r3, [pc, #256]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ee      	bne.n	8002108 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212a:	7dfb      	ldrb	r3, [r7, #23]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	4a3a      	ldr	r2, [pc, #232]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800213a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80ad 	beq.w	80022a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b08      	cmp	r3, #8
 8002150:	d060      	beq.n	8002214 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d145      	bne.n	80021e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_RCC_OscConfig+0x4b4>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f880 	bl	8001264 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff f87c 	bl	8001264 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e093      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b29      	ldr	r3, [pc, #164]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	085b      	lsrs	r3, r3, #1
 800219e:	3b01      	subs	r3, #1
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	071b      	lsls	r3, r3, #28
 80021b2:	491b      	ldr	r1, [pc, #108]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x4b4>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f851 	bl	8001264 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff f84d 	bl	8001264 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e064      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x452>
 80021e4:	e05c      	b.n	80022a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_RCC_OscConfig+0x4b4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff f83a 	bl	8001264 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f836 	bl	8001264 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04d      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RCC_OscConfig+0x4ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x480>
 8002212:	e045      	b.n	80022a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e040      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000
 8002228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800222c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <HAL_RCC_OscConfig+0x538>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d030      	beq.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d129      	bne.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d122      	bne.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800225c:	4013      	ands	r3, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	4293      	cmp	r3, r2
 8002266:	d119      	bne.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d10f      	bne.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e07b      	b.n	80023ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022d2:	d009      	beq.n	80022e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
 80022da:	e005      	b.n	80022e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fd0e 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800231e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236c:	ea42 0103 	orr.w	r1, r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0104 	and.w	r1, r3, #4
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	f003 0210 	and.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b088      	sub	sp, #32
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d2:	f7fe ff47 	bl	8001264 <HAL_GetTick>
 80023d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e12a      	b.n	8002642 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Transmit+0x36>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e122      	b.n	8002642 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_SPI_Transmit+0x48>
 8002406:	2302      	movs	r3, #2
 8002408:	e11b      	b.n	8002642 <HAL_SPI_Transmit+0x280>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002458:	d10f      	bne.n	800247a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002468:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d007      	beq.n	8002498 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a0:	d152      	bne.n	8002548 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_Transmit+0xee>
 80024aa:	8b7b      	ldrh	r3, [r7, #26]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d145      	bne.n	800253c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	881a      	ldrh	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	1c9a      	adds	r2, r3, #2
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024d4:	e032      	b.n	800253c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d112      	bne.n	800250a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	1c9a      	adds	r2, r3, #2
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002508:	e018      	b.n	800253c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800250a:	f7fe feab 	bl	8001264 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d803      	bhi.n	8002522 <HAL_SPI_Transmit+0x160>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d102      	bne.n	8002528 <HAL_SPI_Transmit+0x166>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e082      	b.n	8002642 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1c7      	bne.n	80024d6 <HAL_SPI_Transmit+0x114>
 8002546:	e053      	b.n	80025f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_SPI_Transmit+0x194>
 8002550:	8b7b      	ldrh	r3, [r7, #26]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d147      	bne.n	80025e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800257c:	e033      	b.n	80025e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b02      	cmp	r3, #2
 800258a:	d113      	bne.n	80025b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	7812      	ldrb	r2, [r2, #0]
 8002598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025b2:	e018      	b.n	80025e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025b4:	f7fe fe56 	bl	8001264 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d803      	bhi.n	80025cc <HAL_SPI_Transmit+0x20a>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d102      	bne.n	80025d2 <HAL_SPI_Transmit+0x210>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e02d      	b.n	8002642 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1c6      	bne.n	800257e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fbd9 	bl	8002dac <SPI_EndRxTxTransaction>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002640:	2300      	movs	r3, #0
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af02      	add	r7, sp, #8
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	e104      	b.n	8002874 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002672:	d112      	bne.n	800269a <HAL_SPI_Receive+0x50>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10e      	bne.n	800269a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2204      	movs	r2, #4
 8002680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f8f3 	bl	800287c <HAL_SPI_TransmitReceive>
 8002696:	4603      	mov	r3, r0
 8002698:	e0ec      	b.n	8002874 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800269a:	f7fe fde3 	bl	8001264 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_SPI_Receive+0x62>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0e1      	b.n	8002874 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Receive+0x74>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0da      	b.n	8002874 <HAL_SPI_Receive+0x22a>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2204      	movs	r2, #4
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800270c:	d10f      	bne.n	800272e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800271c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d007      	beq.n	800274c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d170      	bne.n	8002836 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002754:	e035      	b.n	80027c2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d115      	bne.n	8002790 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f103 020c 	add.w	r2, r3, #12
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800278e:	e018      	b.n	80027c2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002790:	f7fe fd68 	bl	8001264 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d803      	bhi.n	80027a8 <HAL_SPI_Receive+0x15e>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_Receive+0x164>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e058      	b.n	8002874 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1c4      	bne.n	8002756 <HAL_SPI_Receive+0x10c>
 80027cc:	e038      	b.n	8002840 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d113      	bne.n	8002804 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e6:	b292      	uxth	r2, r2
 80027e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	1c9a      	adds	r2, r3, #2
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002802:	e018      	b.n	8002836 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002804:	f7fe fd2e 	bl	8001264 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d803      	bhi.n	800281c <HAL_SPI_Receive+0x1d2>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d102      	bne.n	8002822 <HAL_SPI_Receive+0x1d8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e01e      	b.n	8002874 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1c6      	bne.n	80027ce <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fa4b 	bl	8002ce0 <SPI_EndRxTransaction>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002872:	2300      	movs	r3, #0
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800288a:	2301      	movs	r3, #1
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800288e:	f7fe fce9 	bl	8001264 <HAL_GetTick>
 8002892:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800289a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d00c      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x4a>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028b2:	d106      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_TransmitReceive+0x46>
 80028bc:	7ffb      	ldrb	r3, [r7, #31]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d001      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e17f      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_SPI_TransmitReceive+0x5c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_TransmitReceive+0x5c>
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e174      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x6e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e16d      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d003      	beq.n	8002906 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2205      	movs	r2, #5
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	887a      	ldrh	r2, [r7, #2]
 8002916:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d007      	beq.n	800295a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002962:	d17e      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_SPI_TransmitReceive+0xf6>
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d16c      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	1c9a      	adds	r2, r3, #2
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002996:	e059      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d11b      	bne.n	80029de <HAL_SPI_TransmitReceive+0x162>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d016      	beq.n	80029de <HAL_SPI_TransmitReceive+0x162>
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d113      	bne.n	80029de <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d119      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x1a4>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	1c9a      	adds	r2, r3, #2
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a20:	f7fe fc20 	bl	8001264 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d80d      	bhi.n	8002a4c <HAL_SPI_TransmitReceive+0x1d0>
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d009      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0bc      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1a0      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x11c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d19b      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x11c>
 8002a60:	e082      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x1f4>
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d171      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	7812      	ldrb	r2, [r2, #0]
 8002a7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a96:	e05d      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x264>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d017      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x264>
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d114      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d119      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x2a6>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d014      	beq.n	8002b22 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b22:	f7fe fb9f 	bl	8001264 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d803      	bhi.n	8002b3a <HAL_SPI_TransmitReceive+0x2be>
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d102      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x2c4>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e038      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d19c      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x21c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d197      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f91d 	bl	8002dac <SPI_EndRxTxTransaction>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01d      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002be0:	f7fe fb40 	bl	8001264 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	4413      	add	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bf0:	f7fe fb38 	bl	8001264 <HAL_GetTick>
 8002bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bf6:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	0d1b      	lsrs	r3, r3, #20
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c06:	e054      	b.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d050      	beq.n	8002cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c10:	f7fe fb28 	bl	8001264 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d902      	bls.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13d      	bne.n	8002ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c3e:	d111      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c48:	d004      	beq.n	8002c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c52:	d107      	bne.n	8002c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6c:	d10f      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e017      	b.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d19b      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cf4:	d111      	bne.n	8002d1a <SPI_EndRxTransaction+0x3a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cfe:	d004      	beq.n	8002d0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d08:	d107      	bne.n	8002d1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d22:	d12a      	bne.n	8002d7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2c:	d012      	beq.n	8002d54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2180      	movs	r1, #128	@ 0x80
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff ff49 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02d      	beq.n	8002da0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e026      	b.n	8002da2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff ff36 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01a      	beq.n	8002da0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e013      	b.n	8002da2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2101      	movs	r1, #1
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff ff23 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7ff ff04 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e032      	b.n	8002e44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dde:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <SPI_EndRxTxTransaction+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e50 <SPI_EndRxTxTransaction+0xa4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0d5b      	lsrs	r3, r3, #21
 8002dea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dfc:	d112      	bne.n	8002e24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff fee1 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d016      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e00f      	b.n	8002e44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b80      	cmp	r3, #128	@ 0x80
 8002e3c:	d0f2      	beq.n	8002e24 <SPI_EndRxTxTransaction+0x78>
 8002e3e:	e000      	b.n	8002e42 <SPI_EndRxTxTransaction+0x96>
        break;
 8002e40:	bf00      	nop
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	165e9f81 	.word	0x165e9f81

08002e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e042      	b.n	8002eec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f91a 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	@ 0x24
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f973 	bl	8003184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d175      	bne.n	8003000 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Transmit+0x2c>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e06e      	b.n	8003002 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2221      	movs	r2, #33	@ 0x21
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f32:	f7fe f997 	bl	8001264 <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f4c:	d108      	bne.n	8002f60 <HAL_UART_Transmit+0x6c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	e003      	b.n	8002f68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f68:	e02e      	b.n	8002fc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	@ 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f848 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e03a      	b.n	8003002 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	e007      	b.n	8002fba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1cb      	bne.n	8002f6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2140      	movs	r1, #64	@ 0x40
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f814 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e006      	b.n	8003002 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	e03b      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d037      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fe f91e 	bl	8001264 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	6a3a      	ldr	r2, [r7, #32]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <UART_WaitOnFlagUntilTimeout+0x30>
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e03a      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	d020      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b40      	cmp	r3, #64	@ 0x40
 8003056:	d01d      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d116      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f81d 	bl	80030bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2208      	movs	r2, #8
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e00f      	b.n	80030b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d0b4      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b095      	sub	sp, #84	@ 0x54
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e5      	bne.n	80030c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3314      	adds	r3, #20
 80030fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	e853 3f00 	ldrex	r3, [r3]
 8003106:	61fb      	str	r3, [r7, #28]
   return(result);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003120:	e841 2300 	strex	r3, r2, [r1]
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e5      	bne.n	80030f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	2b01      	cmp	r3, #1
 8003132:	d119      	bne.n	8003168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	60bb      	str	r3, [r7, #8]
   return(result);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	647b      	str	r3, [r7, #68]	@ 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003154:	61ba      	str	r2, [r7, #24]
 8003156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	613b      	str	r3, [r7, #16]
   return(result);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003176:	bf00      	nop
 8003178:	3754      	adds	r7, #84	@ 0x54
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b0c0      	sub	sp, #256	@ 0x100
 800318a:	af00      	add	r7, sp, #0
 800318c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	ea40 0301 	orr.w	r3, r0, r1
 80031ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031dc:	f021 010c 	bic.w	r1, r1, #12
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ea:	430b      	orrs	r3, r1
 80031ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	6999      	ldr	r1, [r3, #24]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	ea40 0301 	orr.w	r3, r0, r1
 800320a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b8f      	ldr	r3, [pc, #572]	@ (8003450 <UART_SetConfig+0x2cc>)
 8003214:	429a      	cmp	r2, r3
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0xa0>
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8d      	ldr	r3, [pc, #564]	@ (8003454 <UART_SetConfig+0x2d0>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d104      	bne.n	800322e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe fbe8 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8003228:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800322c:	e003      	b.n	8003236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800322e:	f7fe fbcf 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8003232:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003240:	f040 810c 	bne.w	800345c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800324e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003256:	4622      	mov	r2, r4
 8003258:	462b      	mov	r3, r5
 800325a:	1891      	adds	r1, r2, r2
 800325c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800325e:	415b      	adcs	r3, r3
 8003260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003266:	4621      	mov	r1, r4
 8003268:	eb12 0801 	adds.w	r8, r2, r1
 800326c:	4629      	mov	r1, r5
 800326e:	eb43 0901 	adc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003294:	462b      	mov	r3, r5
 8003296:	eb49 0303 	adc.w	r3, r9, r3
 800329a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032b2:	460b      	mov	r3, r1
 80032b4:	18db      	adds	r3, r3, r3
 80032b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b8:	4613      	mov	r3, r2
 80032ba:	eb42 0303 	adc.w	r3, r2, r3
 80032be:	657b      	str	r3, [r7, #84]	@ 0x54
 80032c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032c8:	f7fc fff2 	bl	80002b0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b61      	ldr	r3, [pc, #388]	@ (8003458 <UART_SetConfig+0x2d4>)
 80032d2:	fba3 2302 	umull	r2, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	011c      	lsls	r4, r3, #4
 80032da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	1891      	adds	r1, r2, r2
 80032f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032f4:	415b      	adcs	r3, r3
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032fc:	4641      	mov	r1, r8
 80032fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003302:	4649      	mov	r1, r9
 8003304:	eb43 0b01 	adc.w	fp, r3, r1
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800331c:	4692      	mov	sl, r2
 800331e:	469b      	mov	fp, r3
 8003320:	4643      	mov	r3, r8
 8003322:	eb1a 0303 	adds.w	r3, sl, r3
 8003326:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800332a:	464b      	mov	r3, r9
 800332c:	eb4b 0303 	adc.w	r3, fp, r3
 8003330:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003340:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003348:	460b      	mov	r3, r1
 800334a:	18db      	adds	r3, r3, r3
 800334c:	643b      	str	r3, [r7, #64]	@ 0x40
 800334e:	4613      	mov	r3, r2
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
 8003356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800335a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800335e:	f7fc ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4611      	mov	r1, r2
 8003368:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <UART_SetConfig+0x2d4>)
 800336a:	fba3 2301 	umull	r2, r3, r3, r1
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2264      	movs	r2, #100	@ 0x64
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800337e:	4b36      	ldr	r3, [pc, #216]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003380:	fba3 2302 	umull	r2, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800338c:	441c      	add	r4, r3
 800338e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003398:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800339c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033a8:	415b      	adcs	r3, r3
 80033aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033b0:	4641      	mov	r1, r8
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033b6:	4649      	mov	r1, r9
 80033b8:	414b      	adcs	r3, r1
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033c8:	4659      	mov	r1, fp
 80033ca:	00cb      	lsls	r3, r1, #3
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033d2:	4651      	mov	r1, sl
 80033d4:	00ca      	lsls	r2, r1, #3
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	4642      	mov	r2, r8
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e4:	464b      	mov	r3, r9
 80033e6:	460a      	mov	r2, r1
 80033e8:	eb42 0303 	adc.w	r3, r2, r3
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003404:	460b      	mov	r3, r1
 8003406:	18db      	adds	r3, r3, r3
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340a:	4613      	mov	r3, r2
 800340c:	eb42 0303 	adc.w	r3, r2, r3
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800341a:	f7fc ff49 	bl	80002b0 <__aeabi_uldivmod>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	2164      	movs	r1, #100	@ 0x64
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3332      	adds	r3, #50	@ 0x32
 8003436:	4a08      	ldr	r2, [pc, #32]	@ (8003458 <UART_SetConfig+0x2d4>)
 8003438:	fba2 2303 	umull	r2, r3, r2, r3
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	f003 0207 	and.w	r2, r3, #7
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4422      	add	r2, r4
 800344a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800344c:	e106      	b.n	800365c <UART_SetConfig+0x4d8>
 800344e:	bf00      	nop
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800345c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003466:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800346a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800346e:	4642      	mov	r2, r8
 8003470:	464b      	mov	r3, r9
 8003472:	1891      	adds	r1, r2, r2
 8003474:	6239      	str	r1, [r7, #32]
 8003476:	415b      	adcs	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
 800347a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800347e:	4641      	mov	r1, r8
 8003480:	1854      	adds	r4, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0501 	adc.w	r5, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034a4:	464b      	mov	r3, r9
 80034a6:	eb45 0303 	adc.w	r3, r5, r3
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034ca:	4629      	mov	r1, r5
 80034cc:	008b      	lsls	r3, r1, #2
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034d4:	4621      	mov	r1, r4
 80034d6:	008a      	lsls	r2, r1, #2
 80034d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034dc:	f7fc fee8 	bl	80002b0 <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4b60      	ldr	r3, [pc, #384]	@ (8003668 <UART_SetConfig+0x4e4>)
 80034e6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	011c      	lsls	r4, r3, #4
 80034ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003500:	4642      	mov	r2, r8
 8003502:	464b      	mov	r3, r9
 8003504:	1891      	adds	r1, r2, r2
 8003506:	61b9      	str	r1, [r7, #24]
 8003508:	415b      	adcs	r3, r3
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003510:	4641      	mov	r1, r8
 8003512:	1851      	adds	r1, r2, r1
 8003514:	6139      	str	r1, [r7, #16]
 8003516:	4649      	mov	r1, r9
 8003518:	414b      	adcs	r3, r1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003528:	4659      	mov	r1, fp
 800352a:	00cb      	lsls	r3, r1, #3
 800352c:	4651      	mov	r1, sl
 800352e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003532:	4651      	mov	r1, sl
 8003534:	00ca      	lsls	r2, r1, #3
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	4603      	mov	r3, r0
 800353c:	4642      	mov	r2, r8
 800353e:	189b      	adds	r3, r3, r2
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003544:	464b      	mov	r3, r9
 8003546:	460a      	mov	r2, r1
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	67bb      	str	r3, [r7, #120]	@ 0x78
 800355a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003568:	4649      	mov	r1, r9
 800356a:	008b      	lsls	r3, r1, #2
 800356c:	4641      	mov	r1, r8
 800356e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003572:	4641      	mov	r1, r8
 8003574:	008a      	lsls	r2, r1, #2
 8003576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800357a:	f7fc fe99 	bl	80002b0 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4611      	mov	r1, r2
 8003584:	4b38      	ldr	r3, [pc, #224]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003586:	fba3 2301 	umull	r2, r3, r3, r1
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2264      	movs	r2, #100	@ 0x64
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	@ 0x32
 8003598:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <UART_SetConfig+0x4e4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a4:	441c      	add	r4, r3
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80035b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	1891      	adds	r1, r2, r2
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	415b      	adcs	r3, r3
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035c4:	4641      	mov	r1, r8
 80035c6:	1851      	adds	r1, r2, r1
 80035c8:	6039      	str	r1, [r7, #0]
 80035ca:	4649      	mov	r1, r9
 80035cc:	414b      	adcs	r3, r1
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035dc:	4659      	mov	r1, fp
 80035de:	00cb      	lsls	r3, r1, #3
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e6:	4651      	mov	r1, sl
 80035e8:	00ca      	lsls	r2, r1, #3
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	4642      	mov	r2, r8
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f6:	464b      	mov	r3, r9
 80035f8:	460a      	mov	r2, r1
 80035fa:	eb42 0303 	adc.w	r3, r2, r3
 80035fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	663b      	str	r3, [r7, #96]	@ 0x60
 800360a:	667a      	str	r2, [r7, #100]	@ 0x64
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003618:	4649      	mov	r1, r9
 800361a:	008b      	lsls	r3, r1, #2
 800361c:	4641      	mov	r1, r8
 800361e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003622:	4641      	mov	r1, r8
 8003624:	008a      	lsls	r2, r1, #2
 8003626:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800362a:	f7fc fe41 	bl	80002b0 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	@ 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	3332      	adds	r3, #50	@ 0x32
 8003646:	4a08      	ldr	r2, [pc, #32]	@ (8003668 <UART_SetConfig+0x4e4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4422      	add	r2, r4
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f083 0301 	eor.w	r3, r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	2140      	movs	r1, #64	@ 0x40
 8003682:	4803      	ldr	r0, [pc, #12]	@ (8003690 <chipSelect+0x24>)
 8003684:	f7fe f898 	bl	80017b8 <HAL_GPIO_WritePin>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40020400 	.word	0x40020400

08003694 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a6:	4803      	ldr	r0, [pc, #12]	@ (80036b4 <registerSelect+0x20>)
 80036a8:	f7fe f886 	bl	80017b8 <HAL_GPIO_WritePin>
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40020000 	.word	0x40020000

080036b8 <displayReset>:

static void displayReset(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 80036bc:	2000      	movs	r0, #0
 80036be:	f7ff ffd5 	bl	800366c <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2140      	movs	r1, #64	@ 0x40
 80036c6:	4808      	ldr	r0, [pc, #32]	@ (80036e8 <displayReset+0x30>)
 80036c8:	f7fe f876 	bl	80017b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7fd fdd5 	bl	800127c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80036d2:	2201      	movs	r2, #1
 80036d4:	2140      	movs	r1, #64	@ 0x40
 80036d6:	4804      	ldr	r0, [pc, #16]	@ (80036e8 <displayReset+0x30>)
 80036d8:	f7fe f86e 	bl	80017b8 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80036dc:	2001      	movs	r0, #1
 80036de:	f7ff ffc5 	bl	800366c <chipSelect>
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40020000 	.word	0x40020000

080036ec <sendInstruction>:

static void sendInstruction(instruction command)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7ff ffcc 	bl	8003694 <registerSelect>
    chipSelect(true);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f7ff ffb5 	bl	800366c <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8003702:	1df9      	adds	r1, r7, #7
 8003704:	2301      	movs	r3, #1
 8003706:	2201      	movs	r2, #1
 8003708:	4804      	ldr	r0, [pc, #16]	@ (800371c <sendInstruction+0x30>)
 800370a:	f7fe fe5a 	bl	80023c2 <HAL_SPI_Transmit>
    chipSelect(false);
 800370e:	2000      	movs	r0, #0
 8003710:	f7ff ffac 	bl	800366c <chipSelect>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000084 	.word	0x20000084

08003720 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 800372a:	2001      	movs	r0, #1
 800372c:	f7ff ffb2 	bl	8003694 <registerSelect>
    chipSelect(true);
 8003730:	2001      	movs	r0, #1
 8003732:	f7ff ff9b 	bl	800366c <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003736:	1df9      	adds	r1, r7, #7
 8003738:	2301      	movs	r3, #1
 800373a:	2201      	movs	r2, #1
 800373c:	4804      	ldr	r0, [pc, #16]	@ (8003750 <sendData+0x30>)
 800373e:	f7fe fe40 	bl	80023c2 <HAL_SPI_Transmit>
    chipSelect(false);
 8003742:	2000      	movs	r0, #0
 8003744:	f7ff ff92 	bl	800366c <chipSelect>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000084 	.word	0x20000084

08003754 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	2b3f      	cmp	r3, #63	@ 0x3f
 8003762:	d806      	bhi.n	8003772 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8003764:	2081      	movs	r0, #129	@ 0x81
 8003766:	f7ff ffc1 	bl	80036ec <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ffbd 	bl	80036ec <sendInstruction>
    }
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <lcd_init>:

void lcd_init(void)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	af00      	add	r7, sp, #0
    lcd_clear();
 800377e:	f000 f857 	bl	8003830 <lcd_clear>
    displayReset();
 8003782:	f7ff ff99 	bl	80036b8 <displayReset>

    sendInstruction(ADC_NORMAL);
 8003786:	20a0      	movs	r0, #160	@ 0xa0
 8003788:	f7ff ffb0 	bl	80036ec <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 800378c:	20ae      	movs	r0, #174	@ 0xae
 800378e:	f7ff ffad 	bl	80036ec <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8003792:	20c8      	movs	r0, #200	@ 0xc8
 8003794:	f7ff ffaa 	bl	80036ec <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003798:	20a2      	movs	r0, #162	@ 0xa2
 800379a:	f7ff ffa7 	bl	80036ec <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800379e:	202f      	movs	r0, #47	@ 0x2f
 80037a0:	f7ff ffa4 	bl	80036ec <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 80037a4:	2021      	movs	r0, #33	@ 0x21
 80037a6:	f7ff ffa1 	bl	80036ec <sendInstruction>
    lcd_setContrast(40);
 80037aa:	2028      	movs	r0, #40	@ 0x28
 80037ac:	f7ff ffd2 	bl	8003754 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 80037b0:	20af      	movs	r0, #175	@ 0xaf
 80037b2:	f7ff ff9b 	bl	80036ec <sendInstruction>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
 80037c6:	460b      	mov	r3, r1
 80037c8:	71bb      	strb	r3, [r7, #6]
 80037ca:	4613      	mov	r3, r2
 80037cc:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db23      	blt.n	800381e <lcd_setPixel+0x62>
 80037d6:	79bb      	ldrb	r3, [r7, #6]
 80037d8:	2b1f      	cmp	r3, #31
 80037da:	d820      	bhi.n	800381e <lcd_setPixel+0x62>
        if (pixelIsSet)
 80037dc:	797b      	ldrb	r3, [r7, #5]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4a11      	ldr	r2, [pc, #68]	@ (800382c <lcd_setPixel+0x70>)
 80037e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037ea:	79bb      	ldrb	r3, [r7, #6]
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	490c      	ldr	r1, [pc, #48]	@ (800382c <lcd_setPixel+0x70>)
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80037fe:	e00e      	b.n	800381e <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <lcd_setPixel+0x70>)
 8003804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003808:	79bb      	ldrb	r3, [r7, #6]
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	400a      	ands	r2, r1
 8003818:	4904      	ldr	r1, [pc, #16]	@ (800382c <lcd_setPixel+0x70>)
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000184 	.word	0x20000184

08003830 <lcd_clear>:

void lcd_clear(void)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003836:	2300      	movs	r3, #0
 8003838:	71fb      	strb	r3, [r7, #7]
 800383a:	e007      	b.n	800384c <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <lcd_clear+0x34>)
 8003840:	2100      	movs	r1, #0
 8003842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	3301      	adds	r3, #1
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	2b00      	cmp	r3, #0
 8003852:	daf3      	bge.n	800383c <lcd_clear+0xc>
    }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000184 	.word	0x20000184

08003868 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4623      	mov	r3, r4
 8003878:	71fb      	strb	r3, [r7, #7]
 800387a:	4603      	mov	r3, r0
 800387c:	71bb      	strb	r3, [r7, #6]
 800387e:	460b      	mov	r3, r1
 8003880:	717b      	strb	r3, [r7, #5]
 8003882:	4613      	mov	r3, r2
 8003884:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8003886:	797b      	ldrb	r3, [r7, #5]
 8003888:	3b20      	subs	r3, #32
 800388a:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e049      	b.n	8003926 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003892:	2300      	movs	r3, #0
 8003894:	73bb      	strb	r3, [r7, #14]
 8003896:	e03b      	b.n	8003910 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8003898:	797b      	ldrb	r3, [r7, #5]
 800389a:	793a      	ldrb	r2, [r7, #4]
 800389c:	4928      	ldr	r1, [pc, #160]	@ (8003940 <lcd_setChar+0xd8>)
 800389e:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 80038a2:	fb03 f202 	mul.w	r2, r3, r2
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	4413      	add	r3, r2
 80038aa:	4a26      	ldr	r2, [pc, #152]	@ (8003944 <lcd_setChar+0xdc>)
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
 80038ae:	461a      	mov	r2, r3
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	fa42 f303 	asr.w	r3, r2, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 80038be:	79fa      	ldrb	r2, [r7, #7]
 80038c0:	7bbb      	ldrb	r3, [r7, #14]
 80038c2:	4413      	add	r3, r2
 80038c4:	b2d8      	uxtb	r0, r3
 80038c6:	79ba      	ldrb	r2, [r7, #6]
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	4413      	add	r3, r2
 80038cc:	b2d9      	uxtb	r1, r3
 80038ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	f7ff ff67 	bl	80037bc <lcd_setPixel>
 80038ee:	e00c      	b.n	800390a <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80038f0:	79fa      	ldrb	r2, [r7, #7]
 80038f2:	7bbb      	ldrb	r3, [r7, #14]
 80038f4:	4413      	add	r3, r2
 80038f6:	b2d8      	uxtb	r0, r3
 80038f8:	79ba      	ldrb	r2, [r7, #6]
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4413      	add	r3, r2
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003904:	4619      	mov	r1, r3
 8003906:	f7ff ff59 	bl	80037bc <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	3301      	adds	r3, #1
 800390e:	73bb      	strb	r3, [r7, #14]
 8003910:	793b      	ldrb	r3, [r7, #4]
 8003912:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <lcd_setChar+0xd8>)
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	7bba      	ldrb	r2, [r7, #14]
 800391c:	429a      	cmp	r2, r3
 800391e:	d3bb      	bcc.n	8003898 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3301      	adds	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	793b      	ldrb	r3, [r7, #4]
 8003928:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <lcd_setChar+0xd8>)
 800392a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800392e:	7bfa      	ldrb	r2, [r7, #15]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3ae      	bcc.n	8003892 <lcd_setChar+0x2a>
        }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	bf00      	nop
 8003940:	080063a4 	.word	0x080063a4
 8003944:	08006024 	.word	0x08006024

08003948 <lcd_setString>:

void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af02      	add	r7, sp, #8
 800394e:	603a      	str	r2, [r7, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
 8003956:	460b      	mov	r3, r1
 8003958:	71bb      	strb	r3, [r7, #6]
 800395a:	4613      	mov	r3, r2
 800395c:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 800395e:	797b      	ldrb	r3, [r7, #5]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11c      	bne.n	800399e <lcd_setString+0x56>
 8003964:	797b      	ldrb	r3, [r7, #5]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d819      	bhi.n	800399e <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 800396a:	e014      	b.n	8003996 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	797c      	ldrb	r4, [r7, #5]
 8003972:	79b9      	ldrb	r1, [r7, #6]
 8003974:	79f8      	ldrb	r0, [r7, #7]
 8003976:	7e3b      	ldrb	r3, [r7, #24]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4623      	mov	r3, r4
 800397c:	f7ff ff74 	bl	8003868 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8003980:	797b      	ldrb	r3, [r7, #5]
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <lcd_setString+0x60>)
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	4413      	add	r3, r2
 8003988:	785a      	ldrb	r2, [r3, #1]
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	4413      	add	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e6      	bne.n	800396c <lcd_setString+0x24>
        }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	080063a4 	.word	0x080063a4

080039ac <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b08b      	sub	sp, #44	@ 0x2c
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	81fb      	strh	r3, [r7, #14]
 80039be:	4603      	mov	r3, r0
 80039c0:	81bb      	strh	r3, [r7, #12]
 80039c2:	460b      	mov	r3, r1
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	4613      	mov	r3, r2
 80039c8:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 80039ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d6:	edc7 7a08 	vstr	s15, [r7, #32]
 80039da:	2300      	movs	r3, #0
 80039dc:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 80039de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80039f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80039f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bfb8      	it	lt
 8003a00:	425b      	neglt	r3, r3
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8003a06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	425b      	neglt	r3, r3
 8003a16:	b21b      	sxth	r3, r3
 8003a18:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8003a1a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <lcd_setLine+0x8c>
 8003a22:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8003a38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <lcd_setLine+0xaa>
 8003a40:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8003a56:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a5a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	db5f      	blt.n	8003b22 <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8003a62:	2300      	movs	r3, #0
 8003a64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003a66:	e055      	b.n	8003b14 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003a68:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	db20      	blt.n	8003ab8 <lcd_setLine+0x10c>
 8003a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a82:	db19      	blt.n	8003ab8 <lcd_setLine+0x10c>
 8003a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a90:	793b      	ldrb	r3, [r7, #4]
 8003a92:	b2d8      	uxtb	r0, r3
 8003a94:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003aa0:	793b      	ldrb	r3, [r7, #4]
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f7ff fe82 	bl	80037bc <lcd_setPixel>
			xF += x[1];
 8003ab8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003acc:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8003ad0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003adc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b04:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8003b08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003b14:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	dba3      	blt.n	8003a68 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8003b20:	e05e      	b.n	8003be0 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003b26:	e055      	b.n	8003bd4 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003b28:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	db20      	blt.n	8003b78 <lcd_setLine+0x1cc>
 8003b36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	db19      	blt.n	8003b78 <lcd_setLine+0x1cc>
 8003b44:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b50:	793b      	ldrb	r3, [r7, #4]
 8003b52:	b2d8      	uxtb	r0, r3
 8003b54:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b60:	793b      	ldrb	r3, [r7, #4]
 8003b62:	b2d9      	uxtb	r1, r3
 8003b64:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	f7ff fe22 	bl	80037bc <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8003b78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003b98:	ee07 3a90 	vmov	s15, r3
 8003b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bac:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8003bb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc4:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8003bc8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003bd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bd8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	dba3      	blt.n	8003b28 <lcd_setLine+0x17c>
}
 8003be0:	bf00      	nop
 8003be2:	372c      	adds	r7, #44	@ 0x2c
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd90      	pop	{r4, r7, pc}

08003be8 <lcd_show>:

void lcd_show(void){
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	e022      	b.n	8003c3a <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	3b50      	subs	r3, #80	@ 0x50
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fd76 	bl	80036ec <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8003c00:	2010      	movs	r0, #16
 8003c02:	f7ff fd73 	bl	80036ec <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f7ff fd70 	bl	80036ec <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	71bb      	strb	r3, [r7, #6]
 8003c10:	e00c      	b.n	8003c2c <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8003c12:	79ba      	ldrb	r2, [r7, #6]
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	490d      	ldr	r1, [pc, #52]	@ (8003c4c <lcd_show+0x64>)
 8003c18:	0092      	lsls	r2, r2, #2
 8003c1a:	440a      	add	r2, r1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fd7d 	bl	8003720 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8003c26:	79bb      	ldrb	r3, [r7, #6]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	71bb      	strb	r3, [r7, #6]
 8003c2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	daee      	bge.n	8003c12 <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	3301      	adds	r3, #1
 8003c38:	71fb      	strb	r3, [r7, #7]
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d9d9      	bls.n	8003bf4 <lcd_show+0xc>
    }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000184 	.word	0x20000184

08003c50 <MFRC522_Select>:
#include <stdbool.h>
#include "MFRC522_Driver.h"


// Function to control the Chip Select (CS) line
static void MFRC522_Select(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin, GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c5a:	4802      	ldr	r0, [pc, #8]	@ (8003c64 <MFRC522_Select+0x14>)
 8003c5c:	f7fd fdac 	bl	80017b8 <HAL_GPIO_WritePin>
}
 8003c60:	bf00      	nop
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40020400 	.word	0x40020400

08003c68 <MFRC522_Deselect>:

static void MFRC522_Deselect(void) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin, GPIO_PIN_SET);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c72:	4802      	ldr	r0, [pc, #8]	@ (8003c7c <MFRC522_Deselect+0x14>)
 8003c74:	f7fd fda0 	bl	80017b8 <HAL_GPIO_WritePin>
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020400 	.word	0x40020400

08003c80 <PCD_WriteRegister>:
/**
 * @brief Writes a single byte to a specified register in the MFRC522 chip.
 * @param reg: The address of the register to write to (with MSB set to 0 for write).
 * @param value: The value to write to the register.
 */
void PCD_WriteRegister(uint8_t reg, uint8_t value) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	460a      	mov	r2, r1
 8003c8a:	71fb      	strb	r3, [r7, #7]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = (reg & 0x7E); // Address format: MSB must be 0 for write
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8003c9a:	79bb      	ldrb	r3, [r7, #6]
 8003c9c:	737b      	strb	r3, [r7, #13]

	MFRC522_Select();
 8003c9e:	f7ff ffd7 	bl	8003c50 <MFRC522_Select>
	HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
 8003ca2:	f107 010c 	add.w	r1, r7, #12
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	2202      	movs	r2, #2
 8003cac:	4804      	ldr	r0, [pc, #16]	@ (8003cc0 <PCD_WriteRegister+0x40>)
 8003cae:	f7fe fb88 	bl	80023c2 <HAL_SPI_Transmit>
	MFRC522_Deselect();
 8003cb2:	f7ff ffd9 	bl	8003c68 <MFRC522_Deselect>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200000dc 	.word	0x200000dc

08003cc4 <PCD_WriteRegisterMulti>:
 * @param reg: The address of the register to write to (already shifted).
 * @param count: The number of bytes to write.
 * @param values: Pointer to the array of bytes to write.
 */

void PCD_WriteRegisterMulti(uint8_t reg, uint8_t count, const uint8_t *values) {
 8003cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	603a      	str	r2, [r7, #0]
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	71bb      	strb	r3, [r7, #6]
 8003cd6:	466b      	mov	r3, sp
 8003cd8:	461e      	mov	r6, r3
	// Allocate a buffer for the data (register address + data bytes)
	uint8_t buffer[count + 1];
 8003cda:	79bb      	ldrb	r3, [r7, #6]
 8003cdc:	1c59      	adds	r1, r3, #1
 8003cde:	1e4b      	subs	r3, r1, #1
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	4699      	mov	r9, r3
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfe:	460a      	mov	r2, r1
 8003d00:	2300      	movs	r3, #0
 8003d02:	4614      	mov	r4, r2
 8003d04:	461d      	mov	r5, r3
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	00eb      	lsls	r3, r5, #3
 8003d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d14:	00e2      	lsls	r2, r4, #3
 8003d16:	460b      	mov	r3, r1
 8003d18:	3307      	adds	r3, #7
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	ebad 0d03 	sub.w	sp, sp, r3
 8003d22:	466b      	mov	r3, sp
 8003d24:	3300      	adds	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
	buffer[0] = reg; // First byte is the register address
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	79fa      	ldrb	r2, [r7, #7]
 8003d2c:	701a      	strb	r2, [r3, #0]

	// Copy the values to the buffer
	for (uint8_t i = 0; i < count; i++) {
 8003d2e:	2300      	movs	r3, #0
 8003d30:	75fb      	strb	r3, [r7, #23]
 8003d32:	e00a      	b.n	8003d4a <PCD_WriteRegisterMulti+0x86>
		buffer[i + 1] = values[i];
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	441a      	add	r2, r3
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	7811      	ldrb	r1, [r2, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < count; i++) {
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	3301      	adds	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
 8003d4a:	7dfa      	ldrb	r2, [r7, #23]
 8003d4c:	79bb      	ldrb	r3, [r7, #6]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3f0      	bcc.n	8003d34 <PCD_WriteRegisterMulti+0x70>
	}

	// Start the SPI communication
	MFRC522_Select();
 8003d52:	f7ff ff7d 	bl	8003c50 <MFRC522_Select>

	// Send the buffer over SPI
	HAL_SPI_Transmit(&hspi2, buffer, count + 1, HAL_MAX_DELAY);
 8003d56:	79bb      	ldrb	r3, [r7, #6]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	4805      	ldr	r0, [pc, #20]	@ (8003d7c <PCD_WriteRegisterMulti+0xb8>)
 8003d66:	f7fe fb2c 	bl	80023c2 <HAL_SPI_Transmit>

	// End the SPI communication
	MFRC522_Deselect();
 8003d6a:	f7ff ff7d 	bl	8003c68 <MFRC522_Deselect>
 8003d6e:	46b5      	mov	sp, r6
}
 8003d70:	bf00      	nop
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200000dc 	.word	0x200000dc

08003d80 <PCD_ReadRegister>:

uint8_t PCD_ReadRegister(uint8_t reg) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
	uint8_t txData = (reg & 0x7E) | 0x80; // Address format: MSB set for read
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003d92:	b25b      	sxtb	r3, r3
 8003d94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d98:	b25b      	sxtb	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73bb      	strb	r3, [r7, #14]

	MFRC522_Select();
 8003da2:	f7ff ff55 	bl	8003c50 <MFRC522_Select>

	// Transmit the register address and read the response
	HAL_SPI_Transmit(&hspi2, &txData, 1, HAL_MAX_DELAY);
 8003da6:	f107 010f 	add.w	r1, r7, #15
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	2201      	movs	r2, #1
 8003db0:	4808      	ldr	r0, [pc, #32]	@ (8003dd4 <PCD_ReadRegister+0x54>)
 8003db2:	f7fe fb06 	bl	80023c2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &rxData, 1, HAL_MAX_DELAY);
 8003db6:	f107 010e 	add.w	r1, r7, #14
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4804      	ldr	r0, [pc, #16]	@ (8003dd4 <PCD_ReadRegister+0x54>)
 8003dc2:	f7fe fc42 	bl	800264a <HAL_SPI_Receive>

	MFRC522_Deselect();
 8003dc6:	f7ff ff4f 	bl	8003c68 <MFRC522_Deselect>

	return rxData;
 8003dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200000dc 	.word	0x200000dc

08003dd8 <PCD_Reset>:

/**
 * @brief Resets the MFRC522 chip by toggling the reset pin.
 */
void PCD_Reset(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_RESET); // Pull reset LOW
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003de2:	4808      	ldr	r0, [pc, #32]	@ (8003e04 <PCD_Reset+0x2c>)
 8003de4:	f7fd fce8 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);                                                            // Hold for 50 ms
 8003de8:	2032      	movs	r0, #50	@ 0x32
 8003dea:	f7fd fa47 	bl	800127c <HAL_Delay>
	HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_SET);  // Pull reset HIGH
 8003dee:	2201      	movs	r2, #1
 8003df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003df4:	4803      	ldr	r0, [pc, #12]	@ (8003e04 <PCD_Reset+0x2c>)
 8003df6:	f7fd fcdf 	bl	80017b8 <HAL_GPIO_WritePin>
	HAL_Delay(50);                                                            // Wait for the chip to initialize
 8003dfa:	2032      	movs	r0, #50	@ 0x32
 8003dfc:	f7fd fa3e 	bl	800127c <HAL_Delay>
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40020800 	.word	0x40020800

08003e08 <PCD_SetRegisterBits>:
 * @brief Sets specific bits in a register without altering other bits.
 * @param reg: The register address to modify.
 * @param mask: The bitmask indicating which bits to set (1 = set bit, 0 = leave bit unchanged).
 */

void PCD_SetRegisterBits(uint8_t reg, uint8_t mask) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460a      	mov	r2, r1
 8003e12:	71fb      	strb	r3, [r7, #7]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71bb      	strb	r3, [r7, #6]
	// Read the current value of the register
	uint8_t current = PCD_ReadRegister(reg);
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ffb0 	bl	8003d80 <PCD_ReadRegister>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]

	// Set the bits indicated by the mask
	PCD_WriteRegister(reg, current | mask);
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	79bb      	ldrb	r3, [r7, #6]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff25 	bl	8003c80 <PCD_WriteRegister>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <PCD_AntennaOn>:

/**
 * @brief Turns the MFRC522 antenna on by enabling the TX1 and TX2 control bits in the TxControlReg register.
 */
void PCD_AntennaOn(void) {
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
	uint8_t value = PCD_ReadRegister(TxControlReg);
 8003e44:	2028      	movs	r0, #40	@ 0x28
 8003e46:	f7ff ff9b 	bl	8003d80 <PCD_ReadRegister>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
	if ((value & 0x03) != 0x03)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d007      	beq.n	8003e68 <PCD_AntennaOn+0x2a>
	{
		PCD_WriteRegister(TxControlReg, value | 0x03);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	f043 0303 	orr.w	r3, r3, #3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	4619      	mov	r1, r3
 8003e62:	2028      	movs	r0, #40	@ 0x28
 8003e64:	f7ff ff0c 	bl	8003c80 <PCD_WriteRegister>
	}
	PCD_WriteRegister(RFCfgReg, (PCD_ReadRegister(RFCfgReg) & 0x8F) | 0x70); // Set TxGain to maximum
 8003e68:	204c      	movs	r0, #76	@ 0x4c
 8003e6a:	f7ff ff89 	bl	8003d80 <PCD_ReadRegister>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	4619      	mov	r1, r3
 8003e78:	204c      	movs	r0, #76	@ 0x4c
 8003e7a:	f7ff ff01 	bl	8003c80 <PCD_WriteRegister>

}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <PCD_Init>:


void PCD_Init(void) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0

	PCD_Reset();
 8003e8e:	f7ff ffa3 	bl	8003dd8 <PCD_Reset>
	// Step 2: Configure the Timer
	PCD_WriteRegister(TModeReg, 0x80);       // Timer mode (auto-restart enabled)
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	2054      	movs	r0, #84	@ 0x54
 8003e96:	f7ff fef3 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(TPrescalerReg, 0xA9); // Timer prescaler (recommended value)
 8003e9a:	21a9      	movs	r1, #169	@ 0xa9
 8003e9c:	2056      	movs	r0, #86	@ 0x56
 8003e9e:	f7ff feef 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(TReloadRegH, 0x03);     // Timer reload high byte
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	2058      	movs	r0, #88	@ 0x58
 8003ea6:	f7ff feeb 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(TReloadRegL, 0xE8);      // Timer reload low byte
 8003eaa:	21e8      	movs	r1, #232	@ 0xe8
 8003eac:	205a      	movs	r0, #90	@ 0x5a
 8003eae:	f7ff fee7 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(TxASKReg, 0x40);
 8003eb2:	2140      	movs	r1, #64	@ 0x40
 8003eb4:	202a      	movs	r0, #42	@ 0x2a
 8003eb6:	f7ff fee3 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(ModeReg, 0x3D);
 8003eba:	213d      	movs	r1, #61	@ 0x3d
 8003ebc:	2022      	movs	r0, #34	@ 0x22
 8003ebe:	f7ff fedf 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(RFCfgReg, (0x07<<4)); // Set Rx Gain to max
 8003ec2:	2170      	movs	r1, #112	@ 0x70
 8003ec4:	204c      	movs	r0, #76	@ 0x4c
 8003ec6:	f7ff fedb 	bl	8003c80 <PCD_WriteRegister>
	// Step 3: Configure the antenna gain
	PCD_WriteRegister(RFCfgReg, 0x70); // Set maximum receiver gain
 8003eca:	2170      	movs	r1, #112	@ 0x70
 8003ecc:	204c      	movs	r0, #76	@ 0x4c
 8003ece:	f7ff fed7 	bl	8003c80 <PCD_WriteRegister>

	// Step 4: Turn on the antenna
	PCD_AntennaOn();
 8003ed2:	f7ff ffb4 	bl	8003e3e <PCD_AntennaOn>

	// Step 5: Verify initialization by reading the version
	uint8_t version = PCD_ReadRegister(VersionReg);
 8003ed6:	206e      	movs	r0, #110	@ 0x6e
 8003ed8:	f7ff ff52 	bl	8003d80 <PCD_ReadRegister>
 8003edc:	4603      	mov	r3, r0
 8003ede:	71fb      	strb	r3, [r7, #7]
	if (version != 0x91 && version != 0x92) {
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b91      	cmp	r3, #145	@ 0x91
 8003ee4:	d008      	beq.n	8003ef8 <PCD_Init+0x70>
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b92      	cmp	r3, #146	@ 0x92
 8003eea:	d005      	beq.n	8003ef8 <PCD_Init+0x70>
		// Initialization failed
		printf("Error: MFRC522 initialization failed. VersionReg=0x%02X\n", version);
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4806      	ldr	r0, [pc, #24]	@ (8003f0c <PCD_Init+0x84>)
 8003ef2:	f000 fe53 	bl	8004b9c <iprintf>
 8003ef6:	e005      	b.n	8003f04 <PCD_Init+0x7c>
	}
	else {
		printf("MFRC522 initialized successfully. VersionReg=0x%02X\n", version);
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4804      	ldr	r0, [pc, #16]	@ (8003f10 <PCD_Init+0x88>)
 8003efe:	f000 fe4d 	bl	8004b9c <iprintf>
	}

}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08005da8 	.word	0x08005da8
 8003f10:	08005de4 	.word	0x08005de4

08003f14 <PCD_ReadRegisterMulti>:
 * @brief Reads multiple bytes from a specified register in the MFRC522 chip.
 * @param reg: The address of the register to read from (already shifted).
 * @param count: The number of bytes to read.
 * @param values: Pointer to the buffer where the read data will be stored.
 */
void PCD_ReadRegisterMulti(uint8_t reg, uint8_t count, uint8_t *values) {
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	603a      	str	r2, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
 8003f20:	460b      	mov	r3, r1
 8003f22:	71bb      	strb	r3, [r7, #6]
	if (count == 0) return; // No bytes to read
 8003f24:	79bb      	ldrb	r3, [r7, #6]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d013      	beq.n	8003f52 <PCD_ReadRegisterMulti+0x3e>

	for (uint8_t i = 0; i < count; i++) {
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	e00b      	b.n	8003f48 <PCD_ReadRegisterMulti+0x34>
		values[i] = PCD_ReadRegister(reg); // Read each byte using PCD_ReadRegister
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	18d4      	adds	r4, r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff21 	bl	8003d80 <PCD_ReadRegister>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < count; i++) {
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	79bb      	ldrb	r3, [r7, #6]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3ef      	bcc.n	8003f30 <PCD_ReadRegisterMulti+0x1c>
 8003f50:	e000      	b.n	8003f54 <PCD_ReadRegisterMulti+0x40>
	if (count == 0) return; // No bytes to read
 8003f52:	bf00      	nop
	}
}
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}

08003f5a <PCD_ClrRegisterBits>:

void PCD_ClearFIFO(void) {
	PCD_WriteRegister(CommandReg, 0x10); // Flush the FIFO buffer
}

void PCD_ClrRegisterBits(uint8_t reg, uint8_t mask) {
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	460a      	mov	r2, r1
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71bb      	strb	r3, [r7, #6]
	// Read the current value of the register
	uint8_t tmp = PCD_ReadRegister(reg);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff07 	bl	8003d80 <PCD_ReadRegister>
 8003f72:	4603      	mov	r3, r0
 8003f74:	73fb      	strb	r3, [r7, #15]

	// Write the modified value back to the register
	PCD_WriteRegister(reg, (tmp & (~mask)));
 8003f76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	b25a      	sxtb	r2, r3
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b25b      	sxtb	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fe77 	bl	8003c80 <PCD_WriteRegister>
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <PCD_CalculateCRC>:
 * @param data Pointer to the data to calculate the CRC for.
 * @param length Length of the data.
 * @param result Pointer to a 2-byte array to store the CRC result (low byte first).
 * @return STATUS_OK on success, or an error code if CRC calculation fails.
 */
uint8_t PCD_CalculateCRC(uint8_t *data, uint8_t length, uint8_t *result) {
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	72fb      	strb	r3, [r7, #11]
	// Clear the CRC result registers
	PCD_WriteRegister(DivIrqReg, 0x04); // Clear the CRCIRq bit
 8003fa8:	2104      	movs	r1, #4
 8003faa:	200a      	movs	r0, #10
 8003fac:	f7ff fe68 	bl	8003c80 <PCD_WriteRegister>
	PCD_WriteRegister(CommandReg, PCD_Idle); // Stop any active command
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f7ff fe64 	bl	8003c80 <PCD_WriteRegister>

	// Write data to the FIFO buffer
	PCD_WriteRegisterMulti(FIFODataReg, length, data);
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	2012      	movs	r0, #18
 8003fc0:	f7ff fe80 	bl	8003cc4 <PCD_WriteRegisterMulti>

	// Start the CRC calculation
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f7ff fe5a 	bl	8003c80 <PCD_WriteRegister>

	// Wait for the CRC calculation to complete
	uint8_t n;
	for (uint8_t i = 0; i < 255; i++) {
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75bb      	strb	r3, [r7, #22]
 8003fd0:	e00c      	b.n	8003fec <PCD_CalculateCRC+0x52>
		n = PCD_ReadRegister(DivIrqReg); // Check the DivIrqReg register
 8003fd2:	200a      	movs	r0, #10
 8003fd4:	f7ff fed4 	bl	8003d80 <PCD_ReadRegister>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]
		if (n & 0x04) { // CRCIRq bit is set
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <PCD_CalculateCRC+0x5a>
	for (uint8_t i = 0; i < 255; i++) {
 8003fe6:	7dbb      	ldrb	r3, [r7, #22]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	75bb      	strb	r3, [r7, #22]
 8003fec:	7dbb      	ldrb	r3, [r7, #22]
 8003fee:	2bff      	cmp	r3, #255	@ 0xff
 8003ff0:	d1ef      	bne.n	8003fd2 <PCD_CalculateCRC+0x38>
 8003ff2:	e000      	b.n	8003ff6 <PCD_CalculateCRC+0x5c>
			break;
 8003ff4:	bf00      	nop
		}
	}

	// Check for timeout
	if (!(n & 0x04)) {
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <PCD_CalculateCRC+0x6a>
		return STATUS_TIMEOUT;
 8004000:	2304      	movs	r3, #4
 8004002:	e00e      	b.n	8004022 <PCD_CalculateCRC+0x88>
	}

	// Read the CRC result
	result[0] = PCD_ReadRegister(CRCResultRegL); // Low byte
 8004004:	2044      	movs	r0, #68	@ 0x44
 8004006:	f7ff febb 	bl	8003d80 <PCD_ReadRegister>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	701a      	strb	r2, [r3, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH); // High byte
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1c5c      	adds	r4, r3, #1
 8004016:	2042      	movs	r0, #66	@ 0x42
 8004018:	f7ff feb2 	bl	8003d80 <PCD_ReadRegister>
 800401c:	4603      	mov	r3, r0
 800401e:	7023      	strb	r3, [r4, #0]

	return STATUS_OK;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}

0800402a <PCD_CommunicateWithPICC>:
		uint8_t sendLen,
		uint8_t *backData,
		uint8_t *backLen,
		uint8_t *validBits,
		uint8_t rxAlign,
		bool checkCRC) {
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	603a      	str	r2, [r7, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
 8004038:	460b      	mov	r3, r1
 800403a:	71bb      	strb	r3, [r7, #6]
 800403c:	4613      	mov	r3, r2
 800403e:	717b      	strb	r3, [r7, #5]
	uint8_t n, _validBits = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	75fb      	strb	r3, [r7, #23]
	uint32_t i;

	// Prepare values for BitFramingReg
	uint8_t txLastBits = validBits ? *validBits : 0;
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <PCD_CommunicateWithPICC+0x26>
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	e000      	b.n	8004052 <PCD_CommunicateWithPICC+0x28>
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]
	uint8_t bitFraming = (rxAlign << 4) + txLastBits; // RxAlign = BitFramingReg[6..4], TxLastBits = BitFramingReg[2..0]
 8004054:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	b2da      	uxtb	r2, r3
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	4413      	add	r3, r2
 8004060:	73bb      	strb	r3, [r7, #14]

	// Stop any active command
	PCD_WriteRegister(CommandReg, PCD_Idle);
 8004062:	2100      	movs	r1, #0
 8004064:	2002      	movs	r0, #2
 8004066:	f7ff fe0b 	bl	8003c80 <PCD_WriteRegister>

	// Clear all IRQ bits
	PCD_WriteRegister(ComIrqReg, 0x7F);
 800406a:	217f      	movs	r1, #127	@ 0x7f
 800406c:	2008      	movs	r0, #8
 800406e:	f7ff fe07 	bl	8003c80 <PCD_WriteRegister>

	// Flush FIFO
	PCD_SetRegisterBits(FIFOLevelReg, 0x80);
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	2014      	movs	r0, #20
 8004076:	f7ff fec7 	bl	8003e08 <PCD_SetRegisterBits>

	// Write data to the FIFO
	PCD_WriteRegisterMulti(FIFODataReg, sendLen, sendData);
 800407a:	797b      	ldrb	r3, [r7, #5]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	2012      	movs	r0, #18
 8004082:	f7ff fe1f 	bl	8003cc4 <PCD_WriteRegisterMulti>

	// Set BitFramingReg
	PCD_WriteRegister(BitFramingReg, bitFraming);
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	4619      	mov	r1, r3
 800408a:	201a      	movs	r0, #26
 800408c:	f7ff fdf8 	bl	8003c80 <PCD_WriteRegister>

	// Execute the command
	PCD_WriteRegister(CommandReg, command);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	4619      	mov	r1, r3
 8004094:	2002      	movs	r0, #2
 8004096:	f7ff fdf3 	bl	8003c80 <PCD_WriteRegister>

	// Start transmission if Transceive command
	if (command == PCD_Transceive) {
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d103      	bne.n	80040a8 <PCD_CommunicateWithPICC+0x7e>
		PCD_SetRegisterBits(BitFramingReg, 0x80); // StartSend=1, transmission starts
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	201a      	movs	r0, #26
 80040a4:	f7ff feb0 	bl	8003e08 <PCD_SetRegisterBits>
	}

	// Wait for the command to complete
	i = 5000; // Timeout counter
 80040a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040ac:	613b      	str	r3, [r7, #16]
	while (1) {
		n = PCD_ReadRegister(ComIrqReg); // Check IRQ bits
 80040ae:	2008      	movs	r0, #8
 80040b0:	f7ff fe66 	bl	8003d80 <PCD_ReadRegister>
 80040b4:	4603      	mov	r3, r0
 80040b6:	737b      	strb	r3, [r7, #13]
		if (n & waitIRq) { // Success signal
 80040b8:	7b7a      	ldrb	r2, [r7, #13]
 80040ba:	79bb      	ldrb	r3, [r7, #6]
 80040bc:	4013      	ands	r3, r2
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <PCD_CommunicateWithPICC+0xb8>
			break;
		}
		if (n & 0x01) { // Timer interrupt (timeout)
 80040c4:	7b7b      	ldrb	r3, [r7, #13]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <PCD_CommunicateWithPICC+0xa8>
			return STATUS_TIMEOUT;
 80040ce:	2304      	movs	r3, #4
 80040d0:	e085      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}
		if (--i == 0) { // Emergency timeout
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e7      	bne.n	80040ae <PCD_CommunicateWithPICC+0x84>
			return STATUS_TIMEOUT;
 80040de:	2304      	movs	r3, #4
 80040e0:	e07d      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
			break;
 80040e2:	bf00      	nop
		}
	}

	// Check for errors
	uint8_t errorRegValue = PCD_ReadRegister(ErrorReg);
 80040e4:	200c      	movs	r0, #12
 80040e6:	f7ff fe4b 	bl	8003d80 <PCD_ReadRegister>
 80040ea:	4603      	mov	r3, r0
 80040ec:	733b      	strb	r3, [r7, #12]
	if (errorRegValue & 0x13) { // BufferOvfl, ParityErr, ProtocolErr
 80040ee:	7b3b      	ldrb	r3, [r7, #12]
 80040f0:	f003 0313 	and.w	r3, r3, #19
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <PCD_CommunicateWithPICC+0xd2>
		return STATUS_ERROR;
 80040f8:	2302      	movs	r3, #2
 80040fa:	e070      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
	}

	// Retrieve data if requested
	if (backData && backLen) {
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d024      	beq.n	800414c <PCD_CommunicateWithPICC+0x122>
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d021      	beq.n	800414c <PCD_CommunicateWithPICC+0x122>
		n = PCD_ReadRegister(FIFOLevelReg); // Number of bytes in FIFO
 8004108:	2014      	movs	r0, #20
 800410a:	f7ff fe39 	bl	8003d80 <PCD_ReadRegister>
 800410e:	4603      	mov	r3, r0
 8004110:	737b      	strb	r3, [r7, #13]
		if (n > *backLen) {
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	7b7a      	ldrb	r2, [r7, #13]
 8004118:	429a      	cmp	r2, r3
 800411a:	d901      	bls.n	8004120 <PCD_CommunicateWithPICC+0xf6>
			return STATUS_NO_ROOM; // Buffer overflow
 800411c:	2305      	movs	r3, #5
 800411e:	e05e      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}

		*backLen = n; // Update backLen with the number of bytes received
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	7b7a      	ldrb	r2, [r7, #13]
 8004124:	701a      	strb	r2, [r3, #0]

		// Read data from FIFO
		PCD_ReadRegisterMulti(FIFODataReg, n, backData);
 8004126:	7b7b      	ldrb	r3, [r7, #13]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	4619      	mov	r1, r3
 800412c:	2012      	movs	r0, #18
 800412e:	f7ff fef1 	bl	8003f14 <PCD_ReadRegisterMulti>

		_validBits = PCD_ReadRegister(ControlReg) & 0x07; // Get valid bits in the last byte
 8004132:	2018      	movs	r0, #24
 8004134:	f7ff fe24 	bl	8003d80 <PCD_ReadRegister>
 8004138:	4603      	mov	r3, r0
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	75fb      	strb	r3, [r7, #23]
		if (validBits) {
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <PCD_CommunicateWithPICC+0x122>
			*validBits = _validBits;
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	7dfa      	ldrb	r2, [r7, #23]
 800414a:	701a      	strb	r2, [r3, #0]
		}
	}

	// Handle collisions
	if (errorRegValue & 0x08) { // CollErr
 800414c:	7b3b      	ldrb	r3, [r7, #12]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <PCD_CommunicateWithPICC+0x130>
		return STATUS_COLLISION;
 8004156:	2303      	movs	r3, #3
 8004158:	e041      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
	}

	// Perform CRC validation if requested
	if (backData && backLen && checkCRC) {
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03d      	beq.n	80041dc <PCD_CommunicateWithPICC+0x1b2>
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03a      	beq.n	80041dc <PCD_CommunicateWithPICC+0x1b2>
 8004166:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <PCD_CommunicateWithPICC+0x1b2>
		if ((*backLen == 1) && (_validBits == 4)) {
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d104      	bne.n	8004180 <PCD_CommunicateWithPICC+0x156>
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d101      	bne.n	8004180 <PCD_CommunicateWithPICC+0x156>
			return STATUS_MIFARE_NACK; // MIFARE NAK
 800417c:	2309      	movs	r3, #9
 800417e:	e02e      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}

		if ((*backLen < 2) || (_validBits != 0)) {
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d902      	bls.n	800418e <PCD_CommunicateWithPICC+0x164>
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <PCD_CommunicateWithPICC+0x168>
			return STATUS_CRC_WRONG; // Invalid CRC
 800418e:	2308      	movs	r3, #8
 8004190:	e025      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}

		uint8_t controlBuffer[2];
		n = PCD_CalculateCRC(backData, *backLen - 2, controlBuffer);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	3b02      	subs	r3, #2
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f107 0208 	add.w	r2, r7, #8
 800419e:	4619      	mov	r1, r3
 80041a0:	6a38      	ldr	r0, [r7, #32]
 80041a2:	f7ff fefa 	bl	8003f9a <PCD_CalculateCRC>
 80041a6:	4603      	mov	r3, r0
 80041a8:	737b      	strb	r3, [r7, #13]
		if (n != STATUS_OK) {
 80041aa:	7b7b      	ldrb	r3, [r7, #13]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d001      	beq.n	80041b4 <PCD_CommunicateWithPICC+0x18a>
			return n;
 80041b0:	7b7b      	ldrb	r3, [r7, #13]
 80041b2:	e014      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}

		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	3b02      	subs	r3, #2
 80041ba:	6a3a      	ldr	r2, [r7, #32]
 80041bc:	4413      	add	r3, r2
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	7a3b      	ldrb	r3, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d108      	bne.n	80041d8 <PCD_CommunicateWithPICC+0x1ae>
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	4413      	add	r3, r2
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	7a7b      	ldrb	r3, [r7, #9]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d001      	beq.n	80041dc <PCD_CommunicateWithPICC+0x1b2>
			return STATUS_CRC_WRONG;
 80041d8:	2308      	movs	r3, #8
 80041da:	e000      	b.n	80041de <PCD_CommunicateWithPICC+0x1b4>
		}
	}

	return STATUS_OK; // Success
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <PCD_TransceiveData>:
		uint8_t sendLen,
		uint8_t *backData,
		uint8_t *backLen,
		uint8_t *validBits,
		uint8_t rxAlign,
		bool checkCRC) {
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b08c      	sub	sp, #48	@ 0x30
 80041ea:	af06      	add	r7, sp, #24
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	460b      	mov	r3, r1
 80041f4:	72fb      	strb	r3, [r7, #11]
	uint8_t waitIRq = 0x30; // Wait for RxIRq and IdleIRq
 80041f6:	2330      	movs	r3, #48	@ 0x30
 80041f8:	75fb      	strb	r3, [r7, #23]

	// Call the underlying communication function
	return PCD_CommunicateWithPICC(PCD_Transceive,
 80041fa:	7afa      	ldrb	r2, [r7, #11]
 80041fc:	7df9      	ldrb	r1, [r7, #23]
 80041fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004208:	9303      	str	r3, [sp, #12]
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	9302      	str	r3, [sp, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	200c      	movs	r0, #12
 800421c:	f7ff ff05 	bl	800402a <PCD_CommunicateWithPICC>
 8004220:	4603      	mov	r3, r0
			backData,
			backLen,
			validBits,
			rxAlign,
			checkCRC);
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <PICC_REQA_or_WUPA>:
 * @param command The command to send (PICC_CMD_REQA or PICC_CMD_WUPA).
 * @param bufferATQA Pointer to a buffer to store the ATQA response (2 bytes).
 * @param bufferSize Pointer to a variable indicating the buffer size. Must be at least 2.
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t PICC_REQA_or_WUPA(uint8_t command, uint8_t *bufferATQA, uint8_t *bufferSize) {
 800422a:	b580      	push	{r7, lr}
 800422c:	b08a      	sub	sp, #40	@ 0x28
 800422e:	af04      	add	r7, sp, #16
 8004230:	4603      	mov	r3, r0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	73fb      	strb	r3, [r7, #15]
	uint8_t validBits;
	uint8_t status;

	if (bufferATQA == NULL || *bufferSize < 2) {
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <PICC_REQA_or_WUPA+0x1c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d801      	bhi.n	800424a <PICC_REQA_or_WUPA+0x20>
		// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
 8004246:	2305      	movs	r3, #5
 8004248:	e024      	b.n	8004294 <PICC_REQA_or_WUPA+0x6a>
	}

	// ValuesAfterColl=1 => Bits received after collision are cleared.
	PCD_ClrRegisterBits(CollReg, 0x80);
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	201c      	movs	r0, #28
 800424e:	f7ff fe84 	bl	8003f5a <PCD_ClrRegisterBits>

	// For REQA and WUPA we need the short frame format
	// - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
	validBits = 7;
 8004252:	2307      	movs	r3, #7
 8004254:	75bb      	strb	r3, [r7, #22]

	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits, 0, false);
 8004256:	f107 000f 	add.w	r0, r7, #15
 800425a:	2300      	movs	r3, #0
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	2300      	movs	r3, #0
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f107 0316 	add.w	r3, r7, #22
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	2101      	movs	r1, #1
 800426e:	f7ff ffba 	bl	80041e6 <PCD_TransceiveData>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]
	if (status != STATUS_OK) {
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <PICC_REQA_or_WUPA+0x56>
		return status;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	e009      	b.n	8004294 <PICC_REQA_or_WUPA+0x6a>
	}

	if ((*bufferSize != 2) || (validBits != 0)) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d102      	bne.n	800428e <PICC_REQA_or_WUPA+0x64>
 8004288:	7dbb      	ldrb	r3, [r7, #22]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <PICC_REQA_or_WUPA+0x68>
		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
 800428e:	2302      	movs	r3, #2
 8004290:	e000      	b.n	8004294 <PICC_REQA_or_WUPA+0x6a>
	}

	return STATUS_OK;
 8004292:	2301      	movs	r3, #1
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <PICC_RequestA>:
/*
 * Transmits a REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
 * Beware: When two PICCs are in the field at the same time I often get STATUS_TIMEOUT - probably due do bad antenna design.
 */
uint8_t PICC_RequestA(uint8_t *bufferATQA, uint8_t *bufferSize)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	2026      	movs	r0, #38	@ 0x26
 80042ac:	f7ff ffbd 	bl	800422a <PICC_REQA_or_WUPA>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <PICC_Select>:
uint8_t PICC_WakeupA(uint8_t *bufferATQA, uint8_t *bufferSize)
{
	return PICC_REQA_or_WUPA(PICC_CMD_WUPA, bufferATQA, bufferSize);
}

uint8_t PICC_Select(Uid *uid, uint8_t validBits) {
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b090      	sub	sp, #64	@ 0x40
 80042be:	af04      	add	r7, sp, #16
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70fb      	strb	r3, [r7, #3]
	bool uidComplete = false;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	bool selectDone = false;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	bool useCascadeTag;
	uint8_t cascadeLevel = 1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t txLastBits;      // Last transmitted bits
	uint8_t *responseBuffer;
	uint8_t responseLength;

	// Check for validBits exceeding limits
	if (validBits > 80) {
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b50      	cmp	r3, #80	@ 0x50
 80042dc:	d901      	bls.n	80042e2 <PICC_Select+0x28>
		return STATUS_INVALID;
 80042de:	2307      	movs	r3, #7
 80042e0:	e21d      	b.n	800471e <PICC_Select+0x464>
	}

	// Clear collision register
	PCD_ClrRegisterBits(CollReg, 0x80);
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	201c      	movs	r0, #28
 80042e6:	f7ff fe38 	bl	8003f5a <PCD_ClrRegisterBits>

	// Cascade loop
	while (!uidComplete) {
 80042ea:	e205      	b.n	80046f8 <PICC_Select+0x43e>
		switch (cascadeLevel) {
 80042ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d036      	beq.n	8004362 <PICC_Select+0xa8>
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	dc3d      	bgt.n	8004374 <PICC_Select+0xba>
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d002      	beq.n	8004302 <PICC_Select+0x48>
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d018      	beq.n	8004332 <PICC_Select+0x78>
 8004300:	e038      	b.n	8004374 <PICC_Select+0xba>
		case 1:
			buffer[0] = PICC_CMD_SEL_CL1;
 8004302:	2393      	movs	r3, #147	@ 0x93
 8004304:	743b      	strb	r3, [r7, #16]
			uidIndex = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			useCascadeTag = validBits && (uid->size > 4);
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <PICC_Select+0x64>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d901      	bls.n	800431e <PICC_Select+0x64>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <PICC_Select+0x66>
 800431e:	2300      	movs	r3, #0
 8004320:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004324:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			break;
 8004330:	e022      	b.n	8004378 <PICC_Select+0xbe>
		case 2:
			buffer[0] = PICC_CMD_SEL_CL2;
 8004332:	2395      	movs	r3, #149	@ 0x95
 8004334:	743b      	strb	r3, [r7, #16]
			uidIndex = 3;
 8004336:	2303      	movs	r3, #3
 8004338:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			useCascadeTag = validBits && (uid->size > 7);
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <PICC_Select+0x94>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b07      	cmp	r3, #7
 8004348:	d901      	bls.n	800434e <PICC_Select+0x94>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <PICC_Select+0x96>
 800434e:	2300      	movs	r3, #0
 8004350:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004354:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			break;
 8004360:	e00a      	b.n	8004378 <PICC_Select+0xbe>
		case 3:
			buffer[0] = PICC_CMD_SEL_CL3;
 8004362:	2397      	movs	r3, #151	@ 0x97
 8004364:	743b      	strb	r3, [r7, #16]
			uidIndex = 6;
 8004366:	2306      	movs	r3, #6
 8004368:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			useCascadeTag = false;
 800436c:	2300      	movs	r3, #0
 800436e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			break;
 8004372:	e001      	b.n	8004378 <PICC_Select+0xbe>
		default:
			return STATUS_INTERNAL_ERROR;
 8004374:	2306      	movs	r3, #6
 8004376:	e1d2      	b.n	800471e <PICC_Select+0x464>
		}

		// Calculate the known UID bits for this cascade level
		currentLevelKnownBits = (validBits > (8 * uidIndex)) ? (validBits - (8 * uidIndex)) : 0;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	429a      	cmp	r2, r3
 8004382:	dd07      	ble.n	8004394 <PICC_Select+0xda>
 8004384:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e000      	b.n	8004396 <PICC_Select+0xdc>
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		// Copy UID bytes to buffer
		index = 2;
 800439a:	2302      	movs	r3, #2
 800439c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		if (useCascadeTag) {
 80043a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <PICC_Select+0x102>
			buffer[index++] = PICC_CMD_CT;
 80043a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	f887 202a 	strb.w	r2, [r7, #42]	@ 0x2a
 80043b2:	3330      	adds	r3, #48	@ 0x30
 80043b4:	443b      	add	r3, r7
 80043b6:	2288      	movs	r2, #136	@ 0x88
 80043b8:	f803 2c20 	strb.w	r2, [r3, #-32]
		}

		uint8_t bytesToCopy = currentLevelKnownBits / 8 + ((currentLevelKnownBits % 8) ? 1 : 0);
 80043bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80043c8:	f002 0207 	and.w	r2, r2, #7
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2201      	movne	r2, #1
 80043d4:	2200      	moveq	r2, #0
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	4413      	add	r3, r2
 80043da:	77fb      	strb	r3, [r7, #31]
		uint8_t maxBytes = useCascadeTag ? 3 : 4;
 80043dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <PICC_Select+0x12e>
 80043e4:	2303      	movs	r3, #3
 80043e6:	e000      	b.n	80043ea <PICC_Select+0x130>
 80043e8:	2304      	movs	r3, #4
 80043ea:	777b      	strb	r3, [r7, #29]

		if (bytesToCopy > maxBytes) {
 80043ec:	7ffa      	ldrb	r2, [r7, #31]
 80043ee:	7f7b      	ldrb	r3, [r7, #29]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d901      	bls.n	80043f8 <PICC_Select+0x13e>
			bytesToCopy = maxBytes;
 80043f4:	7f7b      	ldrb	r3, [r7, #29]
 80043f6:	77fb      	strb	r3, [r7, #31]
		}

		for (count = 0; count < bytesToCopy; count++) {
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	e017      	b.n	8004430 <PICC_Select+0x176>
			buffer[index++] = uid->uidByte[uidIndex + count];
 8004400:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004404:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004408:	441a      	add	r2, r3
 800440a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800440e:	1c59      	adds	r1, r3, #1
 8004410:	f887 102a 	strb.w	r1, [r7, #42]	@ 0x2a
 8004414:	4619      	mov	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	785a      	ldrb	r2, [r3, #1]
 800441c:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8004420:	443b      	add	r3, r7
 8004422:	f803 2c20 	strb.w	r2, [r3, #-32]
		for (count = 0; count < bytesToCopy; count++) {
 8004426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800442a:	3301      	adds	r3, #1
 800442c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004430:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3e2      	bcc.n	8004400 <PICC_Select+0x146>
		}

		if (useCascadeTag) {
 800443a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <PICC_Select+0x192>
			currentLevelKnownBits += 8;
 8004442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004446:	3308      	adds	r3, #8
 8004448:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		}

		// Anti-collision/selection loop
		selectDone = false;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		while (!selectDone) {
 8004452:	e0e0      	b.n	8004616 <PICC_Select+0x35c>
			if (currentLevelKnownBits >= 32) {
 8004454:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004458:	2b1f      	cmp	r3, #31
 800445a:	d928      	bls.n	80044ae <PICC_Select+0x1f4>
				buffer[1] = 0x70;
 800445c:	2370      	movs	r3, #112	@ 0x70
 800445e:	747b      	strb	r3, [r7, #17]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 8004460:	7cba      	ldrb	r2, [r7, #18]
 8004462:	7cfb      	ldrb	r3, [r7, #19]
 8004464:	4053      	eors	r3, r2
 8004466:	b2da      	uxtb	r2, r3
 8004468:	7d3b      	ldrb	r3, [r7, #20]
 800446a:	4053      	eors	r3, r2
 800446c:	b2da      	uxtb	r2, r3
 800446e:	7d7b      	ldrb	r3, [r7, #21]
 8004470:	4053      	eors	r3, r2
 8004472:	b2db      	uxtb	r3, r3
 8004474:	75bb      	strb	r3, [r7, #22]

				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 8004476:	f107 0310 	add.w	r3, r7, #16
 800447a:	1dda      	adds	r2, r3, #7
 800447c:	f107 0310 	add.w	r3, r7, #16
 8004480:	2107      	movs	r1, #7
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fd89 	bl	8003f9a <PCD_CalculateCRC>
 8004488:	4603      	mov	r3, r0
 800448a:	773b      	strb	r3, [r7, #28]
				if (result != STATUS_OK) {
 800448c:	7f3b      	ldrb	r3, [r7, #28]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <PICC_Select+0x1dc>
					return result;
 8004492:	7f3b      	ldrb	r3, [r7, #28]
 8004494:	e143      	b.n	800471e <PICC_Select+0x464>
				}

				txLastBits = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
				bufferUsed = 9;
 800449a:	2309      	movs	r3, #9
 800449c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				responseBuffer = &buffer[6];
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	3306      	adds	r3, #6
 80044a6:	623b      	str	r3, [r7, #32]
				responseLength = 3;
 80044a8:	2303      	movs	r3, #3
 80044aa:	73bb      	strb	r3, [r7, #14]
 80044ac:	e02f      	b.n	800450e <PICC_Select+0x254>
			} else {
				txLastBits = currentLevelKnownBits % 8;
 80044ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	73fb      	strb	r3, [r7, #15]
				count = currentLevelKnownBits / 8;
 80044ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				index = 2 + count;
 80044c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044c8:	3302      	adds	r3, #2
 80044ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				buffer[1] = (index << 4) + txLastBits;
 80044ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	4413      	add	r3, r2
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	747b      	strb	r3, [r7, #17]
				bufferUsed = index + (txLastBits ? 1 : 0);
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044f0:	4413      	add	r3, r2
 80044f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

				responseBuffer = &buffer[index];
 80044f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044fa:	f107 0210 	add.w	r2, r7, #16
 80044fe:	4413      	add	r3, r2
 8004500:	623b      	str	r3, [r7, #32]
				responseLength = sizeof(buffer) - index;
 8004502:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004506:	f1c3 0309 	rsb	r3, r3, #9
 800450a:	b2db      	uxtb	r3, r3
 800450c:	73bb      	strb	r3, [r7, #14]
			}

			// Set bit framing
			rxAlign = txLastBits;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	76fb      	strb	r3, [r7, #27]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);
 8004512:	7efb      	ldrb	r3, [r7, #27]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	b2da      	uxtb	r2, r3
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	4413      	add	r3, r2
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	201a      	movs	r0, #26
 8004522:	f7ff fbad 	bl	8003c80 <PCD_WriteRegister>

			// Transmit and receive
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign, false);
 8004526:	f107 020e 	add.w	r2, r7, #14
 800452a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800452e:	f107 0010 	add.w	r0, r7, #16
 8004532:	2300      	movs	r3, #0
 8004534:	9302      	str	r3, [sp, #8]
 8004536:	7efb      	ldrb	r3, [r7, #27]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	f107 030f 	add.w	r3, r7, #15
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	6a3a      	ldr	r2, [r7, #32]
 8004544:	f7ff fe4f 	bl	80041e6 <PCD_TransceiveData>
 8004548:	4603      	mov	r3, r0
 800454a:	773b      	strb	r3, [r7, #28]
			if (result == STATUS_COLLISION) {
 800454c:	7f3b      	ldrb	r3, [r7, #28]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d151      	bne.n	80045f6 <PICC_Select+0x33c>
				result = PCD_ReadRegister(CollReg);
 8004552:	201c      	movs	r0, #28
 8004554:	f7ff fc14 	bl	8003d80 <PCD_ReadRegister>
 8004558:	4603      	mov	r3, r0
 800455a:	773b      	strb	r3, [r7, #28]
				if (result & 0x20) {
 800455c:	7f3b      	ldrb	r3, [r7, #28]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <PICC_Select+0x2b0>
					return STATUS_COLLISION;
 8004566:	2303      	movs	r3, #3
 8004568:	e0d9      	b.n	800471e <PICC_Select+0x464>
				}

				uint8_t collisionPos = result & 0x1F;
 800456a:	7f3b      	ldrb	r3, [r7, #28]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	77bb      	strb	r3, [r7, #30]
				if (collisionPos == 0) {
 8004572:	7fbb      	ldrb	r3, [r7, #30]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <PICC_Select+0x2c2>
					collisionPos = 32;
 8004578:	2320      	movs	r3, #32
 800457a:	77bb      	strb	r3, [r7, #30]
				}

				if (collisionPos <= currentLevelKnownBits) {
 800457c:	7fba      	ldrb	r2, [r7, #30]
 800457e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004582:	429a      	cmp	r2, r3
 8004584:	d801      	bhi.n	800458a <PICC_Select+0x2d0>
					return STATUS_INTERNAL_ERROR;
 8004586:	2306      	movs	r3, #6
 8004588:	e0c9      	b.n	800471e <PICC_Select+0x464>
				}

				currentLevelKnownBits = collisionPos;
 800458a:	7fbb      	ldrb	r3, [r7, #30]
 800458c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
				count = (currentLevelKnownBits - 1) % 8;
 8004590:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	425a      	negs	r2, r3
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	f002 0207 	and.w	r2, r2, #7
 80045a0:	bf58      	it	pl
 80045a2:	4253      	negpl	r3, r2
 80045a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
 80045a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045ac:	08db      	lsrs	r3, r3, #3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80045b4:	2a00      	cmp	r2, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2201      	movne	r2, #1
 80045ba:	2200      	moveq	r2, #0
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	4413      	add	r3, r2
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				buffer[index] |= (1 << count);
 80045c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045cc:	3330      	adds	r3, #48	@ 0x30
 80045ce:	443b      	add	r3, r7
 80045d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80045d4:	b25a      	sxtb	r2, r3
 80045d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b25a      	sxtb	r2, r3
 80045e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	3330      	adds	r3, #48	@ 0x30
 80045ee:	443b      	add	r3, r7
 80045f0:	f803 2c20 	strb.w	r2, [r3, #-32]
 80045f4:	e00f      	b.n	8004616 <PICC_Select+0x35c>
			} else if (result != STATUS_OK) {
 80045f6:	7f3b      	ldrb	r3, [r7, #28]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d001      	beq.n	8004600 <PICC_Select+0x346>
				return result;
 80045fc:	7f3b      	ldrb	r3, [r7, #28]
 80045fe:	e08e      	b.n	800471e <PICC_Select+0x464>
			} else {
				if (currentLevelKnownBits >= 32) {
 8004600:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004604:	2b1f      	cmp	r3, #31
 8004606:	d903      	bls.n	8004610 <PICC_Select+0x356>
					selectDone = true;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800460e:	e002      	b.n	8004616 <PICC_Select+0x35c>
				} else {
					currentLevelKnownBits = 32;
 8004610:	2320      	movs	r3, #32
 8004612:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		while (!selectDone) {
 8004616:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800461a:	f083 0301 	eor.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	f47f af17 	bne.w	8004454 <PICC_Select+0x19a>
				}
			}
		}

		index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
 8004626:	7cbb      	ldrb	r3, [r7, #18]
 8004628:	2b88      	cmp	r3, #136	@ 0x88
 800462a:	d101      	bne.n	8004630 <PICC_Select+0x376>
 800462c:	2303      	movs	r3, #3
 800462e:	e000      	b.n	8004632 <PICC_Select+0x378>
 8004630:	2302      	movs	r3, #2
 8004632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 8004636:	7cbb      	ldrb	r3, [r7, #18]
 8004638:	2b88      	cmp	r3, #136	@ 0x88
 800463a:	d101      	bne.n	8004640 <PICC_Select+0x386>
 800463c:	2303      	movs	r3, #3
 800463e:	e000      	b.n	8004642 <PICC_Select+0x388>
 8004640:	2304      	movs	r3, #4
 8004642:	77fb      	strb	r3, [r7, #31]
		for (count = 0; count < bytesToCopy; count++) {
 8004644:	2300      	movs	r3, #0
 8004646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800464a:	e018      	b.n	800467e <PICC_Select+0x3c4>
			uid->uidByte[uidIndex + count] = buffer[index++];
 800464c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	f887 202a 	strb.w	r2, [r7, #42]	@ 0x2a
 8004656:	4619      	mov	r1, r3
 8004658:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800465c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004660:	4413      	add	r3, r2
 8004662:	f101 0230 	add.w	r2, r1, #48	@ 0x30
 8004666:	443a      	add	r2, r7
 8004668:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	460a      	mov	r2, r1
 8004672:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < bytesToCopy; count++) {
 8004674:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004678:	3301      	adds	r3, #1
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3e1      	bcc.n	800464c <PICC_Select+0x392>
		}

		if (responseLength != 3 || txLastBits != 0) {
 8004688:	7bbb      	ldrb	r3, [r7, #14]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d102      	bne.n	8004694 <PICC_Select+0x3da>
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <PICC_Select+0x3de>
			return STATUS_ERROR;
 8004694:	2302      	movs	r3, #2
 8004696:	e042      	b.n	800471e <PICC_Select+0x464>
		}

		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	3302      	adds	r3, #2
 800469e:	461a      	mov	r2, r3
 80046a0:	2101      	movs	r1, #1
 80046a2:	6a38      	ldr	r0, [r7, #32]
 80046a4:	f7ff fc79 	bl	8003f9a <PCD_CalculateCRC>
 80046a8:	4603      	mov	r3, r0
 80046aa:	773b      	strb	r3, [r7, #28]
		if (result != STATUS_OK) {
 80046ac:	7f3b      	ldrb	r3, [r7, #28]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <PICC_Select+0x3fc>
			return result;
 80046b2:	7f3b      	ldrb	r3, [r7, #28]
 80046b4:	e033      	b.n	800471e <PICC_Select+0x464>
		}

		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80046b6:	7cba      	ldrb	r2, [r7, #18]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	3301      	adds	r3, #1
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d105      	bne.n	80046ce <PICC_Select+0x414>
 80046c2:	7cfa      	ldrb	r2, [r7, #19]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	3302      	adds	r3, #2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <PICC_Select+0x418>
			return STATUS_CRC_WRONG;
 80046ce:	2308      	movs	r3, #8
 80046d0:	e025      	b.n	800471e <PICC_Select+0x464>
		}

		if (responseBuffer[0] & 0x04) {
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <PICC_Select+0x430>
			cascadeLevel++;
 80046de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80046e2:	3301      	adds	r3, #1
 80046e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80046e8:	e006      	b.n	80046f8 <PICC_Select+0x43e>
		} else {
			uidComplete = true;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			uid->sak = responseBuffer[0];
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	72da      	strb	r2, [r3, #11]
	while (!uidComplete) {
 80046f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046fc:	f083 0301 	eor.w	r3, r3, #1
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f adf2 	bne.w	80042ec <PICC_Select+0x32>
		}
	}

	uid->size = 3 * cascadeLevel + 1;
 8004708:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800470c:	461a      	mov	r2, r3
 800470e:	0052      	lsls	r2, r2, #1
 8004710:	4413      	add	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3301      	adds	r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 800471c:	2301      	movs	r3, #1
}
 800471e:	4618      	mov	r0, r3
 8004720:	3730      	adds	r7, #48	@ 0x30
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <PCD_Authenticate>:
 * @param blockAddr The block address to authenticate.
 * @param key Pointer to the MIFARE_Key structure containing the key.
 * @param uid Pointer to the Uid structure containing the card's UID.
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t PCD_Authenticate(uint8_t command, uint8_t blockAddr, MIFARE_Key *key, Uid *uid) {
 8004726:	b580      	push	{r7, lr}
 8004728:	b08e      	sub	sp, #56	@ 0x38
 800472a:	af06      	add	r7, sp, #24
 800472c:	60ba      	str	r2, [r7, #8]
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	4603      	mov	r3, r0
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	460b      	mov	r3, r1
 8004736:	73bb      	strb	r3, [r7, #14]
	uint8_t sendData[12];
	uint8_t waitIRq = 0x10; // IdleIRq
 8004738:	2310      	movs	r3, #16
 800473a:	777b      	strb	r3, [r7, #29]

	// Build the command buffer
	sendData[0] = command; // Authentication command
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	743b      	strb	r3, [r7, #16]
	sendData[1] = blockAddr; // Block address
 8004740:	7bbb      	ldrb	r3, [r7, #14]
 8004742:	747b      	strb	r3, [r7, #17]

	// Copy the key into the buffer
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e00b      	b.n	8004762 <PCD_Authenticate+0x3c>
		sendData[2 + i] = key->keyByte[i];
 800474a:	7ffa      	ldrb	r2, [r7, #31]
 800474c:	7ffb      	ldrb	r3, [r7, #31]
 800474e:	3302      	adds	r3, #2
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	5c8a      	ldrb	r2, [r1, r2]
 8004754:	3320      	adds	r3, #32
 8004756:	443b      	add	r3, r7
 8004758:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < MF_KEY_SIZE; i++) {
 800475c:	7ffb      	ldrb	r3, [r7, #31]
 800475e:	3301      	adds	r3, #1
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	7ffb      	ldrb	r3, [r7, #31]
 8004764:	2b05      	cmp	r3, #5
 8004766:	d9f0      	bls.n	800474a <PCD_Authenticate+0x24>
	}

	// Copy the first 4 bytes of the UID into the buffer
	for (uint8_t i = 0; i < 4; i++) {
 8004768:	2300      	movs	r3, #0
 800476a:	77bb      	strb	r3, [r7, #30]
 800476c:	e00c      	b.n	8004788 <PCD_Authenticate+0x62>
		sendData[8 + i] = uid->uidByte[i];
 800476e:	7fba      	ldrb	r2, [r7, #30]
 8004770:	7fbb      	ldrb	r3, [r7, #30]
 8004772:	3308      	adds	r3, #8
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	440a      	add	r2, r1
 8004778:	7852      	ldrb	r2, [r2, #1]
 800477a:	3320      	adds	r3, #32
 800477c:	443b      	add	r3, r7
 800477e:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 4; i++) {
 8004782:	7fbb      	ldrb	r3, [r7, #30]
 8004784:	3301      	adds	r3, #1
 8004786:	77bb      	strb	r3, [r7, #30]
 8004788:	7fbb      	ldrb	r3, [r7, #30]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d9ef      	bls.n	800476e <PCD_Authenticate+0x48>
	}

	// Start the authentication process
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, sendData, sizeof(sendData), NULL, NULL, NULL, 0, false);
 800478e:	f107 0210 	add.w	r2, r7, #16
 8004792:	7f79      	ldrb	r1, [r7, #29]
 8004794:	2300      	movs	r3, #0
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	2300      	movs	r3, #0
 800479a:	9303      	str	r3, [sp, #12]
 800479c:	2300      	movs	r3, #0
 800479e:	9302      	str	r3, [sp, #8]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	2300      	movs	r3, #0
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	230c      	movs	r3, #12
 80047aa:	200e      	movs	r0, #14
 80047ac:	f7ff fc3d 	bl	800402a <PCD_CommunicateWithPICC>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <PCD_StopCrypto1>:

void PCD_StopCrypto1()
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	af00      	add	r7, sp, #0
	// Clear MFCrypto1On bit
	PCD_ClrRegisterBits(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
 80047be:	2108      	movs	r1, #8
 80047c0:	2010      	movs	r0, #16
 80047c2:	f7ff fbca 	bl	8003f5a <PCD_ClrRegisterBits>
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}

080047ca <MIFARE_Read>:


uint8_t MIFARE_Read(uint8_t blockAddr, uint8_t *buffer, uint8_t *bufferSize) {
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08a      	sub	sp, #40	@ 0x28
 80047ce:	af04      	add	r7, sp, #16
 80047d0:	4603      	mov	r3, r0
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	73fb      	strb	r3, [r7, #15]
    uint8_t result = STATUS_NO_ROOM;
 80047d8:	2305      	movs	r3, #5
 80047da:	75fb      	strb	r3, [r7, #23]

    // Sanity check
    if ((buffer == NULL) || (*bufferSize < 18)) {
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <MIFARE_Read+0x20>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b11      	cmp	r3, #17
 80047e8:	d801      	bhi.n	80047ee <MIFARE_Read+0x24>
        return result;
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	e021      	b.n	8004832 <MIFARE_Read+0x68>
    }

    // Build command buffer
    buffer[0] = PICC_CMD_MF_READ; // Read command
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2230      	movs	r2, #48	@ 0x30
 80047f2:	701a      	strb	r2, [r3, #0]
    buffer[1] = blockAddr;        // Block address to read
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3301      	adds	r3, #1
 80047f8:	7bfa      	ldrb	r2, [r7, #15]
 80047fa:	701a      	strb	r2, [r3, #0]

    // Calculate CRC_A
    result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	3302      	adds	r3, #2
 8004800:	461a      	mov	r2, r3
 8004802:	2102      	movs	r1, #2
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f7ff fbc8 	bl	8003f9a <PCD_CalculateCRC>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]
    if (result != STATUS_OK) {
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d001      	beq.n	8004818 <MIFARE_Read+0x4e>
        return result; // Return if CRC calculation fails
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	e00c      	b.n	8004832 <MIFARE_Read+0x68>
    }

    // Transmit the buffer and receive the response, validate CRC_A
    return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
 8004818:	2301      	movs	r3, #1
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	2300      	movs	r3, #0
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	2300      	movs	r3, #0
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	2104      	movs	r1, #4
 800482a:	68b8      	ldr	r0, [r7, #8]
 800482c:	f7ff fcdb 	bl	80041e6 <PCD_TransceiveData>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <PICC_IsNewCardPresent>:
    }

    return retType;
}

bool PICC_IsNewCardPresent(void) {
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
    uint8_t bufferATQA[2];
    uint8_t bufferSize = sizeof(bufferATQA);
 8004840:	2302      	movs	r3, #2
 8004842:	70fb      	strb	r3, [r7, #3]

    // Reset the MFRC522's internal state and antennas
    PCD_ClrRegisterBits(Status2Reg, 0x08); // Clear MFCrypto1On bit
 8004844:	2108      	movs	r1, #8
 8004846:	2010      	movs	r0, #16
 8004848:	f7ff fb87 	bl	8003f5a <PCD_ClrRegisterBits>
    PCD_WriteRegister(CommandReg, PCD_Idle);   // Stop any active command
 800484c:	2100      	movs	r1, #0
 800484e:	2002      	movs	r0, #2
 8004850:	f7ff fa16 	bl	8003c80 <PCD_WriteRegister>
    PCD_ClrRegisterBits(CollReg, 0x80);  // Clear ValuesAfterColl
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	201c      	movs	r0, #28
 8004858:	f7ff fb7f 	bl	8003f5a <PCD_ClrRegisterBits>

    // Send a REQA command to check for the presence of a new card
    uint8_t result = PICC_RequestA(bufferATQA, &bufferSize);
 800485c:	1cfa      	adds	r2, r7, #3
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fd1a 	bl	800429c <PICC_RequestA>
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]

    // If no card responds, return false
    if (result != STATUS_OK) {
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d001      	beq.n	8004876 <PICC_IsNewCardPresent+0x3c>
        return false;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <PICC_IsNewCardPresent+0x3e>
    }

    // A new card is present
    return true;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <PICC_ReadCardSerial>:

bool PICC_ReadCardSerial(Uid *uid) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    uint8_t result;

    // Attempt to select the card and retrieve its UID
    result = PICC_Select(uid, 0); // Pass the UID structure and 0 known valid bits
 8004888:	2100      	movs	r1, #0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fd15 	bl	80042ba <PICC_Select>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]
    if (result != STATUS_OK) {
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <PICC_ReadCardSerial+0x1e>
        return false; // Selection failed
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <PICC_ReadCardSerial+0x20>
    }

    return true; // UID successfully read
 800489e:	2301      	movs	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <MIFARE_Write>:
 * @param blockAddr The block address to write the data to.
 * @param buffer Pointer to the data to write.
 * @param bufferSize The size of the data to write (must be 16).
 * @return Status code (e.g., STATUS_OK, STATUS_TIMEOUT, STATUS_ERROR).
 */
uint8_t MIFARE_Write(uint8_t blockAddr, uint8_t *buffer, uint8_t bufferSize) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	@ 0x30
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	71fb      	strb	r3, [r7, #7]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71bb      	strb	r3, [r7, #6]
    uint8_t result;
    uint8_t cmdBuffer[18]; // Buffer for data (16 bytes) + CRC_A (2 bytes)

    // Sanity check
    if (buffer == NULL || bufferSize != 16) {
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <MIFARE_Write+0x1c>
 80048be:	79bb      	ldrb	r3, [r7, #6]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d001      	beq.n	80048c8 <MIFARE_Write+0x20>
        return STATUS_INVALID;
 80048c4:	2307      	movs	r3, #7
 80048c6:	e056      	b.n	8004976 <MIFARE_Write+0xce>
    }

    // Build the command buffer
    cmdBuffer[0] = PICC_CMD_MF_WRITE; // Write command
 80048c8:	23a0      	movs	r3, #160	@ 0xa0
 80048ca:	733b      	strb	r3, [r7, #12]
    cmdBuffer[1] = blockAddr;         // Block address
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	737b      	strb	r3, [r7, #13]

    // Calculate CRC_A for the command
    result = PCD_CalculateCRC(cmdBuffer, 2, &cmdBuffer[2]);
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	2102      	movs	r1, #2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fb5c 	bl	8003f9a <PCD_CalculateCRC>
 80048e2:	4603      	mov	r3, r0
 80048e4:	77fb      	strb	r3, [r7, #31]
    if (result != STATUS_OK) {
 80048e6:	7ffb      	ldrb	r3, [r7, #31]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d001      	beq.n	80048f0 <MIFARE_Write+0x48>
        return result; // Return if CRC calculation fails
 80048ec:	7ffb      	ldrb	r3, [r7, #31]
 80048ee:	e042      	b.n	8004976 <MIFARE_Write+0xce>
    }

    // Transmit the command buffer
    result = PCD_TransceiveData(cmdBuffer, 4, NULL, NULL, NULL, 0, false);
 80048f0:	f107 000c 	add.w	r0, r7, #12
 80048f4:	2300      	movs	r3, #0
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	2300      	movs	r3, #0
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	2200      	movs	r2, #0
 8004904:	2104      	movs	r1, #4
 8004906:	f7ff fc6e 	bl	80041e6 <PCD_TransceiveData>
 800490a:	4603      	mov	r3, r0
 800490c:	77fb      	strb	r3, [r7, #31]
    if (result != STATUS_OK) {
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <MIFARE_Write+0x70>
        return result; // Return communication error
 8004914:	7ffb      	ldrb	r3, [r7, #31]
 8004916:	e02e      	b.n	8004976 <MIFARE_Write+0xce>
    }

    // Copy the data to the buffer
    memcpy(cmdBuffer, buffer, bufferSize);
 8004918:	79ba      	ldrb	r2, [r7, #6]
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	6839      	ldr	r1, [r7, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb06 	bl	8004f32 <memcpy>

    // Calculate CRC_A for the data
    result = PCD_CalculateCRC(cmdBuffer, bufferSize, &cmdBuffer[bufferSize]);
 8004926:	79bb      	ldrb	r3, [r7, #6]
 8004928:	f107 020c 	add.w	r2, r7, #12
 800492c:	441a      	add	r2, r3
 800492e:	79b9      	ldrb	r1, [r7, #6]
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fb30 	bl	8003f9a <PCD_CalculateCRC>
 800493a:	4603      	mov	r3, r0
 800493c:	77fb      	strb	r3, [r7, #31]
    if (result != STATUS_OK) {
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <MIFARE_Write+0xa0>
        return result; // Return if CRC calculation fails
 8004944:	7ffb      	ldrb	r3, [r7, #31]
 8004946:	e016      	b.n	8004976 <MIFARE_Write+0xce>
    }

    // Transmit the data buffer
    result = PCD_TransceiveData(cmdBuffer, bufferSize + 2, NULL, NULL, NULL, 0, false);
 8004948:	79bb      	ldrb	r3, [r7, #6]
 800494a:	3302      	adds	r3, #2
 800494c:	b2d9      	uxtb	r1, r3
 800494e:	f107 000c 	add.w	r0, r7, #12
 8004952:	2300      	movs	r3, #0
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	2300      	movs	r3, #0
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2300      	movs	r3, #0
 8004960:	2200      	movs	r2, #0
 8004962:	f7ff fc40 	bl	80041e6 <PCD_TransceiveData>
 8004966:	4603      	mov	r3, r0
 8004968:	77fb      	strb	r3, [r7, #31]
    if (result != STATUS_OK) {
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <MIFARE_Write+0xcc>
        return result; // Return communication error
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	e000      	b.n	8004976 <MIFARE_Write+0xce>
    }

    return STATUS_OK; // Write successful
 8004974:	2301      	movs	r3, #1
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <GetStatusCodeName>:
/**
 * @brief Returns the name of a status code.
 * @param code The status code.
 * @return Pointer to a string containing the status code name.
 */
char *GetStatusCodeName(uint8_t code) {
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
    switch (code) {
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	3b01      	subs	r3, #1
 800498e:	2b08      	cmp	r3, #8
 8004990:	d826      	bhi.n	80049e0 <GetStatusCodeName+0x60>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <GetStatusCodeName+0x18>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049dd 	.word	0x080049dd
        case STATUS_OK:
            return "Success";
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <GetStatusCodeName+0x70>)
 80049be:	e010      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_ERROR:
            return "Error in communication";
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <GetStatusCodeName+0x74>)
 80049c2:	e00e      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_COLLISION:
            return "Collision detected";
 80049c4:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <GetStatusCodeName+0x78>)
 80049c6:	e00c      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_TIMEOUT:
            return "Timeout in communication";
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <GetStatusCodeName+0x7c>)
 80049ca:	e00a      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_NO_ROOM:
            return "A buffer is not big enough";
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <GetStatusCodeName+0x80>)
 80049ce:	e008      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_INTERNAL_ERROR:
            return "Internal error in the code, should not happen";
 80049d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <GetStatusCodeName+0x84>)
 80049d2:	e006      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_INVALID:
            return "Invalid argument";
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <GetStatusCodeName+0x88>)
 80049d6:	e004      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_CRC_WRONG:
            return "The CRC_A does not match";
 80049d8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a0c <GetStatusCodeName+0x8c>)
 80049da:	e002      	b.n	80049e2 <GetStatusCodeName+0x62>
        case STATUS_MIFARE_NACK:
            return "A MIFARE PICC responded with NAK";
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <GetStatusCodeName+0x90>)
 80049de:	e000      	b.n	80049e2 <GetStatusCodeName+0x62>
        default:
            return "Unknown error";
 80049e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <GetStatusCodeName+0x94>)
    }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	08005f0c 	.word	0x08005f0c
 80049f4:	08005f14 	.word	0x08005f14
 80049f8:	08005f2c 	.word	0x08005f2c
 80049fc:	08005f40 	.word	0x08005f40
 8004a00:	08005f5c 	.word	0x08005f5c
 8004a04:	08005f78 	.word	0x08005f78
 8004a08:	08005fa8 	.word	0x08005fa8
 8004a0c:	08005fbc 	.word	0x08005fbc
 8004a10:	08005fd8 	.word	0x08005fd8
 8004a14:	08005ffc 	.word	0x08005ffc

08004a18 <std>:
 8004a18:	2300      	movs	r3, #0
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a26:	6083      	str	r3, [r0, #8]
 8004a28:	8181      	strh	r1, [r0, #12]
 8004a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a2c:	81c2      	strh	r2, [r0, #14]
 8004a2e:	6183      	str	r3, [r0, #24]
 8004a30:	4619      	mov	r1, r3
 8004a32:	2208      	movs	r2, #8
 8004a34:	305c      	adds	r0, #92	@ 0x5c
 8004a36:	f000 fa01 	bl	8004e3c <memset>
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <std+0x58>)
 8004a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <std+0x5c>)
 8004a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <std+0x60>)
 8004a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <std+0x64>)
 8004a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a80 <std+0x68>)
 8004a4c:	6224      	str	r4, [r4, #32]
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d006      	beq.n	8004a60 <std+0x48>
 8004a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a56:	4294      	cmp	r4, r2
 8004a58:	d002      	beq.n	8004a60 <std+0x48>
 8004a5a:	33d0      	adds	r3, #208	@ 0xd0
 8004a5c:	429c      	cmp	r4, r3
 8004a5e:	d105      	bne.n	8004a6c <std+0x54>
 8004a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a68:	f000 ba60 	b.w	8004f2c <__retarget_lock_init_recursive>
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	bf00      	nop
 8004a70:	08004c8d 	.word	0x08004c8d
 8004a74:	08004caf 	.word	0x08004caf
 8004a78:	08004ce7 	.word	0x08004ce7
 8004a7c:	08004d0b 	.word	0x08004d0b
 8004a80:	20000384 	.word	0x20000384

08004a84 <stdio_exit_handler>:
 8004a84:	4a02      	ldr	r2, [pc, #8]	@ (8004a90 <stdio_exit_handler+0xc>)
 8004a86:	4903      	ldr	r1, [pc, #12]	@ (8004a94 <stdio_exit_handler+0x10>)
 8004a88:	4803      	ldr	r0, [pc, #12]	@ (8004a98 <stdio_exit_handler+0x14>)
 8004a8a:	f000 b869 	b.w	8004b60 <_fwalk_sglue>
 8004a8e:	bf00      	nop
 8004a90:	2000000c 	.word	0x2000000c
 8004a94:	080057e9 	.word	0x080057e9
 8004a98:	2000001c 	.word	0x2000001c

08004a9c <cleanup_stdio>:
 8004a9c:	6841      	ldr	r1, [r0, #4]
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <cleanup_stdio+0x34>)
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	d001      	beq.n	8004aac <cleanup_stdio+0x10>
 8004aa8:	f000 fe9e 	bl	80057e8 <_fflush_r>
 8004aac:	68a1      	ldr	r1, [r4, #8]
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <cleanup_stdio+0x38>)
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	d002      	beq.n	8004aba <cleanup_stdio+0x1e>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 fe97 	bl	80057e8 <_fflush_r>
 8004aba:	68e1      	ldr	r1, [r4, #12]
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <cleanup_stdio+0x3c>)
 8004abe:	4299      	cmp	r1, r3
 8004ac0:	d004      	beq.n	8004acc <cleanup_stdio+0x30>
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac8:	f000 be8e 	b.w	80057e8 <_fflush_r>
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000384 	.word	0x20000384
 8004ad4:	200003ec 	.word	0x200003ec
 8004ad8:	20000454 	.word	0x20000454

08004adc <global_stdio_init.part.0>:
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <global_stdio_init.part.0+0x30>)
 8004ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8004b10 <global_stdio_init.part.0+0x34>)
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8004b14 <global_stdio_init.part.0+0x38>)
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2104      	movs	r1, #4
 8004aec:	f7ff ff94 	bl	8004a18 <std>
 8004af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004af4:	2201      	movs	r2, #1
 8004af6:	2109      	movs	r1, #9
 8004af8:	f7ff ff8e 	bl	8004a18 <std>
 8004afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b00:	2202      	movs	r2, #2
 8004b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b06:	2112      	movs	r1, #18
 8004b08:	f7ff bf86 	b.w	8004a18 <std>
 8004b0c:	200004bc 	.word	0x200004bc
 8004b10:	20000384 	.word	0x20000384
 8004b14:	08004a85 	.word	0x08004a85

08004b18 <__sfp_lock_acquire>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__sfp_lock_acquire+0x8>)
 8004b1a:	f000 ba08 	b.w	8004f2e <__retarget_lock_acquire_recursive>
 8004b1e:	bf00      	nop
 8004b20:	200004c5 	.word	0x200004c5

08004b24 <__sfp_lock_release>:
 8004b24:	4801      	ldr	r0, [pc, #4]	@ (8004b2c <__sfp_lock_release+0x8>)
 8004b26:	f000 ba03 	b.w	8004f30 <__retarget_lock_release_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	200004c5 	.word	0x200004c5

08004b30 <__sinit>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	4604      	mov	r4, r0
 8004b34:	f7ff fff0 	bl	8004b18 <__sfp_lock_acquire>
 8004b38:	6a23      	ldr	r3, [r4, #32]
 8004b3a:	b11b      	cbz	r3, 8004b44 <__sinit+0x14>
 8004b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b40:	f7ff bff0 	b.w	8004b24 <__sfp_lock_release>
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <__sinit+0x28>)
 8004b46:	6223      	str	r3, [r4, #32]
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <__sinit+0x2c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f5      	bne.n	8004b3c <__sinit+0xc>
 8004b50:	f7ff ffc4 	bl	8004adc <global_stdio_init.part.0>
 8004b54:	e7f2      	b.n	8004b3c <__sinit+0xc>
 8004b56:	bf00      	nop
 8004b58:	08004a9d 	.word	0x08004a9d
 8004b5c:	200004bc 	.word	0x200004bc

08004b60 <_fwalk_sglue>:
 8004b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b64:	4607      	mov	r7, r0
 8004b66:	4688      	mov	r8, r1
 8004b68:	4614      	mov	r4, r2
 8004b6a:	2600      	movs	r6, #0
 8004b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b70:	f1b9 0901 	subs.w	r9, r9, #1
 8004b74:	d505      	bpl.n	8004b82 <_fwalk_sglue+0x22>
 8004b76:	6824      	ldr	r4, [r4, #0]
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	d1f7      	bne.n	8004b6c <_fwalk_sglue+0xc>
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b82:	89ab      	ldrh	r3, [r5, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d907      	bls.n	8004b98 <_fwalk_sglue+0x38>
 8004b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	d003      	beq.n	8004b98 <_fwalk_sglue+0x38>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4638      	mov	r0, r7
 8004b94:	47c0      	blx	r8
 8004b96:	4306      	orrs	r6, r0
 8004b98:	3568      	adds	r5, #104	@ 0x68
 8004b9a:	e7e9      	b.n	8004b70 <_fwalk_sglue+0x10>

08004b9c <iprintf>:
 8004b9c:	b40f      	push	{r0, r1, r2, r3}
 8004b9e:	b507      	push	{r0, r1, r2, lr}
 8004ba0:	4906      	ldr	r1, [pc, #24]	@ (8004bbc <iprintf+0x20>)
 8004ba2:	ab04      	add	r3, sp, #16
 8004ba4:	6808      	ldr	r0, [r1, #0]
 8004ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004baa:	6881      	ldr	r1, [r0, #8]
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	f000 faf1 	bl	8005194 <_vfiprintf_r>
 8004bb2:	b003      	add	sp, #12
 8004bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb8:	b004      	add	sp, #16
 8004bba:	4770      	bx	lr
 8004bbc:	20000018 	.word	0x20000018

08004bc0 <putchar>:
 8004bc0:	4b02      	ldr	r3, [pc, #8]	@ (8004bcc <putchar+0xc>)
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	6882      	ldr	r2, [r0, #8]
 8004bc8:	f000 be98 	b.w	80058fc <_putc_r>
 8004bcc:	20000018 	.word	0x20000018

08004bd0 <_puts_r>:
 8004bd0:	6a03      	ldr	r3, [r0, #32]
 8004bd2:	b570      	push	{r4, r5, r6, lr}
 8004bd4:	6884      	ldr	r4, [r0, #8]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	460e      	mov	r6, r1
 8004bda:	b90b      	cbnz	r3, 8004be0 <_puts_r+0x10>
 8004bdc:	f7ff ffa8 	bl	8004b30 <__sinit>
 8004be0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004be2:	07db      	lsls	r3, r3, #31
 8004be4:	d405      	bmi.n	8004bf2 <_puts_r+0x22>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	0598      	lsls	r0, r3, #22
 8004bea:	d402      	bmi.n	8004bf2 <_puts_r+0x22>
 8004bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bee:	f000 f99e 	bl	8004f2e <__retarget_lock_acquire_recursive>
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	0719      	lsls	r1, r3, #28
 8004bf6:	d502      	bpl.n	8004bfe <_puts_r+0x2e>
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d135      	bne.n	8004c6a <_puts_r+0x9a>
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	f000 f8c5 	bl	8004d90 <__swsetup_r>
 8004c06:	b380      	cbz	r0, 8004c6a <_puts_r+0x9a>
 8004c08:	f04f 35ff 	mov.w	r5, #4294967295
 8004c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c0e:	07da      	lsls	r2, r3, #31
 8004c10:	d405      	bmi.n	8004c1e <_puts_r+0x4e>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	059b      	lsls	r3, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_puts_r+0x4e>
 8004c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1a:	f000 f989 	bl	8004f30 <__retarget_lock_release_recursive>
 8004c1e:	4628      	mov	r0, r5
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da04      	bge.n	8004c30 <_puts_r+0x60>
 8004c26:	69a2      	ldr	r2, [r4, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	dc17      	bgt.n	8004c5c <_puts_r+0x8c>
 8004c2c:	290a      	cmp	r1, #10
 8004c2e:	d015      	beq.n	8004c5c <_puts_r+0x8c>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	6022      	str	r2, [r4, #0]
 8004c36:	7019      	strb	r1, [r3, #0]
 8004c38:	68a3      	ldr	r3, [r4, #8]
 8004c3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d1ed      	bne.n	8004c22 <_puts_r+0x52>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da11      	bge.n	8004c6e <_puts_r+0x9e>
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	210a      	movs	r1, #10
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f85f 	bl	8004d12 <__swbuf_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0d7      	beq.n	8004c08 <_puts_r+0x38>
 8004c58:	250a      	movs	r5, #10
 8004c5a:	e7d7      	b.n	8004c0c <_puts_r+0x3c>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f857 	bl	8004d12 <__swbuf_r>
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1e7      	bne.n	8004c38 <_puts_r+0x68>
 8004c68:	e7ce      	b.n	8004c08 <_puts_r+0x38>
 8004c6a:	3e01      	subs	r6, #1
 8004c6c:	e7e4      	b.n	8004c38 <_puts_r+0x68>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	6022      	str	r2, [r4, #0]
 8004c74:	220a      	movs	r2, #10
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e7ee      	b.n	8004c58 <_puts_r+0x88>
	...

08004c7c <puts>:
 8004c7c:	4b02      	ldr	r3, [pc, #8]	@ (8004c88 <puts+0xc>)
 8004c7e:	4601      	mov	r1, r0
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	f7ff bfa5 	b.w	8004bd0 <_puts_r>
 8004c86:	bf00      	nop
 8004c88:	20000018 	.word	0x20000018

08004c8c <__sread>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	f000 f8fc 	bl	8004e90 <_read_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	bfab      	itete	ge
 8004c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca0:	181b      	addge	r3, r3, r0
 8004ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca6:	bfac      	ite	ge
 8004ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004caa:	81a3      	strhlt	r3, [r4, #12]
 8004cac:	bd10      	pop	{r4, pc}

08004cae <__swrite>:
 8004cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	898b      	ldrh	r3, [r1, #12]
 8004cb6:	05db      	lsls	r3, r3, #23
 8004cb8:	4605      	mov	r5, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	d505      	bpl.n	8004ccc <__swrite+0x1e>
 8004cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f000 f8d0 	bl	8004e6c <_lseek_r>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd6:	81a3      	strh	r3, [r4, #12]
 8004cd8:	4632      	mov	r2, r6
 8004cda:	463b      	mov	r3, r7
 8004cdc:	4628      	mov	r0, r5
 8004cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	f000 b8e7 	b.w	8004eb4 <_write_r>

08004ce6 <__sseek>:
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	460c      	mov	r4, r1
 8004cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cee:	f000 f8bd 	bl	8004e6c <_lseek_r>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	bf15      	itete	ne
 8004cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d02:	81a3      	strheq	r3, [r4, #12]
 8004d04:	bf18      	it	ne
 8004d06:	81a3      	strhne	r3, [r4, #12]
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <__sclose>:
 8004d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0e:	f000 b89d 	b.w	8004e4c <_close_r>

08004d12 <__swbuf_r>:
 8004d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d14:	460e      	mov	r6, r1
 8004d16:	4614      	mov	r4, r2
 8004d18:	4605      	mov	r5, r0
 8004d1a:	b118      	cbz	r0, 8004d24 <__swbuf_r+0x12>
 8004d1c:	6a03      	ldr	r3, [r0, #32]
 8004d1e:	b90b      	cbnz	r3, 8004d24 <__swbuf_r+0x12>
 8004d20:	f7ff ff06 	bl	8004b30 <__sinit>
 8004d24:	69a3      	ldr	r3, [r4, #24]
 8004d26:	60a3      	str	r3, [r4, #8]
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	071a      	lsls	r2, r3, #28
 8004d2c:	d501      	bpl.n	8004d32 <__swbuf_r+0x20>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	b943      	cbnz	r3, 8004d44 <__swbuf_r+0x32>
 8004d32:	4621      	mov	r1, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 f82b 	bl	8004d90 <__swsetup_r>
 8004d3a:	b118      	cbz	r0, 8004d44 <__swbuf_r+0x32>
 8004d3c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d40:	4638      	mov	r0, r7
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	6922      	ldr	r2, [r4, #16]
 8004d48:	1a98      	subs	r0, r3, r2
 8004d4a:	6963      	ldr	r3, [r4, #20]
 8004d4c:	b2f6      	uxtb	r6, r6
 8004d4e:	4283      	cmp	r3, r0
 8004d50:	4637      	mov	r7, r6
 8004d52:	dc05      	bgt.n	8004d60 <__swbuf_r+0x4e>
 8004d54:	4621      	mov	r1, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 fd46 	bl	80057e8 <_fflush_r>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1ed      	bne.n	8004d3c <__swbuf_r+0x2a>
 8004d60:	68a3      	ldr	r3, [r4, #8]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	60a3      	str	r3, [r4, #8]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	701e      	strb	r6, [r3, #0]
 8004d6e:	6962      	ldr	r2, [r4, #20]
 8004d70:	1c43      	adds	r3, r0, #1
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d004      	beq.n	8004d80 <__swbuf_r+0x6e>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	07db      	lsls	r3, r3, #31
 8004d7a:	d5e1      	bpl.n	8004d40 <__swbuf_r+0x2e>
 8004d7c:	2e0a      	cmp	r6, #10
 8004d7e:	d1df      	bne.n	8004d40 <__swbuf_r+0x2e>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 fd30 	bl	80057e8 <_fflush_r>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d0d9      	beq.n	8004d40 <__swbuf_r+0x2e>
 8004d8c:	e7d6      	b.n	8004d3c <__swbuf_r+0x2a>
	...

08004d90 <__swsetup_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <__swsetup_r+0xa8>)
 8004d94:	4605      	mov	r5, r0
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	460c      	mov	r4, r1
 8004d9a:	b118      	cbz	r0, 8004da4 <__swsetup_r+0x14>
 8004d9c:	6a03      	ldr	r3, [r0, #32]
 8004d9e:	b90b      	cbnz	r3, 8004da4 <__swsetup_r+0x14>
 8004da0:	f7ff fec6 	bl	8004b30 <__sinit>
 8004da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da8:	0719      	lsls	r1, r3, #28
 8004daa:	d422      	bmi.n	8004df2 <__swsetup_r+0x62>
 8004dac:	06da      	lsls	r2, r3, #27
 8004dae:	d407      	bmi.n	8004dc0 <__swsetup_r+0x30>
 8004db0:	2209      	movs	r2, #9
 8004db2:	602a      	str	r2, [r5, #0]
 8004db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	e033      	b.n	8004e28 <__swsetup_r+0x98>
 8004dc0:	0758      	lsls	r0, r3, #29
 8004dc2:	d512      	bpl.n	8004dea <__swsetup_r+0x5a>
 8004dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dc6:	b141      	cbz	r1, 8004dda <__swsetup_r+0x4a>
 8004dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	d002      	beq.n	8004dd6 <__swsetup_r+0x46>
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f8bd 	bl	8004f50 <_free_r>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	2300      	movs	r3, #0
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	f043 0308 	orr.w	r3, r3, #8
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	b94b      	cbnz	r3, 8004e0a <__swsetup_r+0x7a>
 8004df6:	89a3      	ldrh	r3, [r4, #12]
 8004df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e00:	d003      	beq.n	8004e0a <__swsetup_r+0x7a>
 8004e02:	4621      	mov	r1, r4
 8004e04:	4628      	mov	r0, r5
 8004e06:	f000 fd3d 	bl	8005884 <__smakebuf_r>
 8004e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0e:	f013 0201 	ands.w	r2, r3, #1
 8004e12:	d00a      	beq.n	8004e2a <__swsetup_r+0x9a>
 8004e14:	2200      	movs	r2, #0
 8004e16:	60a2      	str	r2, [r4, #8]
 8004e18:	6962      	ldr	r2, [r4, #20]
 8004e1a:	4252      	negs	r2, r2
 8004e1c:	61a2      	str	r2, [r4, #24]
 8004e1e:	6922      	ldr	r2, [r4, #16]
 8004e20:	b942      	cbnz	r2, 8004e34 <__swsetup_r+0xa4>
 8004e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e26:	d1c5      	bne.n	8004db4 <__swsetup_r+0x24>
 8004e28:	bd38      	pop	{r3, r4, r5, pc}
 8004e2a:	0799      	lsls	r1, r3, #30
 8004e2c:	bf58      	it	pl
 8004e2e:	6962      	ldrpl	r2, [r4, #20]
 8004e30:	60a2      	str	r2, [r4, #8]
 8004e32:	e7f4      	b.n	8004e1e <__swsetup_r+0x8e>
 8004e34:	2000      	movs	r0, #0
 8004e36:	e7f7      	b.n	8004e28 <__swsetup_r+0x98>
 8004e38:	20000018 	.word	0x20000018

08004e3c <memset>:
 8004e3c:	4402      	add	r2, r0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d100      	bne.n	8004e46 <memset+0xa>
 8004e44:	4770      	bx	lr
 8004e46:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4a:	e7f9      	b.n	8004e40 <memset+0x4>

08004e4c <_close_r>:
 8004e4c:	b538      	push	{r3, r4, r5, lr}
 8004e4e:	4d06      	ldr	r5, [pc, #24]	@ (8004e68 <_close_r+0x1c>)
 8004e50:	2300      	movs	r3, #0
 8004e52:	4604      	mov	r4, r0
 8004e54:	4608      	mov	r0, r1
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	f7fc f886 	bl	8000f68 <_close>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_close_r+0x1a>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_close_r+0x1a>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	200004c0 	.word	0x200004c0

08004e6c <_lseek_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4d07      	ldr	r5, [pc, #28]	@ (8004e8c <_lseek_r+0x20>)
 8004e70:	4604      	mov	r4, r0
 8004e72:	4608      	mov	r0, r1
 8004e74:	4611      	mov	r1, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	602a      	str	r2, [r5, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fc f89b 	bl	8000fb6 <_lseek>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_lseek_r+0x1e>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_lseek_r+0x1e>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	200004c0 	.word	0x200004c0

08004e90 <_read_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d07      	ldr	r5, [pc, #28]	@ (8004eb0 <_read_r+0x20>)
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fc f845 	bl	8000f2e <_read>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_read_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_read_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	200004c0 	.word	0x200004c0

08004eb4 <_write_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d07      	ldr	r5, [pc, #28]	@ (8004ed4 <_write_r+0x20>)
 8004eb8:	4604      	mov	r4, r0
 8004eba:	4608      	mov	r0, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fb fc6c 	bl	80007a0 <_write>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_write_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_write_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	200004c0 	.word	0x200004c0

08004ed8 <__errno>:
 8004ed8:	4b01      	ldr	r3, [pc, #4]	@ (8004ee0 <__errno+0x8>)
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000018 	.word	0x20000018

08004ee4 <__libc_init_array>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8004f1c <__libc_init_array+0x38>)
 8004ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f20 <__libc_init_array+0x3c>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	42a6      	cmp	r6, r4
 8004ef2:	d109      	bne.n	8004f08 <__libc_init_array+0x24>
 8004ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8004f24 <__libc_init_array+0x40>)
 8004ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8004f28 <__libc_init_array+0x44>)
 8004ef8:	f000 fd66 	bl	80059c8 <_init>
 8004efc:	1b64      	subs	r4, r4, r5
 8004efe:	10a4      	asrs	r4, r4, #2
 8004f00:	2600      	movs	r6, #0
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	d105      	bne.n	8004f12 <__libc_init_array+0x2e>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0c:	4798      	blx	r3
 8004f0e:	3601      	adds	r6, #1
 8004f10:	e7ee      	b.n	8004ef0 <__libc_init_array+0xc>
 8004f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f16:	4798      	blx	r3
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7f2      	b.n	8004f02 <__libc_init_array+0x1e>
 8004f1c:	080063e4 	.word	0x080063e4
 8004f20:	080063e4 	.word	0x080063e4
 8004f24:	080063e4 	.word	0x080063e4
 8004f28:	080063e8 	.word	0x080063e8

08004f2c <__retarget_lock_init_recursive>:
 8004f2c:	4770      	bx	lr

08004f2e <__retarget_lock_acquire_recursive>:
 8004f2e:	4770      	bx	lr

08004f30 <__retarget_lock_release_recursive>:
 8004f30:	4770      	bx	lr

08004f32 <memcpy>:
 8004f32:	440a      	add	r2, r1
 8004f34:	4291      	cmp	r1, r2
 8004f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f3a:	d100      	bne.n	8004f3e <memcpy+0xc>
 8004f3c:	4770      	bx	lr
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f48:	4291      	cmp	r1, r2
 8004f4a:	d1f9      	bne.n	8004f40 <memcpy+0xe>
 8004f4c:	bd10      	pop	{r4, pc}
	...

08004f50 <_free_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4605      	mov	r5, r0
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d041      	beq.n	8004fdc <_free_r+0x8c>
 8004f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5c:	1f0c      	subs	r4, r1, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfb8      	it	lt
 8004f62:	18e4      	addlt	r4, r4, r3
 8004f64:	f000 f8e0 	bl	8005128 <__malloc_lock>
 8004f68:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe0 <_free_r+0x90>)
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	b933      	cbnz	r3, 8004f7c <_free_r+0x2c>
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	6014      	str	r4, [r2, #0]
 8004f72:	4628      	mov	r0, r5
 8004f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f78:	f000 b8dc 	b.w	8005134 <__malloc_unlock>
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d908      	bls.n	8004f92 <_free_r+0x42>
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	1821      	adds	r1, r4, r0
 8004f84:	428b      	cmp	r3, r1
 8004f86:	bf01      	itttt	eq
 8004f88:	6819      	ldreq	r1, [r3, #0]
 8004f8a:	685b      	ldreq	r3, [r3, #4]
 8004f8c:	1809      	addeq	r1, r1, r0
 8004f8e:	6021      	streq	r1, [r4, #0]
 8004f90:	e7ed      	b.n	8004f6e <_free_r+0x1e>
 8004f92:	461a      	mov	r2, r3
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	b10b      	cbz	r3, 8004f9c <_free_r+0x4c>
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d9fa      	bls.n	8004f92 <_free_r+0x42>
 8004f9c:	6811      	ldr	r1, [r2, #0]
 8004f9e:	1850      	adds	r0, r2, r1
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d10b      	bne.n	8004fbc <_free_r+0x6c>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	4401      	add	r1, r0
 8004fa8:	1850      	adds	r0, r2, r1
 8004faa:	4283      	cmp	r3, r0
 8004fac:	6011      	str	r1, [r2, #0]
 8004fae:	d1e0      	bne.n	8004f72 <_free_r+0x22>
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	6053      	str	r3, [r2, #4]
 8004fb6:	4408      	add	r0, r1
 8004fb8:	6010      	str	r0, [r2, #0]
 8004fba:	e7da      	b.n	8004f72 <_free_r+0x22>
 8004fbc:	d902      	bls.n	8004fc4 <_free_r+0x74>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	e7d6      	b.n	8004f72 <_free_r+0x22>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	1821      	adds	r1, r4, r0
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	bf04      	itt	eq
 8004fcc:	6819      	ldreq	r1, [r3, #0]
 8004fce:	685b      	ldreq	r3, [r3, #4]
 8004fd0:	6063      	str	r3, [r4, #4]
 8004fd2:	bf04      	itt	eq
 8004fd4:	1809      	addeq	r1, r1, r0
 8004fd6:	6021      	streq	r1, [r4, #0]
 8004fd8:	6054      	str	r4, [r2, #4]
 8004fda:	e7ca      	b.n	8004f72 <_free_r+0x22>
 8004fdc:	bd38      	pop	{r3, r4, r5, pc}
 8004fde:	bf00      	nop
 8004fe0:	200004cc 	.word	0x200004cc

08004fe4 <sbrk_aligned>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8005024 <sbrk_aligned+0x40>)
 8004fe8:	460c      	mov	r4, r1
 8004fea:	6831      	ldr	r1, [r6, #0]
 8004fec:	4605      	mov	r5, r0
 8004fee:	b911      	cbnz	r1, 8004ff6 <sbrk_aligned+0x12>
 8004ff0:	f000 fcda 	bl	80059a8 <_sbrk_r>
 8004ff4:	6030      	str	r0, [r6, #0]
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fcd5 	bl	80059a8 <_sbrk_r>
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	d103      	bne.n	800500a <sbrk_aligned+0x26>
 8005002:	f04f 34ff 	mov.w	r4, #4294967295
 8005006:	4620      	mov	r0, r4
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	1cc4      	adds	r4, r0, #3
 800500c:	f024 0403 	bic.w	r4, r4, #3
 8005010:	42a0      	cmp	r0, r4
 8005012:	d0f8      	beq.n	8005006 <sbrk_aligned+0x22>
 8005014:	1a21      	subs	r1, r4, r0
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fcc6 	bl	80059a8 <_sbrk_r>
 800501c:	3001      	adds	r0, #1
 800501e:	d1f2      	bne.n	8005006 <sbrk_aligned+0x22>
 8005020:	e7ef      	b.n	8005002 <sbrk_aligned+0x1e>
 8005022:	bf00      	nop
 8005024:	200004c8 	.word	0x200004c8

08005028 <_malloc_r>:
 8005028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502c:	1ccd      	adds	r5, r1, #3
 800502e:	f025 0503 	bic.w	r5, r5, #3
 8005032:	3508      	adds	r5, #8
 8005034:	2d0c      	cmp	r5, #12
 8005036:	bf38      	it	cc
 8005038:	250c      	movcc	r5, #12
 800503a:	2d00      	cmp	r5, #0
 800503c:	4606      	mov	r6, r0
 800503e:	db01      	blt.n	8005044 <_malloc_r+0x1c>
 8005040:	42a9      	cmp	r1, r5
 8005042:	d904      	bls.n	800504e <_malloc_r+0x26>
 8005044:	230c      	movs	r3, #12
 8005046:	6033      	str	r3, [r6, #0]
 8005048:	2000      	movs	r0, #0
 800504a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800504e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005124 <_malloc_r+0xfc>
 8005052:	f000 f869 	bl	8005128 <__malloc_lock>
 8005056:	f8d8 3000 	ldr.w	r3, [r8]
 800505a:	461c      	mov	r4, r3
 800505c:	bb44      	cbnz	r4, 80050b0 <_malloc_r+0x88>
 800505e:	4629      	mov	r1, r5
 8005060:	4630      	mov	r0, r6
 8005062:	f7ff ffbf 	bl	8004fe4 <sbrk_aligned>
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	4604      	mov	r4, r0
 800506a:	d158      	bne.n	800511e <_malloc_r+0xf6>
 800506c:	f8d8 4000 	ldr.w	r4, [r8]
 8005070:	4627      	mov	r7, r4
 8005072:	2f00      	cmp	r7, #0
 8005074:	d143      	bne.n	80050fe <_malloc_r+0xd6>
 8005076:	2c00      	cmp	r4, #0
 8005078:	d04b      	beq.n	8005112 <_malloc_r+0xea>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	4639      	mov	r1, r7
 800507e:	4630      	mov	r0, r6
 8005080:	eb04 0903 	add.w	r9, r4, r3
 8005084:	f000 fc90 	bl	80059a8 <_sbrk_r>
 8005088:	4581      	cmp	r9, r0
 800508a:	d142      	bne.n	8005112 <_malloc_r+0xea>
 800508c:	6821      	ldr	r1, [r4, #0]
 800508e:	1a6d      	subs	r5, r5, r1
 8005090:	4629      	mov	r1, r5
 8005092:	4630      	mov	r0, r6
 8005094:	f7ff ffa6 	bl	8004fe4 <sbrk_aligned>
 8005098:	3001      	adds	r0, #1
 800509a:	d03a      	beq.n	8005112 <_malloc_r+0xea>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	442b      	add	r3, r5
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	f8d8 3000 	ldr.w	r3, [r8]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	bb62      	cbnz	r2, 8005104 <_malloc_r+0xdc>
 80050aa:	f8c8 7000 	str.w	r7, [r8]
 80050ae:	e00f      	b.n	80050d0 <_malloc_r+0xa8>
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	1b52      	subs	r2, r2, r5
 80050b4:	d420      	bmi.n	80050f8 <_malloc_r+0xd0>
 80050b6:	2a0b      	cmp	r2, #11
 80050b8:	d917      	bls.n	80050ea <_malloc_r+0xc2>
 80050ba:	1961      	adds	r1, r4, r5
 80050bc:	42a3      	cmp	r3, r4
 80050be:	6025      	str	r5, [r4, #0]
 80050c0:	bf18      	it	ne
 80050c2:	6059      	strne	r1, [r3, #4]
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	bf08      	it	eq
 80050c8:	f8c8 1000 	streq.w	r1, [r8]
 80050cc:	5162      	str	r2, [r4, r5]
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 f82f 	bl	8005134 <__malloc_unlock>
 80050d6:	f104 000b 	add.w	r0, r4, #11
 80050da:	1d23      	adds	r3, r4, #4
 80050dc:	f020 0007 	bic.w	r0, r0, #7
 80050e0:	1ac2      	subs	r2, r0, r3
 80050e2:	bf1c      	itt	ne
 80050e4:	1a1b      	subne	r3, r3, r0
 80050e6:	50a3      	strne	r3, [r4, r2]
 80050e8:	e7af      	b.n	800504a <_malloc_r+0x22>
 80050ea:	6862      	ldr	r2, [r4, #4]
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	bf0c      	ite	eq
 80050f0:	f8c8 2000 	streq.w	r2, [r8]
 80050f4:	605a      	strne	r2, [r3, #4]
 80050f6:	e7eb      	b.n	80050d0 <_malloc_r+0xa8>
 80050f8:	4623      	mov	r3, r4
 80050fa:	6864      	ldr	r4, [r4, #4]
 80050fc:	e7ae      	b.n	800505c <_malloc_r+0x34>
 80050fe:	463c      	mov	r4, r7
 8005100:	687f      	ldr	r7, [r7, #4]
 8005102:	e7b6      	b.n	8005072 <_malloc_r+0x4a>
 8005104:	461a      	mov	r2, r3
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	42a3      	cmp	r3, r4
 800510a:	d1fb      	bne.n	8005104 <_malloc_r+0xdc>
 800510c:	2300      	movs	r3, #0
 800510e:	6053      	str	r3, [r2, #4]
 8005110:	e7de      	b.n	80050d0 <_malloc_r+0xa8>
 8005112:	230c      	movs	r3, #12
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	4630      	mov	r0, r6
 8005118:	f000 f80c 	bl	8005134 <__malloc_unlock>
 800511c:	e794      	b.n	8005048 <_malloc_r+0x20>
 800511e:	6005      	str	r5, [r0, #0]
 8005120:	e7d6      	b.n	80050d0 <_malloc_r+0xa8>
 8005122:	bf00      	nop
 8005124:	200004cc 	.word	0x200004cc

08005128 <__malloc_lock>:
 8005128:	4801      	ldr	r0, [pc, #4]	@ (8005130 <__malloc_lock+0x8>)
 800512a:	f7ff bf00 	b.w	8004f2e <__retarget_lock_acquire_recursive>
 800512e:	bf00      	nop
 8005130:	200004c4 	.word	0x200004c4

08005134 <__malloc_unlock>:
 8005134:	4801      	ldr	r0, [pc, #4]	@ (800513c <__malloc_unlock+0x8>)
 8005136:	f7ff befb 	b.w	8004f30 <__retarget_lock_release_recursive>
 800513a:	bf00      	nop
 800513c:	200004c4 	.word	0x200004c4

08005140 <__sfputc_r>:
 8005140:	6893      	ldr	r3, [r2, #8]
 8005142:	3b01      	subs	r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	b410      	push	{r4}
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	da08      	bge.n	800515e <__sfputc_r+0x1e>
 800514c:	6994      	ldr	r4, [r2, #24]
 800514e:	42a3      	cmp	r3, r4
 8005150:	db01      	blt.n	8005156 <__sfputc_r+0x16>
 8005152:	290a      	cmp	r1, #10
 8005154:	d103      	bne.n	800515e <__sfputc_r+0x1e>
 8005156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800515a:	f7ff bdda 	b.w	8004d12 <__swbuf_r>
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	1c58      	adds	r0, r3, #1
 8005162:	6010      	str	r0, [r2, #0]
 8005164:	7019      	strb	r1, [r3, #0]
 8005166:	4608      	mov	r0, r1
 8005168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516c:	4770      	bx	lr

0800516e <__sfputs_r>:
 800516e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005170:	4606      	mov	r6, r0
 8005172:	460f      	mov	r7, r1
 8005174:	4614      	mov	r4, r2
 8005176:	18d5      	adds	r5, r2, r3
 8005178:	42ac      	cmp	r4, r5
 800517a:	d101      	bne.n	8005180 <__sfputs_r+0x12>
 800517c:	2000      	movs	r0, #0
 800517e:	e007      	b.n	8005190 <__sfputs_r+0x22>
 8005180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005184:	463a      	mov	r2, r7
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff ffda 	bl	8005140 <__sfputc_r>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d1f3      	bne.n	8005178 <__sfputs_r+0xa>
 8005190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005194 <_vfiprintf_r>:
 8005194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005198:	460d      	mov	r5, r1
 800519a:	b09d      	sub	sp, #116	@ 0x74
 800519c:	4614      	mov	r4, r2
 800519e:	4698      	mov	r8, r3
 80051a0:	4606      	mov	r6, r0
 80051a2:	b118      	cbz	r0, 80051ac <_vfiprintf_r+0x18>
 80051a4:	6a03      	ldr	r3, [r0, #32]
 80051a6:	b90b      	cbnz	r3, 80051ac <_vfiprintf_r+0x18>
 80051a8:	f7ff fcc2 	bl	8004b30 <__sinit>
 80051ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ae:	07d9      	lsls	r1, r3, #31
 80051b0:	d405      	bmi.n	80051be <_vfiprintf_r+0x2a>
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	059a      	lsls	r2, r3, #22
 80051b6:	d402      	bmi.n	80051be <_vfiprintf_r+0x2a>
 80051b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ba:	f7ff feb8 	bl	8004f2e <__retarget_lock_acquire_recursive>
 80051be:	89ab      	ldrh	r3, [r5, #12]
 80051c0:	071b      	lsls	r3, r3, #28
 80051c2:	d501      	bpl.n	80051c8 <_vfiprintf_r+0x34>
 80051c4:	692b      	ldr	r3, [r5, #16]
 80051c6:	b99b      	cbnz	r3, 80051f0 <_vfiprintf_r+0x5c>
 80051c8:	4629      	mov	r1, r5
 80051ca:	4630      	mov	r0, r6
 80051cc:	f7ff fde0 	bl	8004d90 <__swsetup_r>
 80051d0:	b170      	cbz	r0, 80051f0 <_vfiprintf_r+0x5c>
 80051d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051d4:	07dc      	lsls	r4, r3, #31
 80051d6:	d504      	bpl.n	80051e2 <_vfiprintf_r+0x4e>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	b01d      	add	sp, #116	@ 0x74
 80051de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e2:	89ab      	ldrh	r3, [r5, #12]
 80051e4:	0598      	lsls	r0, r3, #22
 80051e6:	d4f7      	bmi.n	80051d8 <_vfiprintf_r+0x44>
 80051e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ea:	f7ff fea1 	bl	8004f30 <__retarget_lock_release_recursive>
 80051ee:	e7f3      	b.n	80051d8 <_vfiprintf_r+0x44>
 80051f0:	2300      	movs	r3, #0
 80051f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f4:	2320      	movs	r3, #32
 80051f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80051fe:	2330      	movs	r3, #48	@ 0x30
 8005200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053b0 <_vfiprintf_r+0x21c>
 8005204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005208:	f04f 0901 	mov.w	r9, #1
 800520c:	4623      	mov	r3, r4
 800520e:	469a      	mov	sl, r3
 8005210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005214:	b10a      	cbz	r2, 800521a <_vfiprintf_r+0x86>
 8005216:	2a25      	cmp	r2, #37	@ 0x25
 8005218:	d1f9      	bne.n	800520e <_vfiprintf_r+0x7a>
 800521a:	ebba 0b04 	subs.w	fp, sl, r4
 800521e:	d00b      	beq.n	8005238 <_vfiprintf_r+0xa4>
 8005220:	465b      	mov	r3, fp
 8005222:	4622      	mov	r2, r4
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff ffa1 	bl	800516e <__sfputs_r>
 800522c:	3001      	adds	r0, #1
 800522e:	f000 80a7 	beq.w	8005380 <_vfiprintf_r+0x1ec>
 8005232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005234:	445a      	add	r2, fp
 8005236:	9209      	str	r2, [sp, #36]	@ 0x24
 8005238:	f89a 3000 	ldrb.w	r3, [sl]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 809f 	beq.w	8005380 <_vfiprintf_r+0x1ec>
 8005242:	2300      	movs	r3, #0
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800524c:	f10a 0a01 	add.w	sl, sl, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005258:	931a      	str	r3, [sp, #104]	@ 0x68
 800525a:	4654      	mov	r4, sl
 800525c:	2205      	movs	r2, #5
 800525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005262:	4853      	ldr	r0, [pc, #332]	@ (80053b0 <_vfiprintf_r+0x21c>)
 8005264:	f7fa ffd4 	bl	8000210 <memchr>
 8005268:	9a04      	ldr	r2, [sp, #16]
 800526a:	b9d8      	cbnz	r0, 80052a4 <_vfiprintf_r+0x110>
 800526c:	06d1      	lsls	r1, r2, #27
 800526e:	bf44      	itt	mi
 8005270:	2320      	movmi	r3, #32
 8005272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005276:	0713      	lsls	r3, r2, #28
 8005278:	bf44      	itt	mi
 800527a:	232b      	movmi	r3, #43	@ 0x2b
 800527c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005280:	f89a 3000 	ldrb.w	r3, [sl]
 8005284:	2b2a      	cmp	r3, #42	@ 0x2a
 8005286:	d015      	beq.n	80052b4 <_vfiprintf_r+0x120>
 8005288:	9a07      	ldr	r2, [sp, #28]
 800528a:	4654      	mov	r4, sl
 800528c:	2000      	movs	r0, #0
 800528e:	f04f 0c0a 	mov.w	ip, #10
 8005292:	4621      	mov	r1, r4
 8005294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005298:	3b30      	subs	r3, #48	@ 0x30
 800529a:	2b09      	cmp	r3, #9
 800529c:	d94b      	bls.n	8005336 <_vfiprintf_r+0x1a2>
 800529e:	b1b0      	cbz	r0, 80052ce <_vfiprintf_r+0x13a>
 80052a0:	9207      	str	r2, [sp, #28]
 80052a2:	e014      	b.n	80052ce <_vfiprintf_r+0x13a>
 80052a4:	eba0 0308 	sub.w	r3, r0, r8
 80052a8:	fa09 f303 	lsl.w	r3, r9, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	9304      	str	r3, [sp, #16]
 80052b0:	46a2      	mov	sl, r4
 80052b2:	e7d2      	b.n	800525a <_vfiprintf_r+0xc6>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	1d19      	adds	r1, r3, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	9103      	str	r1, [sp, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bfbb      	ittet	lt
 80052c0:	425b      	neglt	r3, r3
 80052c2:	f042 0202 	orrlt.w	r2, r2, #2
 80052c6:	9307      	strge	r3, [sp, #28]
 80052c8:	9307      	strlt	r3, [sp, #28]
 80052ca:	bfb8      	it	lt
 80052cc:	9204      	strlt	r2, [sp, #16]
 80052ce:	7823      	ldrb	r3, [r4, #0]
 80052d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80052d2:	d10a      	bne.n	80052ea <_vfiprintf_r+0x156>
 80052d4:	7863      	ldrb	r3, [r4, #1]
 80052d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80052d8:	d132      	bne.n	8005340 <_vfiprintf_r+0x1ac>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	1d1a      	adds	r2, r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	9203      	str	r2, [sp, #12]
 80052e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052e6:	3402      	adds	r4, #2
 80052e8:	9305      	str	r3, [sp, #20]
 80052ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053c0 <_vfiprintf_r+0x22c>
 80052ee:	7821      	ldrb	r1, [r4, #0]
 80052f0:	2203      	movs	r2, #3
 80052f2:	4650      	mov	r0, sl
 80052f4:	f7fa ff8c 	bl	8000210 <memchr>
 80052f8:	b138      	cbz	r0, 800530a <_vfiprintf_r+0x176>
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	eba0 000a 	sub.w	r0, r0, sl
 8005300:	2240      	movs	r2, #64	@ 0x40
 8005302:	4082      	lsls	r2, r0
 8005304:	4313      	orrs	r3, r2
 8005306:	3401      	adds	r4, #1
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530e:	4829      	ldr	r0, [pc, #164]	@ (80053b4 <_vfiprintf_r+0x220>)
 8005310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005314:	2206      	movs	r2, #6
 8005316:	f7fa ff7b 	bl	8000210 <memchr>
 800531a:	2800      	cmp	r0, #0
 800531c:	d03f      	beq.n	800539e <_vfiprintf_r+0x20a>
 800531e:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <_vfiprintf_r+0x224>)
 8005320:	bb1b      	cbnz	r3, 800536a <_vfiprintf_r+0x1d6>
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	3307      	adds	r3, #7
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	3308      	adds	r3, #8
 800532c:	9303      	str	r3, [sp, #12]
 800532e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005330:	443b      	add	r3, r7
 8005332:	9309      	str	r3, [sp, #36]	@ 0x24
 8005334:	e76a      	b.n	800520c <_vfiprintf_r+0x78>
 8005336:	fb0c 3202 	mla	r2, ip, r2, r3
 800533a:	460c      	mov	r4, r1
 800533c:	2001      	movs	r0, #1
 800533e:	e7a8      	b.n	8005292 <_vfiprintf_r+0xfe>
 8005340:	2300      	movs	r3, #0
 8005342:	3401      	adds	r4, #1
 8005344:	9305      	str	r3, [sp, #20]
 8005346:	4619      	mov	r1, r3
 8005348:	f04f 0c0a 	mov.w	ip, #10
 800534c:	4620      	mov	r0, r4
 800534e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005352:	3a30      	subs	r2, #48	@ 0x30
 8005354:	2a09      	cmp	r2, #9
 8005356:	d903      	bls.n	8005360 <_vfiprintf_r+0x1cc>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0c6      	beq.n	80052ea <_vfiprintf_r+0x156>
 800535c:	9105      	str	r1, [sp, #20]
 800535e:	e7c4      	b.n	80052ea <_vfiprintf_r+0x156>
 8005360:	fb0c 2101 	mla	r1, ip, r1, r2
 8005364:	4604      	mov	r4, r0
 8005366:	2301      	movs	r3, #1
 8005368:	e7f0      	b.n	800534c <_vfiprintf_r+0x1b8>
 800536a:	ab03      	add	r3, sp, #12
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	462a      	mov	r2, r5
 8005370:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <_vfiprintf_r+0x228>)
 8005372:	a904      	add	r1, sp, #16
 8005374:	4630      	mov	r0, r6
 8005376:	f3af 8000 	nop.w
 800537a:	4607      	mov	r7, r0
 800537c:	1c78      	adds	r0, r7, #1
 800537e:	d1d6      	bne.n	800532e <_vfiprintf_r+0x19a>
 8005380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005382:	07d9      	lsls	r1, r3, #31
 8005384:	d405      	bmi.n	8005392 <_vfiprintf_r+0x1fe>
 8005386:	89ab      	ldrh	r3, [r5, #12]
 8005388:	059a      	lsls	r2, r3, #22
 800538a:	d402      	bmi.n	8005392 <_vfiprintf_r+0x1fe>
 800538c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800538e:	f7ff fdcf 	bl	8004f30 <__retarget_lock_release_recursive>
 8005392:	89ab      	ldrh	r3, [r5, #12]
 8005394:	065b      	lsls	r3, r3, #25
 8005396:	f53f af1f 	bmi.w	80051d8 <_vfiprintf_r+0x44>
 800539a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800539c:	e71e      	b.n	80051dc <_vfiprintf_r+0x48>
 800539e:	ab03      	add	r3, sp, #12
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	462a      	mov	r2, r5
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <_vfiprintf_r+0x228>)
 80053a6:	a904      	add	r1, sp, #16
 80053a8:	4630      	mov	r0, r6
 80053aa:	f000 f879 	bl	80054a0 <_printf_i>
 80053ae:	e7e4      	b.n	800537a <_vfiprintf_r+0x1e6>
 80053b0:	080063a8 	.word	0x080063a8
 80053b4:	080063b2 	.word	0x080063b2
 80053b8:	00000000 	.word	0x00000000
 80053bc:	0800516f 	.word	0x0800516f
 80053c0:	080063ae 	.word	0x080063ae

080053c4 <_printf_common>:
 80053c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053c8:	4616      	mov	r6, r2
 80053ca:	4698      	mov	r8, r3
 80053cc:	688a      	ldr	r2, [r1, #8]
 80053ce:	690b      	ldr	r3, [r1, #16]
 80053d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bfb8      	it	lt
 80053d8:	4613      	movlt	r3, r2
 80053da:	6033      	str	r3, [r6, #0]
 80053dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053e0:	4607      	mov	r7, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	b10a      	cbz	r2, 80053ea <_printf_common+0x26>
 80053e6:	3301      	adds	r3, #1
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0699      	lsls	r1, r3, #26
 80053ee:	bf42      	ittt	mi
 80053f0:	6833      	ldrmi	r3, [r6, #0]
 80053f2:	3302      	addmi	r3, #2
 80053f4:	6033      	strmi	r3, [r6, #0]
 80053f6:	6825      	ldr	r5, [r4, #0]
 80053f8:	f015 0506 	ands.w	r5, r5, #6
 80053fc:	d106      	bne.n	800540c <_printf_common+0x48>
 80053fe:	f104 0a19 	add.w	sl, r4, #25
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	6832      	ldr	r2, [r6, #0]
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	42ab      	cmp	r3, r5
 800540a:	dc26      	bgt.n	800545a <_printf_common+0x96>
 800540c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	3b00      	subs	r3, #0
 8005414:	bf18      	it	ne
 8005416:	2301      	movne	r3, #1
 8005418:	0692      	lsls	r2, r2, #26
 800541a:	d42b      	bmi.n	8005474 <_printf_common+0xb0>
 800541c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005420:	4641      	mov	r1, r8
 8005422:	4638      	mov	r0, r7
 8005424:	47c8      	blx	r9
 8005426:	3001      	adds	r0, #1
 8005428:	d01e      	beq.n	8005468 <_printf_common+0xa4>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	6922      	ldr	r2, [r4, #16]
 800542e:	f003 0306 	and.w	r3, r3, #6
 8005432:	2b04      	cmp	r3, #4
 8005434:	bf02      	ittt	eq
 8005436:	68e5      	ldreq	r5, [r4, #12]
 8005438:	6833      	ldreq	r3, [r6, #0]
 800543a:	1aed      	subeq	r5, r5, r3
 800543c:	68a3      	ldr	r3, [r4, #8]
 800543e:	bf0c      	ite	eq
 8005440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005444:	2500      	movne	r5, #0
 8005446:	4293      	cmp	r3, r2
 8005448:	bfc4      	itt	gt
 800544a:	1a9b      	subgt	r3, r3, r2
 800544c:	18ed      	addgt	r5, r5, r3
 800544e:	2600      	movs	r6, #0
 8005450:	341a      	adds	r4, #26
 8005452:	42b5      	cmp	r5, r6
 8005454:	d11a      	bne.n	800548c <_printf_common+0xc8>
 8005456:	2000      	movs	r0, #0
 8005458:	e008      	b.n	800546c <_printf_common+0xa8>
 800545a:	2301      	movs	r3, #1
 800545c:	4652      	mov	r2, sl
 800545e:	4641      	mov	r1, r8
 8005460:	4638      	mov	r0, r7
 8005462:	47c8      	blx	r9
 8005464:	3001      	adds	r0, #1
 8005466:	d103      	bne.n	8005470 <_printf_common+0xac>
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	3501      	adds	r5, #1
 8005472:	e7c6      	b.n	8005402 <_printf_common+0x3e>
 8005474:	18e1      	adds	r1, r4, r3
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	2030      	movs	r0, #48	@ 0x30
 800547a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800547e:	4422      	add	r2, r4
 8005480:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005484:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005488:	3302      	adds	r3, #2
 800548a:	e7c7      	b.n	800541c <_printf_common+0x58>
 800548c:	2301      	movs	r3, #1
 800548e:	4622      	mov	r2, r4
 8005490:	4641      	mov	r1, r8
 8005492:	4638      	mov	r0, r7
 8005494:	47c8      	blx	r9
 8005496:	3001      	adds	r0, #1
 8005498:	d0e6      	beq.n	8005468 <_printf_common+0xa4>
 800549a:	3601      	adds	r6, #1
 800549c:	e7d9      	b.n	8005452 <_printf_common+0x8e>
	...

080054a0 <_printf_i>:
 80054a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	7e0f      	ldrb	r7, [r1, #24]
 80054a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054a8:	2f78      	cmp	r7, #120	@ 0x78
 80054aa:	4691      	mov	r9, r2
 80054ac:	4680      	mov	r8, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	469a      	mov	sl, r3
 80054b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054b6:	d807      	bhi.n	80054c8 <_printf_i+0x28>
 80054b8:	2f62      	cmp	r7, #98	@ 0x62
 80054ba:	d80a      	bhi.n	80054d2 <_printf_i+0x32>
 80054bc:	2f00      	cmp	r7, #0
 80054be:	f000 80d2 	beq.w	8005666 <_printf_i+0x1c6>
 80054c2:	2f58      	cmp	r7, #88	@ 0x58
 80054c4:	f000 80b9 	beq.w	800563a <_printf_i+0x19a>
 80054c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054d0:	e03a      	b.n	8005548 <_printf_i+0xa8>
 80054d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054d6:	2b15      	cmp	r3, #21
 80054d8:	d8f6      	bhi.n	80054c8 <_printf_i+0x28>
 80054da:	a101      	add	r1, pc, #4	@ (adr r1, 80054e0 <_printf_i+0x40>)
 80054dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054e0:	08005539 	.word	0x08005539
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	080054c9 	.word	0x080054c9
 80054ec:	080054c9 	.word	0x080054c9
 80054f0:	080054c9 	.word	0x080054c9
 80054f4:	080054c9 	.word	0x080054c9
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	080054c9 	.word	0x080054c9
 8005500:	080054c9 	.word	0x080054c9
 8005504:	080054c9 	.word	0x080054c9
 8005508:	080054c9 	.word	0x080054c9
 800550c:	0800564d 	.word	0x0800564d
 8005510:	08005577 	.word	0x08005577
 8005514:	08005607 	.word	0x08005607
 8005518:	080054c9 	.word	0x080054c9
 800551c:	080054c9 	.word	0x080054c9
 8005520:	0800566f 	.word	0x0800566f
 8005524:	080054c9 	.word	0x080054c9
 8005528:	08005577 	.word	0x08005577
 800552c:	080054c9 	.word	0x080054c9
 8005530:	080054c9 	.word	0x080054c9
 8005534:	0800560f 	.word	0x0800560f
 8005538:	6833      	ldr	r3, [r6, #0]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6032      	str	r2, [r6, #0]
 8005540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005548:	2301      	movs	r3, #1
 800554a:	e09d      	b.n	8005688 <_printf_i+0x1e8>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	1d19      	adds	r1, r3, #4
 8005552:	6031      	str	r1, [r6, #0]
 8005554:	0606      	lsls	r6, r0, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xbc>
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	e003      	b.n	8005564 <_printf_i+0xc4>
 800555c:	0645      	lsls	r5, r0, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xb8>
 8005560:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005564:	2d00      	cmp	r5, #0
 8005566:	da03      	bge.n	8005570 <_printf_i+0xd0>
 8005568:	232d      	movs	r3, #45	@ 0x2d
 800556a:	426d      	negs	r5, r5
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005570:	4859      	ldr	r0, [pc, #356]	@ (80056d8 <_printf_i+0x238>)
 8005572:	230a      	movs	r3, #10
 8005574:	e011      	b.n	800559a <_printf_i+0xfa>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	0608      	lsls	r0, r1, #24
 800557c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005580:	d402      	bmi.n	8005588 <_printf_i+0xe8>
 8005582:	0649      	lsls	r1, r1, #25
 8005584:	bf48      	it	mi
 8005586:	b2ad      	uxthmi	r5, r5
 8005588:	2f6f      	cmp	r7, #111	@ 0x6f
 800558a:	4853      	ldr	r0, [pc, #332]	@ (80056d8 <_printf_i+0x238>)
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	bf14      	ite	ne
 8005590:	230a      	movne	r3, #10
 8005592:	2308      	moveq	r3, #8
 8005594:	2100      	movs	r1, #0
 8005596:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800559a:	6866      	ldr	r6, [r4, #4]
 800559c:	60a6      	str	r6, [r4, #8]
 800559e:	2e00      	cmp	r6, #0
 80055a0:	bfa2      	ittt	ge
 80055a2:	6821      	ldrge	r1, [r4, #0]
 80055a4:	f021 0104 	bicge.w	r1, r1, #4
 80055a8:	6021      	strge	r1, [r4, #0]
 80055aa:	b90d      	cbnz	r5, 80055b0 <_printf_i+0x110>
 80055ac:	2e00      	cmp	r6, #0
 80055ae:	d04b      	beq.n	8005648 <_printf_i+0x1a8>
 80055b0:	4616      	mov	r6, r2
 80055b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80055b6:	fb03 5711 	mls	r7, r3, r1, r5
 80055ba:	5dc7      	ldrb	r7, [r0, r7]
 80055bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055c0:	462f      	mov	r7, r5
 80055c2:	42bb      	cmp	r3, r7
 80055c4:	460d      	mov	r5, r1
 80055c6:	d9f4      	bls.n	80055b2 <_printf_i+0x112>
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d10b      	bne.n	80055e4 <_printf_i+0x144>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	07df      	lsls	r7, r3, #31
 80055d0:	d508      	bpl.n	80055e4 <_printf_i+0x144>
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	6861      	ldr	r1, [r4, #4]
 80055d6:	4299      	cmp	r1, r3
 80055d8:	bfde      	ittt	le
 80055da:	2330      	movle	r3, #48	@ 0x30
 80055dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055e4:	1b92      	subs	r2, r2, r6
 80055e6:	6122      	str	r2, [r4, #16]
 80055e8:	f8cd a000 	str.w	sl, [sp]
 80055ec:	464b      	mov	r3, r9
 80055ee:	aa03      	add	r2, sp, #12
 80055f0:	4621      	mov	r1, r4
 80055f2:	4640      	mov	r0, r8
 80055f4:	f7ff fee6 	bl	80053c4 <_printf_common>
 80055f8:	3001      	adds	r0, #1
 80055fa:	d14a      	bne.n	8005692 <_printf_i+0x1f2>
 80055fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005600:	b004      	add	sp, #16
 8005602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	f043 0320 	orr.w	r3, r3, #32
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	4833      	ldr	r0, [pc, #204]	@ (80056dc <_printf_i+0x23c>)
 8005610:	2778      	movs	r7, #120	@ 0x78
 8005612:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6831      	ldr	r1, [r6, #0]
 800561a:	061f      	lsls	r7, r3, #24
 800561c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005620:	d402      	bmi.n	8005628 <_printf_i+0x188>
 8005622:	065f      	lsls	r7, r3, #25
 8005624:	bf48      	it	mi
 8005626:	b2ad      	uxthmi	r5, r5
 8005628:	6031      	str	r1, [r6, #0]
 800562a:	07d9      	lsls	r1, r3, #31
 800562c:	bf44      	itt	mi
 800562e:	f043 0320 	orrmi.w	r3, r3, #32
 8005632:	6023      	strmi	r3, [r4, #0]
 8005634:	b11d      	cbz	r5, 800563e <_printf_i+0x19e>
 8005636:	2310      	movs	r3, #16
 8005638:	e7ac      	b.n	8005594 <_printf_i+0xf4>
 800563a:	4827      	ldr	r0, [pc, #156]	@ (80056d8 <_printf_i+0x238>)
 800563c:	e7e9      	b.n	8005612 <_printf_i+0x172>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	f023 0320 	bic.w	r3, r3, #32
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	e7f6      	b.n	8005636 <_printf_i+0x196>
 8005648:	4616      	mov	r6, r2
 800564a:	e7bd      	b.n	80055c8 <_printf_i+0x128>
 800564c:	6833      	ldr	r3, [r6, #0]
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	6961      	ldr	r1, [r4, #20]
 8005652:	1d18      	adds	r0, r3, #4
 8005654:	6030      	str	r0, [r6, #0]
 8005656:	062e      	lsls	r6, r5, #24
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	d501      	bpl.n	8005660 <_printf_i+0x1c0>
 800565c:	6019      	str	r1, [r3, #0]
 800565e:	e002      	b.n	8005666 <_printf_i+0x1c6>
 8005660:	0668      	lsls	r0, r5, #25
 8005662:	d5fb      	bpl.n	800565c <_printf_i+0x1bc>
 8005664:	8019      	strh	r1, [r3, #0]
 8005666:	2300      	movs	r3, #0
 8005668:	6123      	str	r3, [r4, #16]
 800566a:	4616      	mov	r6, r2
 800566c:	e7bc      	b.n	80055e8 <_printf_i+0x148>
 800566e:	6833      	ldr	r3, [r6, #0]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	6032      	str	r2, [r6, #0]
 8005674:	681e      	ldr	r6, [r3, #0]
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	2100      	movs	r1, #0
 800567a:	4630      	mov	r0, r6
 800567c:	f7fa fdc8 	bl	8000210 <memchr>
 8005680:	b108      	cbz	r0, 8005686 <_printf_i+0x1e6>
 8005682:	1b80      	subs	r0, r0, r6
 8005684:	6060      	str	r0, [r4, #4]
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	6123      	str	r3, [r4, #16]
 800568a:	2300      	movs	r3, #0
 800568c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005690:	e7aa      	b.n	80055e8 <_printf_i+0x148>
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	4632      	mov	r2, r6
 8005696:	4649      	mov	r1, r9
 8005698:	4640      	mov	r0, r8
 800569a:	47d0      	blx	sl
 800569c:	3001      	adds	r0, #1
 800569e:	d0ad      	beq.n	80055fc <_printf_i+0x15c>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	079b      	lsls	r3, r3, #30
 80056a4:	d413      	bmi.n	80056ce <_printf_i+0x22e>
 80056a6:	68e0      	ldr	r0, [r4, #12]
 80056a8:	9b03      	ldr	r3, [sp, #12]
 80056aa:	4298      	cmp	r0, r3
 80056ac:	bfb8      	it	lt
 80056ae:	4618      	movlt	r0, r3
 80056b0:	e7a6      	b.n	8005600 <_printf_i+0x160>
 80056b2:	2301      	movs	r3, #1
 80056b4:	4632      	mov	r2, r6
 80056b6:	4649      	mov	r1, r9
 80056b8:	4640      	mov	r0, r8
 80056ba:	47d0      	blx	sl
 80056bc:	3001      	adds	r0, #1
 80056be:	d09d      	beq.n	80055fc <_printf_i+0x15c>
 80056c0:	3501      	adds	r5, #1
 80056c2:	68e3      	ldr	r3, [r4, #12]
 80056c4:	9903      	ldr	r1, [sp, #12]
 80056c6:	1a5b      	subs	r3, r3, r1
 80056c8:	42ab      	cmp	r3, r5
 80056ca:	dcf2      	bgt.n	80056b2 <_printf_i+0x212>
 80056cc:	e7eb      	b.n	80056a6 <_printf_i+0x206>
 80056ce:	2500      	movs	r5, #0
 80056d0:	f104 0619 	add.w	r6, r4, #25
 80056d4:	e7f5      	b.n	80056c2 <_printf_i+0x222>
 80056d6:	bf00      	nop
 80056d8:	080063b9 	.word	0x080063b9
 80056dc:	080063ca 	.word	0x080063ca

080056e0 <__sflush_r>:
 80056e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e8:	0716      	lsls	r6, r2, #28
 80056ea:	4605      	mov	r5, r0
 80056ec:	460c      	mov	r4, r1
 80056ee:	d454      	bmi.n	800579a <__sflush_r+0xba>
 80056f0:	684b      	ldr	r3, [r1, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	dc02      	bgt.n	80056fc <__sflush_r+0x1c>
 80056f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dd48      	ble.n	800578e <__sflush_r+0xae>
 80056fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056fe:	2e00      	cmp	r6, #0
 8005700:	d045      	beq.n	800578e <__sflush_r+0xae>
 8005702:	2300      	movs	r3, #0
 8005704:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005708:	682f      	ldr	r7, [r5, #0]
 800570a:	6a21      	ldr	r1, [r4, #32]
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	d030      	beq.n	8005772 <__sflush_r+0x92>
 8005710:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	0759      	lsls	r1, r3, #29
 8005716:	d505      	bpl.n	8005724 <__sflush_r+0x44>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	1ad2      	subs	r2, r2, r3
 800571c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800571e:	b10b      	cbz	r3, 8005724 <__sflush_r+0x44>
 8005720:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005728:	6a21      	ldr	r1, [r4, #32]
 800572a:	4628      	mov	r0, r5
 800572c:	47b0      	blx	r6
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	d106      	bne.n	8005742 <__sflush_r+0x62>
 8005734:	6829      	ldr	r1, [r5, #0]
 8005736:	291d      	cmp	r1, #29
 8005738:	d82b      	bhi.n	8005792 <__sflush_r+0xb2>
 800573a:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <__sflush_r+0x104>)
 800573c:	410a      	asrs	r2, r1
 800573e:	07d6      	lsls	r6, r2, #31
 8005740:	d427      	bmi.n	8005792 <__sflush_r+0xb2>
 8005742:	2200      	movs	r2, #0
 8005744:	6062      	str	r2, [r4, #4]
 8005746:	04d9      	lsls	r1, r3, #19
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	d504      	bpl.n	8005758 <__sflush_r+0x78>
 800574e:	1c42      	adds	r2, r0, #1
 8005750:	d101      	bne.n	8005756 <__sflush_r+0x76>
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	b903      	cbnz	r3, 8005758 <__sflush_r+0x78>
 8005756:	6560      	str	r0, [r4, #84]	@ 0x54
 8005758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800575a:	602f      	str	r7, [r5, #0]
 800575c:	b1b9      	cbz	r1, 800578e <__sflush_r+0xae>
 800575e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005762:	4299      	cmp	r1, r3
 8005764:	d002      	beq.n	800576c <__sflush_r+0x8c>
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff fbf2 	bl	8004f50 <_free_r>
 800576c:	2300      	movs	r3, #0
 800576e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005770:	e00d      	b.n	800578e <__sflush_r+0xae>
 8005772:	2301      	movs	r3, #1
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	4602      	mov	r2, r0
 800577a:	1c50      	adds	r0, r2, #1
 800577c:	d1c9      	bne.n	8005712 <__sflush_r+0x32>
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0c6      	beq.n	8005712 <__sflush_r+0x32>
 8005784:	2b1d      	cmp	r3, #29
 8005786:	d001      	beq.n	800578c <__sflush_r+0xac>
 8005788:	2b16      	cmp	r3, #22
 800578a:	d11e      	bne.n	80057ca <__sflush_r+0xea>
 800578c:	602f      	str	r7, [r5, #0]
 800578e:	2000      	movs	r0, #0
 8005790:	e022      	b.n	80057d8 <__sflush_r+0xf8>
 8005792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005796:	b21b      	sxth	r3, r3
 8005798:	e01b      	b.n	80057d2 <__sflush_r+0xf2>
 800579a:	690f      	ldr	r7, [r1, #16]
 800579c:	2f00      	cmp	r7, #0
 800579e:	d0f6      	beq.n	800578e <__sflush_r+0xae>
 80057a0:	0793      	lsls	r3, r2, #30
 80057a2:	680e      	ldr	r6, [r1, #0]
 80057a4:	bf08      	it	eq
 80057a6:	694b      	ldreq	r3, [r1, #20]
 80057a8:	600f      	str	r7, [r1, #0]
 80057aa:	bf18      	it	ne
 80057ac:	2300      	movne	r3, #0
 80057ae:	eba6 0807 	sub.w	r8, r6, r7
 80057b2:	608b      	str	r3, [r1, #8]
 80057b4:	f1b8 0f00 	cmp.w	r8, #0
 80057b8:	dde9      	ble.n	800578e <__sflush_r+0xae>
 80057ba:	6a21      	ldr	r1, [r4, #32]
 80057bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057be:	4643      	mov	r3, r8
 80057c0:	463a      	mov	r2, r7
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b0      	blx	r6
 80057c6:	2800      	cmp	r0, #0
 80057c8:	dc08      	bgt.n	80057dc <__sflush_r+0xfc>
 80057ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057dc:	4407      	add	r7, r0
 80057de:	eba8 0800 	sub.w	r8, r8, r0
 80057e2:	e7e7      	b.n	80057b4 <__sflush_r+0xd4>
 80057e4:	dfbffffe 	.word	0xdfbffffe

080057e8 <_fflush_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	4605      	mov	r5, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	b913      	cbnz	r3, 80057f8 <_fflush_r+0x10>
 80057f2:	2500      	movs	r5, #0
 80057f4:	4628      	mov	r0, r5
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	b118      	cbz	r0, 8005802 <_fflush_r+0x1a>
 80057fa:	6a03      	ldr	r3, [r0, #32]
 80057fc:	b90b      	cbnz	r3, 8005802 <_fflush_r+0x1a>
 80057fe:	f7ff f997 	bl	8004b30 <__sinit>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f3      	beq.n	80057f2 <_fflush_r+0xa>
 800580a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800580c:	07d0      	lsls	r0, r2, #31
 800580e:	d404      	bmi.n	800581a <_fflush_r+0x32>
 8005810:	0599      	lsls	r1, r3, #22
 8005812:	d402      	bmi.n	800581a <_fflush_r+0x32>
 8005814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005816:	f7ff fb8a 	bl	8004f2e <__retarget_lock_acquire_recursive>
 800581a:	4628      	mov	r0, r5
 800581c:	4621      	mov	r1, r4
 800581e:	f7ff ff5f 	bl	80056e0 <__sflush_r>
 8005822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005824:	07da      	lsls	r2, r3, #31
 8005826:	4605      	mov	r5, r0
 8005828:	d4e4      	bmi.n	80057f4 <_fflush_r+0xc>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	059b      	lsls	r3, r3, #22
 800582e:	d4e1      	bmi.n	80057f4 <_fflush_r+0xc>
 8005830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005832:	f7ff fb7d 	bl	8004f30 <__retarget_lock_release_recursive>
 8005836:	e7dd      	b.n	80057f4 <_fflush_r+0xc>

08005838 <__swhatbuf_r>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	460c      	mov	r4, r1
 800583c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005840:	2900      	cmp	r1, #0
 8005842:	b096      	sub	sp, #88	@ 0x58
 8005844:	4615      	mov	r5, r2
 8005846:	461e      	mov	r6, r3
 8005848:	da0d      	bge.n	8005866 <__swhatbuf_r+0x2e>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	bf14      	ite	ne
 8005856:	2340      	movne	r3, #64	@ 0x40
 8005858:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800585c:	2000      	movs	r0, #0
 800585e:	6031      	str	r1, [r6, #0]
 8005860:	602b      	str	r3, [r5, #0]
 8005862:	b016      	add	sp, #88	@ 0x58
 8005864:	bd70      	pop	{r4, r5, r6, pc}
 8005866:	466a      	mov	r2, sp
 8005868:	f000 f87c 	bl	8005964 <_fstat_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	dbec      	blt.n	800584a <__swhatbuf_r+0x12>
 8005870:	9901      	ldr	r1, [sp, #4]
 8005872:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005876:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800587a:	4259      	negs	r1, r3
 800587c:	4159      	adcs	r1, r3
 800587e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005882:	e7eb      	b.n	800585c <__swhatbuf_r+0x24>

08005884 <__smakebuf_r>:
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005888:	079d      	lsls	r5, r3, #30
 800588a:	4606      	mov	r6, r0
 800588c:	460c      	mov	r4, r1
 800588e:	d507      	bpl.n	80058a0 <__smakebuf_r+0x1c>
 8005890:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	2301      	movs	r3, #1
 800589a:	6163      	str	r3, [r4, #20]
 800589c:	b003      	add	sp, #12
 800589e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a0:	ab01      	add	r3, sp, #4
 80058a2:	466a      	mov	r2, sp
 80058a4:	f7ff ffc8 	bl	8005838 <__swhatbuf_r>
 80058a8:	9f00      	ldr	r7, [sp, #0]
 80058aa:	4605      	mov	r5, r0
 80058ac:	4639      	mov	r1, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	f7ff fbba 	bl	8005028 <_malloc_r>
 80058b4:	b948      	cbnz	r0, 80058ca <__smakebuf_r+0x46>
 80058b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ba:	059a      	lsls	r2, r3, #22
 80058bc:	d4ee      	bmi.n	800589c <__smakebuf_r+0x18>
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	f043 0302 	orr.w	r3, r3, #2
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	e7e2      	b.n	8005890 <__smakebuf_r+0xc>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	6020      	str	r0, [r4, #0]
 80058ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058da:	b15b      	cbz	r3, 80058f4 <__smakebuf_r+0x70>
 80058dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e0:	4630      	mov	r0, r6
 80058e2:	f000 f851 	bl	8005988 <_isatty_r>
 80058e6:	b128      	cbz	r0, 80058f4 <__smakebuf_r+0x70>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	431d      	orrs	r5, r3
 80058f8:	81a5      	strh	r5, [r4, #12]
 80058fa:	e7cf      	b.n	800589c <__smakebuf_r+0x18>

080058fc <_putc_r>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	460d      	mov	r5, r1
 8005900:	4614      	mov	r4, r2
 8005902:	4606      	mov	r6, r0
 8005904:	b118      	cbz	r0, 800590e <_putc_r+0x12>
 8005906:	6a03      	ldr	r3, [r0, #32]
 8005908:	b90b      	cbnz	r3, 800590e <_putc_r+0x12>
 800590a:	f7ff f911 	bl	8004b30 <__sinit>
 800590e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005910:	07d8      	lsls	r0, r3, #31
 8005912:	d405      	bmi.n	8005920 <_putc_r+0x24>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	0599      	lsls	r1, r3, #22
 8005918:	d402      	bmi.n	8005920 <_putc_r+0x24>
 800591a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800591c:	f7ff fb07 	bl	8004f2e <__retarget_lock_acquire_recursive>
 8005920:	68a3      	ldr	r3, [r4, #8]
 8005922:	3b01      	subs	r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	60a3      	str	r3, [r4, #8]
 8005928:	da05      	bge.n	8005936 <_putc_r+0x3a>
 800592a:	69a2      	ldr	r2, [r4, #24]
 800592c:	4293      	cmp	r3, r2
 800592e:	db12      	blt.n	8005956 <_putc_r+0x5a>
 8005930:	b2eb      	uxtb	r3, r5
 8005932:	2b0a      	cmp	r3, #10
 8005934:	d00f      	beq.n	8005956 <_putc_r+0x5a>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	6022      	str	r2, [r4, #0]
 800593c:	701d      	strb	r5, [r3, #0]
 800593e:	b2ed      	uxtb	r5, r5
 8005940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005942:	07da      	lsls	r2, r3, #31
 8005944:	d405      	bmi.n	8005952 <_putc_r+0x56>
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	059b      	lsls	r3, r3, #22
 800594a:	d402      	bmi.n	8005952 <_putc_r+0x56>
 800594c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800594e:	f7ff faef 	bl	8004f30 <__retarget_lock_release_recursive>
 8005952:	4628      	mov	r0, r5
 8005954:	bd70      	pop	{r4, r5, r6, pc}
 8005956:	4629      	mov	r1, r5
 8005958:	4622      	mov	r2, r4
 800595a:	4630      	mov	r0, r6
 800595c:	f7ff f9d9 	bl	8004d12 <__swbuf_r>
 8005960:	4605      	mov	r5, r0
 8005962:	e7ed      	b.n	8005940 <_putc_r+0x44>

08005964 <_fstat_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	4d07      	ldr	r5, [pc, #28]	@ (8005984 <_fstat_r+0x20>)
 8005968:	2300      	movs	r3, #0
 800596a:	4604      	mov	r4, r0
 800596c:	4608      	mov	r0, r1
 800596e:	4611      	mov	r1, r2
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	f7fb fb05 	bl	8000f80 <_fstat>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	d102      	bne.n	8005980 <_fstat_r+0x1c>
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	b103      	cbz	r3, 8005980 <_fstat_r+0x1c>
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	bd38      	pop	{r3, r4, r5, pc}
 8005982:	bf00      	nop
 8005984:	200004c0 	.word	0x200004c0

08005988 <_isatty_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4d06      	ldr	r5, [pc, #24]	@ (80059a4 <_isatty_r+0x1c>)
 800598c:	2300      	movs	r3, #0
 800598e:	4604      	mov	r4, r0
 8005990:	4608      	mov	r0, r1
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	f7fb fb04 	bl	8000fa0 <_isatty>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d102      	bne.n	80059a2 <_isatty_r+0x1a>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	b103      	cbz	r3, 80059a2 <_isatty_r+0x1a>
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	bd38      	pop	{r3, r4, r5, pc}
 80059a4:	200004c0 	.word	0x200004c0

080059a8 <_sbrk_r>:
 80059a8:	b538      	push	{r3, r4, r5, lr}
 80059aa:	4d06      	ldr	r5, [pc, #24]	@ (80059c4 <_sbrk_r+0x1c>)
 80059ac:	2300      	movs	r3, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	602b      	str	r3, [r5, #0]
 80059b4:	f7fb fb0c 	bl	8000fd0 <_sbrk>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_sbrk_r+0x1a>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_sbrk_r+0x1a>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	200004c0 	.word	0x200004c0

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
