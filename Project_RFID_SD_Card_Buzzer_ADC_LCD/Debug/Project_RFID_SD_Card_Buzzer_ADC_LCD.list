
Project_RFID_SD_Card_Buzzer_ADC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005230  08005230  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005230  08005230  00006230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005238  08005238  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005240  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000068  080052a8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080052a8  00007528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc05  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002391  00000000  00000000  00013c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00016030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086b  00000000  00000000  00016b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002310a  00000000  00000000  000173bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed55  00000000  00000000  0003a4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf3c  00000000  00000000  0004921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  0011619c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001195ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d04 	.word	0x08004d04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004d04 	.word	0x08004d04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b34      	ldr	r3, [pc, #208]	@ (800068c <MX_GPIO_Init+0xec>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a33      	ldr	r2, [pc, #204]	@ (800068c <MX_GPIO_Init+0xec>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b31      	ldr	r3, [pc, #196]	@ (800068c <MX_GPIO_Init+0xec>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <MX_GPIO_Init+0xec>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a2c      	ldr	r2, [pc, #176]	@ (800068c <MX_GPIO_Init+0xec>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <MX_GPIO_Init+0xec>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b26      	ldr	r3, [pc, #152]	@ (800068c <MX_GPIO_Init+0xec>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a25      	ldr	r2, [pc, #148]	@ (800068c <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <MX_GPIO_Init+0xec>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000610:	481f      	ldr	r0, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xf0>)
 8000612:	f000 febd 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MFRC522_CS_N_Pin|LCD_CS_N_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 800061c:	481d      	ldr	r0, [pc, #116]	@ (8000694 <MX_GPIO_Init+0xf4>)
 800061e:	f000 feb7 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	481c      	ldr	r0, [pc, #112]	@ (8000698 <MX_GPIO_Init+0xf8>)
 8000628:	f000 feb2 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 800062c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	4812      	ldr	r0, [pc, #72]	@ (8000690 <MX_GPIO_Init+0xf0>)
 8000646:	f000 fd0f 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MFRC522_CS_N_Pin|LCD_CS_N_Pin;
 800064a:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 800064e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	480c      	ldr	r0, [pc, #48]	@ (8000694 <MX_GPIO_Init+0xf4>)
 8000664:	f000 fd00 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFRC522_RESET_Pin;
 8000668:	2380      	movs	r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MFRC522_RESET_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_GPIO_Init+0xf8>)
 8000680:	f000 fcf2 	bl	8001068 <HAL_GPIO_Init>

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40020000 	.word	0x40020000
 8000694:	40020400 	.word	0x40020400
 8000698:	40020800 	.word	0x40020800

0800069c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006a2:	f000 fb65 	bl	8000d70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006a6:	f000 f87b 	bl	80007a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006aa:	f7ff ff79 	bl	80005a0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006ae:	f000 fac3 	bl	8000c38 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80006b2:	f000 f951 	bl	8000958 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	// Initialize the LCD
	lcd_initialize();
 80006b6:	f000 f8ef 	bl	8000898 <lcd_initialize>

	// Initialize the MFRC522 Module
	RC522_Init(&rc522,&hspi1, GPIOB, MFRC522_CS_N_Pin,MFRC522_RESET_GPIO_Port, MFRC522_RESET_Pin);
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <main+0xdc>)
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	4a2d      	ldr	r2, [pc, #180]	@ (800077c <main+0xe0>)
 80006c8:	492d      	ldr	r1, [pc, #180]	@ (8000780 <main+0xe4>)
 80006ca:	482e      	ldr	r0, [pc, #184]	@ (8000784 <main+0xe8>)
 80006cc:	f003 f8ac 	bl	8003828 <RC522_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Request for card presence
		if (RC522_Request(&rc522, PICC_REQA, tagType) == STATUS_OK) {
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	461a      	mov	r2, r3
 80006d4:	2126      	movs	r1, #38	@ 0x26
 80006d6:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0xe8>)
 80006d8:	f003 f99c 	bl	8003a14 <RC522_Request>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d141      	bne.n	8000766 <main+0xca>
			HAL_Delay(100); // Small delay to stabilize reading
 80006e2:	2064      	movs	r0, #100	@ 0x64
 80006e4:	f000 fbb6 	bl	8000e54 <HAL_Delay>

			// Perform anti-collision to get the UID
			if (RC522_Anticoll(&rc522, cardUID) == STATUS_OK) {
 80006e8:	4927      	ldr	r1, [pc, #156]	@ (8000788 <main+0xec>)
 80006ea:	4826      	ldr	r0, [pc, #152]	@ (8000784 <main+0xe8>)
 80006ec:	f003 f9b9 	bl	8003a62 <RC522_Anticoll>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d137      	bne.n	8000766 <main+0xca>
				// Select the card
				if (RC522_SelectTag(&rc522, cardUID) == STATUS_OK) {
 80006f6:	4924      	ldr	r1, [pc, #144]	@ (8000788 <main+0xec>)
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <main+0xe8>)
 80006fa:	f003 f9f0 	bl	8003ade <RC522_SelectTag>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d130      	bne.n	8000766 <main+0xca>
					// Read data block 4 from the card
					if (RC522_Read(&rc522, 4, cardData) == STATUS_OK) {
 8000704:	4a21      	ldr	r2, [pc, #132]	@ (800078c <main+0xf0>)
 8000706:	2104      	movs	r1, #4
 8000708:	481e      	ldr	r0, [pc, #120]	@ (8000784 <main+0xe8>)
 800070a:	f003 fa1e 	bl	8003b4a <RC522_Read>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d128      	bne.n	8000766 <main+0xca>
						// Print UID and data (Replace printf with proper HAL_UART transmit if needed)
						printf("Card UID: ");
 8000714:	481e      	ldr	r0, [pc, #120]	@ (8000790 <main+0xf4>)
 8000716:	f003 fbdf 	bl	8003ed8 <iprintf>
						for (uint8_t i = 0; i < 4; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e009      	b.n	8000734 <main+0x98>
							printf("%02X ", cardUID[i]);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4a19      	ldr	r2, [pc, #100]	@ (8000788 <main+0xec>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	4619      	mov	r1, r3
 8000728:	481a      	ldr	r0, [pc, #104]	@ (8000794 <main+0xf8>)
 800072a:	f003 fbd5 	bl	8003ed8 <iprintf>
						for (uint8_t i = 0; i < 4; i++) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3301      	adds	r3, #1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d9f2      	bls.n	8000720 <main+0x84>
						}
						printf("\nCard Data: ");
 800073a:	4817      	ldr	r0, [pc, #92]	@ (8000798 <main+0xfc>)
 800073c:	f003 fbcc 	bl	8003ed8 <iprintf>
						for (uint8_t i = 0; i < 16; i++) {
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
 8000744:	e009      	b.n	800075a <main+0xbe>
							printf("%02X ", cardData[i]);
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	4a10      	ldr	r2, [pc, #64]	@ (800078c <main+0xf0>)
 800074a:	5cd3      	ldrb	r3, [r2, r3]
 800074c:	4619      	mov	r1, r3
 800074e:	4811      	ldr	r0, [pc, #68]	@ (8000794 <main+0xf8>)
 8000750:	f003 fbc2 	bl	8003ed8 <iprintf>
						for (uint8_t i = 0; i < 16; i++) {
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	3301      	adds	r3, #1
 8000758:	71bb      	strb	r3, [r7, #6]
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d9f2      	bls.n	8000746 <main+0xaa>
						}
						printf("\n");
 8000760:	200a      	movs	r0, #10
 8000762:	f003 fbcb 	bl	8003efc <putchar>
					}
				}
			}
		}
		printf("No Card Detected\r\n");
 8000766:	480d      	ldr	r0, [pc, #52]	@ (800079c <main+0x100>)
 8000768:	f003 fc26 	bl	8003fb8 <puts>

		HAL_Delay(500); // Polling delay
 800076c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000770:	f000 fb70 	bl	8000e54 <HAL_Delay>
		if (RC522_Request(&rc522, PICC_REQA, tagType) == STATUS_OK) {
 8000774:	e7ac      	b.n	80006d0 <main+0x34>
 8000776:	bf00      	nop
 8000778:	40020800 	.word	0x40020800
 800077c:	40020400 	.word	0x40020400
 8000780:	20000134 	.word	0x20000134
 8000784:	20000084 	.word	0x20000084
 8000788:	20000118 	.word	0x20000118
 800078c:	20000124 	.word	0x20000124
 8000790:	08004d1c 	.word	0x08004d1c
 8000794:	08004d28 	.word	0x08004d28
 8000798:	08004d30 	.word	0x08004d30
 800079c:	08004d40 	.word	0x08004d40

080007a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
 80007a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2234      	movs	r2, #52	@ 0x34
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fce2 	bl	8004178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <SystemClock_Config+0xb8>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	4a22      	ldr	r2, [pc, #136]	@ (8000858 <SystemClock_Config+0xb8>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <SystemClock_Config+0xb8>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e0:	2300      	movs	r3, #0
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <SystemClock_Config+0xbc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007ec:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <SystemClock_Config+0xbc>)
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <SystemClock_Config+0xbc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f899 	bl	800194c <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000820:	f000 f894 	bl	800094c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fdc0 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xae>
	{
		Error_Handler();
 800084a:	f000 f87f 	bl	800094c <Error_Handler>
	}
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	@ 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <_write>:

/* USER CODE BEGIN 4 */

// printf Inclusion on Screen for Debugging
int _write(int fd, char*ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	4807      	ldr	r0, [pc, #28]	@ (8000894 <_write+0x34>)
 8000878:	f002 f928 	bl	8002acc <HAL_UART_Transmit>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <_write+0x26>
		return len;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	e001      	b.n	800088a <_write+0x2a>
	else
		return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000190 	.word	0x20000190

08000898 <lcd_initialize>:

// Initialize the LCD_Driver in a few lines

void lcd_initialize(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af02      	add	r7, sp, #8
	lcd_init();
 800089e:	f002 fd58 	bl	8003352 <lcd_init>
	lcd_clear();
 80008a2:	f002 fdb1 	bl	8003408 <lcd_clear>
	// Set it to some line
	lcd_setLine(127, 0, 127, 31, 1);
 80008a6:	2301      	movs	r3, #1
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	231f      	movs	r3, #31
 80008ac:	227f      	movs	r2, #127	@ 0x7f
 80008ae:	2100      	movs	r1, #0
 80008b0:	207f      	movs	r0, #127	@ 0x7f
 80008b2:	f002 fe67 	bl	8003584 <lcd_setLine>
	lcd_setLine(0, 0, 0, 31, 1);
 80008b6:	2301      	movs	r3, #1
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	231f      	movs	r3, #31
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	f002 fe5f 	bl	8003584 <lcd_setLine>
	lcd_setString(4, 3, "System Initialization Test ", LCD_FONT_8, false);
 80008c6:	2300      	movs	r3, #0
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	4a17      	ldr	r2, [pc, #92]	@ (800092c <lcd_initialize+0x94>)
 80008ce:	2103      	movs	r1, #3
 80008d0:	2004      	movs	r0, #4
 80008d2:	f002 fe25 	bl	8003520 <lcd_setString>
	lcd_setString(4, 15, "I2C connection Done", LCD_FONT_8, false);
 80008d6:	2300      	movs	r3, #0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	4a14      	ldr	r2, [pc, #80]	@ (8000930 <lcd_initialize+0x98>)
 80008de:	210f      	movs	r1, #15
 80008e0:	2004      	movs	r0, #4
 80008e2:	f002 fe1d 	bl	8003520 <lcd_setString>
	lcd_setString(4, 25, "Accelerometer connection Done", LCD_FONT_8, false);
 80008e6:	2300      	movs	r3, #0
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	4a11      	ldr	r2, [pc, #68]	@ (8000934 <lcd_initialize+0x9c>)
 80008ee:	2119      	movs	r1, #25
 80008f0:	2004      	movs	r0, #4
 80008f2:	f002 fe15 	bl	8003520 <lcd_setString>
	lcd_show();
 80008f6:	f002 ff63 	bl	80037c0 <lcd_show>
	HAL_Delay(2500);
 80008fa:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80008fe:	f000 faa9 	bl	8000e54 <HAL_Delay>
	lcd_clear();
 8000902:	f002 fd81 	bl	8003408 <lcd_clear>

	puts("******** LETS PRACTICE ******** \r\n");
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <lcd_initialize+0xa0>)
 8000908:	f003 fb56 	bl	8003fb8 <puts>
	puts("- Uart connection ... Done\r\n");
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <lcd_initialize+0xa4>)
 800090e:	f003 fb53 	bl	8003fb8 <puts>
	puts("- printf retargeting to uart ... Done\r\n");
 8000912:	480b      	ldr	r0, [pc, #44]	@ (8000940 <lcd_initialize+0xa8>)
 8000914:	f003 fb50 	bl	8003fb8 <puts>
	puts("- Temperature Sensor connection ... Done\r\n");
 8000918:	480a      	ldr	r0, [pc, #40]	@ (8000944 <lcd_initialize+0xac>)
 800091a:	f003 fb4d 	bl	8003fb8 <puts>
	puts("***************************** \r\n");
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <lcd_initialize+0xb0>)
 8000920:	f003 fb4a 	bl	8003fb8 <puts>
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08004d54 	.word	0x08004d54
 8000930:	08004d70 	.word	0x08004d70
 8000934:	08004d84 	.word	0x08004d84
 8000938:	08004da4 	.word	0x08004da4
 800093c:	08004dc8 	.word	0x08004dc8
 8000940:	08004de8 	.word	0x08004de8
 8000944:	08004e10 	.word	0x08004e10
 8000948:	08004e3c 	.word	0x08004e3c

0800094c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_SPI1_Init+0x68>)
 800095e:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <MX_SPI1_Init+0x6c>)
 8000960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000964:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_SPI1_Init+0x68>)
 800096c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000970:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_SPI1_Init+0x68>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800098a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_SPI1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_SPI1_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_SPI1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_SPI1_Init+0x68>)
 80009a6:	220a      	movs	r2, #10
 80009a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_SPI1_Init+0x68>)
 80009ac:	f001 fa6c 	bl	8001e88 <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80009b6:	f7ff ffc9 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000134 	.word	0x20000134
 80009c4:	40013000 	.word	0x40013000

080009c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <HAL_SPI_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a17      	ldr	r2, [pc, #92]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_SPI_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000a22:	23a0      	movs	r3, #160	@ 0xa0
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a32:	2305      	movs	r3, #5
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_SPI_MspInit+0x8c>)
 8000a3e:	f000 fb13 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013000 	.word	0x40013000
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <NMI_Handler+0x4>

08000ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <MemManage_Handler+0x4>

08000ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f989 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	e00a      	b.n	8000b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b18:	f3af 8000 	nop.w
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	60ba      	str	r2, [r7, #8]
 8000b24:	b2ca      	uxtb	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf0      	blt.n	8000b18 <_read+0x12>
  }

  return len;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b68:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_isatty>:

int _isatty(int file)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b80:	2301      	movs	r3, #1
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b085      	sub	sp, #20
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	@ (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f003 fb1c 	bl	8004214 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20020000 	.word	0x20020000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	2000018c 	.word	0x2000018c
 8000c10:	20000528 	.word	0x20000528

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_USART2_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f001 fedc 	bl	8002a2c <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f7ff fe67 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000190 	.word	0x20000190
 8000c88:	40004400 	.word	0x40004400

08000c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	@ (8000d10 <HAL_UART_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_UART_MspInit+0x8c>)
 8000d02:	f000 f9b1 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d20:	f7ff ff78 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f003 fa69 	bl	8004220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fca5 	bl	800069c <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d60:	08005240 	.word	0x08005240
  ldr r2, =_sbss
 8000d64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d68:	20000528 	.word	0x20000528

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f931 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fe58 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f93b 	bl	800104e <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f911 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200001d8 	.word	0x200001d8

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200001d8 	.word	0x200001d8

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff47 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5c 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb0 	bl	8000fbc <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e165      	b.n	8001350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8154 	bne.w	800134a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80ae 	beq.w	800134a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001368 <HAL_GPIO_Init+0x300>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001368 <HAL_GPIO_Init+0x300>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a58      	ldr	r2, [pc, #352]	@ (800136c <HAL_GPIO_Init+0x304>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	@ (8001370 <HAL_GPIO_Init+0x308>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	@ (8001374 <HAL_GPIO_Init+0x30c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <HAL_GPIO_Init+0x310>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x20a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4a      	ldr	r2, [pc, #296]	@ (8001384 <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x206>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x202>
 8001266:	2306      	movs	r3, #6
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800126a:	2307      	movs	r3, #7
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	@ (800136c <HAL_GPIO_Init+0x304>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_GPIO_Init+0x324>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a31      	ldr	r2, [pc, #196]	@ (800138c <HAL_GPIO_Init+0x324>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_GPIO_Init+0x324>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a26      	ldr	r2, [pc, #152]	@ (800138c <HAL_GPIO_Init+0x324>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_GPIO_Init+0x324>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_GPIO_Init+0x324>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_GPIO_Init+0x324>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a11      	ldr	r2, [pc, #68]	@ (800138c <HAL_GPIO_Init+0x324>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae96 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0cc      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d8:	4b68      	ldr	r3, [pc, #416]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d90c      	bls.n	8001400 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b65      	ldr	r3, [pc, #404]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ee:	4b63      	ldr	r3, [pc, #396]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0b8      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001418:	4b59      	ldr	r3, [pc, #356]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a58      	ldr	r2, [pc, #352]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001422:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d005      	beq.n	800143c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001430:	4b53      	ldr	r3, [pc, #332]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a52      	ldr	r2, [pc, #328]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800143a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143c:	4b50      	ldr	r3, [pc, #320]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	494d      	ldr	r1, [pc, #308]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	4313      	orrs	r3, r2
 800144c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d044      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	4b47      	ldr	r3, [pc, #284]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d119      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e07f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d003      	beq.n	8001482 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	2b03      	cmp	r3, #3
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	4b3f      	ldr	r3, [pc, #252]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e06f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001492:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e067      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a2:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 0203 	bic.w	r2, r3, #3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4934      	ldr	r1, [pc, #208]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b4:	f7ff fcc2 	bl	8000e3c <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014bc:	f7ff fcbe 	bl	8000e3c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e04f      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 020c 	and.w	r2, r3, #12
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d1eb      	bne.n	80014bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d20c      	bcs.n	800150c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e032      	b.n	8001572 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4916      	ldr	r1, [pc, #88]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	490e      	ldr	r1, [pc, #56]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800154a:	f000 f855 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 800154e:	4602      	mov	r2, r0
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	490a      	ldr	r1, [pc, #40]	@ (8001584 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	5ccb      	ldrb	r3, [r1, r3]
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_RCC_ClockConfig+0x1c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fc22 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00
 8001580:	40023800 	.word	0x40023800
 8001584:	08004e60 	.word	0x08004e60
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000

080015a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015ac:	f7ff fff0 	bl	8001590 <HAL_RCC_GetHCLKFreq>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	0a9b      	lsrs	r3, r3, #10
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	4903      	ldr	r1, [pc, #12]	@ (80015cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015be:	5ccb      	ldrb	r3, [r1, r3]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	08004e70 	.word	0x08004e70

080015d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d4:	f7ff ffdc 	bl	8001590 <HAL_RCC_GetHCLKFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	0b5b      	lsrs	r3, r3, #13
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4903      	ldr	r1, [pc, #12]	@ (80015f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08004e70 	.word	0x08004e70

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015fc:	b0a6      	sub	sp, #152	@ 0x98
 80015fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161e:	4bc8      	ldr	r3, [pc, #800]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b0c      	cmp	r3, #12
 8001628:	f200 817e 	bhi.w	8001928 <HAL_RCC_GetSysClockFreq+0x330>
 800162c:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <HAL_RCC_GetSysClockFreq+0x3c>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001669 	.word	0x08001669
 8001638:	08001929 	.word	0x08001929
 800163c:	08001929 	.word	0x08001929
 8001640:	08001929 	.word	0x08001929
 8001644:	08001671 	.word	0x08001671
 8001648:	08001929 	.word	0x08001929
 800164c:	08001929 	.word	0x08001929
 8001650:	08001929 	.word	0x08001929
 8001654:	08001679 	.word	0x08001679
 8001658:	08001929 	.word	0x08001929
 800165c:	08001929 	.word	0x08001929
 8001660:	08001929 	.word	0x08001929
 8001664:	080017e3 	.word	0x080017e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4bb6      	ldr	r3, [pc, #728]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x34c>)
 800166a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800166e:	e15f      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001670:	4bb5      	ldr	r3, [pc, #724]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001676:	e15b      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001678:	4bb1      	ldr	r3, [pc, #708]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001684:	4bae      	ldr	r3, [pc, #696]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d031      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4bab      	ldr	r3, [pc, #684]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	2200      	movs	r2, #0
 8001698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800169a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800169c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016a4:	2300      	movs	r3, #0
 80016a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 80016aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016ae:	462a      	mov	r2, r5
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	2300      	movs	r3, #0
 80016b6:	4621      	mov	r1, r4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	4aa2      	ldr	r2, [pc, #648]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 80016c0:	4621      	mov	r1, r4
 80016c2:	fba1 1202 	umull	r1, r2, r1, r2
 80016c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016c8:	460a      	mov	r2, r1
 80016ca:	67ba      	str	r2, [r7, #120]	@ 0x78
 80016cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016ce:	4413      	add	r3, r2
 80016d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016d6:	2200      	movs	r2, #0
 80016d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80016e4:	f7fe fde4 	bl	80002b0 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016f2:	e064      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f4:	4b92      	ldr	r3, [pc, #584]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	2200      	movs	r2, #0
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80016fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8001700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800170c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001710:	4622      	mov	r2, r4
 8001712:	462b      	mov	r3, r5
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	0159      	lsls	r1, r3, #5
 800171e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001722:	0150      	lsls	r0, r2, #5
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4621      	mov	r1, r4
 800172a:	1a51      	subs	r1, r2, r1
 800172c:	6139      	str	r1, [r7, #16]
 800172e:	4629      	mov	r1, r5
 8001730:	eb63 0301 	sbc.w	r3, r3, r1
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001742:	4659      	mov	r1, fp
 8001744:	018b      	lsls	r3, r1, #6
 8001746:	4651      	mov	r1, sl
 8001748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174c:	4651      	mov	r1, sl
 800174e:	018a      	lsls	r2, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ebb2 0801 	subs.w	r8, r2, r1
 8001756:	4659      	mov	r1, fp
 8001758:	eb63 0901 	sbc.w	r9, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001770:	4690      	mov	r8, r2
 8001772:	4699      	mov	r9, r3
 8001774:	4623      	mov	r3, r4
 8001776:	eb18 0303 	adds.w	r3, r8, r3
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	462b      	mov	r3, r5
 800177e:	eb49 0303 	adc.w	r3, r9, r3
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001790:	4629      	mov	r1, r5
 8001792:	028b      	lsls	r3, r1, #10
 8001794:	4621      	mov	r1, r4
 8001796:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179a:	4621      	mov	r1, r4
 800179c:	028a      	lsls	r2, r1, #10
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017a6:	2200      	movs	r2, #0
 80017a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80017aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80017ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017b0:	f7fe fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4613      	mov	r3, r2
 80017ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017be:	4b60      	ldr	r3, [pc, #384]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	3301      	adds	r3, #1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80017d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80017d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017e0:	e0a6      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e2:	4b57      	ldr	r3, [pc, #348]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b54      	ldr	r3, [pc, #336]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d02a      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b51      	ldr	r3, [pc, #324]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001804:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800180c:	2100      	movs	r1, #0
 800180e:	4b4e      	ldr	r3, [pc, #312]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 8001810:	fb03 f201 	mul.w	r2, r3, r1
 8001814:	2300      	movs	r3, #0
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	4413      	add	r3, r2
 800181c:	4a4a      	ldr	r2, [pc, #296]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 800181e:	fba0 1202 	umull	r1, r2, r0, r2
 8001822:	677a      	str	r2, [r7, #116]	@ 0x74
 8001824:	460a      	mov	r2, r1
 8001826:	673a      	str	r2, [r7, #112]	@ 0x70
 8001828:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800182a:	4413      	add	r3, r2
 800182c:	677b      	str	r3, [r7, #116]	@ 0x74
 800182e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001832:	2200      	movs	r2, #0
 8001834:	633b      	str	r3, [r7, #48]	@ 0x30
 8001836:	637a      	str	r2, [r7, #52]	@ 0x34
 8001838:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800183c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001840:	f7fe fd36 	bl	80002b0 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800184e:	e05b      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	2200      	movs	r2, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	@ 0x24
 8001868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800186c:	4642      	mov	r2, r8
 800186e:	464b      	mov	r3, r9
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0159      	lsls	r1, r3, #5
 800187a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187e:	0150      	lsls	r0, r2, #5
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4641      	mov	r1, r8
 8001886:	ebb2 0a01 	subs.w	sl, r2, r1
 800188a:	4649      	mov	r1, r9
 800188c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800189c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018a4:	ebb2 040a 	subs.w	r4, r2, sl
 80018a8:	eb63 050b 	sbc.w	r5, r3, fp
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	00eb      	lsls	r3, r5, #3
 80018b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ba:	00e2      	lsls	r2, r4, #3
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	4643      	mov	r3, r8
 80018c2:	18e3      	adds	r3, r4, r3
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	464b      	mov	r3, r9
 80018c8:	eb45 0303 	adc.w	r3, r5, r3
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018da:	4629      	mov	r1, r5
 80018dc:	028b      	lsls	r3, r1, #10
 80018de:	4621      	mov	r1, r4
 80018e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e4:	4621      	mov	r1, r4
 80018e6:	028a      	lsls	r2, r1, #10
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f0:	2200      	movs	r2, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	61fa      	str	r2, [r7, #28]
 80018f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fa:	f7fe fcd9 	bl	80002b0 <__aeabi_uldivmod>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4613      	mov	r3, r2
 8001904:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0f1b      	lsrs	r3, r3, #28
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001916:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800191a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001926:	e003      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x34c>)
 800192a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800192e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001930:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001934:	4618      	mov	r0, r3
 8001936:	3798      	adds	r7, #152	@ 0x98
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	017d7840 	.word	0x017d7840

0800194c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e28d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8083 	beq.w	8001a72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800196c:	4b94      	ldr	r3, [pc, #592]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001978:	4b91      	ldr	r3, [pc, #580]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001980:	2b08      	cmp	r3, #8
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001984:	4b8e      	ldr	r3, [pc, #568]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b8b      	ldr	r3, [pc, #556]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b84      	ldr	r3, [pc, #528]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x124>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e25a      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x90>
 80019ce:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7b      	ldr	r2, [pc, #492]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xb4>
 80019e6:	4b76      	ldr	r3, [pc, #472]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b73      	ldr	r3, [pc, #460]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a72      	ldr	r2, [pc, #456]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6b      	ldr	r2, [pc, #428]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa0c 	bl	8000e3c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fa08 	bl	8000e3c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e21f      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b61      	ldr	r3, [pc, #388]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xdc>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9f8 	bl	8000e3c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9f4 	bl	8000e3c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	@ 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e20b      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x104>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06f      	beq.n	8001b5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a7e:	4b50      	ldr	r3, [pc, #320]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d017      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a96:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1d3      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f9a1 	bl	8000e3c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f99d 	bl	8000e3c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1b4      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f980 	bl	8000e3c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f97c 	bl	8000e3c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e193      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f960 	bl	8000e3c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff f95c 	bl	8000e3c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e173      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x234>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f949 	bl	8000e3c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f945 	bl	8000e3c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e15c      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b83      	ldr	r3, [pc, #524]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b7c      	ldr	r3, [pc, #496]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b79      	ldr	r3, [pc, #484]	@ (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b76      	ldr	r3, [pc, #472]	@ (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	@ (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f905 	bl	8000e3c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f901 	bl	8000e3c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e118      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6c      	ldr	r3, [pc, #432]	@ (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x31e>
 8001c5c:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a65      	ldr	r2, [pc, #404]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x340>
 8001c72:	4b61      	ldr	r3, [pc, #388]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	4a60      	ldr	r2, [pc, #384]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	4a5d      	ldr	r2, [pc, #372]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c90:	4a59      	ldr	r2, [pc, #356]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c98:	4b57      	ldr	r3, [pc, #348]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a56      	ldr	r2, [pc, #344]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f8c6 	bl	8000e3c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f8c2 	bl	8000e3c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0d7      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x368>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f8b0 	bl	8000e3c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f8ac 	bl	8000e3c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0c1      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ad 	beq.w	8001e78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d060      	beq.n	8001dec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d145      	bne.n	8001dbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f880 	bl	8000e3c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f87c 	bl	8000e3c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e093      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	071b      	lsls	r3, r3, #28
 8001d8a:	491b      	ldr	r1, [pc, #108]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7ff f851 	bl	8000e3c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff f84d 	bl	8000e3c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e064      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x452>
 8001dbc:	e05c      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f83a 	bl	8000e3c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f836 	bl	8000e3c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x480>
 8001dea:	e045      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e040      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <HAL_RCC_OscConfig+0x538>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d030      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d129      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d122      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d119      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07b      	b.n	8001f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eaa:	d009      	beq.n	8001ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
 8001eb2:	e005      	b.n	8001ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fd74 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	ea42 0103 	orr.w	r1, r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	f003 0104 	and.w	r1, r3, #4
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	f003 0210 	and.w	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001faa:	f7fe ff47 	bl	8000e3c <HAL_GetTick>
 8001fae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e12a      	b.n	800221a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_SPI_Transmit+0x36>
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e122      	b.n	800221a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_SPI_Transmit+0x48>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e11b      	b.n	800221a <HAL_SPI_Transmit+0x280>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002030:	d10f      	bne.n	8002052 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002050:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	2b40      	cmp	r3, #64	@ 0x40
 800205e:	d007      	beq.n	8002070 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002078:	d152      	bne.n	8002120 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Transmit+0xee>
 8002082:	8b7b      	ldrh	r3, [r7, #26]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d145      	bne.n	8002114 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	1c9a      	adds	r2, r3, #2
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ac:	e032      	b.n	8002114 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d112      	bne.n	80020e2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	881a      	ldrh	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	1c9a      	adds	r2, r3, #2
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020e0:	e018      	b.n	8002114 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020e2:	f7fe feab 	bl	8000e3c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d803      	bhi.n	80020fa <HAL_SPI_Transmit+0x160>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d102      	bne.n	8002100 <HAL_SPI_Transmit+0x166>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e082      	b.n	800221a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1c7      	bne.n	80020ae <HAL_SPI_Transmit+0x114>
 800211e:	e053      	b.n	80021c8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_SPI_Transmit+0x194>
 8002128:	8b7b      	ldrh	r3, [r7, #26]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d147      	bne.n	80021be <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	330c      	adds	r3, #12
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002154:	e033      	b.n	80021be <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b02      	cmp	r3, #2
 8002162:	d113      	bne.n	800218c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	86da      	strh	r2, [r3, #54]	@ 0x36
 800218a:	e018      	b.n	80021be <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800218c:	f7fe fe56 	bl	8000e3c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d803      	bhi.n	80021a4 <HAL_SPI_Transmit+0x20a>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a2:	d102      	bne.n	80021aa <HAL_SPI_Transmit+0x210>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e02d      	b.n	800221a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1c6      	bne.n	8002156 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fbd9 	bl	8002984 <SPI_EndRxTxTransaction>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002218:	2300      	movs	r3, #0
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b088      	sub	sp, #32
 8002226:	af02      	add	r7, sp, #8
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4613      	mov	r3, r2
 8002230:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	e104      	b.n	800244c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800224a:	d112      	bne.n	8002272 <HAL_SPI_Receive+0x50>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10e      	bne.n	8002272 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2204      	movs	r2, #4
 8002258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8f3 	bl	8002454 <HAL_SPI_TransmitReceive>
 800226e:	4603      	mov	r3, r0
 8002270:	e0ec      	b.n	800244c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002272:	f7fe fde3 	bl	8000e3c <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_SPI_Receive+0x62>
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0e1      	b.n	800244c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_SPI_Receive+0x74>
 8002292:	2302      	movs	r3, #2
 8002294:	e0da      	b.n	800244c <HAL_SPI_Receive+0x22a>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2204      	movs	r2, #4
 80022a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022e4:	d10f      	bne.n	8002306 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002304:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002310:	2b40      	cmp	r3, #64	@ 0x40
 8002312:	d007      	beq.n	8002324 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d170      	bne.n	800240e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800232c:	e035      	b.n	800239a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d115      	bne.n	8002368 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f103 020c 	add.w	r2, r3, #12
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002366:	e018      	b.n	800239a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002368:	f7fe fd68 	bl	8000e3c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d803      	bhi.n	8002380 <HAL_SPI_Receive+0x15e>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237e:	d102      	bne.n	8002386 <HAL_SPI_Receive+0x164>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e058      	b.n	800244c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1c4      	bne.n	800232e <HAL_SPI_Receive+0x10c>
 80023a4:	e038      	b.n	8002418 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d113      	bne.n	80023dc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	b292      	uxth	r2, r2
 80023c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023da:	e018      	b.n	800240e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023dc:	f7fe fd2e 	bl	8000e3c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d803      	bhi.n	80023f4 <HAL_SPI_Receive+0x1d2>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d102      	bne.n	80023fa <HAL_SPI_Receive+0x1d8>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e01e      	b.n	800244c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1c6      	bne.n	80023a6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fa4b 	bl	80028b8 <SPI_EndRxTransaction>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800244a:	2300      	movs	r3, #0
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002462:	2301      	movs	r3, #1
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002466:	f7fe fce9 	bl	8000e3c <HAL_GetTick>
 800246a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002472:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d00c      	beq.n	800249e <HAL_SPI_TransmitReceive+0x4a>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800248a:	d106      	bne.n	800249a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <HAL_SPI_TransmitReceive+0x46>
 8002494:	7ffb      	ldrb	r3, [r7, #31]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d001      	beq.n	800249e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e17f      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x5c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x5c>
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e174      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x6e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e16d      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d003      	beq.n	80024de <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2205      	movs	r2, #5
 80024da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	887a      	ldrh	r2, [r7, #2]
 80024ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251e:	2b40      	cmp	r3, #64	@ 0x40
 8002520:	d007      	beq.n	8002532 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800253a:	d17e      	bne.n	800263a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_SPI_TransmitReceive+0xf6>
 8002544:	8afb      	ldrh	r3, [r7, #22]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d16c      	bne.n	8002624 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256e:	e059      	b.n	8002624 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d11b      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x162>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x162>
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	2b01      	cmp	r3, #1
 800258c:	d113      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	1c9a      	adds	r2, r3, #2
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d119      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x1a4>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d014      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d8:	b292      	uxth	r2, r2
 80025da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025f4:	2301      	movs	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025f8:	f7fe fc20 	bl	8000e3c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002604:	429a      	cmp	r2, r3
 8002606:	d80d      	bhi.n	8002624 <HAL_SPI_TransmitReceive+0x1d0>
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d009      	beq.n	8002624 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0bc      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1a0      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x11c>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d19b      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x11c>
 8002638:	e082      	b.n	8002740 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x1f4>
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d171      	bne.n	800272c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266e:	e05d      	b.n	800272c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d11c      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x264>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x264>
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	2b01      	cmp	r3, #1
 800268c:	d114      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d119      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x2a6>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d014      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026f6:	2301      	movs	r3, #1
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026fa:	f7fe fb9f 	bl	8000e3c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002706:	429a      	cmp	r2, r3
 8002708:	d803      	bhi.n	8002712 <HAL_SPI_TransmitReceive+0x2be>
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d102      	bne.n	8002718 <HAL_SPI_TransmitReceive+0x2c4>
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e038      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d19c      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x21c>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d197      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f91d 	bl	8002984 <SPI_EndRxTxTransaction>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01d      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800279c:	2300      	movs	r3, #0
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3728      	adds	r7, #40	@ 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027b8:	f7fe fb40 	bl	8000e3c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027c8:	f7fe fb38 	bl	8000e3c <HAL_GetTick>
 80027cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027ce:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	0d1b      	lsrs	r3, r3, #20
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027de:	e054      	b.n	800288a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d050      	beq.n	800288a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027e8:	f7fe fb28 	bl	8000e3c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d902      	bls.n	80027fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13d      	bne.n	800287a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800280c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002816:	d111      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002820:	d004      	beq.n	800282c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d107      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800283a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002844:	d10f      	bne.n	8002866 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002864:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e017      	b.n	80028aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3b01      	subs	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d19b      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028cc:	d111      	bne.n	80028f2 <SPI_EndRxTransaction+0x3a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d6:	d004      	beq.n	80028e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e0:	d107      	bne.n	80028f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028fa:	d12a      	bne.n	8002952 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002904:	d012      	beq.n	800292c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	@ 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff ff49 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02d      	beq.n	8002978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002920:	f043 0220 	orr.w	r2, r3, #32
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e026      	b.n	800297a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	2101      	movs	r1, #1
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff ff36 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e013      	b.n	800297a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	2101      	movs	r1, #1
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ff23 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e000      	b.n	800297a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2201      	movs	r2, #1
 8002998:	2102      	movs	r1, #2
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff ff04 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e032      	b.n	8002a1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <SPI_EndRxTxTransaction+0xa0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <SPI_EndRxTxTransaction+0xa4>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	0d5b      	lsrs	r3, r3, #21
 80029c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029d4:	d112      	bne.n	80029fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	@ 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff fee1 	bl	80027a8 <SPI_WaitFlagStateUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d016      	beq.n	8002a1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e00f      	b.n	8002a1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d0f2      	beq.n	80029fc <SPI_EndRxTxTransaction+0x78>
 8002a16:	e000      	b.n	8002a1a <SPI_EndRxTxTransaction+0x96>
        break;
 8002a18:	bf00      	nop
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000000 	.word	0x20000000
 8002a28:	165e9f81 	.word	0x165e9f81

08002a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e042      	b.n	8002ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f91a 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	@ 0x24
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f973 	bl	8002d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d175      	bne.n	8002bd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <HAL_UART_Transmit+0x2c>
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e06e      	b.n	8002bda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2221      	movs	r2, #33	@ 0x21
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f997 	bl	8000e3c <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b24:	d108      	bne.n	8002b38 <HAL_UART_Transmit+0x6c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e003      	b.n	8002b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b40:	e02e      	b.n	8002ba0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2180      	movs	r1, #128	@ 0x80
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f848 	bl	8002be2 <UART_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e03a      	b.n	8002bda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e007      	b.n	8002b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1cb      	bne.n	8002b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2140      	movs	r1, #64	@ 0x40
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f814 	bl	8002be2 <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e006      	b.n	8002bda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	e03b      	b.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d037      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7fe f91e 	bl	8000e3c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d302      	bcc.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e03a      	b.n	8002c8c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b80      	cmp	r3, #128	@ 0x80
 8002c28:	d020      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b40      	cmp	r3, #64	@ 0x40
 8002c2e:	d01d      	beq.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d116      	bne.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f81d 	bl	8002c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00f      	b.n	8002c8c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d0b4      	beq.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b095      	sub	sp, #84	@ 0x54
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca6:	e853 3f00 	ldrex	r3, [r3]
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e5      	bne.n	8002c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cf8:	e841 2300 	strex	r3, r2, [r1]
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e5      	bne.n	8002cd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d119      	bne.n	8002d40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f023 0310 	bic.w	r3, r3, #16
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d2c:	61ba      	str	r2, [r7, #24]
 8002d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6979      	ldr	r1, [r7, #20]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d4e:	bf00      	nop
 8002d50:	3754      	adds	r7, #84	@ 0x54
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b0c0      	sub	sp, #256	@ 0x100
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d78:	68d9      	ldr	r1, [r3, #12]
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	ea40 0301 	orr.w	r3, r0, r1
 8002d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002db4:	f021 010c 	bic.w	r1, r1, #12
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd6:	6999      	ldr	r1, [r3, #24]
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	ea40 0301 	orr.w	r3, r0, r1
 8002de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b8f      	ldr	r3, [pc, #572]	@ (8003028 <UART_SetConfig+0x2cc>)
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d005      	beq.n	8002dfc <UART_SetConfig+0xa0>
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b8d      	ldr	r3, [pc, #564]	@ (800302c <UART_SetConfig+0x2d0>)
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d104      	bne.n	8002e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dfc:	f7fe fbe8 	bl	80015d0 <HAL_RCC_GetPCLK2Freq>
 8002e00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e04:	e003      	b.n	8002e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e06:	f7fe fbcf 	bl	80015a8 <HAL_RCC_GetPCLK1Freq>
 8002e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e18:	f040 810c 	bne.w	8003034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e2e:	4622      	mov	r2, r4
 8002e30:	462b      	mov	r3, r5
 8002e32:	1891      	adds	r1, r2, r2
 8002e34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e36:	415b      	adcs	r3, r3
 8002e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e3e:	4621      	mov	r1, r4
 8002e40:	eb12 0801 	adds.w	r8, r2, r1
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb43 0901 	adc.w	r9, r3, r1
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5e:	4690      	mov	r8, r2
 8002e60:	4699      	mov	r9, r3
 8002e62:	4623      	mov	r3, r4
 8002e64:	eb18 0303 	adds.w	r3, r8, r3
 8002e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	eb49 0303 	adc.w	r3, r9, r3
 8002e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	18db      	adds	r3, r3, r3
 8002e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e90:	4613      	mov	r3, r2
 8002e92:	eb42 0303 	adc.w	r3, r2, r3
 8002e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ea0:	f7fd fa06 	bl	80002b0 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4b61      	ldr	r3, [pc, #388]	@ (8003030 <UART_SetConfig+0x2d4>)
 8002eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	011c      	lsls	r4, r3, #4
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8002eda:	4649      	mov	r1, r9
 8002edc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef4:	4692      	mov	sl, r2
 8002ef6:	469b      	mov	fp, r3
 8002ef8:	4643      	mov	r3, r8
 8002efa:	eb1a 0303 	adds.w	r3, sl, r3
 8002efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb4b 0303 	adc.w	r3, fp, r3
 8002f08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f20:	460b      	mov	r3, r1
 8002f22:	18db      	adds	r3, r3, r3
 8002f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f26:	4613      	mov	r3, r2
 8002f28:	eb42 0303 	adc.w	r3, r2, r3
 8002f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f36:	f7fd f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <UART_SetConfig+0x2d4>)
 8002f42:	fba3 2301 	umull	r2, r3, r3, r1
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2264      	movs	r2, #100	@ 0x64
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	1acb      	subs	r3, r1, r3
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f56:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <UART_SetConfig+0x2d4>)
 8002f58:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f64:	441c      	add	r4, r3
 8002f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f78:	4642      	mov	r2, r8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	1891      	adds	r1, r2, r2
 8002f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f80:	415b      	adcs	r3, r3
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f88:	4641      	mov	r1, r8
 8002f8a:	1851      	adds	r1, r2, r1
 8002f8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f8e:	4649      	mov	r1, r9
 8002f90:	414b      	adcs	r3, r1
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fa0:	4659      	mov	r1, fp
 8002fa2:	00cb      	lsls	r3, r1, #3
 8002fa4:	4651      	mov	r1, sl
 8002fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002faa:	4651      	mov	r1, sl
 8002fac:	00ca      	lsls	r2, r1, #3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	189b      	adds	r3, r3, r2
 8002fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	eb42 0303 	adc.w	r3, r2, r3
 8002fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fdc:	460b      	mov	r3, r1
 8002fde:	18db      	adds	r3, r3, r3
 8002fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	eb42 0303 	adc.w	r3, r2, r3
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ff2:	f7fd f95d 	bl	80002b0 <__aeabi_uldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <UART_SetConfig+0x2d4>)
 8002ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	2164      	movs	r1, #100	@ 0x64
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	3332      	adds	r3, #50	@ 0x32
 800300e:	4a08      	ldr	r2, [pc, #32]	@ (8003030 <UART_SetConfig+0x2d4>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	f003 0207 	and.w	r2, r3, #7
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4422      	add	r2, r4
 8003022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003024:	e106      	b.n	8003234 <UART_SetConfig+0x4d8>
 8003026:	bf00      	nop
 8003028:	40011000 	.word	0x40011000
 800302c:	40011400 	.word	0x40011400
 8003030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800303e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003046:	4642      	mov	r2, r8
 8003048:	464b      	mov	r3, r9
 800304a:	1891      	adds	r1, r2, r2
 800304c:	6239      	str	r1, [r7, #32]
 800304e:	415b      	adcs	r3, r3
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
 8003052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003056:	4641      	mov	r1, r8
 8003058:	1854      	adds	r4, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb43 0501 	adc.w	r5, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	00eb      	lsls	r3, r5, #3
 800306a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306e:	00e2      	lsls	r2, r4, #3
 8003070:	4614      	mov	r4, r2
 8003072:	461d      	mov	r5, r3
 8003074:	4643      	mov	r3, r8
 8003076:	18e3      	adds	r3, r4, r3
 8003078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800307c:	464b      	mov	r3, r9
 800307e:	eb45 0303 	adc.w	r3, r5, r3
 8003082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030a2:	4629      	mov	r1, r5
 80030a4:	008b      	lsls	r3, r1, #2
 80030a6:	4621      	mov	r1, r4
 80030a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ac:	4621      	mov	r1, r4
 80030ae:	008a      	lsls	r2, r1, #2
 80030b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030b4:	f7fd f8fc 	bl	80002b0 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4b60      	ldr	r3, [pc, #384]	@ (8003240 <UART_SetConfig+0x4e4>)
 80030be:	fba3 2302 	umull	r2, r3, r3, r2
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	011c      	lsls	r4, r3, #4
 80030c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030d8:	4642      	mov	r2, r8
 80030da:	464b      	mov	r3, r9
 80030dc:	1891      	adds	r1, r2, r2
 80030de:	61b9      	str	r1, [r7, #24]
 80030e0:	415b      	adcs	r3, r3
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	4641      	mov	r1, r8
 80030ea:	1851      	adds	r1, r2, r1
 80030ec:	6139      	str	r1, [r7, #16]
 80030ee:	4649      	mov	r1, r9
 80030f0:	414b      	adcs	r3, r1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003100:	4659      	mov	r1, fp
 8003102:	00cb      	lsls	r3, r1, #3
 8003104:	4651      	mov	r1, sl
 8003106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310a:	4651      	mov	r1, sl
 800310c:	00ca      	lsls	r2, r1, #3
 800310e:	4610      	mov	r0, r2
 8003110:	4619      	mov	r1, r3
 8003112:	4603      	mov	r3, r0
 8003114:	4642      	mov	r2, r8
 8003116:	189b      	adds	r3, r3, r2
 8003118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800311c:	464b      	mov	r3, r9
 800311e:	460a      	mov	r2, r1
 8003120:	eb42 0303 	adc.w	r3, r2, r3
 8003124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003140:	4649      	mov	r1, r9
 8003142:	008b      	lsls	r3, r1, #2
 8003144:	4641      	mov	r1, r8
 8003146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314a:	4641      	mov	r1, r8
 800314c:	008a      	lsls	r2, r1, #2
 800314e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003152:	f7fd f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4611      	mov	r1, r2
 800315c:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <UART_SetConfig+0x4e4>)
 800315e:	fba3 2301 	umull	r2, r3, r3, r1
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	@ 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1acb      	subs	r3, r1, r3
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	3332      	adds	r3, #50	@ 0x32
 8003170:	4a33      	ldr	r2, [pc, #204]	@ (8003240 <UART_SetConfig+0x4e4>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317c:	441c      	add	r4, r3
 800317e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003182:	2200      	movs	r2, #0
 8003184:	673b      	str	r3, [r7, #112]	@ 0x70
 8003186:	677a      	str	r2, [r7, #116]	@ 0x74
 8003188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800318c:	4642      	mov	r2, r8
 800318e:	464b      	mov	r3, r9
 8003190:	1891      	adds	r1, r2, r2
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	415b      	adcs	r3, r3
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800319c:	4641      	mov	r1, r8
 800319e:	1851      	adds	r1, r2, r1
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	4649      	mov	r1, r9
 80031a4:	414b      	adcs	r3, r1
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031b4:	4659      	mov	r1, fp
 80031b6:	00cb      	lsls	r3, r1, #3
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031be:	4651      	mov	r1, sl
 80031c0:	00ca      	lsls	r2, r1, #3
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	4642      	mov	r2, r8
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031ce:	464b      	mov	r3, r9
 80031d0:	460a      	mov	r2, r1
 80031d2:	eb42 0303 	adc.w	r3, r2, r3
 80031d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031f0:	4649      	mov	r1, r9
 80031f2:	008b      	lsls	r3, r1, #2
 80031f4:	4641      	mov	r1, r8
 80031f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fa:	4641      	mov	r1, r8
 80031fc:	008a      	lsls	r2, r1, #2
 80031fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003202:	f7fd f855 	bl	80002b0 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <UART_SetConfig+0x4e4>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	@ 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	3332      	adds	r3, #50	@ 0x32
 800321e:	4a08      	ldr	r2, [pc, #32]	@ (8003240 <UART_SetConfig+0x4e4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4422      	add	r2, r4
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	bf00      	nop
 8003236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800323a:	46bd      	mov	sp, r7
 800323c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003240:	51eb851f 	.word	0x51eb851f

08003244 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	4803      	ldr	r0, [pc, #12]	@ (8003268 <chipSelect+0x24>)
 800325c:	f7fe f898 	bl	8001390 <HAL_GPIO_WritePin>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40020400 	.word	0x40020400

0800326c <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800327e:	4803      	ldr	r0, [pc, #12]	@ (800328c <registerSelect+0x20>)
 8003280:	f7fe f886 	bl	8001390 <HAL_GPIO_WritePin>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40020000 	.word	0x40020000

08003290 <displayReset>:

static void displayReset(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff ffd5 	bl	8003244 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	2140      	movs	r1, #64	@ 0x40
 800329e:	4808      	ldr	r0, [pc, #32]	@ (80032c0 <displayReset+0x30>)
 80032a0:	f7fe f876 	bl	8001390 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7fd fdd5 	bl	8000e54 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80032aa:	2201      	movs	r2, #1
 80032ac:	2140      	movs	r1, #64	@ 0x40
 80032ae:	4804      	ldr	r0, [pc, #16]	@ (80032c0 <displayReset+0x30>)
 80032b0:	f7fe f86e 	bl	8001390 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80032b4:	2001      	movs	r0, #1
 80032b6:	f7ff ffc5 	bl	8003244 <chipSelect>
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40020000 	.word	0x40020000

080032c4 <sendInstruction>:

static void sendInstruction(instruction command)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff ffcc 	bl	800326c <registerSelect>
    chipSelect(true);
 80032d4:	2001      	movs	r0, #1
 80032d6:	f7ff ffb5 	bl	8003244 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80032da:	1df9      	adds	r1, r7, #7
 80032dc:	2301      	movs	r3, #1
 80032de:	2201      	movs	r2, #1
 80032e0:	4804      	ldr	r0, [pc, #16]	@ (80032f4 <sendInstruction+0x30>)
 80032e2:	f7fe fe5a 	bl	8001f9a <HAL_SPI_Transmit>
    chipSelect(false);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7ff ffac 	bl	8003244 <chipSelect>
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000134 	.word	0x20000134

080032f8 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8003302:	2001      	movs	r0, #1
 8003304:	f7ff ffb2 	bl	800326c <registerSelect>
    chipSelect(true);
 8003308:	2001      	movs	r0, #1
 800330a:	f7ff ff9b 	bl	8003244 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 800330e:	1df9      	adds	r1, r7, #7
 8003310:	2301      	movs	r3, #1
 8003312:	2201      	movs	r2, #1
 8003314:	4804      	ldr	r0, [pc, #16]	@ (8003328 <sendData+0x30>)
 8003316:	f7fe fe40 	bl	8001f9a <HAL_SPI_Transmit>
    chipSelect(false);
 800331a:	2000      	movs	r0, #0
 800331c:	f7ff ff92 	bl	8003244 <chipSelect>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000134 	.word	0x20000134

0800332c <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	2b3f      	cmp	r3, #63	@ 0x3f
 800333a:	d806      	bhi.n	800334a <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 800333c:	2081      	movs	r0, #129	@ 0x81
 800333e:	f7ff ffc1 	bl	80032c4 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ffbd 	bl	80032c4 <sendInstruction>
    }
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <lcd_init>:

void lcd_init(void)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	af00      	add	r7, sp, #0
    lcd_clear();
 8003356:	f000 f857 	bl	8003408 <lcd_clear>
    displayReset();
 800335a:	f7ff ff99 	bl	8003290 <displayReset>

    sendInstruction(ADC_NORMAL);
 800335e:	20a0      	movs	r0, #160	@ 0xa0
 8003360:	f7ff ffb0 	bl	80032c4 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8003364:	20ae      	movs	r0, #174	@ 0xae
 8003366:	f7ff ffad 	bl	80032c4 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 800336a:	20c8      	movs	r0, #200	@ 0xc8
 800336c:	f7ff ffaa 	bl	80032c4 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003370:	20a2      	movs	r0, #162	@ 0xa2
 8003372:	f7ff ffa7 	bl	80032c4 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8003376:	202f      	movs	r0, #47	@ 0x2f
 8003378:	f7ff ffa4 	bl	80032c4 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 800337c:	2021      	movs	r0, #33	@ 0x21
 800337e:	f7ff ffa1 	bl	80032c4 <sendInstruction>
    lcd_setContrast(40);
 8003382:	2028      	movs	r0, #40	@ 0x28
 8003384:	f7ff ffd2 	bl	800332c <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8003388:	20af      	movs	r0, #175	@ 0xaf
 800338a:	f7ff ff9b 	bl	80032c4 <sendInstruction>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	460b      	mov	r3, r1
 80033a0:	71bb      	strb	r3, [r7, #6]
 80033a2:	4613      	mov	r3, r2
 80033a4:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db23      	blt.n	80033f6 <lcd_setPixel+0x62>
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	2b1f      	cmp	r3, #31
 80033b2:	d820      	bhi.n	80033f6 <lcd_setPixel+0x62>
        if (pixelIsSet)
 80033b4:	797b      	ldrb	r3, [r7, #5]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4a11      	ldr	r2, [pc, #68]	@ (8003404 <lcd_setPixel+0x70>)
 80033be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033c2:	79bb      	ldrb	r3, [r7, #6]
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	490c      	ldr	r1, [pc, #48]	@ (8003404 <lcd_setPixel+0x70>)
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80033d6:	e00e      	b.n	80033f6 <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <lcd_setPixel+0x70>)
 80033dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033e0:	79bb      	ldrb	r3, [r7, #6]
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4619      	mov	r1, r3
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	400a      	ands	r2, r1
 80033f0:	4904      	ldr	r1, [pc, #16]	@ (8003404 <lcd_setPixel+0x70>)
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200001dc 	.word	0x200001dc

08003408 <lcd_clear>:

void lcd_clear(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 800340e:	2300      	movs	r3, #0
 8003410:	71fb      	strb	r3, [r7, #7]
 8003412:	e007      	b.n	8003424 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4a09      	ldr	r2, [pc, #36]	@ (800343c <lcd_clear+0x34>)
 8003418:	2100      	movs	r1, #0
 800341a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	3301      	adds	r3, #1
 8003422:	71fb      	strb	r3, [r7, #7]
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	daf3      	bge.n	8003414 <lcd_clear+0xc>
    }
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	200001dc 	.word	0x200001dc

08003440 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	71fb      	strb	r3, [r7, #7]
 8003452:	4603      	mov	r3, r0
 8003454:	71bb      	strb	r3, [r7, #6]
 8003456:	460b      	mov	r3, r1
 8003458:	717b      	strb	r3, [r7, #5]
 800345a:	4613      	mov	r3, r2
 800345c:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	3b20      	subs	r3, #32
 8003462:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e049      	b.n	80034fe <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 800346a:	2300      	movs	r3, #0
 800346c:	73bb      	strb	r3, [r7, #14]
 800346e:	e03b      	b.n	80034e8 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8003470:	797b      	ldrb	r3, [r7, #5]
 8003472:	793a      	ldrb	r2, [r7, #4]
 8003474:	4928      	ldr	r1, [pc, #160]	@ (8003518 <lcd_setChar+0xd8>)
 8003476:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 800347a:	fb03 f202 	mul.w	r2, r3, r2
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	4413      	add	r3, r2
 8003482:	4a26      	ldr	r2, [pc, #152]	@ (800351c <lcd_setChar+0xdc>)
 8003484:	5cd3      	ldrb	r3, [r2, r3]
 8003486:	461a      	mov	r2, r3
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	fa42 f303 	asr.w	r3, r2, r3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8003496:	79fa      	ldrb	r2, [r7, #7]
 8003498:	7bbb      	ldrb	r3, [r7, #14]
 800349a:	4413      	add	r3, r2
 800349c:	b2d8      	uxtb	r0, r3
 800349e:	79ba      	ldrb	r2, [r7, #6]
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	4413      	add	r3, r2
 80034a4:	b2d9      	uxtb	r1, r3
 80034a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf14      	ite	ne
 80034ae:	2301      	movne	r3, #1
 80034b0:	2300      	moveq	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f083 0301 	eor.w	r3, r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff ff67 	bl	8003394 <lcd_setPixel>
 80034c6:	e00c      	b.n	80034e2 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80034c8:	79fa      	ldrb	r2, [r7, #7]
 80034ca:	7bbb      	ldrb	r3, [r7, #14]
 80034cc:	4413      	add	r3, r2
 80034ce:	b2d8      	uxtb	r0, r3
 80034d0:	79ba      	ldrb	r2, [r7, #6]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	4413      	add	r3, r2
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034dc:	4619      	mov	r1, r3
 80034de:	f7ff ff59 	bl	8003394 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73bb      	strb	r3, [r7, #14]
 80034e8:	793b      	ldrb	r3, [r7, #4]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003518 <lcd_setChar+0xd8>)
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	7bba      	ldrb	r2, [r7, #14]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3bb      	bcc.n	8003470 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	793b      	ldrb	r3, [r7, #4]
 8003500:	4a05      	ldr	r2, [pc, #20]	@ (8003518 <lcd_setChar+0xd8>)
 8003502:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	429a      	cmp	r2, r3
 800350a:	d3ae      	bcc.n	800346a <lcd_setChar+0x2a>
        }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bd90      	pop	{r4, r7, pc}
 8003516:	bf00      	nop
 8003518:	080051f8 	.word	0x080051f8
 800351c:	08004e78 	.word	0x08004e78

08003520 <lcd_setString>:

void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af02      	add	r7, sp, #8
 8003526:	603a      	str	r2, [r7, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
 800352e:	460b      	mov	r3, r1
 8003530:	71bb      	strb	r3, [r7, #6]
 8003532:	4613      	mov	r3, r2
 8003534:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8003536:	797b      	ldrb	r3, [r7, #5]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11c      	bne.n	8003576 <lcd_setString+0x56>
 800353c:	797b      	ldrb	r3, [r7, #5]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d819      	bhi.n	8003576 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8003542:	e014      	b.n	800356e <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	797c      	ldrb	r4, [r7, #5]
 800354a:	79b9      	ldrb	r1, [r7, #6]
 800354c:	79f8      	ldrb	r0, [r7, #7]
 800354e:	7e3b      	ldrb	r3, [r7, #24]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	4623      	mov	r3, r4
 8003554:	f7ff ff74 	bl	8003440 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8003558:	797b      	ldrb	r3, [r7, #5]
 800355a:	4a09      	ldr	r2, [pc, #36]	@ (8003580 <lcd_setString+0x60>)
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4413      	add	r3, r2
 8003560:	785a      	ldrb	r2, [r3, #1]
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	4413      	add	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e6      	bne.n	8003544 <lcd_setString+0x24>
        }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bd90      	pop	{r4, r7, pc}
 800357e:	bf00      	nop
 8003580:	080051f8 	.word	0x080051f8

08003584 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b08b      	sub	sp, #44	@ 0x2c
 8003588:	af00      	add	r7, sp, #0
 800358a:	4604      	mov	r4, r0
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4623      	mov	r3, r4
 8003594:	81fb      	strh	r3, [r7, #14]
 8003596:	4603      	mov	r3, r0
 8003598:	81bb      	strh	r3, [r7, #12]
 800359a:	460b      	mov	r3, r1
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	4613      	mov	r3, r2
 80035a0:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 80035a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ae:	edc7 7a08 	vstr	s15, [r7, #32]
 80035b2:	2300      	movs	r3, #0
 80035b4:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 80035b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80035c6:	2300      	movs	r3, #0
 80035c8:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80035ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bfb8      	it	lt
 80035d8:	425b      	neglt	r3, r3
 80035da:	b21b      	sxth	r3, r3
 80035dc:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 80035de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80035e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfb8      	it	lt
 80035ec:	425b      	neglt	r3, r3
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80035f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <lcd_setLine+0x8c>
 80035fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003608:	fb93 f3f2 	sdiv	r3, r3, r2
 800360c:	b21b      	sxth	r3, r3
 800360e:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8003610:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <lcd_setLine+0xaa>
 8003618:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800361c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003626:	fb93 f3f2 	sdiv	r3, r3, r2
 800362a:	b21b      	sxth	r3, r3
 800362c:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 800362e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003636:	429a      	cmp	r2, r3
 8003638:	db5f      	blt.n	80036fa <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 800363a:	2300      	movs	r3, #0
 800363c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800363e:	e055      	b.n	80036ec <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003640:	edd7 7a08 	vldr	s15, [r7, #32]
 8003644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	db20      	blt.n	8003690 <lcd_setLine+0x10c>
 800364e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	db19      	blt.n	8003690 <lcd_setLine+0x10c>
 800365c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003664:	edc7 7a01 	vstr	s15, [r7, #4]
 8003668:	793b      	ldrb	r3, [r7, #4]
 800366a:	b2d8      	uxtb	r0, r3
 800366c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003674:	edc7 7a01 	vstr	s15, [r7, #4]
 8003678:	793b      	ldrb	r3, [r7, #4]
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	f7ff fe82 	bl	8003394 <lcd_setPixel>
			xF += x[1];
 8003690:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800369c:	ed97 7a08 	vldr	s14, [r7, #32]
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 80036a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80036c8:	ee07 3a90 	vmov	s15, r3
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036dc:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80036e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80036ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80036f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dba3      	blt.n	8003640 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 80036f8:	e05e      	b.n	80037b8 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80036fe:	e055      	b.n	80037ac <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003700:	edd7 7a08 	vldr	s15, [r7, #32]
 8003704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	db20      	blt.n	8003750 <lcd_setLine+0x1cc>
 800370e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	db19      	blt.n	8003750 <lcd_setLine+0x1cc>
 800371c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	edc7 7a01 	vstr	s15, [r7, #4]
 8003728:	793b      	ldrb	r3, [r7, #4]
 800372a:	b2d8      	uxtb	r0, r3
 800372c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003734:	edc7 7a01 	vstr	s15, [r7, #4]
 8003738:	793b      	ldrb	r3, [r7, #4]
 800373a:	b2d9      	uxtb	r1, r3
 800373c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	f7ff fe22 	bl	8003394 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8003750:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800375c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003784:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8003788:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003794:	ed97 7a07 	vldr	s14, [r7, #28]
 8003798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379c:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 80037a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80037ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037b0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80037b4:	429a      	cmp	r2, r3
 80037b6:	dba3      	blt.n	8003700 <lcd_setLine+0x17c>
}
 80037b8:	bf00      	nop
 80037ba:	372c      	adds	r7, #44	@ 0x2c
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}

080037c0 <lcd_show>:

void lcd_show(void){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]
 80037ca:	e022      	b.n	8003812 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	3b50      	subs	r3, #80	@ 0x50
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fd76 	bl	80032c4 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 80037d8:	2010      	movs	r0, #16
 80037da:	f7ff fd73 	bl	80032c4 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7ff fd70 	bl	80032c4 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	71bb      	strb	r3, [r7, #6]
 80037e8:	e00c      	b.n	8003804 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80037ea:	79ba      	ldrb	r2, [r7, #6]
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	490d      	ldr	r1, [pc, #52]	@ (8003824 <lcd_show+0x64>)
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	440a      	add	r2, r1
 80037f4:	4413      	add	r3, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fd7d 	bl	80032f8 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80037fe:	79bb      	ldrb	r3, [r7, #6]
 8003800:	3301      	adds	r3, #1
 8003802:	71bb      	strb	r3, [r7, #6]
 8003804:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	daee      	bge.n	80037ea <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	3301      	adds	r3, #1
 8003810:	71fb      	strb	r3, [r7, #7]
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d9d9      	bls.n	80037cc <lcd_show+0xc>
    }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200001dc 	.word	0x200001dc

08003828 <RC522_Init>:
#include "MFRC522_Driver.h"
#include <string.h>
#include "gpio.h"

// Initialize the RC522 module
void RC522_Init(RC522_HandleTypeDef *rc522, SPI_HandleTypeDef *hspi, GPIO_TypeDef *csPort, uint16_t csPin, GPIO_TypeDef *rstPort, uint16_t rstPin) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	807b      	strh	r3, [r7, #2]
    rc522->hspi = hspi;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	601a      	str	r2, [r3, #0]
    rc522->csPort = csPort;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	605a      	str	r2, [r3, #4]
    rc522->csPin = csPin;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	811a      	strh	r2, [r3, #8]
    rc522->rstPort = rstPort;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	60da      	str	r2, [r3, #12]
    rc522->rstPin = rstPin;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8bba      	ldrh	r2, [r7, #28]
 8003852:	821a      	strh	r2, [r3, #16]

    // Perform a reset
    HAL_GPIO_WritePin(rc522->rstPort, rc522->rstPin, GPIO_PIN_RESET);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68d8      	ldr	r0, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8a1b      	ldrh	r3, [r3, #16]
 800385c:	2200      	movs	r2, #0
 800385e:	4619      	mov	r1, r3
 8003860:	f7fd fd96 	bl	8001390 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003864:	200a      	movs	r0, #10
 8003866:	f7fd faf5 	bl	8000e54 <HAL_Delay>
    HAL_GPIO_WritePin(rc522->rstPort, rc522->rstPin, GPIO_PIN_SET);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68d8      	ldr	r0, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8a1b      	ldrh	r3, [r3, #16]
 8003872:	2201      	movs	r2, #1
 8003874:	4619      	mov	r1, r3
 8003876:	f7fd fd8b 	bl	8001390 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800387a:	2032      	movs	r0, #50	@ 0x32
 800387c:	f7fd faea 	bl	8000e54 <HAL_Delay>

    // Configure initial settings
    RC522_WriteRegister(rc522, TModeReg, 0x80);
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	2154      	movs	r1, #84	@ 0x54
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f822 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, TPrescalerReg, 0xA9);
 800388a:	22a9      	movs	r2, #169	@ 0xa9
 800388c:	2156      	movs	r1, #86	@ 0x56
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f81d 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, TReloadRegH, 0x03);
 8003894:	2203      	movs	r2, #3
 8003896:	2158      	movs	r1, #88	@ 0x58
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f818 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, TReloadRegL, 0xE8);
 800389e:	22e8      	movs	r2, #232	@ 0xe8
 80038a0:	215a      	movs	r1, #90	@ 0x5a
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f813 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, TxASKReg, 0x40);
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	212a      	movs	r1, #42	@ 0x2a
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f80e 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, ModeReg, 0x3D);
 80038b2:	223d      	movs	r2, #61	@ 0x3d
 80038b4:	2122      	movs	r1, #34	@ 0x22
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f809 	bl	80038ce <RC522_WriteRegister>
    RC522_SetRegisterBits(rc522, TxControlReg, 0x03); // Enable antenna
 80038bc:	2203      	movs	r2, #3
 80038be:	2128      	movs	r1, #40	@ 0x28
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f86a 	bl	800399a <RC522_SetRegisterBits>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <RC522_WriteRegister>:
    RC522_WriteRegister(rc522, CommandReg, PCD_SOFTRESET);
    HAL_Delay(50);
}

// Write a byte to a specified register
void RC522_WriteRegister(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t value) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
 80038da:	4613      	mov	r3, r2
 80038dc:	70bb      	strb	r3, [r7, #2]
    uint8_t data[] = { (reg << 1) & 0x7E, value };
 80038de:	78fb      	ldrb	r3, [r7, #3]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	733b      	strb	r3, [r7, #12]
 80038ec:	78bb      	ldrb	r3, [r7, #2]
 80038ee:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(rc522->csPort, rc522->csPin, GPIO_PIN_RESET);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6858      	ldr	r0, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	891b      	ldrh	r3, [r3, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fd fd48 	bl	8001390 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(rc522->hspi, data, 2, HAL_MAX_DELAY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	f107 010c 	add.w	r1, r7, #12
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	2202      	movs	r2, #2
 800390e:	f7fe fb44 	bl	8001f9a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(rc522->csPort, rc522->csPin, GPIO_PIN_SET);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6858      	ldr	r0, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	891b      	ldrh	r3, [r3, #8]
 800391a:	2201      	movs	r2, #1
 800391c:	4619      	mov	r1, r3
 800391e:	f7fd fd37 	bl	8001390 <HAL_GPIO_WritePin>
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <RC522_ReadRegister>:

// Read a byte from a specified register
uint8_t RC522_ReadRegister(RC522_HandleTypeDef *rc522, uint8_t reg) {
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	70fb      	strb	r3, [r7, #3]
    uint8_t address = ((reg << 1) & 0x7E) | 0x80;
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	b25b      	sxtb	r3, r3
 800393c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003940:	b25b      	sxtb	r3, r3
 8003942:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003946:	b25b      	sxtb	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	73fb      	strb	r3, [r7, #15]
    uint8_t value;
    HAL_GPIO_WritePin(rc522->csPort, rc522->csPin, GPIO_PIN_RESET);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6858      	ldr	r0, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	891b      	ldrh	r3, [r3, #8]
 8003954:	2200      	movs	r2, #0
 8003956:	4619      	mov	r1, r3
 8003958:	f7fd fd1a 	bl	8001390 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(rc522->hspi, &address, 1, HAL_MAX_DELAY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	f107 010f 	add.w	r1, r7, #15
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	2201      	movs	r2, #1
 800396a:	f7fe fb16 	bl	8001f9a <HAL_SPI_Transmit>
    HAL_SPI_Receive(rc522->hspi, &value, 1, HAL_MAX_DELAY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	f107 010e 	add.w	r1, r7, #14
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	2201      	movs	r2, #1
 800397c:	f7fe fc51 	bl	8002222 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(rc522->csPort, rc522->csPin, GPIO_PIN_SET);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6858      	ldr	r0, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	891b      	ldrh	r3, [r3, #8]
 8003988:	2201      	movs	r2, #1
 800398a:	4619      	mov	r1, r3
 800398c:	f7fd fd00 	bl	8001390 <HAL_GPIO_WritePin>
    return value;
 8003990:	7bbb      	ldrb	r3, [r7, #14]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <RC522_SetRegisterBits>:

// Set specific bits in a register
void RC522_SetRegisterBits(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t mask) {
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
 80039a6:	4613      	mov	r3, r2
 80039a8:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = RC522_ReadRegister(rc522, reg);
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ffbb 	bl	800392a <RC522_ReadRegister>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(rc522, reg, tmp | mask);
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	78bb      	ldrb	r3, [r7, #2]
 80039bc:	4313      	orrs	r3, r2
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff82 	bl	80038ce <RC522_WriteRegister>
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <RC522_ClearRegisterBits>:

// Clear specific bits in a register
void RC522_ClearRegisterBits(RC522_HandleTypeDef *rc522, uint8_t reg, uint8_t mask) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
 80039de:	4613      	mov	r3, r2
 80039e0:	70bb      	strb	r3, [r7, #2]
    uint8_t tmp = RC522_ReadRegister(rc522, reg);
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff9f 	bl	800392a <RC522_ReadRegister>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(rc522, reg, tmp & (~mask));
 80039f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	b25a      	sxtb	r2, r3
 80039f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff61 	bl	80038ce <RC522_WriteRegister>
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <RC522_Request>:

// Request for card presence
// Send a REQA or WUPA command to detect the presence of a card
uint8_t RC522_Request(RC522_HandleTypeDef *rc522, uint8_t reqMode, uint8_t *TagType) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	72fb      	strb	r3, [r7, #11]
    uint8_t status;
    uint8_t backBits;

    RC522_WriteRegister(rc522, BitFramingReg, 0x07); // Set bit framing
 8003a22:	2207      	movs	r2, #7
 8003a24:	211a      	movs	r1, #26
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff ff51 	bl	80038ce <RC522_WriteRegister>
    TagType[0] = reqMode;                           // Set the request mode (REQA or WUPA)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7afa      	ldrb	r2, [r7, #11]
 8003a30:	701a      	strb	r2, [r3, #0]
    status = RC522_TransceiveData(rc522, TagType, 1, TagType, &backBits);
 8003a32:	f107 0316 	add.w	r3, r7, #22
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f900 	bl	8003c44 <RC522_TransceiveData>
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]

    // Check if operation was successful and the response is valid
    if ((status != STATUS_OK) || (backBits != 0x10)) {
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <RC522_Request+0x40>
 8003a4e:	7dbb      	ldrb	r3, [r7, #22]
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d001      	beq.n	8003a58 <RC522_Request+0x44>
        status = STATUS_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    }
    return status;
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <RC522_Anticoll>:

// Perform anticollision detection to get the card's UID
uint8_t RC522_Anticoll(RC522_HandleTypeDef *rc522, uint8_t *serNum) {
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af02      	add	r7, sp, #8
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
    uint8_t status;
    uint8_t i, serNumCheck = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	737b      	strb	r3, [r7, #13]
    uint8_t backLen;

    RC522_WriteRegister(rc522, BitFramingReg, 0x00); // Clear bit framing
 8003a70:	2200      	movs	r2, #0
 8003a72:	211a      	movs	r1, #26
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff2a 	bl	80038ce <RC522_WriteRegister>
    serNum[0] = PICC_SEL_CL1;                   // Set anticollision command
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2293      	movs	r2, #147	@ 0x93
 8003a7e:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;                               // Set NVB
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	3301      	adds	r3, #1
 8003a84:	2220      	movs	r2, #32
 8003a86:	701a      	strb	r2, [r3, #0]

    // Transmit and receive data
    status = RC522_TransceiveData(rc522, serNum, 2, serNum, &backLen);
 8003a88:	f107 030c 	add.w	r3, r7, #12
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2202      	movs	r2, #2
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8d5 	bl	8003c44 <RC522_TransceiveData>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	73fb      	strb	r3, [r7, #15]

    // Check UID and verify checksum
    if (status == STATUS_OK) {
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d117      	bne.n	8003ad4 <RC522_Anticoll+0x72>
        for (i = 0; i < 4; i++) {
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73bb      	strb	r3, [r7, #14]
 8003aa8:	e009      	b.n	8003abe <RC522_Anticoll+0x5c>
            serNumCheck ^= serNum[i];
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	7b7b      	ldrb	r3, [r7, #13]
 8003ab4:	4053      	eors	r3, r2
 8003ab6:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	3301      	adds	r3, #1
 8003abc:	73bb      	strb	r3, [r7, #14]
 8003abe:	7bbb      	ldrb	r3, [r7, #14]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d9f2      	bls.n	8003aaa <RC522_Anticoll+0x48>
        }
        if (serNumCheck != serNum[4]) {
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	7b7a      	ldrb	r2, [r7, #13]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <RC522_Anticoll+0x72>
            status = STATUS_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <RC522_SelectTag>:

// Select a card by its UID
uint8_t RC522_SelectTag(RC522_HandleTypeDef *rc522, uint8_t *serNum) {
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b088      	sub	sp, #32
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
    uint8_t buffer[9];
    uint8_t backLen;

    buffer[0] = PICC_SEL_CL1;   // Select command
 8003ae8:	2393      	movs	r3, #147	@ 0x93
 8003aea:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;               // NVB
 8003aec:	2370      	movs	r3, #112	@ 0x70
 8003aee:	737b      	strb	r3, [r7, #13]
    memcpy(&buffer[2], serNum, 5);  // Copy UID
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	3302      	adds	r3, #2
 8003af6:	2205      	movs	r2, #5
 8003af8:	6839      	ldr	r1, [r7, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fbb7 	bl	800426e <memcpy>

    RC522_CalculateCRC(rc522, buffer, 7, &buffer[7]); // Append CRC
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	3307      	adds	r3, #7
 8003b06:	f107 010c 	add.w	r1, r7, #12
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f83f 	bl	8003b90 <RC522_CalculateCRC>

    // Transceive data
    uint8_t status = RC522_TransceiveData(rc522, buffer, 9, buffer, &backLen);
 8003b12:	f107 020c 	add.w	r2, r7, #12
 8003b16:	f107 010c 	add.w	r1, r7, #12
 8003b1a:	f107 030b 	add.w	r3, r7, #11
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	2209      	movs	r2, #9
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f88d 	bl	8003c44 <RC522_TransceiveData>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    return (status == STATUS_OK && backLen == 0x18) ? STATUS_OK : STATUS_ERROR;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <RC522_SelectTag+0x5c>
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	2b18      	cmp	r3, #24
 8003b38:	d001      	beq.n	8003b3e <RC522_SelectTag+0x60>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <RC522_SelectTag+0x62>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <RC522_Read>:
    // Transmit authentication command
    return RC522_TransceiveData(rc522, buffer, 12, buffer, &i);
}

// Read data from a specific block
uint8_t RC522_Read(RC522_HandleTypeDef *rc522, uint8_t blockAddr, uint8_t *recvData) {
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b088      	sub	sp, #32
 8003b4e:	af02      	add	r7, sp, #8
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	460b      	mov	r3, r1
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[4];
    uint8_t backLen;

    buffer[0] = PICC_READ;   // Read command
 8003b58:	2330      	movs	r3, #48	@ 0x30
 8003b5a:	753b      	strb	r3, [r7, #20]
    buffer[1] = blockAddr;          // Block address
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	757b      	strb	r3, [r7, #21]
    RC522_CalculateCRC(rc522, buffer, 2, &buffer[2]); // Append CRC
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	3302      	adds	r3, #2
 8003b66:	f107 0114 	add.w	r1, r7, #20
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f80f 	bl	8003b90 <RC522_CalculateCRC>

    // Transmit and receive data
    return RC522_TransceiveData(rc522, buffer, 4, recvData, &backLen);
 8003b72:	f107 0114 	add.w	r1, r7, #20
 8003b76:	f107 0313 	add.w	r3, r7, #19
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f85f 	bl	8003c44 <RC522_TransceiveData>
 8003b86:	4603      	mov	r3, r0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <RC522_CalculateCRC>:
    // Write data to the block
    return RC522_TransceiveData(rc522, writeData, 16, buffer, &backLen);
}

// Calculate CRC for communication
void RC522_CalculateCRC(RC522_HandleTypeDef *rc522, uint8_t *data, uint8_t length, uint8_t *result) {
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
    RC522_WriteRegister(rc522, CommandReg, PCD_IDLE);       // Stop any active command
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fe92 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, DivIrqReg, 0x04);           // Clear CRCIRq bit
 8003baa:	2204      	movs	r2, #4
 8003bac:	210a      	movs	r1, #10
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fe8d 	bl	80038ce <RC522_WriteRegister>
    RC522_SetRegisterBits(rc522, FIFOLevelReg, 0x80);      // Flush FIFO
 8003bb4:	2280      	movs	r2, #128	@ 0x80
 8003bb6:	2114      	movs	r1, #20
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff feee 	bl	800399a <RC522_SetRegisterBits>

    // Write data to the FIFO
    for (uint8_t i = 0; i < length; i++) {
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]
 8003bc2:	e00b      	b.n	8003bdc <RC522_CalculateCRC+0x4c>
        RC522_WriteRegister(rc522, FIFODataReg, data[i]);
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4413      	add	r3, r2
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2112      	movs	r1, #18
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fe7c 	bl	80038ce <RC522_WriteRegister>
    for (uint8_t i = 0; i < length; i++) {
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
 8003bdc:	7dfa      	ldrb	r2, [r7, #23]
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3ef      	bcc.n	8003bc4 <RC522_CalculateCRC+0x34>
    }

    // Start CRC calculation
    RC522_WriteRegister(rc522, CommandReg, PCD_CALCCRC);
 8003be4:	2203      	movs	r2, #3
 8003be6:	2102      	movs	r1, #2
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fe70 	bl	80038ce <RC522_WriteRegister>

    // Wait for CRC completion
    uint8_t n;
    for (uint16_t i = 5000; i > 0; i--) {
 8003bee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bf2:	82bb      	strh	r3, [r7, #20]
 8003bf4:	e00d      	b.n	8003c12 <RC522_CalculateCRC+0x82>
        n = RC522_ReadRegister(rc522, DivIrqReg);
 8003bf6:	210a      	movs	r1, #10
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fe96 	bl	800392a <RC522_ReadRegister>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	74fb      	strb	r3, [r7, #19]
        if (n & 0x04) { // CRCIRq bit set
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <RC522_CalculateCRC+0x8a>
    for (uint16_t i = 5000; i > 0; i--) {
 8003c0c:	8abb      	ldrh	r3, [r7, #20]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	82bb      	strh	r3, [r7, #20]
 8003c12:	8abb      	ldrh	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <RC522_CalculateCRC+0x66>
 8003c18:	e000      	b.n	8003c1c <RC522_CalculateCRC+0x8c>
            break;
 8003c1a:	bf00      	nop
        }
    }

    // Retrieve the CRC result
    result[0] = RC522_ReadRegister(rc522, CRCResultRegL);
 8003c1c:	2144      	movs	r1, #68	@ 0x44
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff fe83 	bl	800392a <RC522_ReadRegister>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	701a      	strb	r2, [r3, #0]
    result[1] = RC522_ReadRegister(rc522, CRCResultRegH);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	1c5c      	adds	r4, r3, #1
 8003c30:	2142      	movs	r1, #66	@ 0x42
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fe79 	bl	800392a <RC522_ReadRegister>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	7023      	strb	r3, [r4, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <RC522_TransceiveData>:

    RC522_TransceiveData(rc522, buffer, 4, NULL, NULL);
}

// Transceive data with RC522
uint8_t RC522_TransceiveData(RC522_HandleTypeDef *rc522, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen) {
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
    uint8_t waitIRq = 0x30; // RxIRq and IdleIRq
 8003c54:	2330      	movs	r3, #48	@ 0x30
 8003c56:	74fb      	strb	r3, [r7, #19]
    uint8_t n;
    uint32_t i;

    // Set bit framing and flush FIFO buffer
    RC522_WriteRegister(rc522, CommandReg, PCD_IDLE);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fe36 	bl	80038ce <RC522_WriteRegister>
    RC522_WriteRegister(rc522, ComIrqReg, 0x7F);
 8003c62:	227f      	movs	r2, #127	@ 0x7f
 8003c64:	2108      	movs	r1, #8
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff fe31 	bl	80038ce <RC522_WriteRegister>
    RC522_SetRegisterBits(rc522, FIFOLevelReg, 0x80);
 8003c6c:	2280      	movs	r2, #128	@ 0x80
 8003c6e:	2114      	movs	r1, #20
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fe92 	bl	800399a <RC522_SetRegisterBits>

    // Write data to FIFO
    for (i = 0; i < sendLen; i++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	e00b      	b.n	8003c94 <RC522_TransceiveData+0x50>
        RC522_WriteRegister(rc522, FIFODataReg, sendData[i]);
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4413      	add	r3, r2
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	2112      	movs	r1, #18
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff fe20 	bl	80038ce <RC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3ef      	bcc.n	8003c7c <RC522_TransceiveData+0x38>
    }
    RC522_WriteRegister(rc522, CommandReg, PCD_TRANSCEIVE);
 8003c9c:	220c      	movs	r2, #12
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff fe14 	bl	80038ce <RC522_WriteRegister>
    RC522_SetRegisterBits(rc522, BitFramingReg, 0x80); // Start sending
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	211a      	movs	r1, #26
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f7ff fe75 	bl	800399a <RC522_SetRegisterBits>

    // Wait for transmission to complete
    i = 2000;
 8003cb0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003cb4:	617b      	str	r3, [r7, #20]
    do {
        n = RC522_ReadRegister(rc522, ComIrqReg);
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff fe36 	bl	800392a <RC522_ReadRegister>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74bb      	strb	r3, [r7, #18]
        i--;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
    } while ((i != 0) && !(n & waitIRq) && !(n & 0x01));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <RC522_TransceiveData+0xa0>
 8003cce:	7cba      	ldrb	r2, [r7, #18]
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <RC522_TransceiveData+0xa0>
 8003cda:	7cbb      	ldrb	r3, [r7, #18]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0e8      	beq.n	8003cb6 <RC522_TransceiveData+0x72>

    // Stop sending
    RC522_ClearRegisterBits(rc522, BitFramingReg, 0x80);
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	211a      	movs	r1, #26
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff fe72 	bl	80039d2 <RC522_ClearRegisterBits>

    if (i != 0) {
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d029      	beq.n	8003d48 <RC522_TransceiveData+0x104>
        if (!(RC522_ReadRegister(rc522, ErrorReg) & 0x1B)) {
 8003cf4:	210c      	movs	r1, #12
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff fe17 	bl	800392a <RC522_ReadRegister>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 031b 	and.w	r3, r3, #27
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11e      	bne.n	8003d44 <RC522_TransceiveData+0x100>
            *backLen = RC522_ReadRegister(rc522, FIFOLevelReg);
 8003d06:	2114      	movs	r1, #20
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fe0e 	bl	800392a <RC522_ReadRegister>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < *backLen; i++) {
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	e00b      	b.n	8003d34 <RC522_TransceiveData+0xf0>
                backData[i] = RC522_ReadRegister(rc522, FIFODataReg);
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	18d4      	adds	r4, r2, r3
 8003d22:	2112      	movs	r1, #18
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fe00 	bl	800392a <RC522_ReadRegister>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	7023      	strb	r3, [r4, #0]
            for (i = 0; i < *backLen; i++) {
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d3ed      	bcc.n	8003d1c <RC522_TransceiveData+0xd8>
            }
            return MI_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e002      	b.n	8003d4a <RC522_TransceiveData+0x106>
        } else {
            return MI_ERR;
 8003d44:	2302      	movs	r3, #2
 8003d46:	e000      	b.n	8003d4a <RC522_TransceiveData+0x106>
        }
    }
    return MI_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}
	...

08003d54 <std>:
 8003d54:	2300      	movs	r3, #0
 8003d56:	b510      	push	{r4, lr}
 8003d58:	4604      	mov	r4, r0
 8003d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d62:	6083      	str	r3, [r0, #8]
 8003d64:	8181      	strh	r1, [r0, #12]
 8003d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d68:	81c2      	strh	r2, [r0, #14]
 8003d6a:	6183      	str	r3, [r0, #24]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	2208      	movs	r2, #8
 8003d70:	305c      	adds	r0, #92	@ 0x5c
 8003d72:	f000 fa01 	bl	8004178 <memset>
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <std+0x58>)
 8003d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <std+0x5c>)
 8003d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <std+0x60>)
 8003d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <std+0x64>)
 8003d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <std+0x68>)
 8003d88:	6224      	str	r4, [r4, #32]
 8003d8a:	429c      	cmp	r4, r3
 8003d8c:	d006      	beq.n	8003d9c <std+0x48>
 8003d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d92:	4294      	cmp	r4, r2
 8003d94:	d002      	beq.n	8003d9c <std+0x48>
 8003d96:	33d0      	adds	r3, #208	@ 0xd0
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	d105      	bne.n	8003da8 <std+0x54>
 8003d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da4:	f000 ba60 	b.w	8004268 <__retarget_lock_init_recursive>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	bf00      	nop
 8003dac:	08003fc9 	.word	0x08003fc9
 8003db0:	08003feb 	.word	0x08003feb
 8003db4:	08004023 	.word	0x08004023
 8003db8:	08004047 	.word	0x08004047
 8003dbc:	200003dc 	.word	0x200003dc

08003dc0 <stdio_exit_handler>:
 8003dc0:	4a02      	ldr	r2, [pc, #8]	@ (8003dcc <stdio_exit_handler+0xc>)
 8003dc2:	4903      	ldr	r1, [pc, #12]	@ (8003dd0 <stdio_exit_handler+0x10>)
 8003dc4:	4803      	ldr	r0, [pc, #12]	@ (8003dd4 <stdio_exit_handler+0x14>)
 8003dc6:	f000 b869 	b.w	8003e9c <_fwalk_sglue>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	08004b25 	.word	0x08004b25
 8003dd4:	2000001c 	.word	0x2000001c

08003dd8 <cleanup_stdio>:
 8003dd8:	6841      	ldr	r1, [r0, #4]
 8003dda:	4b0c      	ldr	r3, [pc, #48]	@ (8003e0c <cleanup_stdio+0x34>)
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	b510      	push	{r4, lr}
 8003de0:	4604      	mov	r4, r0
 8003de2:	d001      	beq.n	8003de8 <cleanup_stdio+0x10>
 8003de4:	f000 fe9e 	bl	8004b24 <_fflush_r>
 8003de8:	68a1      	ldr	r1, [r4, #8]
 8003dea:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <cleanup_stdio+0x38>)
 8003dec:	4299      	cmp	r1, r3
 8003dee:	d002      	beq.n	8003df6 <cleanup_stdio+0x1e>
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 fe97 	bl	8004b24 <_fflush_r>
 8003df6:	68e1      	ldr	r1, [r4, #12]
 8003df8:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <cleanup_stdio+0x3c>)
 8003dfa:	4299      	cmp	r1, r3
 8003dfc:	d004      	beq.n	8003e08 <cleanup_stdio+0x30>
 8003dfe:	4620      	mov	r0, r4
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e04:	f000 be8e 	b.w	8004b24 <_fflush_r>
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200003dc 	.word	0x200003dc
 8003e10:	20000444 	.word	0x20000444
 8003e14:	200004ac 	.word	0x200004ac

08003e18 <global_stdio_init.part.0>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <global_stdio_init.part.0+0x30>)
 8003e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e4c <global_stdio_init.part.0+0x34>)
 8003e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e50 <global_stdio_init.part.0+0x38>)
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	4620      	mov	r0, r4
 8003e24:	2200      	movs	r2, #0
 8003e26:	2104      	movs	r1, #4
 8003e28:	f7ff ff94 	bl	8003d54 <std>
 8003e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e30:	2201      	movs	r2, #1
 8003e32:	2109      	movs	r1, #9
 8003e34:	f7ff ff8e 	bl	8003d54 <std>
 8003e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e42:	2112      	movs	r1, #18
 8003e44:	f7ff bf86 	b.w	8003d54 <std>
 8003e48:	20000514 	.word	0x20000514
 8003e4c:	200003dc 	.word	0x200003dc
 8003e50:	08003dc1 	.word	0x08003dc1

08003e54 <__sfp_lock_acquire>:
 8003e54:	4801      	ldr	r0, [pc, #4]	@ (8003e5c <__sfp_lock_acquire+0x8>)
 8003e56:	f000 ba08 	b.w	800426a <__retarget_lock_acquire_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	2000051d 	.word	0x2000051d

08003e60 <__sfp_lock_release>:
 8003e60:	4801      	ldr	r0, [pc, #4]	@ (8003e68 <__sfp_lock_release+0x8>)
 8003e62:	f000 ba03 	b.w	800426c <__retarget_lock_release_recursive>
 8003e66:	bf00      	nop
 8003e68:	2000051d 	.word	0x2000051d

08003e6c <__sinit>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	f7ff fff0 	bl	8003e54 <__sfp_lock_acquire>
 8003e74:	6a23      	ldr	r3, [r4, #32]
 8003e76:	b11b      	cbz	r3, 8003e80 <__sinit+0x14>
 8003e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e7c:	f7ff bff0 	b.w	8003e60 <__sfp_lock_release>
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <__sinit+0x28>)
 8003e82:	6223      	str	r3, [r4, #32]
 8003e84:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <__sinit+0x2c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f5      	bne.n	8003e78 <__sinit+0xc>
 8003e8c:	f7ff ffc4 	bl	8003e18 <global_stdio_init.part.0>
 8003e90:	e7f2      	b.n	8003e78 <__sinit+0xc>
 8003e92:	bf00      	nop
 8003e94:	08003dd9 	.word	0x08003dd9
 8003e98:	20000514 	.word	0x20000514

08003e9c <_fwalk_sglue>:
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	4688      	mov	r8, r1
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eac:	f1b9 0901 	subs.w	r9, r9, #1
 8003eb0:	d505      	bpl.n	8003ebe <_fwalk_sglue+0x22>
 8003eb2:	6824      	ldr	r4, [r4, #0]
 8003eb4:	2c00      	cmp	r4, #0
 8003eb6:	d1f7      	bne.n	8003ea8 <_fwalk_sglue+0xc>
 8003eb8:	4630      	mov	r0, r6
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d907      	bls.n	8003ed4 <_fwalk_sglue+0x38>
 8003ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	d003      	beq.n	8003ed4 <_fwalk_sglue+0x38>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4638      	mov	r0, r7
 8003ed0:	47c0      	blx	r8
 8003ed2:	4306      	orrs	r6, r0
 8003ed4:	3568      	adds	r5, #104	@ 0x68
 8003ed6:	e7e9      	b.n	8003eac <_fwalk_sglue+0x10>

08003ed8 <iprintf>:
 8003ed8:	b40f      	push	{r0, r1, r2, r3}
 8003eda:	b507      	push	{r0, r1, r2, lr}
 8003edc:	4906      	ldr	r1, [pc, #24]	@ (8003ef8 <iprintf+0x20>)
 8003ede:	ab04      	add	r3, sp, #16
 8003ee0:	6808      	ldr	r0, [r1, #0]
 8003ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee6:	6881      	ldr	r1, [r0, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	f000 faf1 	bl	80044d0 <_vfiprintf_r>
 8003eee:	b003      	add	sp, #12
 8003ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef4:	b004      	add	sp, #16
 8003ef6:	4770      	bx	lr
 8003ef8:	20000018 	.word	0x20000018

08003efc <putchar>:
 8003efc:	4b02      	ldr	r3, [pc, #8]	@ (8003f08 <putchar+0xc>)
 8003efe:	4601      	mov	r1, r0
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	6882      	ldr	r2, [r0, #8]
 8003f04:	f000 be98 	b.w	8004c38 <_putc_r>
 8003f08:	20000018 	.word	0x20000018

08003f0c <_puts_r>:
 8003f0c:	6a03      	ldr	r3, [r0, #32]
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	6884      	ldr	r4, [r0, #8]
 8003f12:	4605      	mov	r5, r0
 8003f14:	460e      	mov	r6, r1
 8003f16:	b90b      	cbnz	r3, 8003f1c <_puts_r+0x10>
 8003f18:	f7ff ffa8 	bl	8003e6c <__sinit>
 8003f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1e:	07db      	lsls	r3, r3, #31
 8003f20:	d405      	bmi.n	8003f2e <_puts_r+0x22>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	0598      	lsls	r0, r3, #22
 8003f26:	d402      	bmi.n	8003f2e <_puts_r+0x22>
 8003f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2a:	f000 f99e 	bl	800426a <__retarget_lock_acquire_recursive>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	0719      	lsls	r1, r3, #28
 8003f32:	d502      	bpl.n	8003f3a <_puts_r+0x2e>
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d135      	bne.n	8003fa6 <_puts_r+0x9a>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 f8c5 	bl	80040cc <__swsetup_r>
 8003f42:	b380      	cbz	r0, 8003fa6 <_puts_r+0x9a>
 8003f44:	f04f 35ff 	mov.w	r5, #4294967295
 8003f48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f4a:	07da      	lsls	r2, r3, #31
 8003f4c:	d405      	bmi.n	8003f5a <_puts_r+0x4e>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	059b      	lsls	r3, r3, #22
 8003f52:	d402      	bmi.n	8003f5a <_puts_r+0x4e>
 8003f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f56:	f000 f989 	bl	800426c <__retarget_lock_release_recursive>
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da04      	bge.n	8003f6c <_puts_r+0x60>
 8003f62:	69a2      	ldr	r2, [r4, #24]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	dc17      	bgt.n	8003f98 <_puts_r+0x8c>
 8003f68:	290a      	cmp	r1, #10
 8003f6a:	d015      	beq.n	8003f98 <_puts_r+0x8c>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	6022      	str	r2, [r4, #0]
 8003f72:	7019      	strb	r1, [r3, #0]
 8003f74:	68a3      	ldr	r3, [r4, #8]
 8003f76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	60a3      	str	r3, [r4, #8]
 8003f7e:	2900      	cmp	r1, #0
 8003f80:	d1ed      	bne.n	8003f5e <_puts_r+0x52>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da11      	bge.n	8003faa <_puts_r+0x9e>
 8003f86:	4622      	mov	r2, r4
 8003f88:	210a      	movs	r1, #10
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 f85f 	bl	800404e <__swbuf_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0d7      	beq.n	8003f44 <_puts_r+0x38>
 8003f94:	250a      	movs	r5, #10
 8003f96:	e7d7      	b.n	8003f48 <_puts_r+0x3c>
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f857 	bl	800404e <__swbuf_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d1e7      	bne.n	8003f74 <_puts_r+0x68>
 8003fa4:	e7ce      	b.n	8003f44 <_puts_r+0x38>
 8003fa6:	3e01      	subs	r6, #1
 8003fa8:	e7e4      	b.n	8003f74 <_puts_r+0x68>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	6022      	str	r2, [r4, #0]
 8003fb0:	220a      	movs	r2, #10
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	e7ee      	b.n	8003f94 <_puts_r+0x88>
	...

08003fb8 <puts>:
 8003fb8:	4b02      	ldr	r3, [pc, #8]	@ (8003fc4 <puts+0xc>)
 8003fba:	4601      	mov	r1, r0
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f7ff bfa5 	b.w	8003f0c <_puts_r>
 8003fc2:	bf00      	nop
 8003fc4:	20000018 	.word	0x20000018

08003fc8 <__sread>:
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	460c      	mov	r4, r1
 8003fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd0:	f000 f8fc 	bl	80041cc <_read_r>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	bfab      	itete	ge
 8003fd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fda:	89a3      	ldrhlt	r3, [r4, #12]
 8003fdc:	181b      	addge	r3, r3, r0
 8003fde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fe2:	bfac      	ite	ge
 8003fe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fe6:	81a3      	strhlt	r3, [r4, #12]
 8003fe8:	bd10      	pop	{r4, pc}

08003fea <__swrite>:
 8003fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fee:	461f      	mov	r7, r3
 8003ff0:	898b      	ldrh	r3, [r1, #12]
 8003ff2:	05db      	lsls	r3, r3, #23
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	d505      	bpl.n	8004008 <__swrite+0x1e>
 8003ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004000:	2302      	movs	r3, #2
 8004002:	2200      	movs	r2, #0
 8004004:	f000 f8d0 	bl	80041a8 <_lseek_r>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	4632      	mov	r2, r6
 8004016:	463b      	mov	r3, r7
 8004018:	4628      	mov	r0, r5
 800401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401e:	f000 b8e7 	b.w	80041f0 <_write_r>

08004022 <__sseek>:
 8004022:	b510      	push	{r4, lr}
 8004024:	460c      	mov	r4, r1
 8004026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402a:	f000 f8bd 	bl	80041a8 <_lseek_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	bf15      	itete	ne
 8004034:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004036:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800403a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800403e:	81a3      	strheq	r3, [r4, #12]
 8004040:	bf18      	it	ne
 8004042:	81a3      	strhne	r3, [r4, #12]
 8004044:	bd10      	pop	{r4, pc}

08004046 <__sclose>:
 8004046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404a:	f000 b89d 	b.w	8004188 <_close_r>

0800404e <__swbuf_r>:
 800404e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004050:	460e      	mov	r6, r1
 8004052:	4614      	mov	r4, r2
 8004054:	4605      	mov	r5, r0
 8004056:	b118      	cbz	r0, 8004060 <__swbuf_r+0x12>
 8004058:	6a03      	ldr	r3, [r0, #32]
 800405a:	b90b      	cbnz	r3, 8004060 <__swbuf_r+0x12>
 800405c:	f7ff ff06 	bl	8003e6c <__sinit>
 8004060:	69a3      	ldr	r3, [r4, #24]
 8004062:	60a3      	str	r3, [r4, #8]
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	071a      	lsls	r2, r3, #28
 8004068:	d501      	bpl.n	800406e <__swbuf_r+0x20>
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	b943      	cbnz	r3, 8004080 <__swbuf_r+0x32>
 800406e:	4621      	mov	r1, r4
 8004070:	4628      	mov	r0, r5
 8004072:	f000 f82b 	bl	80040cc <__swsetup_r>
 8004076:	b118      	cbz	r0, 8004080 <__swbuf_r+0x32>
 8004078:	f04f 37ff 	mov.w	r7, #4294967295
 800407c:	4638      	mov	r0, r7
 800407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	6922      	ldr	r2, [r4, #16]
 8004084:	1a98      	subs	r0, r3, r2
 8004086:	6963      	ldr	r3, [r4, #20]
 8004088:	b2f6      	uxtb	r6, r6
 800408a:	4283      	cmp	r3, r0
 800408c:	4637      	mov	r7, r6
 800408e:	dc05      	bgt.n	800409c <__swbuf_r+0x4e>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 fd46 	bl	8004b24 <_fflush_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	d1ed      	bne.n	8004078 <__swbuf_r+0x2a>
 800409c:	68a3      	ldr	r3, [r4, #8]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60a3      	str	r3, [r4, #8]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	6022      	str	r2, [r4, #0]
 80040a8:	701e      	strb	r6, [r3, #0]
 80040aa:	6962      	ldr	r2, [r4, #20]
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d004      	beq.n	80040bc <__swbuf_r+0x6e>
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	07db      	lsls	r3, r3, #31
 80040b6:	d5e1      	bpl.n	800407c <__swbuf_r+0x2e>
 80040b8:	2e0a      	cmp	r6, #10
 80040ba:	d1df      	bne.n	800407c <__swbuf_r+0x2e>
 80040bc:	4621      	mov	r1, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 fd30 	bl	8004b24 <_fflush_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d0d9      	beq.n	800407c <__swbuf_r+0x2e>
 80040c8:	e7d6      	b.n	8004078 <__swbuf_r+0x2a>
	...

080040cc <__swsetup_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4b29      	ldr	r3, [pc, #164]	@ (8004174 <__swsetup_r+0xa8>)
 80040d0:	4605      	mov	r5, r0
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	460c      	mov	r4, r1
 80040d6:	b118      	cbz	r0, 80040e0 <__swsetup_r+0x14>
 80040d8:	6a03      	ldr	r3, [r0, #32]
 80040da:	b90b      	cbnz	r3, 80040e0 <__swsetup_r+0x14>
 80040dc:	f7ff fec6 	bl	8003e6c <__sinit>
 80040e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e4:	0719      	lsls	r1, r3, #28
 80040e6:	d422      	bmi.n	800412e <__swsetup_r+0x62>
 80040e8:	06da      	lsls	r2, r3, #27
 80040ea:	d407      	bmi.n	80040fc <__swsetup_r+0x30>
 80040ec:	2209      	movs	r2, #9
 80040ee:	602a      	str	r2, [r5, #0]
 80040f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	e033      	b.n	8004164 <__swsetup_r+0x98>
 80040fc:	0758      	lsls	r0, r3, #29
 80040fe:	d512      	bpl.n	8004126 <__swsetup_r+0x5a>
 8004100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004102:	b141      	cbz	r1, 8004116 <__swsetup_r+0x4a>
 8004104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004108:	4299      	cmp	r1, r3
 800410a:	d002      	beq.n	8004112 <__swsetup_r+0x46>
 800410c:	4628      	mov	r0, r5
 800410e:	f000 f8bd 	bl	800428c <_free_r>
 8004112:	2300      	movs	r3, #0
 8004114:	6363      	str	r3, [r4, #52]	@ 0x34
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	2300      	movs	r3, #0
 8004120:	6063      	str	r3, [r4, #4]
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	b94b      	cbnz	r3, 8004146 <__swsetup_r+0x7a>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800413c:	d003      	beq.n	8004146 <__swsetup_r+0x7a>
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 fd3d 	bl	8004bc0 <__smakebuf_r>
 8004146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800414a:	f013 0201 	ands.w	r2, r3, #1
 800414e:	d00a      	beq.n	8004166 <__swsetup_r+0x9a>
 8004150:	2200      	movs	r2, #0
 8004152:	60a2      	str	r2, [r4, #8]
 8004154:	6962      	ldr	r2, [r4, #20]
 8004156:	4252      	negs	r2, r2
 8004158:	61a2      	str	r2, [r4, #24]
 800415a:	6922      	ldr	r2, [r4, #16]
 800415c:	b942      	cbnz	r2, 8004170 <__swsetup_r+0xa4>
 800415e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004162:	d1c5      	bne.n	80040f0 <__swsetup_r+0x24>
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	0799      	lsls	r1, r3, #30
 8004168:	bf58      	it	pl
 800416a:	6962      	ldrpl	r2, [r4, #20]
 800416c:	60a2      	str	r2, [r4, #8]
 800416e:	e7f4      	b.n	800415a <__swsetup_r+0x8e>
 8004170:	2000      	movs	r0, #0
 8004172:	e7f7      	b.n	8004164 <__swsetup_r+0x98>
 8004174:	20000018 	.word	0x20000018

08004178 <memset>:
 8004178:	4402      	add	r2, r0
 800417a:	4603      	mov	r3, r0
 800417c:	4293      	cmp	r3, r2
 800417e:	d100      	bne.n	8004182 <memset+0xa>
 8004180:	4770      	bx	lr
 8004182:	f803 1b01 	strb.w	r1, [r3], #1
 8004186:	e7f9      	b.n	800417c <memset+0x4>

08004188 <_close_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	4d06      	ldr	r5, [pc, #24]	@ (80041a4 <_close_r+0x1c>)
 800418c:	2300      	movs	r3, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fc fcd4 	bl	8000b40 <_close>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_close_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_close_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	20000518 	.word	0x20000518

080041a8 <_lseek_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4d07      	ldr	r5, [pc, #28]	@ (80041c8 <_lseek_r+0x20>)
 80041ac:	4604      	mov	r4, r0
 80041ae:	4608      	mov	r0, r1
 80041b0:	4611      	mov	r1, r2
 80041b2:	2200      	movs	r2, #0
 80041b4:	602a      	str	r2, [r5, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f7fc fce9 	bl	8000b8e <_lseek>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d102      	bne.n	80041c6 <_lseek_r+0x1e>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b103      	cbz	r3, 80041c6 <_lseek_r+0x1e>
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
 80041c8:	20000518 	.word	0x20000518

080041cc <_read_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d07      	ldr	r5, [pc, #28]	@ (80041ec <_read_r+0x20>)
 80041d0:	4604      	mov	r4, r0
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	602a      	str	r2, [r5, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fc fc93 	bl	8000b06 <_read>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_read_r+0x1e>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_read_r+0x1e>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20000518 	.word	0x20000518

080041f0 <_write_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d07      	ldr	r5, [pc, #28]	@ (8004210 <_write_r+0x20>)
 80041f4:	4604      	mov	r4, r0
 80041f6:	4608      	mov	r0, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fc fb2e 	bl	8000860 <_write>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_write_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_write_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	20000518 	.word	0x20000518

08004214 <__errno>:
 8004214:	4b01      	ldr	r3, [pc, #4]	@ (800421c <__errno+0x8>)
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000018 	.word	0x20000018

08004220 <__libc_init_array>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	4d0d      	ldr	r5, [pc, #52]	@ (8004258 <__libc_init_array+0x38>)
 8004224:	4c0d      	ldr	r4, [pc, #52]	@ (800425c <__libc_init_array+0x3c>)
 8004226:	1b64      	subs	r4, r4, r5
 8004228:	10a4      	asrs	r4, r4, #2
 800422a:	2600      	movs	r6, #0
 800422c:	42a6      	cmp	r6, r4
 800422e:	d109      	bne.n	8004244 <__libc_init_array+0x24>
 8004230:	4d0b      	ldr	r5, [pc, #44]	@ (8004260 <__libc_init_array+0x40>)
 8004232:	4c0c      	ldr	r4, [pc, #48]	@ (8004264 <__libc_init_array+0x44>)
 8004234:	f000 fd66 	bl	8004d04 <_init>
 8004238:	1b64      	subs	r4, r4, r5
 800423a:	10a4      	asrs	r4, r4, #2
 800423c:	2600      	movs	r6, #0
 800423e:	42a6      	cmp	r6, r4
 8004240:	d105      	bne.n	800424e <__libc_init_array+0x2e>
 8004242:	bd70      	pop	{r4, r5, r6, pc}
 8004244:	f855 3b04 	ldr.w	r3, [r5], #4
 8004248:	4798      	blx	r3
 800424a:	3601      	adds	r6, #1
 800424c:	e7ee      	b.n	800422c <__libc_init_array+0xc>
 800424e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004252:	4798      	blx	r3
 8004254:	3601      	adds	r6, #1
 8004256:	e7f2      	b.n	800423e <__libc_init_array+0x1e>
 8004258:	08005238 	.word	0x08005238
 800425c:	08005238 	.word	0x08005238
 8004260:	08005238 	.word	0x08005238
 8004264:	0800523c 	.word	0x0800523c

08004268 <__retarget_lock_init_recursive>:
 8004268:	4770      	bx	lr

0800426a <__retarget_lock_acquire_recursive>:
 800426a:	4770      	bx	lr

0800426c <__retarget_lock_release_recursive>:
 800426c:	4770      	bx	lr

0800426e <memcpy>:
 800426e:	440a      	add	r2, r1
 8004270:	4291      	cmp	r1, r2
 8004272:	f100 33ff 	add.w	r3, r0, #4294967295
 8004276:	d100      	bne.n	800427a <memcpy+0xc>
 8004278:	4770      	bx	lr
 800427a:	b510      	push	{r4, lr}
 800427c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004280:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004284:	4291      	cmp	r1, r2
 8004286:	d1f9      	bne.n	800427c <memcpy+0xe>
 8004288:	bd10      	pop	{r4, pc}
	...

0800428c <_free_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4605      	mov	r5, r0
 8004290:	2900      	cmp	r1, #0
 8004292:	d041      	beq.n	8004318 <_free_r+0x8c>
 8004294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004298:	1f0c      	subs	r4, r1, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	bfb8      	it	lt
 800429e:	18e4      	addlt	r4, r4, r3
 80042a0:	f000 f8e0 	bl	8004464 <__malloc_lock>
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <_free_r+0x90>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	b933      	cbnz	r3, 80042b8 <_free_r+0x2c>
 80042aa:	6063      	str	r3, [r4, #4]
 80042ac:	6014      	str	r4, [r2, #0]
 80042ae:	4628      	mov	r0, r5
 80042b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b4:	f000 b8dc 	b.w	8004470 <__malloc_unlock>
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d908      	bls.n	80042ce <_free_r+0x42>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf01      	itttt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	1809      	addeq	r1, r1, r0
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	e7ed      	b.n	80042aa <_free_r+0x1e>
 80042ce:	461a      	mov	r2, r3
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b10b      	cbz	r3, 80042d8 <_free_r+0x4c>
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	d9fa      	bls.n	80042ce <_free_r+0x42>
 80042d8:	6811      	ldr	r1, [r2, #0]
 80042da:	1850      	adds	r0, r2, r1
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d10b      	bne.n	80042f8 <_free_r+0x6c>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	4401      	add	r1, r0
 80042e4:	1850      	adds	r0, r2, r1
 80042e6:	4283      	cmp	r3, r0
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	d1e0      	bne.n	80042ae <_free_r+0x22>
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	6053      	str	r3, [r2, #4]
 80042f2:	4408      	add	r0, r1
 80042f4:	6010      	str	r0, [r2, #0]
 80042f6:	e7da      	b.n	80042ae <_free_r+0x22>
 80042f8:	d902      	bls.n	8004300 <_free_r+0x74>
 80042fa:	230c      	movs	r3, #12
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	e7d6      	b.n	80042ae <_free_r+0x22>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	1821      	adds	r1, r4, r0
 8004304:	428b      	cmp	r3, r1
 8004306:	bf04      	itt	eq
 8004308:	6819      	ldreq	r1, [r3, #0]
 800430a:	685b      	ldreq	r3, [r3, #4]
 800430c:	6063      	str	r3, [r4, #4]
 800430e:	bf04      	itt	eq
 8004310:	1809      	addeq	r1, r1, r0
 8004312:	6021      	streq	r1, [r4, #0]
 8004314:	6054      	str	r4, [r2, #4]
 8004316:	e7ca      	b.n	80042ae <_free_r+0x22>
 8004318:	bd38      	pop	{r3, r4, r5, pc}
 800431a:	bf00      	nop
 800431c:	20000524 	.word	0x20000524

08004320 <sbrk_aligned>:
 8004320:	b570      	push	{r4, r5, r6, lr}
 8004322:	4e0f      	ldr	r6, [pc, #60]	@ (8004360 <sbrk_aligned+0x40>)
 8004324:	460c      	mov	r4, r1
 8004326:	6831      	ldr	r1, [r6, #0]
 8004328:	4605      	mov	r5, r0
 800432a:	b911      	cbnz	r1, 8004332 <sbrk_aligned+0x12>
 800432c:	f000 fcda 	bl	8004ce4 <_sbrk_r>
 8004330:	6030      	str	r0, [r6, #0]
 8004332:	4621      	mov	r1, r4
 8004334:	4628      	mov	r0, r5
 8004336:	f000 fcd5 	bl	8004ce4 <_sbrk_r>
 800433a:	1c43      	adds	r3, r0, #1
 800433c:	d103      	bne.n	8004346 <sbrk_aligned+0x26>
 800433e:	f04f 34ff 	mov.w	r4, #4294967295
 8004342:	4620      	mov	r0, r4
 8004344:	bd70      	pop	{r4, r5, r6, pc}
 8004346:	1cc4      	adds	r4, r0, #3
 8004348:	f024 0403 	bic.w	r4, r4, #3
 800434c:	42a0      	cmp	r0, r4
 800434e:	d0f8      	beq.n	8004342 <sbrk_aligned+0x22>
 8004350:	1a21      	subs	r1, r4, r0
 8004352:	4628      	mov	r0, r5
 8004354:	f000 fcc6 	bl	8004ce4 <_sbrk_r>
 8004358:	3001      	adds	r0, #1
 800435a:	d1f2      	bne.n	8004342 <sbrk_aligned+0x22>
 800435c:	e7ef      	b.n	800433e <sbrk_aligned+0x1e>
 800435e:	bf00      	nop
 8004360:	20000520 	.word	0x20000520

08004364 <_malloc_r>:
 8004364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004368:	1ccd      	adds	r5, r1, #3
 800436a:	f025 0503 	bic.w	r5, r5, #3
 800436e:	3508      	adds	r5, #8
 8004370:	2d0c      	cmp	r5, #12
 8004372:	bf38      	it	cc
 8004374:	250c      	movcc	r5, #12
 8004376:	2d00      	cmp	r5, #0
 8004378:	4606      	mov	r6, r0
 800437a:	db01      	blt.n	8004380 <_malloc_r+0x1c>
 800437c:	42a9      	cmp	r1, r5
 800437e:	d904      	bls.n	800438a <_malloc_r+0x26>
 8004380:	230c      	movs	r3, #12
 8004382:	6033      	str	r3, [r6, #0]
 8004384:	2000      	movs	r0, #0
 8004386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004460 <_malloc_r+0xfc>
 800438e:	f000 f869 	bl	8004464 <__malloc_lock>
 8004392:	f8d8 3000 	ldr.w	r3, [r8]
 8004396:	461c      	mov	r4, r3
 8004398:	bb44      	cbnz	r4, 80043ec <_malloc_r+0x88>
 800439a:	4629      	mov	r1, r5
 800439c:	4630      	mov	r0, r6
 800439e:	f7ff ffbf 	bl	8004320 <sbrk_aligned>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	4604      	mov	r4, r0
 80043a6:	d158      	bne.n	800445a <_malloc_r+0xf6>
 80043a8:	f8d8 4000 	ldr.w	r4, [r8]
 80043ac:	4627      	mov	r7, r4
 80043ae:	2f00      	cmp	r7, #0
 80043b0:	d143      	bne.n	800443a <_malloc_r+0xd6>
 80043b2:	2c00      	cmp	r4, #0
 80043b4:	d04b      	beq.n	800444e <_malloc_r+0xea>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	4639      	mov	r1, r7
 80043ba:	4630      	mov	r0, r6
 80043bc:	eb04 0903 	add.w	r9, r4, r3
 80043c0:	f000 fc90 	bl	8004ce4 <_sbrk_r>
 80043c4:	4581      	cmp	r9, r0
 80043c6:	d142      	bne.n	800444e <_malloc_r+0xea>
 80043c8:	6821      	ldr	r1, [r4, #0]
 80043ca:	1a6d      	subs	r5, r5, r1
 80043cc:	4629      	mov	r1, r5
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7ff ffa6 	bl	8004320 <sbrk_aligned>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d03a      	beq.n	800444e <_malloc_r+0xea>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	442b      	add	r3, r5
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	f8d8 3000 	ldr.w	r3, [r8]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	bb62      	cbnz	r2, 8004440 <_malloc_r+0xdc>
 80043e6:	f8c8 7000 	str.w	r7, [r8]
 80043ea:	e00f      	b.n	800440c <_malloc_r+0xa8>
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	1b52      	subs	r2, r2, r5
 80043f0:	d420      	bmi.n	8004434 <_malloc_r+0xd0>
 80043f2:	2a0b      	cmp	r2, #11
 80043f4:	d917      	bls.n	8004426 <_malloc_r+0xc2>
 80043f6:	1961      	adds	r1, r4, r5
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	6025      	str	r5, [r4, #0]
 80043fc:	bf18      	it	ne
 80043fe:	6059      	strne	r1, [r3, #4]
 8004400:	6863      	ldr	r3, [r4, #4]
 8004402:	bf08      	it	eq
 8004404:	f8c8 1000 	streq.w	r1, [r8]
 8004408:	5162      	str	r2, [r4, r5]
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	4630      	mov	r0, r6
 800440e:	f000 f82f 	bl	8004470 <__malloc_unlock>
 8004412:	f104 000b 	add.w	r0, r4, #11
 8004416:	1d23      	adds	r3, r4, #4
 8004418:	f020 0007 	bic.w	r0, r0, #7
 800441c:	1ac2      	subs	r2, r0, r3
 800441e:	bf1c      	itt	ne
 8004420:	1a1b      	subne	r3, r3, r0
 8004422:	50a3      	strne	r3, [r4, r2]
 8004424:	e7af      	b.n	8004386 <_malloc_r+0x22>
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	42a3      	cmp	r3, r4
 800442a:	bf0c      	ite	eq
 800442c:	f8c8 2000 	streq.w	r2, [r8]
 8004430:	605a      	strne	r2, [r3, #4]
 8004432:	e7eb      	b.n	800440c <_malloc_r+0xa8>
 8004434:	4623      	mov	r3, r4
 8004436:	6864      	ldr	r4, [r4, #4]
 8004438:	e7ae      	b.n	8004398 <_malloc_r+0x34>
 800443a:	463c      	mov	r4, r7
 800443c:	687f      	ldr	r7, [r7, #4]
 800443e:	e7b6      	b.n	80043ae <_malloc_r+0x4a>
 8004440:	461a      	mov	r2, r3
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	42a3      	cmp	r3, r4
 8004446:	d1fb      	bne.n	8004440 <_malloc_r+0xdc>
 8004448:	2300      	movs	r3, #0
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e7de      	b.n	800440c <_malloc_r+0xa8>
 800444e:	230c      	movs	r3, #12
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	4630      	mov	r0, r6
 8004454:	f000 f80c 	bl	8004470 <__malloc_unlock>
 8004458:	e794      	b.n	8004384 <_malloc_r+0x20>
 800445a:	6005      	str	r5, [r0, #0]
 800445c:	e7d6      	b.n	800440c <_malloc_r+0xa8>
 800445e:	bf00      	nop
 8004460:	20000524 	.word	0x20000524

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	@ (800446c <__malloc_lock+0x8>)
 8004466:	f7ff bf00 	b.w	800426a <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	2000051c 	.word	0x2000051c

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	@ (8004478 <__malloc_unlock+0x8>)
 8004472:	f7ff befb 	b.w	800426c <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	2000051c 	.word	0x2000051c

0800447c <__sfputc_r>:
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	b410      	push	{r4}
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	da08      	bge.n	800449a <__sfputc_r+0x1e>
 8004488:	6994      	ldr	r4, [r2, #24]
 800448a:	42a3      	cmp	r3, r4
 800448c:	db01      	blt.n	8004492 <__sfputc_r+0x16>
 800448e:	290a      	cmp	r1, #10
 8004490:	d103      	bne.n	800449a <__sfputc_r+0x1e>
 8004492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004496:	f7ff bdda 	b.w	800404e <__swbuf_r>
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	1c58      	adds	r0, r3, #1
 800449e:	6010      	str	r0, [r2, #0]
 80044a0:	7019      	strb	r1, [r3, #0]
 80044a2:	4608      	mov	r0, r1
 80044a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <__sfputs_r>:
 80044aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	4614      	mov	r4, r2
 80044b2:	18d5      	adds	r5, r2, r3
 80044b4:	42ac      	cmp	r4, r5
 80044b6:	d101      	bne.n	80044bc <__sfputs_r+0x12>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e007      	b.n	80044cc <__sfputs_r+0x22>
 80044bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c0:	463a      	mov	r2, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff ffda 	bl	800447c <__sfputc_r>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d1f3      	bne.n	80044b4 <__sfputs_r+0xa>
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d0 <_vfiprintf_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	460d      	mov	r5, r1
 80044d6:	b09d      	sub	sp, #116	@ 0x74
 80044d8:	4614      	mov	r4, r2
 80044da:	4698      	mov	r8, r3
 80044dc:	4606      	mov	r6, r0
 80044de:	b118      	cbz	r0, 80044e8 <_vfiprintf_r+0x18>
 80044e0:	6a03      	ldr	r3, [r0, #32]
 80044e2:	b90b      	cbnz	r3, 80044e8 <_vfiprintf_r+0x18>
 80044e4:	f7ff fcc2 	bl	8003e6c <__sinit>
 80044e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044ea:	07d9      	lsls	r1, r3, #31
 80044ec:	d405      	bmi.n	80044fa <_vfiprintf_r+0x2a>
 80044ee:	89ab      	ldrh	r3, [r5, #12]
 80044f0:	059a      	lsls	r2, r3, #22
 80044f2:	d402      	bmi.n	80044fa <_vfiprintf_r+0x2a>
 80044f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044f6:	f7ff feb8 	bl	800426a <__retarget_lock_acquire_recursive>
 80044fa:	89ab      	ldrh	r3, [r5, #12]
 80044fc:	071b      	lsls	r3, r3, #28
 80044fe:	d501      	bpl.n	8004504 <_vfiprintf_r+0x34>
 8004500:	692b      	ldr	r3, [r5, #16]
 8004502:	b99b      	cbnz	r3, 800452c <_vfiprintf_r+0x5c>
 8004504:	4629      	mov	r1, r5
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff fde0 	bl	80040cc <__swsetup_r>
 800450c:	b170      	cbz	r0, 800452c <_vfiprintf_r+0x5c>
 800450e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004510:	07dc      	lsls	r4, r3, #31
 8004512:	d504      	bpl.n	800451e <_vfiprintf_r+0x4e>
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	b01d      	add	sp, #116	@ 0x74
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	89ab      	ldrh	r3, [r5, #12]
 8004520:	0598      	lsls	r0, r3, #22
 8004522:	d4f7      	bmi.n	8004514 <_vfiprintf_r+0x44>
 8004524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004526:	f7ff fea1 	bl	800426c <__retarget_lock_release_recursive>
 800452a:	e7f3      	b.n	8004514 <_vfiprintf_r+0x44>
 800452c:	2300      	movs	r3, #0
 800452e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004530:	2320      	movs	r3, #32
 8004532:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004536:	f8cd 800c 	str.w	r8, [sp, #12]
 800453a:	2330      	movs	r3, #48	@ 0x30
 800453c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046ec <_vfiprintf_r+0x21c>
 8004540:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004544:	f04f 0901 	mov.w	r9, #1
 8004548:	4623      	mov	r3, r4
 800454a:	469a      	mov	sl, r3
 800454c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004550:	b10a      	cbz	r2, 8004556 <_vfiprintf_r+0x86>
 8004552:	2a25      	cmp	r2, #37	@ 0x25
 8004554:	d1f9      	bne.n	800454a <_vfiprintf_r+0x7a>
 8004556:	ebba 0b04 	subs.w	fp, sl, r4
 800455a:	d00b      	beq.n	8004574 <_vfiprintf_r+0xa4>
 800455c:	465b      	mov	r3, fp
 800455e:	4622      	mov	r2, r4
 8004560:	4629      	mov	r1, r5
 8004562:	4630      	mov	r0, r6
 8004564:	f7ff ffa1 	bl	80044aa <__sfputs_r>
 8004568:	3001      	adds	r0, #1
 800456a:	f000 80a7 	beq.w	80046bc <_vfiprintf_r+0x1ec>
 800456e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004570:	445a      	add	r2, fp
 8004572:	9209      	str	r2, [sp, #36]	@ 0x24
 8004574:	f89a 3000 	ldrb.w	r3, [sl]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 809f 	beq.w	80046bc <_vfiprintf_r+0x1ec>
 800457e:	2300      	movs	r3, #0
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004588:	f10a 0a01 	add.w	sl, sl, #1
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9307      	str	r3, [sp, #28]
 8004590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004594:	931a      	str	r3, [sp, #104]	@ 0x68
 8004596:	4654      	mov	r4, sl
 8004598:	2205      	movs	r2, #5
 800459a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459e:	4853      	ldr	r0, [pc, #332]	@ (80046ec <_vfiprintf_r+0x21c>)
 80045a0:	f7fb fe36 	bl	8000210 <memchr>
 80045a4:	9a04      	ldr	r2, [sp, #16]
 80045a6:	b9d8      	cbnz	r0, 80045e0 <_vfiprintf_r+0x110>
 80045a8:	06d1      	lsls	r1, r2, #27
 80045aa:	bf44      	itt	mi
 80045ac:	2320      	movmi	r3, #32
 80045ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045b2:	0713      	lsls	r3, r2, #28
 80045b4:	bf44      	itt	mi
 80045b6:	232b      	movmi	r3, #43	@ 0x2b
 80045b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045bc:	f89a 3000 	ldrb.w	r3, [sl]
 80045c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c2:	d015      	beq.n	80045f0 <_vfiprintf_r+0x120>
 80045c4:	9a07      	ldr	r2, [sp, #28]
 80045c6:	4654      	mov	r4, sl
 80045c8:	2000      	movs	r0, #0
 80045ca:	f04f 0c0a 	mov.w	ip, #10
 80045ce:	4621      	mov	r1, r4
 80045d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045d4:	3b30      	subs	r3, #48	@ 0x30
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	d94b      	bls.n	8004672 <_vfiprintf_r+0x1a2>
 80045da:	b1b0      	cbz	r0, 800460a <_vfiprintf_r+0x13a>
 80045dc:	9207      	str	r2, [sp, #28]
 80045de:	e014      	b.n	800460a <_vfiprintf_r+0x13a>
 80045e0:	eba0 0308 	sub.w	r3, r0, r8
 80045e4:	fa09 f303 	lsl.w	r3, r9, r3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	46a2      	mov	sl, r4
 80045ee:	e7d2      	b.n	8004596 <_vfiprintf_r+0xc6>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	1d19      	adds	r1, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	9103      	str	r1, [sp, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfbb      	ittet	lt
 80045fc:	425b      	neglt	r3, r3
 80045fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004602:	9307      	strge	r3, [sp, #28]
 8004604:	9307      	strlt	r3, [sp, #28]
 8004606:	bfb8      	it	lt
 8004608:	9204      	strlt	r2, [sp, #16]
 800460a:	7823      	ldrb	r3, [r4, #0]
 800460c:	2b2e      	cmp	r3, #46	@ 0x2e
 800460e:	d10a      	bne.n	8004626 <_vfiprintf_r+0x156>
 8004610:	7863      	ldrb	r3, [r4, #1]
 8004612:	2b2a      	cmp	r3, #42	@ 0x2a
 8004614:	d132      	bne.n	800467c <_vfiprintf_r+0x1ac>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	9203      	str	r2, [sp, #12]
 800461e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004622:	3402      	adds	r4, #2
 8004624:	9305      	str	r3, [sp, #20]
 8004626:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046fc <_vfiprintf_r+0x22c>
 800462a:	7821      	ldrb	r1, [r4, #0]
 800462c:	2203      	movs	r2, #3
 800462e:	4650      	mov	r0, sl
 8004630:	f7fb fdee 	bl	8000210 <memchr>
 8004634:	b138      	cbz	r0, 8004646 <_vfiprintf_r+0x176>
 8004636:	9b04      	ldr	r3, [sp, #16]
 8004638:	eba0 000a 	sub.w	r0, r0, sl
 800463c:	2240      	movs	r2, #64	@ 0x40
 800463e:	4082      	lsls	r2, r0
 8004640:	4313      	orrs	r3, r2
 8004642:	3401      	adds	r4, #1
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464a:	4829      	ldr	r0, [pc, #164]	@ (80046f0 <_vfiprintf_r+0x220>)
 800464c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004650:	2206      	movs	r2, #6
 8004652:	f7fb fddd 	bl	8000210 <memchr>
 8004656:	2800      	cmp	r0, #0
 8004658:	d03f      	beq.n	80046da <_vfiprintf_r+0x20a>
 800465a:	4b26      	ldr	r3, [pc, #152]	@ (80046f4 <_vfiprintf_r+0x224>)
 800465c:	bb1b      	cbnz	r3, 80046a6 <_vfiprintf_r+0x1d6>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	3308      	adds	r3, #8
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800466c:	443b      	add	r3, r7
 800466e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004670:	e76a      	b.n	8004548 <_vfiprintf_r+0x78>
 8004672:	fb0c 3202 	mla	r2, ip, r2, r3
 8004676:	460c      	mov	r4, r1
 8004678:	2001      	movs	r0, #1
 800467a:	e7a8      	b.n	80045ce <_vfiprintf_r+0xfe>
 800467c:	2300      	movs	r3, #0
 800467e:	3401      	adds	r4, #1
 8004680:	9305      	str	r3, [sp, #20]
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0c0a 	mov.w	ip, #10
 8004688:	4620      	mov	r0, r4
 800468a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468e:	3a30      	subs	r2, #48	@ 0x30
 8004690:	2a09      	cmp	r2, #9
 8004692:	d903      	bls.n	800469c <_vfiprintf_r+0x1cc>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0c6      	beq.n	8004626 <_vfiprintf_r+0x156>
 8004698:	9105      	str	r1, [sp, #20]
 800469a:	e7c4      	b.n	8004626 <_vfiprintf_r+0x156>
 800469c:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a0:	4604      	mov	r4, r0
 80046a2:	2301      	movs	r3, #1
 80046a4:	e7f0      	b.n	8004688 <_vfiprintf_r+0x1b8>
 80046a6:	ab03      	add	r3, sp, #12
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <_vfiprintf_r+0x228>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	4630      	mov	r0, r6
 80046b2:	f3af 8000 	nop.w
 80046b6:	4607      	mov	r7, r0
 80046b8:	1c78      	adds	r0, r7, #1
 80046ba:	d1d6      	bne.n	800466a <_vfiprintf_r+0x19a>
 80046bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046be:	07d9      	lsls	r1, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_vfiprintf_r+0x1fe>
 80046c2:	89ab      	ldrh	r3, [r5, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_vfiprintf_r+0x1fe>
 80046c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ca:	f7ff fdcf 	bl	800426c <__retarget_lock_release_recursive>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	065b      	lsls	r3, r3, #25
 80046d2:	f53f af1f 	bmi.w	8004514 <_vfiprintf_r+0x44>
 80046d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046d8:	e71e      	b.n	8004518 <_vfiprintf_r+0x48>
 80046da:	ab03      	add	r3, sp, #12
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	462a      	mov	r2, r5
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <_vfiprintf_r+0x228>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f879 	bl	80047dc <_printf_i>
 80046ea:	e7e4      	b.n	80046b6 <_vfiprintf_r+0x1e6>
 80046ec:	080051fc 	.word	0x080051fc
 80046f0:	08005206 	.word	0x08005206
 80046f4:	00000000 	.word	0x00000000
 80046f8:	080044ab 	.word	0x080044ab
 80046fc:	08005202 	.word	0x08005202

08004700 <_printf_common>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4616      	mov	r6, r2
 8004706:	4698      	mov	r8, r3
 8004708:	688a      	ldr	r2, [r1, #8]
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004710:	4293      	cmp	r3, r2
 8004712:	bfb8      	it	lt
 8004714:	4613      	movlt	r3, r2
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800471c:	4607      	mov	r7, r0
 800471e:	460c      	mov	r4, r1
 8004720:	b10a      	cbz	r2, 8004726 <_printf_common+0x26>
 8004722:	3301      	adds	r3, #1
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	0699      	lsls	r1, r3, #26
 800472a:	bf42      	ittt	mi
 800472c:	6833      	ldrmi	r3, [r6, #0]
 800472e:	3302      	addmi	r3, #2
 8004730:	6033      	strmi	r3, [r6, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	f015 0506 	ands.w	r5, r5, #6
 8004738:	d106      	bne.n	8004748 <_printf_common+0x48>
 800473a:	f104 0a19 	add.w	sl, r4, #25
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	6832      	ldr	r2, [r6, #0]
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	42ab      	cmp	r3, r5
 8004746:	dc26      	bgt.n	8004796 <_printf_common+0x96>
 8004748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	3b00      	subs	r3, #0
 8004750:	bf18      	it	ne
 8004752:	2301      	movne	r3, #1
 8004754:	0692      	lsls	r2, r2, #26
 8004756:	d42b      	bmi.n	80047b0 <_printf_common+0xb0>
 8004758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800475c:	4641      	mov	r1, r8
 800475e:	4638      	mov	r0, r7
 8004760:	47c8      	blx	r9
 8004762:	3001      	adds	r0, #1
 8004764:	d01e      	beq.n	80047a4 <_printf_common+0xa4>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	6922      	ldr	r2, [r4, #16]
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	2b04      	cmp	r3, #4
 8004770:	bf02      	ittt	eq
 8004772:	68e5      	ldreq	r5, [r4, #12]
 8004774:	6833      	ldreq	r3, [r6, #0]
 8004776:	1aed      	subeq	r5, r5, r3
 8004778:	68a3      	ldr	r3, [r4, #8]
 800477a:	bf0c      	ite	eq
 800477c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004780:	2500      	movne	r5, #0
 8004782:	4293      	cmp	r3, r2
 8004784:	bfc4      	itt	gt
 8004786:	1a9b      	subgt	r3, r3, r2
 8004788:	18ed      	addgt	r5, r5, r3
 800478a:	2600      	movs	r6, #0
 800478c:	341a      	adds	r4, #26
 800478e:	42b5      	cmp	r5, r6
 8004790:	d11a      	bne.n	80047c8 <_printf_common+0xc8>
 8004792:	2000      	movs	r0, #0
 8004794:	e008      	b.n	80047a8 <_printf_common+0xa8>
 8004796:	2301      	movs	r3, #1
 8004798:	4652      	mov	r2, sl
 800479a:	4641      	mov	r1, r8
 800479c:	4638      	mov	r0, r7
 800479e:	47c8      	blx	r9
 80047a0:	3001      	adds	r0, #1
 80047a2:	d103      	bne.n	80047ac <_printf_common+0xac>
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ac:	3501      	adds	r5, #1
 80047ae:	e7c6      	b.n	800473e <_printf_common+0x3e>
 80047b0:	18e1      	adds	r1, r4, r3
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	2030      	movs	r0, #48	@ 0x30
 80047b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ba:	4422      	add	r2, r4
 80047bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047c4:	3302      	adds	r3, #2
 80047c6:	e7c7      	b.n	8004758 <_printf_common+0x58>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4622      	mov	r2, r4
 80047cc:	4641      	mov	r1, r8
 80047ce:	4638      	mov	r0, r7
 80047d0:	47c8      	blx	r9
 80047d2:	3001      	adds	r0, #1
 80047d4:	d0e6      	beq.n	80047a4 <_printf_common+0xa4>
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7d9      	b.n	800478e <_printf_common+0x8e>
	...

080047dc <_printf_i>:
 80047dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	7e0f      	ldrb	r7, [r1, #24]
 80047e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047e4:	2f78      	cmp	r7, #120	@ 0x78
 80047e6:	4691      	mov	r9, r2
 80047e8:	4680      	mov	r8, r0
 80047ea:	460c      	mov	r4, r1
 80047ec:	469a      	mov	sl, r3
 80047ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047f2:	d807      	bhi.n	8004804 <_printf_i+0x28>
 80047f4:	2f62      	cmp	r7, #98	@ 0x62
 80047f6:	d80a      	bhi.n	800480e <_printf_i+0x32>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	f000 80d2 	beq.w	80049a2 <_printf_i+0x1c6>
 80047fe:	2f58      	cmp	r7, #88	@ 0x58
 8004800:	f000 80b9 	beq.w	8004976 <_printf_i+0x19a>
 8004804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800480c:	e03a      	b.n	8004884 <_printf_i+0xa8>
 800480e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004812:	2b15      	cmp	r3, #21
 8004814:	d8f6      	bhi.n	8004804 <_printf_i+0x28>
 8004816:	a101      	add	r1, pc, #4	@ (adr r1, 800481c <_printf_i+0x40>)
 8004818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800481c:	08004875 	.word	0x08004875
 8004820:	08004889 	.word	0x08004889
 8004824:	08004805 	.word	0x08004805
 8004828:	08004805 	.word	0x08004805
 800482c:	08004805 	.word	0x08004805
 8004830:	08004805 	.word	0x08004805
 8004834:	08004889 	.word	0x08004889
 8004838:	08004805 	.word	0x08004805
 800483c:	08004805 	.word	0x08004805
 8004840:	08004805 	.word	0x08004805
 8004844:	08004805 	.word	0x08004805
 8004848:	08004989 	.word	0x08004989
 800484c:	080048b3 	.word	0x080048b3
 8004850:	08004943 	.word	0x08004943
 8004854:	08004805 	.word	0x08004805
 8004858:	08004805 	.word	0x08004805
 800485c:	080049ab 	.word	0x080049ab
 8004860:	08004805 	.word	0x08004805
 8004864:	080048b3 	.word	0x080048b3
 8004868:	08004805 	.word	0x08004805
 800486c:	08004805 	.word	0x08004805
 8004870:	0800494b 	.word	0x0800494b
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6032      	str	r2, [r6, #0]
 800487c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004884:	2301      	movs	r3, #1
 8004886:	e09d      	b.n	80049c4 <_printf_i+0x1e8>
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	6031      	str	r1, [r6, #0]
 8004890:	0606      	lsls	r6, r0, #24
 8004892:	d501      	bpl.n	8004898 <_printf_i+0xbc>
 8004894:	681d      	ldr	r5, [r3, #0]
 8004896:	e003      	b.n	80048a0 <_printf_i+0xc4>
 8004898:	0645      	lsls	r5, r0, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0xb8>
 800489c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048a0:	2d00      	cmp	r5, #0
 80048a2:	da03      	bge.n	80048ac <_printf_i+0xd0>
 80048a4:	232d      	movs	r3, #45	@ 0x2d
 80048a6:	426d      	negs	r5, r5
 80048a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048ac:	4859      	ldr	r0, [pc, #356]	@ (8004a14 <_printf_i+0x238>)
 80048ae:	230a      	movs	r3, #10
 80048b0:	e011      	b.n	80048d6 <_printf_i+0xfa>
 80048b2:	6821      	ldr	r1, [r4, #0]
 80048b4:	6833      	ldr	r3, [r6, #0]
 80048b6:	0608      	lsls	r0, r1, #24
 80048b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80048bc:	d402      	bmi.n	80048c4 <_printf_i+0xe8>
 80048be:	0649      	lsls	r1, r1, #25
 80048c0:	bf48      	it	mi
 80048c2:	b2ad      	uxthmi	r5, r5
 80048c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048c6:	4853      	ldr	r0, [pc, #332]	@ (8004a14 <_printf_i+0x238>)
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	bf14      	ite	ne
 80048cc:	230a      	movne	r3, #10
 80048ce:	2308      	moveq	r3, #8
 80048d0:	2100      	movs	r1, #0
 80048d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048d6:	6866      	ldr	r6, [r4, #4]
 80048d8:	60a6      	str	r6, [r4, #8]
 80048da:	2e00      	cmp	r6, #0
 80048dc:	bfa2      	ittt	ge
 80048de:	6821      	ldrge	r1, [r4, #0]
 80048e0:	f021 0104 	bicge.w	r1, r1, #4
 80048e4:	6021      	strge	r1, [r4, #0]
 80048e6:	b90d      	cbnz	r5, 80048ec <_printf_i+0x110>
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	d04b      	beq.n	8004984 <_printf_i+0x1a8>
 80048ec:	4616      	mov	r6, r2
 80048ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80048f2:	fb03 5711 	mls	r7, r3, r1, r5
 80048f6:	5dc7      	ldrb	r7, [r0, r7]
 80048f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048fc:	462f      	mov	r7, r5
 80048fe:	42bb      	cmp	r3, r7
 8004900:	460d      	mov	r5, r1
 8004902:	d9f4      	bls.n	80048ee <_printf_i+0x112>
 8004904:	2b08      	cmp	r3, #8
 8004906:	d10b      	bne.n	8004920 <_printf_i+0x144>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	07df      	lsls	r7, r3, #31
 800490c:	d508      	bpl.n	8004920 <_printf_i+0x144>
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	6861      	ldr	r1, [r4, #4]
 8004912:	4299      	cmp	r1, r3
 8004914:	bfde      	ittt	le
 8004916:	2330      	movle	r3, #48	@ 0x30
 8004918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800491c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004920:	1b92      	subs	r2, r2, r6
 8004922:	6122      	str	r2, [r4, #16]
 8004924:	f8cd a000 	str.w	sl, [sp]
 8004928:	464b      	mov	r3, r9
 800492a:	aa03      	add	r2, sp, #12
 800492c:	4621      	mov	r1, r4
 800492e:	4640      	mov	r0, r8
 8004930:	f7ff fee6 	bl	8004700 <_printf_common>
 8004934:	3001      	adds	r0, #1
 8004936:	d14a      	bne.n	80049ce <_printf_i+0x1f2>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	b004      	add	sp, #16
 800493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	f043 0320 	orr.w	r3, r3, #32
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	4833      	ldr	r0, [pc, #204]	@ (8004a18 <_printf_i+0x23c>)
 800494c:	2778      	movs	r7, #120	@ 0x78
 800494e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	6831      	ldr	r1, [r6, #0]
 8004956:	061f      	lsls	r7, r3, #24
 8004958:	f851 5b04 	ldr.w	r5, [r1], #4
 800495c:	d402      	bmi.n	8004964 <_printf_i+0x188>
 800495e:	065f      	lsls	r7, r3, #25
 8004960:	bf48      	it	mi
 8004962:	b2ad      	uxthmi	r5, r5
 8004964:	6031      	str	r1, [r6, #0]
 8004966:	07d9      	lsls	r1, r3, #31
 8004968:	bf44      	itt	mi
 800496a:	f043 0320 	orrmi.w	r3, r3, #32
 800496e:	6023      	strmi	r3, [r4, #0]
 8004970:	b11d      	cbz	r5, 800497a <_printf_i+0x19e>
 8004972:	2310      	movs	r3, #16
 8004974:	e7ac      	b.n	80048d0 <_printf_i+0xf4>
 8004976:	4827      	ldr	r0, [pc, #156]	@ (8004a14 <_printf_i+0x238>)
 8004978:	e7e9      	b.n	800494e <_printf_i+0x172>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	f023 0320 	bic.w	r3, r3, #32
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	e7f6      	b.n	8004972 <_printf_i+0x196>
 8004984:	4616      	mov	r6, r2
 8004986:	e7bd      	b.n	8004904 <_printf_i+0x128>
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	6961      	ldr	r1, [r4, #20]
 800498e:	1d18      	adds	r0, r3, #4
 8004990:	6030      	str	r0, [r6, #0]
 8004992:	062e      	lsls	r6, r5, #24
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	d501      	bpl.n	800499c <_printf_i+0x1c0>
 8004998:	6019      	str	r1, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0x1c6>
 800499c:	0668      	lsls	r0, r5, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0x1bc>
 80049a0:	8019      	strh	r1, [r3, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	4616      	mov	r6, r2
 80049a8:	e7bc      	b.n	8004924 <_printf_i+0x148>
 80049aa:	6833      	ldr	r3, [r6, #0]
 80049ac:	1d1a      	adds	r2, r3, #4
 80049ae:	6032      	str	r2, [r6, #0]
 80049b0:	681e      	ldr	r6, [r3, #0]
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4630      	mov	r0, r6
 80049b8:	f7fb fc2a 	bl	8000210 <memchr>
 80049bc:	b108      	cbz	r0, 80049c2 <_printf_i+0x1e6>
 80049be:	1b80      	subs	r0, r0, r6
 80049c0:	6060      	str	r0, [r4, #4]
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	2300      	movs	r3, #0
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049cc:	e7aa      	b.n	8004924 <_printf_i+0x148>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d0ad      	beq.n	8004938 <_printf_i+0x15c>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	079b      	lsls	r3, r3, #30
 80049e0:	d413      	bmi.n	8004a0a <_printf_i+0x22e>
 80049e2:	68e0      	ldr	r0, [r4, #12]
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	4298      	cmp	r0, r3
 80049e8:	bfb8      	it	lt
 80049ea:	4618      	movlt	r0, r3
 80049ec:	e7a6      	b.n	800493c <_printf_i+0x160>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4632      	mov	r2, r6
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	47d0      	blx	sl
 80049f8:	3001      	adds	r0, #1
 80049fa:	d09d      	beq.n	8004938 <_printf_i+0x15c>
 80049fc:	3501      	adds	r5, #1
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	9903      	ldr	r1, [sp, #12]
 8004a02:	1a5b      	subs	r3, r3, r1
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dcf2      	bgt.n	80049ee <_printf_i+0x212>
 8004a08:	e7eb      	b.n	80049e2 <_printf_i+0x206>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	f104 0619 	add.w	r6, r4, #25
 8004a10:	e7f5      	b.n	80049fe <_printf_i+0x222>
 8004a12:	bf00      	nop
 8004a14:	0800520d 	.word	0x0800520d
 8004a18:	0800521e 	.word	0x0800521e

08004a1c <__sflush_r>:
 8004a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	0716      	lsls	r6, r2, #28
 8004a26:	4605      	mov	r5, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	d454      	bmi.n	8004ad6 <__sflush_r+0xba>
 8004a2c:	684b      	ldr	r3, [r1, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	dc02      	bgt.n	8004a38 <__sflush_r+0x1c>
 8004a32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dd48      	ble.n	8004aca <__sflush_r+0xae>
 8004a38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	d045      	beq.n	8004aca <__sflush_r+0xae>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a44:	682f      	ldr	r7, [r5, #0]
 8004a46:	6a21      	ldr	r1, [r4, #32]
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	d030      	beq.n	8004aae <__sflush_r+0x92>
 8004a4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	0759      	lsls	r1, r3, #29
 8004a52:	d505      	bpl.n	8004a60 <__sflush_r+0x44>
 8004a54:	6863      	ldr	r3, [r4, #4]
 8004a56:	1ad2      	subs	r2, r2, r3
 8004a58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a5a:	b10b      	cbz	r3, 8004a60 <__sflush_r+0x44>
 8004a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a64:	6a21      	ldr	r1, [r4, #32]
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b0      	blx	r6
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	d106      	bne.n	8004a7e <__sflush_r+0x62>
 8004a70:	6829      	ldr	r1, [r5, #0]
 8004a72:	291d      	cmp	r1, #29
 8004a74:	d82b      	bhi.n	8004ace <__sflush_r+0xb2>
 8004a76:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <__sflush_r+0x104>)
 8004a78:	410a      	asrs	r2, r1
 8004a7a:	07d6      	lsls	r6, r2, #31
 8004a7c:	d427      	bmi.n	8004ace <__sflush_r+0xb2>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	6062      	str	r2, [r4, #4]
 8004a82:	04d9      	lsls	r1, r3, #19
 8004a84:	6922      	ldr	r2, [r4, #16]
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	d504      	bpl.n	8004a94 <__sflush_r+0x78>
 8004a8a:	1c42      	adds	r2, r0, #1
 8004a8c:	d101      	bne.n	8004a92 <__sflush_r+0x76>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	b903      	cbnz	r3, 8004a94 <__sflush_r+0x78>
 8004a92:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a96:	602f      	str	r7, [r5, #0]
 8004a98:	b1b9      	cbz	r1, 8004aca <__sflush_r+0xae>
 8004a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	d002      	beq.n	8004aa8 <__sflush_r+0x8c>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f7ff fbf2 	bl	800428c <_free_r>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aac:	e00d      	b.n	8004aca <__sflush_r+0xae>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b0      	blx	r6
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	1c50      	adds	r0, r2, #1
 8004ab8:	d1c9      	bne.n	8004a4e <__sflush_r+0x32>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0c6      	beq.n	8004a4e <__sflush_r+0x32>
 8004ac0:	2b1d      	cmp	r3, #29
 8004ac2:	d001      	beq.n	8004ac8 <__sflush_r+0xac>
 8004ac4:	2b16      	cmp	r3, #22
 8004ac6:	d11e      	bne.n	8004b06 <__sflush_r+0xea>
 8004ac8:	602f      	str	r7, [r5, #0]
 8004aca:	2000      	movs	r0, #0
 8004acc:	e022      	b.n	8004b14 <__sflush_r+0xf8>
 8004ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad2:	b21b      	sxth	r3, r3
 8004ad4:	e01b      	b.n	8004b0e <__sflush_r+0xf2>
 8004ad6:	690f      	ldr	r7, [r1, #16]
 8004ad8:	2f00      	cmp	r7, #0
 8004ada:	d0f6      	beq.n	8004aca <__sflush_r+0xae>
 8004adc:	0793      	lsls	r3, r2, #30
 8004ade:	680e      	ldr	r6, [r1, #0]
 8004ae0:	bf08      	it	eq
 8004ae2:	694b      	ldreq	r3, [r1, #20]
 8004ae4:	600f      	str	r7, [r1, #0]
 8004ae6:	bf18      	it	ne
 8004ae8:	2300      	movne	r3, #0
 8004aea:	eba6 0807 	sub.w	r8, r6, r7
 8004aee:	608b      	str	r3, [r1, #8]
 8004af0:	f1b8 0f00 	cmp.w	r8, #0
 8004af4:	dde9      	ble.n	8004aca <__sflush_r+0xae>
 8004af6:	6a21      	ldr	r1, [r4, #32]
 8004af8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004afa:	4643      	mov	r3, r8
 8004afc:	463a      	mov	r2, r7
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b0      	blx	r6
 8004b02:	2800      	cmp	r0, #0
 8004b04:	dc08      	bgt.n	8004b18 <__sflush_r+0xfc>
 8004b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	4407      	add	r7, r0
 8004b1a:	eba8 0800 	sub.w	r8, r8, r0
 8004b1e:	e7e7      	b.n	8004af0 <__sflush_r+0xd4>
 8004b20:	dfbffffe 	.word	0xdfbffffe

08004b24 <_fflush_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	690b      	ldr	r3, [r1, #16]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b913      	cbnz	r3, 8004b34 <_fflush_r+0x10>
 8004b2e:	2500      	movs	r5, #0
 8004b30:	4628      	mov	r0, r5
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	b118      	cbz	r0, 8004b3e <_fflush_r+0x1a>
 8004b36:	6a03      	ldr	r3, [r0, #32]
 8004b38:	b90b      	cbnz	r3, 8004b3e <_fflush_r+0x1a>
 8004b3a:	f7ff f997 	bl	8003e6c <__sinit>
 8004b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f3      	beq.n	8004b2e <_fflush_r+0xa>
 8004b46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b48:	07d0      	lsls	r0, r2, #31
 8004b4a:	d404      	bmi.n	8004b56 <_fflush_r+0x32>
 8004b4c:	0599      	lsls	r1, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_fflush_r+0x32>
 8004b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b52:	f7ff fb8a 	bl	800426a <__retarget_lock_acquire_recursive>
 8004b56:	4628      	mov	r0, r5
 8004b58:	4621      	mov	r1, r4
 8004b5a:	f7ff ff5f 	bl	8004a1c <__sflush_r>
 8004b5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b60:	07da      	lsls	r2, r3, #31
 8004b62:	4605      	mov	r5, r0
 8004b64:	d4e4      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	059b      	lsls	r3, r3, #22
 8004b6a:	d4e1      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b6e:	f7ff fb7d 	bl	800426c <__retarget_lock_release_recursive>
 8004b72:	e7dd      	b.n	8004b30 <_fflush_r+0xc>

08004b74 <__swhatbuf_r>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	460c      	mov	r4, r1
 8004b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	b096      	sub	sp, #88	@ 0x58
 8004b80:	4615      	mov	r5, r2
 8004b82:	461e      	mov	r6, r3
 8004b84:	da0d      	bge.n	8004ba2 <__swhatbuf_r+0x2e>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2340      	movne	r3, #64	@ 0x40
 8004b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b98:	2000      	movs	r0, #0
 8004b9a:	6031      	str	r1, [r6, #0]
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	b016      	add	sp, #88	@ 0x58
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f000 f87c 	bl	8004ca0 <_fstat_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	dbec      	blt.n	8004b86 <__swhatbuf_r+0x12>
 8004bac:	9901      	ldr	r1, [sp, #4]
 8004bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004bb6:	4259      	negs	r1, r3
 8004bb8:	4159      	adcs	r1, r3
 8004bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bbe:	e7eb      	b.n	8004b98 <__swhatbuf_r+0x24>

08004bc0 <__smakebuf_r>:
 8004bc0:	898b      	ldrh	r3, [r1, #12]
 8004bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc4:	079d      	lsls	r5, r3, #30
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	d507      	bpl.n	8004bdc <__smakebuf_r+0x1c>
 8004bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	6123      	str	r3, [r4, #16]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	6163      	str	r3, [r4, #20]
 8004bd8:	b003      	add	sp, #12
 8004bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bdc:	ab01      	add	r3, sp, #4
 8004bde:	466a      	mov	r2, sp
 8004be0:	f7ff ffc8 	bl	8004b74 <__swhatbuf_r>
 8004be4:	9f00      	ldr	r7, [sp, #0]
 8004be6:	4605      	mov	r5, r0
 8004be8:	4639      	mov	r1, r7
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff fbba 	bl	8004364 <_malloc_r>
 8004bf0:	b948      	cbnz	r0, 8004c06 <__smakebuf_r+0x46>
 8004bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf6:	059a      	lsls	r2, r3, #22
 8004bf8:	d4ee      	bmi.n	8004bd8 <__smakebuf_r+0x18>
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	f043 0302 	orr.w	r3, r3, #2
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	e7e2      	b.n	8004bcc <__smakebuf_r+0xc>
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	6020      	str	r0, [r4, #0]
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c16:	b15b      	cbz	r3, 8004c30 <__smakebuf_r+0x70>
 8004c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f851 	bl	8004cc4 <_isatty_r>
 8004c22:	b128      	cbz	r0, 8004c30 <__smakebuf_r+0x70>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f023 0303 	bic.w	r3, r3, #3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	431d      	orrs	r5, r3
 8004c34:	81a5      	strh	r5, [r4, #12]
 8004c36:	e7cf      	b.n	8004bd8 <__smakebuf_r+0x18>

08004c38 <_putc_r>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	460d      	mov	r5, r1
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b118      	cbz	r0, 8004c4a <_putc_r+0x12>
 8004c42:	6a03      	ldr	r3, [r0, #32]
 8004c44:	b90b      	cbnz	r3, 8004c4a <_putc_r+0x12>
 8004c46:	f7ff f911 	bl	8003e6c <__sinit>
 8004c4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c4c:	07d8      	lsls	r0, r3, #31
 8004c4e:	d405      	bmi.n	8004c5c <_putc_r+0x24>
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	0599      	lsls	r1, r3, #22
 8004c54:	d402      	bmi.n	8004c5c <_putc_r+0x24>
 8004c56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c58:	f7ff fb07 	bl	800426a <__retarget_lock_acquire_recursive>
 8004c5c:	68a3      	ldr	r3, [r4, #8]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	60a3      	str	r3, [r4, #8]
 8004c64:	da05      	bge.n	8004c72 <_putc_r+0x3a>
 8004c66:	69a2      	ldr	r2, [r4, #24]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	db12      	blt.n	8004c92 <_putc_r+0x5a>
 8004c6c:	b2eb      	uxtb	r3, r5
 8004c6e:	2b0a      	cmp	r3, #10
 8004c70:	d00f      	beq.n	8004c92 <_putc_r+0x5a>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	701d      	strb	r5, [r3, #0]
 8004c7a:	b2ed      	uxtb	r5, r5
 8004c7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d405      	bmi.n	8004c8e <_putc_r+0x56>
 8004c82:	89a3      	ldrh	r3, [r4, #12]
 8004c84:	059b      	lsls	r3, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_putc_r+0x56>
 8004c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c8a:	f7ff faef 	bl	800426c <__retarget_lock_release_recursive>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	4629      	mov	r1, r5
 8004c94:	4622      	mov	r2, r4
 8004c96:	4630      	mov	r0, r6
 8004c98:	f7ff f9d9 	bl	800404e <__swbuf_r>
 8004c9c:	4605      	mov	r5, r0
 8004c9e:	e7ed      	b.n	8004c7c <_putc_r+0x44>

08004ca0 <_fstat_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d07      	ldr	r5, [pc, #28]	@ (8004cc0 <_fstat_r+0x20>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	f7fb ff53 	bl	8000b58 <_fstat>
 8004cb2:	1c43      	adds	r3, r0, #1
 8004cb4:	d102      	bne.n	8004cbc <_fstat_r+0x1c>
 8004cb6:	682b      	ldr	r3, [r5, #0]
 8004cb8:	b103      	cbz	r3, 8004cbc <_fstat_r+0x1c>
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	bd38      	pop	{r3, r4, r5, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000518 	.word	0x20000518

08004cc4 <_isatty_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4d06      	ldr	r5, [pc, #24]	@ (8004ce0 <_isatty_r+0x1c>)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4604      	mov	r4, r0
 8004ccc:	4608      	mov	r0, r1
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	f7fb ff52 	bl	8000b78 <_isatty>
 8004cd4:	1c43      	adds	r3, r0, #1
 8004cd6:	d102      	bne.n	8004cde <_isatty_r+0x1a>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	b103      	cbz	r3, 8004cde <_isatty_r+0x1a>
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
 8004ce0:	20000518 	.word	0x20000518

08004ce4 <_sbrk_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	@ (8004d00 <_sbrk_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fb ff5a 	bl	8000ba8 <_sbrk>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_sbrk_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_sbrk_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000518 	.word	0x20000518

08004d04 <_init>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr

08004d10 <_fini>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr
