
RFID_Gym_Member_Management_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08008c20  08008c20  00009c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009590  08009590  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009598  08009598  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009598  08009598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800959c  0800959c  0000a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080095a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200001d4  08009774  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08009774  0000b63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42c  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  00017630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000199e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000855  00000000  00000000  0001a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023023  00000000  00000000  0001ad35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eccc  00000000  00000000  0003dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccd3  00000000  00000000  0004ca24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001196f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004128  00000000  00000000  0011973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0011d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c04 	.word	0x08008c04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008c04 	.word	0x08008c04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a2f      	ldr	r2, [pc, #188]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_GPIO_Init+0xdc>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_GPIO_Init+0xdc>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_GPIO_Init+0xdc>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <MX_GPIO_Init+0xdc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001094:	481b      	ldr	r0, [pc, #108]	@ (8001104 <MX_GPIO_Init+0xe0>)
 8001096:	f000 ff3d 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_RESET_Pin|LCD_CS_N_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2148      	movs	r1, #72	@ 0x48
 800109e:	481a      	ldr	r0, [pc, #104]	@ (8001108 <MX_GPIO_Init+0xe4>)
 80010a0:	f000 ff38 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 80010a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_GPIO_Init+0xe0>)
 80010be:	f000 fd95 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RC522_RESET_Pin|LCD_CS_N_Pin;
 80010c2:	2348      	movs	r3, #72	@ 0x48
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <MX_GPIO_Init+0xe4>)
 80010da:	f000 fd87 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RC522_EXTI_Pin;
 80010de:	2320      	movs	r3, #32
 80010e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RC522_EXTI_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_GPIO_Init+0xe4>)
 80010f4:	f000 fd7a 	bl	8001bec <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400

0800110c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001112:	f000 fbef 	bl	80018f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001116:	f000 f84d 	bl	80011b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800111a:	f7ff ff83 	bl	8001024 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800111e:	f000 fb4d 	bl	80017bc <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001122:	f000 f929 	bl	8001378 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001126:	f000 f95f 	bl	80013e8 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	displayWelcome();
 800112a:	f000 f8bf 	bl	80012ac <displayWelcome>

	// Initialize LCD
	lcd_init();
 800112e:	f002 fd52 	bl	8003bd6 <lcd_init>
	lcd_clear();
 8001132:	f002 fdab 	bl	8003c8c <lcd_clear>


	// Set it to some line
	lcd_setLine(127, 0, 127, 31, 1);
 8001136:	2301      	movs	r3, #1
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	231f      	movs	r3, #31
 800113c:	227f      	movs	r2, #127	@ 0x7f
 800113e:	2100      	movs	r1, #0
 8001140:	207f      	movs	r0, #127	@ 0x7f
 8001142:	f002 fe61 	bl	8003e08 <lcd_setLine>
	lcd_setLine(0, 0, 0, 31, 1);
 8001146:	2301      	movs	r3, #1
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	231f      	movs	r3, #31
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2000      	movs	r0, #0
 8001152:	f002 fe59 	bl	8003e08 <lcd_setLine>
	lcd_setString(4, 3, "System Initialization Test ", LCD_FONT_8, false);
 8001156:	2300      	movs	r3, #0
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <main+0x9c>)
 800115e:	2103      	movs	r1, #3
 8001160:	2004      	movs	r0, #4
 8001162:	f002 fe1f 	bl	8003da4 <lcd_setString>
	lcd_setString(4, 15, "I2C connection Done", LCD_FONT_8, false);
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <main+0xa0>)
 800116e:	210f      	movs	r1, #15
 8001170:	2004      	movs	r0, #4
 8001172:	f002 fe17 	bl	8003da4 <lcd_setString>
	lcd_setString(4, 25, "Accelerometer connection Done", LCD_FONT_8, false);
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <main+0xa4>)
 800117e:	2119      	movs	r1, #25
 8001180:	2004      	movs	r0, #4
 8001182:	f002 fe0f 	bl	8003da4 <lcd_setString>
	lcd_show();
 8001186:	f002 ff5d 	bl	8004044 <lcd_show>
	HAL_Delay(2500);
 800118a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800118e:	f000 fc23 	bl	80019d8 <HAL_Delay>
	lcd_clear();
 8001192:	f002 fd7b 	bl	8003c8c <lcd_clear>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Read_First_Tag();
 8001196:	f000 f8a7 	bl	80012e8 <Read_First_Tag>
		HAL_Delay(1000);  // Delay to avoid continuous polling
 800119a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800119e:	f000 fc1b 	bl	80019d8 <HAL_Delay>
		Read_First_Tag();
 80011a2:	bf00      	nop
 80011a4:	e7f7      	b.n	8001196 <main+0x8a>
 80011a6:	bf00      	nop
 80011a8:	08008c20 	.word	0x08008c20
 80011ac:	08008c3c 	.word	0x08008c3c
 80011b0:	08008c50 	.word	0x08008c50

080011b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2234      	movs	r2, #52	@ 0x34
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 f9da 	bl	800557c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b23      	ldr	r3, [pc, #140]	@ (800126c <SystemClock_Config+0xb8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a22      	ldr	r2, [pc, #136]	@ (800126c <SystemClock_Config+0xb8>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <SystemClock_Config+0xb8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <SystemClock_Config+0xbc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001200:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <SystemClock_Config+0xbc>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <SystemClock_Config+0xbc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121c:	2310      	movs	r3, #16
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4618      	mov	r0, r3
 800122a:	f001 f951 	bl	80024d0 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001234:	f000 f89a 	bl	800136c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fe78 	bl	8001f48 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xae>
	{
		Error_Handler();
 800125e:	f000 f885 	bl	800136c <Error_Handler>
	}
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	@ 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <_write>:

/* USER CODE BEGIN 4 */

// Overite the default COUT function with printf function
int _write(int fd, char *ptr, int len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	b29a      	uxth	r2, r3
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <_write+0x34>)
 800128c:	f002 f860 	bl	8003350 <HAL_UART_Transmit>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <_write+0x26>
		return len;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <_write+0x2a>
	else
		return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002a4 	.word	0x200002a4

080012ac <displayWelcome>:

// Introduce the Set Up with a Basic Welcome Message
void displayWelcome()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	puts("******** LETS PRACTICE ******** \r\n");
 80012b0:	4808      	ldr	r0, [pc, #32]	@ (80012d4 <displayWelcome+0x28>)
 80012b2:	f004 f863 	bl	800537c <puts>
	puts("- Uart connection ... Done\r\n");
 80012b6:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <displayWelcome+0x2c>)
 80012b8:	f004 f860 	bl	800537c <puts>
	puts("- printf retargeting to uart ... Done\r\n");
 80012bc:	4807      	ldr	r0, [pc, #28]	@ (80012dc <displayWelcome+0x30>)
 80012be:	f004 f85d 	bl	800537c <puts>
	puts("- Temperature Sensor connection ... Done\r\n");
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <displayWelcome+0x34>)
 80012c4:	f004 f85a 	bl	800537c <puts>
	puts("***************************** \r\n");
 80012c8:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <displayWelcome+0x38>)
 80012ca:	f004 f857 	bl	800537c <puts>
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08008c70 	.word	0x08008c70
 80012d8:	08008c94 	.word	0x08008c94
 80012dc:	08008cb4 	.word	0x08008cb4
 80012e0:	08008cdc 	.word	0x08008cdc
 80012e4:	08008d08 	.word	0x08008d08

080012e8 <Read_First_Tag>:


// Main function to read the first RFID tag and write it to UART
void Read_First_Tag(void)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af02      	add	r7, sp, #8
	uint8_t status;
	uint8_t TagType[2];
	uint8_t serNum[5];

	// Request to find a card
	status = RC522_Request(PICC_REQIDL, TagType);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	2026      	movs	r0, #38	@ 0x26
 80012f6:	f003 f849 	bl	800438c <RC522_Request>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d123      	bne.n	800134c <Read_First_Tag+0x64>
	{
		printf("Card detected. Type: 0x%02X 0x%02X\r\n", TagType[0], TagType[1]);
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	4619      	mov	r1, r3
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	461a      	mov	r2, r3
 800130c:	4813      	ldr	r0, [pc, #76]	@ (800135c <Read_First_Tag+0x74>)
 800130e:	f003 ffcd 	bl	80052ac <iprintf>

		// Perform anti-collision to get the serial number
		status = RC522_Anticoll(serNum);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f85e 	bl	80043d6 <RC522_Anticoll>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
		if (status == MI_OK)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10f      	bne.n	8001344 <Read_First_Tag+0x5c>
		{
			printf("Card Serial Number: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\r\n", serNum[0], serNum[1], serNum[2], serNum[3], serNum[4]);
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	4619      	mov	r1, r3
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	4618      	mov	r0, r3
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	461c      	mov	r4, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	7a3a      	ldrb	r2, [r7, #8]
 8001334:	9201      	str	r2, [sp, #4]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4623      	mov	r3, r4
 800133a:	4602      	mov	r2, r0
 800133c:	4808      	ldr	r0, [pc, #32]	@ (8001360 <Read_First_Tag+0x78>)
 800133e:	f003 ffb5 	bl	80052ac <iprintf>
	}
	else
	{
		printf("No card detected\r\n");
	}
}
 8001342:	e006      	b.n	8001352 <Read_First_Tag+0x6a>
			printf("Error reading serial number\r\n");
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <Read_First_Tag+0x7c>)
 8001346:	f004 f819 	bl	800537c <puts>
}
 800134a:	e002      	b.n	8001352 <Read_First_Tag+0x6a>
		printf("No card detected\r\n");
 800134c:	4806      	ldr	r0, [pc, #24]	@ (8001368 <Read_First_Tag+0x80>)
 800134e:	f004 f815 	bl	800537c <puts>
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	08008d2c 	.word	0x08008d2c
 8001360:	08008d54 	.word	0x08008d54
 8001364:	08008d90 	.word	0x08008d90
 8001368:	08008db0 	.word	0x08008db0

0800136c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <Error_Handler+0x8>

08001378 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <MX_SPI1_Init+0x68>)
 800137e:	4a19      	ldr	r2, [pc, #100]	@ (80013e4 <MX_SPI1_Init+0x6c>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_SPI1_Init+0x68>)
 8001384:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_SPI1_Init+0x68>)
 800138c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001390:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <MX_SPI1_Init+0x68>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_SPI1_Init+0x68>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013c6:	220a      	movs	r2, #10
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_SPI1_Init+0x68>)
 80013cc:	f001 fb1e 	bl	8002a0c <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80013d6:	f7ff ffc9 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001f0 	.word	0x200001f0
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_SPI2_Init+0x68>)
 80013ee:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <MX_SPI2_Init+0x6c>)
 80013f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_SPI2_Init+0x68>)
 80013f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_SPI2_Init+0x68>)
 80013fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001400:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_SPI2_Init+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001414:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001416:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800141a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <MX_SPI2_Init+0x68>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <MX_SPI2_Init+0x68>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <MX_SPI2_Init+0x68>)
 8001436:	220a      	movs	r2, #10
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_SPI2_Init+0x68>)
 800143c:	f001 fae6 	bl	8002a0c <HAL_SPI_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001446:	f7ff ff91 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000248 	.word	0x20000248
 8001454:	40003800 	.word	0x40003800

08001458 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a41      	ldr	r2, [pc, #260]	@ (800157c <HAL_SPI_MspInit+0x124>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12c      	bne.n	80014d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b40      	ldr	r3, [pc, #256]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a3f      	ldr	r2, [pc, #252]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|GPIO_PIN_7;
 80014b2:	23a0      	movs	r3, #160	@ 0xa0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	482d      	ldr	r0, [pc, #180]	@ (8001584 <HAL_SPI_MspInit+0x12c>)
 80014ce:	f000 fb8d 	bl	8001bec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014d2:	e04f      	b.n	8001574 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <HAL_SPI_MspInit+0x130>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d14a      	bne.n	8001574 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a18      	ldr	r2, [pc, #96]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_SPI_MspInit+0x128>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RC522_MOSI_Pin;
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001542:	2307      	movs	r3, #7
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RC522_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480f      	ldr	r0, [pc, #60]	@ (800158c <HAL_SPI_MspInit+0x134>)
 800154e:	f000 fb4d 	bl	8001bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RC522_SCK_Pin|RC522_NSS_Pin;
 8001552:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	2305      	movs	r3, #5
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4808      	ldr	r0, [pc, #32]	@ (8001590 <HAL_SPI_MspInit+0x138>)
 8001570:	f000 fb3c 	bl	8001bec <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	@ 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013000 	.word	0x40013000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40003800 	.word	0x40003800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x4>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f000 f9ad 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_kill>:

int _kill(int pid, int sig)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165c:	f003 ffe0 	bl	8005620 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	2216      	movs	r2, #22
 8001664:	601a      	str	r2, [r3, #0]
  return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_exit>:

void _exit (int status)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167a:	f04f 31ff 	mov.w	r1, #4294967295
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffe7 	bl	8001652 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
  }

  return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f003 ff60 	bl	8005620 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	200002a0 	.word	0x200002a0
 8001794:	20000640 	.word	0x20000640

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <MX_USART2_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_USART2_UART_Init+0x4c>)
 80017f4:	f001 fd5c 	bl	80032b0 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f7ff fdb5 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200002a4 	.word	0x200002a4
 800180c:	40004400 	.word	0x40004400

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_UART_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12b      	bne.n	800188a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_UART_MspInit+0x88>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_UART_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800186a:	230c      	movs	r3, #12
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800187a:	2307      	movs	r3, #7
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_UART_MspInit+0x8c>)
 8001886:	f000 f9b1 	bl	8001bec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40004400 	.word	0x40004400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a4:	f7ff ff78 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	@ (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f003 fead 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fc1b 	bl	800110c <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018e4:	080095a0 	.word	0x080095a0
  ldr r2, =_sbss
 80018e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018ec:	2000063c 	.word	0x2000063c

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f931 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fe34 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f93b 	bl	8001bd2 <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f911 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	@ (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000000 	.word	0x20000000
 8001990:	20000008 	.word	0x20000008
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	200002ec 	.word	0x200002ec

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200002ec 	.word	0x200002ec

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	@ (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	@ (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	@ (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff8e 	bl	8001a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff47 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff5c 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff8e 	bl	8001ad8 <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5d 	bl	8001a84 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb0 	bl	8001b40 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e165      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8154 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d005      	beq.n	8001c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d130      	bne.n	8001ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d017      	beq.n	8001cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d123      	bne.n	8001d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80ae 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b5d      	ldr	r3, [pc, #372]	@ (8001eec <HAL_GPIO_Init+0x300>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001eec <HAL_GPIO_Init+0x300>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b5a      	ldr	r3, [pc, #360]	@ (8001eec <HAL_GPIO_Init+0x300>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8e:	4a58      	ldr	r2, [pc, #352]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ef4 <HAL_GPIO_Init+0x308>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x21a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x216>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8001efc <HAL_GPIO_Init+0x310>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f00 <HAL_GPIO_Init+0x314>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x20e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <HAL_GPIO_Init+0x318>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x20a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8001f08 <HAL_GPIO_Init+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x206>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_GPIO_Init+0x320>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x202>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00c      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e00a      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001df2:	2305      	movs	r3, #5
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x21c>
 8001e06:	2300      	movs	r3, #0
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e18:	4935      	ldr	r1, [pc, #212]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a31      	ldr	r2, [pc, #196]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a26      	ldr	r2, [pc, #152]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec8:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b0f      	cmp	r3, #15
 8001ed8:	f67f ae96 	bls.w	8001c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
 8001f20:	4613      	mov	r3, r2
 8001f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f30:	e003      	b.n	8001f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0cc      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d90c      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b65      	ldr	r3, [pc, #404]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d044      	beq.n	8002068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002002:	2b03      	cmp	r3, #3
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	4b3f      	ldr	r3, [pc, #252]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e06f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b3b      	ldr	r3, [pc, #236]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e067      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b37      	ldr	r3, [pc, #220]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4934      	ldr	r1, [pc, #208]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7ff fcc2 	bl	80019c0 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff fcbe 	bl	80019c0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e04f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002068:	4b25      	ldr	r3, [pc, #148]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d20c      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f855 	bl	800217c <HAL_RCC_GetSysClockFreq>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	490a      	ldr	r1, [pc, #40]	@ (8002108 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	5ccb      	ldrb	r3, [r1, r3]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	@ (800210c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fc22 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00
 8002104:	40023800 	.word	0x40023800
 8002108:	08008dc4 	.word	0x08008dc4
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	@ (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	08008dd4 	.word	0x08008dd4

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002158:	f7ff ffdc 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0b5b      	lsrs	r3, r3, #13
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	@ (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	08008dd4 	.word	0x08008dd4

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b0a6      	sub	sp, #152	@ 0x98
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a2:	4bc8      	ldr	r3, [pc, #800]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	f200 817e 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x330>
 80021b0:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	080024ad 	.word	0x080024ad
 80021c0:	080024ad 	.word	0x080024ad
 80021c4:	080024ad 	.word	0x080024ad
 80021c8:	080021f5 	.word	0x080021f5
 80021cc:	080024ad 	.word	0x080024ad
 80021d0:	080024ad 	.word	0x080024ad
 80021d4:	080024ad 	.word	0x080024ad
 80021d8:	080021fd 	.word	0x080021fd
 80021dc:	080024ad 	.word	0x080024ad
 80021e0:	080024ad 	.word	0x080024ad
 80021e4:	080024ad 	.word	0x080024ad
 80021e8:	08002367 	.word	0x08002367
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4bb6      	ldr	r3, [pc, #728]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80021f2:	e15f      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f4:	4bb5      	ldr	r3, [pc, #724]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x350>)
 80021f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80021fa:	e15b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fc:	4bb1      	ldr	r3, [pc, #708]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002204:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002208:	4bae      	ldr	r3, [pc, #696]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d031      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002214:	4bab      	ldr	r3, [pc, #684]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	2200      	movs	r2, #0
 800221c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800221e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002220:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002226:	663b      	str	r3, [r7, #96]	@ 0x60
 8002228:	2300      	movs	r3, #0
 800222a:	667b      	str	r3, [r7, #100]	@ 0x64
 800222c:	4ba7      	ldr	r3, [pc, #668]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x350>)
 800222e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002232:	462a      	mov	r2, r5
 8002234:	fb03 f202 	mul.w	r2, r3, r2
 8002238:	2300      	movs	r3, #0
 800223a:	4621      	mov	r1, r4
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	4aa2      	ldr	r2, [pc, #648]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x350>)
 8002244:	4621      	mov	r1, r4
 8002246:	fba1 1202 	umull	r1, r2, r1, r2
 800224a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800224c:	460a      	mov	r2, r1
 800224e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002250:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002252:	4413      	add	r3, r2
 8002254:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800225a:	2200      	movs	r2, #0
 800225c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800225e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002260:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002264:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002268:	f7fe fd2e 	bl	8000cc8 <__aeabi_uldivmod>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4613      	mov	r3, r2
 8002272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002276:	e064      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4b92      	ldr	r3, [pc, #584]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	2200      	movs	r2, #0
 8002280:	653b      	str	r3, [r7, #80]	@ 0x50
 8002282:	657a      	str	r2, [r7, #84]	@ 0x54
 8002284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800228c:	2300      	movs	r3, #0
 800228e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002290:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002294:	4622      	mov	r2, r4
 8002296:	462b      	mov	r3, r5
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0159      	lsls	r1, r3, #5
 80022a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a6:	0150      	lsls	r0, r2, #5
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4621      	mov	r1, r4
 80022ae:	1a51      	subs	r1, r2, r1
 80022b0:	6139      	str	r1, [r7, #16]
 80022b2:	4629      	mov	r1, r5
 80022b4:	eb63 0301 	sbc.w	r3, r3, r1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022c6:	4659      	mov	r1, fp
 80022c8:	018b      	lsls	r3, r1, #6
 80022ca:	4651      	mov	r1, sl
 80022cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d0:	4651      	mov	r1, sl
 80022d2:	018a      	lsls	r2, r1, #6
 80022d4:	4651      	mov	r1, sl
 80022d6:	ebb2 0801 	subs.w	r8, r2, r1
 80022da:	4659      	mov	r1, fp
 80022dc:	eb63 0901 	sbc.w	r9, r3, r1
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f4:	4690      	mov	r8, r2
 80022f6:	4699      	mov	r9, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	eb18 0303 	adds.w	r3, r8, r3
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	462b      	mov	r3, r5
 8002302:	eb49 0303 	adc.w	r3, r9, r3
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002314:	4629      	mov	r1, r5
 8002316:	028b      	lsls	r3, r1, #10
 8002318:	4621      	mov	r1, r4
 800231a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800231e:	4621      	mov	r1, r4
 8002320:	028a      	lsls	r2, r1, #10
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800232a:	2200      	movs	r2, #0
 800232c:	643b      	str	r3, [r7, #64]	@ 0x40
 800232e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002330:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002334:	f7fe fcc8 	bl	8000cc8 <__aeabi_uldivmod>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4613      	mov	r3, r2
 800233e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002342:	4b60      	ldr	r3, [pc, #384]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c1b      	lsrs	r3, r3, #16
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	3301      	adds	r3, #1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002354:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002364:	e0a6      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002366:	4b57      	ldr	r3, [pc, #348]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800236e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002372:	4b54      	ldr	r3, [pc, #336]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02a      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237e:	4b51      	ldr	r3, [pc, #324]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	2200      	movs	r2, #0
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002388:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002390:	2100      	movs	r1, #0
 8002392:	4b4e      	ldr	r3, [pc, #312]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x350>)
 8002394:	fb03 f201 	mul.w	r2, r3, r1
 8002398:	2300      	movs	r3, #0
 800239a:	fb00 f303 	mul.w	r3, r0, r3
 800239e:	4413      	add	r3, r2
 80023a0:	4a4a      	ldr	r2, [pc, #296]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x350>)
 80023a2:	fba0 1202 	umull	r1, r2, r0, r2
 80023a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80023a8:	460a      	mov	r2, r1
 80023aa:	673a      	str	r2, [r7, #112]	@ 0x70
 80023ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80023ae:	4413      	add	r3, r2
 80023b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023b6:	2200      	movs	r2, #0
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80023bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80023c4:	f7fe fc80 	bl	8000cc8 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4613      	mov	r3, r2
 80023ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023d2:	e05b      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	2200      	movs	r2, #0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023f0:	4642      	mov	r2, r8
 80023f2:	464b      	mov	r3, r9
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	0159      	lsls	r1, r3, #5
 80023fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002402:	0150      	lsls	r0, r2, #5
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4641      	mov	r1, r8
 800240a:	ebb2 0a01 	subs.w	sl, r2, r1
 800240e:	4649      	mov	r1, r9
 8002410:	eb63 0b01 	sbc.w	fp, r3, r1
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002428:	ebb2 040a 	subs.w	r4, r2, sl
 800242c:	eb63 050b 	sbc.w	r5, r3, fp
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	00eb      	lsls	r3, r5, #3
 800243a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800243e:	00e2      	lsls	r2, r4, #3
 8002440:	4614      	mov	r4, r2
 8002442:	461d      	mov	r5, r3
 8002444:	4643      	mov	r3, r8
 8002446:	18e3      	adds	r3, r4, r3
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	464b      	mov	r3, r9
 800244c:	eb45 0303 	adc.w	r3, r5, r3
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800245e:	4629      	mov	r1, r5
 8002460:	028b      	lsls	r3, r1, #10
 8002462:	4621      	mov	r1, r4
 8002464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002468:	4621      	mov	r1, r4
 800246a:	028a      	lsls	r2, r1, #10
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002474:	2200      	movs	r2, #0
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	61fa      	str	r2, [r7, #28]
 800247a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247e:	f7fe fc23 	bl	8000cc8 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4613      	mov	r3, r2
 8002488:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800248c:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0f1b      	lsrs	r3, r3, #28
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800249a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800249e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024aa:	e003      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80024ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3798      	adds	r7, #152	@ 0x98
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	017d7840 	.word	0x017d7840

080024d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e28d      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8083 	beq.w	80025f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024f0:	4b94      	ldr	r3, [pc, #592]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d019      	beq.n	8002530 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024fc:	4b91      	ldr	r3, [pc, #580]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
        || \
 8002504:	2b08      	cmp	r3, #8
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002508:	4b8e      	ldr	r3, [pc, #568]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002514:	d00c      	beq.n	8002530 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	4b8b      	ldr	r3, [pc, #556]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d112      	bne.n	8002548 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002522:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800252e:	d10b      	bne.n	8002548 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	4b84      	ldr	r3, [pc, #528]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d05b      	beq.n	80025f4 <HAL_RCC_OscConfig+0x124>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d157      	bne.n	80025f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e25a      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002550:	d106      	bne.n	8002560 <HAL_RCC_OscConfig+0x90>
 8002552:	4b7c      	ldr	r3, [pc, #496]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7b      	ldr	r2, [pc, #492]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xcc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0xb4>
 800256a:	4b76      	ldr	r3, [pc, #472]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b73      	ldr	r3, [pc, #460]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a72      	ldr	r2, [pc, #456]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xcc>
 8002584:	4b6f      	ldr	r3, [pc, #444]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6e      	ldr	r2, [pc, #440]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fa0c 	bl	80019c0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff fa08 	bl	80019c0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e21f      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b61      	ldr	r3, [pc, #388]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xdc>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7ff f9f8 	bl	80019c0 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7ff f9f4 	bl	80019c0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e20b      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	4b57      	ldr	r3, [pc, #348]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x104>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d06f      	beq.n	80026e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002602:	4b50      	ldr	r3, [pc, #320]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800260e:	4b4d      	ldr	r3, [pc, #308]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
        || \
 8002616:	2b08      	cmp	r3, #8
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800261a:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b47      	ldr	r3, [pc, #284]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b44      	ldr	r3, [pc, #272]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b41      	ldr	r3, [pc, #260]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x186>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1d3      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3b      	ldr	r3, [pc, #236]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4937      	ldr	r1, [pc, #220]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HAL_RCC_OscConfig+0x278>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff f9a1 	bl	80019c0 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7ff f99d 	bl	80019c0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1b4      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2b      	ldr	r3, [pc, #172]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b28      	ldr	r3, [pc, #160]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4925      	ldr	r1, [pc, #148]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b24      	ldr	r3, [pc, #144]	@ (8002748 <HAL_RCC_OscConfig+0x278>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7ff f980 	bl	80019c0 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7ff f97c 	bl	80019c0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e193      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d036      	beq.n	800275c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_RCC_OscConfig+0x27c>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff f960 	bl	80019c0 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff f95c 	bl	80019c0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e173      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x274>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x234>
 8002722:	e01b      	b.n	800275c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_OscConfig+0x27c>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7ff f949 	bl	80019c0 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e00e      	b.n	8002750 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff f945 	bl	80019c0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d907      	bls.n	8002750 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e15c      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
 8002744:	40023800 	.word	0x40023800
 8002748:	42470000 	.word	0x42470000
 800274c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b8a      	ldr	r3, [pc, #552]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ea      	bne.n	8002732 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8097 	beq.w	8002898 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b83      	ldr	r3, [pc, #524]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a7e      	ldr	r2, [pc, #504]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b7c      	ldr	r3, [pc, #496]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b79      	ldr	r3, [pc, #484]	@ (8002980 <HAL_RCC_OscConfig+0x4b0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b76      	ldr	r3, [pc, #472]	@ (8002980 <HAL_RCC_OscConfig+0x4b0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_RCC_OscConfig+0x4b0>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7ff f905 	bl	80019c0 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7ff f901 	bl	80019c0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e118      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002980 <HAL_RCC_OscConfig+0x4b0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x31e>
 80027e0:	4b66      	ldr	r3, [pc, #408]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a65      	ldr	r2, [pc, #404]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x358>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x340>
 80027f6:	4b61      	ldr	r3, [pc, #388]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	4a60      	ldr	r2, [pc, #384]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6713      	str	r3, [r2, #112]	@ 0x70
 8002802:	4b5e      	ldr	r3, [pc, #376]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002806:	4a5d      	ldr	r2, [pc, #372]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	@ 0x70
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0x358>
 8002810:	4b5a      	ldr	r3, [pc, #360]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002814:	4a59      	ldr	r2, [pc, #356]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	@ 0x70
 800281c:	4b57      	ldr	r3, [pc, #348]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	4a56      	ldr	r2, [pc, #344]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7ff f8c6 	bl	80019c0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7ff f8c2 	bl	80019c0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0d7      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	4b4b      	ldr	r3, [pc, #300]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ee      	beq.n	8002838 <HAL_RCC_OscConfig+0x368>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7ff f8b0 	bl	80019c0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7ff f8ac 	bl	80019c0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0c1      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	4b40      	ldr	r3, [pc, #256]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ee      	bne.n	8002864 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a3a      	ldr	r2, [pc, #232]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80ad 	beq.w	80029fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a2:	4b36      	ldr	r3, [pc, #216]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d060      	beq.n	8002970 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d145      	bne.n	8002942 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b33      	ldr	r3, [pc, #204]	@ (8002984 <HAL_RCC_OscConfig+0x4b4>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7ff f880 	bl	80019c0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f87c 	bl	80019c0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e093      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b29      	ldr	r3, [pc, #164]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	491b      	ldr	r1, [pc, #108]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x4b4>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff f851 	bl	80019c0 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff f84d 	bl	80019c0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e064      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x452>
 8002940:	e05c      	b.n	80029fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_OscConfig+0x4b4>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff f83a 	bl	80019c0 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7ff f836 	bl	80019c0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04d      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_RCC_OscConfig+0x4ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x480>
 800296e:	e045      	b.n	80029fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e040      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000
 8002984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_RCC_OscConfig+0x538>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d030      	beq.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d129      	bne.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d122      	bne.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b8:	4013      	ands	r3, r2
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d119      	bne.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	3b01      	subs	r3, #1
 80029d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10f      	bne.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d107      	bne.n	80029f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07b      	b.n	8002b16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d108      	bne.n	8002a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2e:	d009      	beq.n	8002a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
 8002a36:	e005      	b.n	8002a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fcfa 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0104 	and.w	r1, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	f003 0210 	and.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b088      	sub	sp, #32
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2e:	f7fe ff47 	bl	80019c0 <HAL_GetTick>
 8002b32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	e12a      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Transmit+0x36>
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e122      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_SPI_Transmit+0x48>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e11b      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be0:	2b40      	cmp	r3, #64	@ 0x40
 8002be2:	d007      	beq.n	8002bf4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bfc:	d152      	bne.n	8002ca4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0xee>
 8002c06:	8b7b      	ldrh	r3, [r7, #26]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d145      	bne.n	8002c98 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	1c9a      	adds	r2, r3, #2
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c30:	e032      	b.n	8002c98 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d112      	bne.n	8002c66 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c64:	e018      	b.n	8002c98 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c66:	f7fe feab 	bl	80019c0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d803      	bhi.n	8002c7e <HAL_SPI_Transmit+0x160>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_Transmit+0x166>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e082      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1c7      	bne.n	8002c32 <HAL_SPI_Transmit+0x114>
 8002ca2:	e053      	b.n	8002d4c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_Transmit+0x194>
 8002cac:	8b7b      	ldrh	r3, [r7, #26]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d147      	bne.n	8002d42 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cd8:	e033      	b.n	8002d42 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d113      	bne.n	8002d10 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d0e:	e018      	b.n	8002d42 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d10:	f7fe fe56 	bl	80019c0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d803      	bhi.n	8002d28 <HAL_SPI_Transmit+0x20a>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d102      	bne.n	8002d2e <HAL_SPI_Transmit+0x210>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e02d      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1c6      	bne.n	8002cda <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa59 	bl	8003208 <SPI_EndRxTxTransaction>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b08a      	sub	sp, #40	@ 0x28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db8:	f7fe fe02 	bl	80019c0 <HAL_GetTick>
 8002dbc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dc4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d00c      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4a>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x46>
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d001      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e17f      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x5c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x5c>
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e174      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_SPI_TransmitReceive+0x6e>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e16d      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d003      	beq.n	8002e30 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b40      	cmp	r3, #64	@ 0x40
 8002e72:	d007      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e8c:	d17e      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0xf6>
 8002e96:	8afb      	ldrh	r3, [r7, #22]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d16c      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec0:	e059      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x162>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x162>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d113      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d119      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x1a4>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d014      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f32:	1c9a      	adds	r2, r3, #2
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f4a:	f7fe fd39 	bl	80019c0 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d80d      	bhi.n	8002f76 <HAL_SPI_TransmitReceive+0x1d0>
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d009      	beq.n	8002f76 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0bc      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1a0      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x11c>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d19b      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x11c>
 8002f8a:	e082      	b.n	8003092 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x1f4>
 8002f94:	8afb      	ldrh	r3, [r7, #22]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d171      	bne.n	800307e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc0:	e05d      	b.n	800307e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d11c      	bne.n	800300a <HAL_SPI_TransmitReceive+0x264>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <HAL_SPI_TransmitReceive+0x264>
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d114      	bne.n	800300a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d119      	bne.n	800304c <HAL_SPI_TransmitReceive+0x2a6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800304c:	f7fe fcb8 	bl	80019c0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003058:	429a      	cmp	r2, r3
 800305a:	d803      	bhi.n	8003064 <HAL_SPI_TransmitReceive+0x2be>
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d102      	bne.n	800306a <HAL_SPI_TransmitReceive+0x2c4>
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e038      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d19c      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x21c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d197      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003092:	6a3a      	ldr	r2, [r7, #32]
 8003094:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f8b6 	bl	8003208 <SPI_EndRxTxTransaction>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e01d      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
  }
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3728      	adds	r7, #40	@ 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003108:	f7fe fc5a 	bl	80019c0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	4413      	add	r3, r2
 8003116:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003118:	f7fe fc52 	bl	80019c0 <HAL_GetTick>
 800311c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800311e:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	015b      	lsls	r3, r3, #5
 8003124:	0d1b      	lsrs	r3, r3, #20
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800312e:	e054      	b.n	80031da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d050      	beq.n	80031da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003138:	f7fe fc42 	bl	80019c0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	429a      	cmp	r2, r3
 8003146:	d902      	bls.n	800314e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d13d      	bne.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800315c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003166:	d111      	bne.n	800318c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003170:	d004      	beq.n	800317c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317a:	d107      	bne.n	800318c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800318a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003194:	d10f      	bne.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e017      	b.n	80031fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d19b      	bne.n	8003130 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000

08003208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2201      	movs	r2, #1
 800321c:	2102      	movs	r1, #2
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff ff6a 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e032      	b.n	80032a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <SPI_EndRxTxTransaction+0xa0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <SPI_EndRxTxTransaction+0xa4>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003258:	d112      	bne.n	8003280 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ff47 	bl	80030f8 <SPI_WaitFlagStateUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e00f      	b.n	80032a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3b01      	subs	r3, #1
 800328a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d0f2      	beq.n	8003280 <SPI_EndRxTxTransaction+0x78>
 800329a:	e000      	b.n	800329e <SPI_EndRxTxTransaction+0x96>
        break;
 800329c:	bf00      	nop
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000000 	.word	0x20000000
 80032ac:	165e9f81 	.word	0x165e9f81

080032b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e042      	b.n	8003348 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fa9a 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	@ 0x24
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f973 	bl	80035e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003318:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003328:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d175      	bne.n	800345c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Transmit+0x2c>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e06e      	b.n	800345e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2221      	movs	r2, #33	@ 0x21
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800338e:	f7fe fb17 	bl	80019c0 <HAL_GetTick>
 8003392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a8:	d108      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d104      	bne.n	80033bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e003      	b.n	80033c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c4:	e02e      	b.n	8003424 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f848 	bl	8003466 <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e03a      	b.n	800345e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	3302      	adds	r3, #2
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e007      	b.n	8003416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	781a      	ldrb	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	3301      	adds	r3, #1
 8003414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1cb      	bne.n	80033c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2140      	movs	r1, #64	@ 0x40
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f814 	bl	8003466 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003476:	e03b      	b.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d037      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fe fa9e 	bl	80019c0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <UART_WaitOnFlagUntilTimeout+0x30>
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e03a      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d023      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b80      	cmp	r3, #128	@ 0x80
 80034ac:	d020      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b40      	cmp	r3, #64	@ 0x40
 80034b2:	d01d      	beq.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d116      	bne.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f81d 	bl	8003518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2208      	movs	r2, #8
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e00f      	b.n	8003510 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	429a      	cmp	r2, r3
 800350c:	d0b4      	beq.n	8003478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b095      	sub	sp, #84	@ 0x54
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003540:	643a      	str	r2, [r7, #64]	@ 0x40
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003548:	e841 2300 	strex	r3, r2, [r1]
 800354c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e5      	bne.n	8003520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3314      	adds	r3, #20
 800355a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	e853 3f00 	ldrex	r3, [r3]
 8003562:	61fb      	str	r3, [r7, #28]
   return(result);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3314      	adds	r3, #20
 8003572:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003574:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e5      	bne.n	8003554 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358c:	2b01      	cmp	r3, #1
 800358e:	d119      	bne.n	80035c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f023 0310 	bic.w	r3, r3, #16
 80035a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035b0:	61ba      	str	r2, [r7, #24]
 80035b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6979      	ldr	r1, [r7, #20]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	613b      	str	r3, [r7, #16]
   return(result);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035d2:	bf00      	nop
 80035d4:	3754      	adds	r7, #84	@ 0x54
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0c0      	sub	sp, #256	@ 0x100
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	ea40 0301 	orr.w	r3, r0, r1
 8003608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003638:	f021 010c 	bic.w	r1, r1, #12
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	ea40 0301 	orr.w	r3, r0, r1
 8003666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b8f      	ldr	r3, [pc, #572]	@ (80038ac <UART_SetConfig+0x2cc>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <UART_SetConfig+0xa0>
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b8d      	ldr	r3, [pc, #564]	@ (80038b0 <UART_SetConfig+0x2d0>)
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003680:	f7fe fd68 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003684:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003688:	e003      	b.n	8003692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800368a:	f7fe fd4f 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 800368e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369c:	f040 810c 	bne.w	80038b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036ba:	415b      	adcs	r3, r3
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036c2:	4621      	mov	r1, r4
 80036c4:	eb12 0801 	adds.w	r8, r2, r1
 80036c8:	4629      	mov	r1, r5
 80036ca:	eb43 0901 	adc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	eb18 0303 	adds.w	r3, r8, r3
 80036ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036f0:	462b      	mov	r3, r5
 80036f2:	eb49 0303 	adc.w	r3, r9, r3
 80036f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003706:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800370a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800370e:	460b      	mov	r3, r1
 8003710:	18db      	adds	r3, r3, r3
 8003712:	653b      	str	r3, [r7, #80]	@ 0x50
 8003714:	4613      	mov	r3, r2
 8003716:	eb42 0303 	adc.w	r3, r2, r3
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
 800371c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003724:	f7fd fad0 	bl	8000cc8 <__aeabi_uldivmod>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <UART_SetConfig+0x2d4>)
 800372e:	fba3 2302 	umull	r2, r3, r3, r2
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	011c      	lsls	r4, r3, #4
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003740:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003750:	415b      	adcs	r3, r3
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003758:	4641      	mov	r1, r8
 800375a:	eb12 0a01 	adds.w	sl, r2, r1
 800375e:	4649      	mov	r1, r9
 8003760:	eb43 0b01 	adc.w	fp, r3, r1
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003778:	4692      	mov	sl, r2
 800377a:	469b      	mov	fp, r3
 800377c:	4643      	mov	r3, r8
 800377e:	eb1a 0303 	adds.w	r3, sl, r3
 8003782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003786:	464b      	mov	r3, r9
 8003788:	eb4b 0303 	adc.w	r3, fp, r3
 800378c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800379c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a4:	460b      	mov	r3, r1
 80037a6:	18db      	adds	r3, r3, r3
 80037a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80037aa:	4613      	mov	r3, r2
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037ba:	f7fd fa85 	bl	8000cc8 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	4b3b      	ldr	r3, [pc, #236]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2301 	umull	r2, r3, r3, r1
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2264      	movs	r2, #100	@ 0x64
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	1acb      	subs	r3, r1, r3
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037da:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <UART_SetConfig+0x2d4>)
 80037dc:	fba3 2302 	umull	r2, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003804:	415b      	adcs	r3, r3
 8003806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6339      	str	r1, [r7, #48]	@ 0x30
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	637b      	str	r3, [r7, #52]	@ 0x34
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003858:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800385c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003876:	f7fd fa27 	bl	8000cc8 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003880:	fba3 1302 	umull	r1, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	2164      	movs	r1, #100	@ 0x64
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	3332      	adds	r3, #50	@ 0x32
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <UART_SetConfig+0x2d4>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4422      	add	r2, r4
 80038a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a8:	e106      	b.n	8003ab8 <UART_SetConfig+0x4d8>
 80038aa:	bf00      	nop
 80038ac:	40011000 	.word	0x40011000
 80038b0:	40011400 	.word	0x40011400
 80038b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	6239      	str	r1, [r7, #32]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038da:	4641      	mov	r1, r8
 80038dc:	1854      	adds	r4, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0501 	adc.w	r5, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003900:	464b      	mov	r3, r9
 8003902:	eb45 0303 	adc.w	r3, r5, r3
 8003906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003926:	4629      	mov	r1, r5
 8003928:	008b      	lsls	r3, r1, #2
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003930:	4621      	mov	r1, r4
 8003932:	008a      	lsls	r2, r1, #2
 8003934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003938:	f7fd f9c6 	bl	8000cc8 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4b60      	ldr	r3, [pc, #384]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003942:	fba3 2302 	umull	r2, r3, r3, r2
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	011c      	lsls	r4, r3, #4
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003954:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	61b9      	str	r1, [r7, #24]
 8003964:	415b      	adcs	r3, r3
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6139      	str	r1, [r7, #16]
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039a0:	464b      	mov	r3, r9
 80039a2:	460a      	mov	r2, r1
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039c4:	4649      	mov	r1, r9
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	4641      	mov	r1, r8
 80039ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ce:	4641      	mov	r1, r8
 80039d0:	008a      	lsls	r2, r1, #2
 80039d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039d6:	f7fd f977 	bl	8000cc8 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	4b38      	ldr	r3, [pc, #224]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039e2:	fba3 2301 	umull	r2, r3, r3, r1
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2264      	movs	r2, #100	@ 0x64
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	1acb      	subs	r3, r1, r3
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	3332      	adds	r3, #50	@ 0x32
 80039f4:	4a33      	ldr	r2, [pc, #204]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a00:	441c      	add	r4, r3
 8003a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a06:	2200      	movs	r2, #0
 8003a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	1891      	adds	r1, r2, r2
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	415b      	adcs	r3, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a20:	4641      	mov	r1, r8
 8003a22:	1851      	adds	r1, r2, r1
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	4649      	mov	r1, r9
 8003a28:	414b      	adcs	r3, r1
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4651      	mov	r1, sl
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a52:	464b      	mov	r3, r9
 8003a54:	460a      	mov	r2, r1
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a74:	4649      	mov	r1, r9
 8003a76:	008b      	lsls	r3, r1, #2
 8003a78:	4641      	mov	r1, r8
 8003a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7e:	4641      	mov	r1, r8
 8003a80:	008a      	lsls	r2, r1, #2
 8003a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a86:	f7fd f91f 	bl	8000cc8 <__aeabi_uldivmod>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	@ 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	@ 0x32
 8003aa2:	4a08      	ldr	r2, [pc, #32]	@ (8003ac4 <UART_SetConfig+0x4e4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4422      	add	r2, r4
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	f083 0301 	eor.w	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	2140      	movs	r1, #64	@ 0x40
 8003ade:	4803      	ldr	r0, [pc, #12]	@ (8003aec <chipSelect+0x24>)
 8003ae0:	f7fe fa18 	bl	8001f14 <HAL_GPIO_WritePin>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40020400 	.word	0x40020400

08003af0 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b02:	4803      	ldr	r0, [pc, #12]	@ (8003b10 <registerSelect+0x20>)
 8003b04:	f7fe fa06 	bl	8001f14 <HAL_GPIO_WritePin>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40020000 	.word	0x40020000

08003b14 <displayReset>:

static void displayReset(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7ff ffd5 	bl	8003ac8 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2140      	movs	r1, #64	@ 0x40
 8003b22:	4808      	ldr	r0, [pc, #32]	@ (8003b44 <displayReset+0x30>)
 8003b24:	f7fe f9f6 	bl	8001f14 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fd ff55 	bl	80019d8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2140      	movs	r1, #64	@ 0x40
 8003b32:	4804      	ldr	r0, [pc, #16]	@ (8003b44 <displayReset+0x30>)
 8003b34:	f7fe f9ee 	bl	8001f14 <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 8003b38:	2001      	movs	r0, #1
 8003b3a:	f7ff ffc5 	bl	8003ac8 <chipSelect>
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40020000 	.word	0x40020000

08003b48 <sendInstruction>:

static void sendInstruction(instruction command)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f7ff ffcc 	bl	8003af0 <registerSelect>
    chipSelect(true);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7ff ffb5 	bl	8003ac8 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8003b5e:	1df9      	adds	r1, r7, #7
 8003b60:	2301      	movs	r3, #1
 8003b62:	2201      	movs	r2, #1
 8003b64:	4804      	ldr	r0, [pc, #16]	@ (8003b78 <sendInstruction+0x30>)
 8003b66:	f7fe ffda 	bl	8002b1e <HAL_SPI_Transmit>
    chipSelect(false);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7ff ffac 	bl	8003ac8 <chipSelect>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200001f0 	.word	0x200001f0

08003b7c <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7ff ffb2 	bl	8003af0 <registerSelect>
    chipSelect(true);
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f7ff ff9b 	bl	8003ac8 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003b92:	1df9      	adds	r1, r7, #7
 8003b94:	2301      	movs	r3, #1
 8003b96:	2201      	movs	r2, #1
 8003b98:	4804      	ldr	r0, [pc, #16]	@ (8003bac <sendData+0x30>)
 8003b9a:	f7fe ffc0 	bl	8002b1e <HAL_SPI_Transmit>
    chipSelect(false);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7ff ff92 	bl	8003ac8 <chipSelect>
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200001f0 	.word	0x200001f0

08003bb0 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bbe:	d806      	bhi.n	8003bce <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8003bc0:	2081      	movs	r0, #129	@ 0x81
 8003bc2:	f7ff ffc1 	bl	8003b48 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ffbd 	bl	8003b48 <sendInstruction>
    }
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <lcd_init>:

void lcd_init(void)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	af00      	add	r7, sp, #0
    lcd_clear();
 8003bda:	f000 f857 	bl	8003c8c <lcd_clear>
    displayReset();
 8003bde:	f7ff ff99 	bl	8003b14 <displayReset>

    sendInstruction(ADC_NORMAL);
 8003be2:	20a0      	movs	r0, #160	@ 0xa0
 8003be4:	f7ff ffb0 	bl	8003b48 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8003be8:	20ae      	movs	r0, #174	@ 0xae
 8003bea:	f7ff ffad 	bl	8003b48 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8003bee:	20c8      	movs	r0, #200	@ 0xc8
 8003bf0:	f7ff ffaa 	bl	8003b48 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8003bf4:	20a2      	movs	r0, #162	@ 0xa2
 8003bf6:	f7ff ffa7 	bl	8003b48 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 8003bfa:	202f      	movs	r0, #47	@ 0x2f
 8003bfc:	f7ff ffa4 	bl	8003b48 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8003c00:	2021      	movs	r0, #33	@ 0x21
 8003c02:	f7ff ffa1 	bl	8003b48 <sendInstruction>
    lcd_setContrast(40);
 8003c06:	2028      	movs	r0, #40	@ 0x28
 8003c08:	f7ff ffd2 	bl	8003bb0 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8003c0c:	20af      	movs	r0, #175	@ 0xaf
 8003c0e:	f7ff ff9b 	bl	8003b48 <sendInstruction>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
 8003c22:	460b      	mov	r3, r1
 8003c24:	71bb      	strb	r3, [r7, #6]
 8003c26:	4613      	mov	r3, r2
 8003c28:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db23      	blt.n	8003c7a <lcd_setPixel+0x62>
 8003c32:	79bb      	ldrb	r3, [r7, #6]
 8003c34:	2b1f      	cmp	r3, #31
 8003c36:	d820      	bhi.n	8003c7a <lcd_setPixel+0x62>
        if (pixelIsSet)
 8003c38:	797b      	ldrb	r3, [r7, #5]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	4a11      	ldr	r2, [pc, #68]	@ (8003c88 <lcd_setPixel+0x70>)
 8003c42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c46:	79bb      	ldrb	r3, [r7, #6]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	4619      	mov	r1, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <lcd_setPixel+0x70>)
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 8003c5a:	e00e      	b.n	8003c7a <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c88 <lcd_setPixel+0x70>)
 8003c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	400a      	ands	r2, r1
 8003c74:	4904      	ldr	r1, [pc, #16]	@ (8003c88 <lcd_setPixel+0x70>)
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	200002f0 	.word	0x200002f0

08003c8c <lcd_clear>:

void lcd_clear(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003c92:	2300      	movs	r3, #0
 8003c94:	71fb      	strb	r3, [r7, #7]
 8003c96:	e007      	b.n	8003ca8 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <lcd_clear+0x34>)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	daf3      	bge.n	8003c98 <lcd_clear+0xc>
    }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	200002f0 	.word	0x200002f0

08003cc4 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	71fb      	strb	r3, [r7, #7]
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71bb      	strb	r3, [r7, #6]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	717b      	strb	r3, [r7, #5]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8003ce2:	797b      	ldrb	r3, [r7, #5]
 8003ce4:	3b20      	subs	r3, #32
 8003ce6:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e049      	b.n	8003d82 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73bb      	strb	r3, [r7, #14]
 8003cf2:	e03b      	b.n	8003d6c <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8003cf4:	797b      	ldrb	r3, [r7, #5]
 8003cf6:	793a      	ldrb	r2, [r7, #4]
 8003cf8:	4928      	ldr	r1, [pc, #160]	@ (8003d9c <lcd_setChar+0xd8>)
 8003cfa:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8003cfe:	fb03 f202 	mul.w	r2, r3, r2
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	4413      	add	r3, r2
 8003d06:	4a26      	ldr	r2, [pc, #152]	@ (8003da0 <lcd_setChar+0xdc>)
 8003d08:	5cd3      	ldrb	r3, [r2, r3]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	7bbb      	ldrb	r3, [r7, #14]
 8003d0e:	fa42 f303 	asr.w	r3, r2, r3
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8003d1a:	79fa      	ldrb	r2, [r7, #7]
 8003d1c:	7bbb      	ldrb	r3, [r7, #14]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b2d8      	uxtb	r0, r3
 8003d22:	79ba      	ldrb	r2, [r7, #6]
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	4413      	add	r3, r2
 8003d28:	b2d9      	uxtb	r1, r3
 8003d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	f7ff ff67 	bl	8003c18 <lcd_setPixel>
 8003d4a:	e00c      	b.n	8003d66 <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 8003d4c:	79fa      	ldrb	r2, [r7, #7]
 8003d4e:	7bbb      	ldrb	r3, [r7, #14]
 8003d50:	4413      	add	r3, r2
 8003d52:	b2d8      	uxtb	r0, r3
 8003d54:	79ba      	ldrb	r2, [r7, #6]
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	4413      	add	r3, r2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7ff ff59 	bl	8003c18 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8003d66:	7bbb      	ldrb	r3, [r7, #14]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	73bb      	strb	r3, [r7, #14]
 8003d6c:	793b      	ldrb	r3, [r7, #4]
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d9c <lcd_setChar+0xd8>)
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	7bba      	ldrb	r2, [r7, #14]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d3bb      	bcc.n	8003cf4 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	793b      	ldrb	r3, [r7, #4]
 8003d84:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <lcd_setChar+0xd8>)
 8003d86:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3ae      	bcc.n	8003cee <lcd_setChar+0x2a>
        }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800915c 	.word	0x0800915c
 8003da0:	08008ddc 	.word	0x08008ddc

08003da4 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	603a      	str	r2, [r7, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
 8003db2:	460b      	mov	r3, r1
 8003db4:	71bb      	strb	r3, [r7, #6]
 8003db6:	4613      	mov	r3, r2
 8003db8:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8003dba:	797b      	ldrb	r3, [r7, #5]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11c      	bne.n	8003dfa <lcd_setString+0x56>
 8003dc0:	797b      	ldrb	r3, [r7, #5]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d819      	bhi.n	8003dfa <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8003dc6:	e014      	b.n	8003df2 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	797c      	ldrb	r4, [r7, #5]
 8003dce:	79b9      	ldrb	r1, [r7, #6]
 8003dd0:	79f8      	ldrb	r0, [r7, #7]
 8003dd2:	7e3b      	ldrb	r3, [r7, #24]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	f7ff ff74 	bl	8003cc4 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8003ddc:	797b      	ldrb	r3, [r7, #5]
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <lcd_setString+0x60>)
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	785a      	ldrb	r2, [r3, #1]
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	4413      	add	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	3301      	adds	r3, #1
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e6      	bne.n	8003dc8 <lcd_setString+0x24>
        }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd90      	pop	{r4, r7, pc}
 8003e02:	bf00      	nop
 8003e04:	0800915c 	.word	0x0800915c

08003e08 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b08b      	sub	sp, #44	@ 0x2c
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	81fb      	strh	r3, [r7, #14]
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	81bb      	strh	r3, [r7, #12]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	4613      	mov	r3, r2
 8003e24:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8003e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e32:	edc7 7a08 	vstr	s15, [r7, #32]
 8003e36:	2300      	movs	r3, #0
 8003e38:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8003e3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e46:	edc7 7a07 	vstr	s15, [r7, #28]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 8003e4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bfb8      	it	lt
 8003e5c:	425b      	neglt	r3, r3
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8003e62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003e66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bfb8      	it	lt
 8003e70:	425b      	neglt	r3, r3
 8003e72:	b21b      	sxth	r3, r3
 8003e74:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8003e76:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <lcd_setLine+0x8c>
 8003e7e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8003e94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <lcd_setLine+0xaa>
 8003e9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ea0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8003eb2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003eb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	db5f      	blt.n	8003f7e <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003ec2:	e055      	b.n	8003f70 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003ec4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed0:	db20      	blt.n	8003f14 <lcd_setLine+0x10c>
 8003ed2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	db19      	blt.n	8003f14 <lcd_setLine+0x10c>
 8003ee0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003eec:	793b      	ldrb	r3, [r7, #4]
 8003eee:	b2d8      	uxtb	r0, r3
 8003ef0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ef8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003efc:	793b      	ldrb	r3, [r7, #4]
 8003efe:	b2d9      	uxtb	r1, r3
 8003f00:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff fe82 	bl	8003c18 <lcd_setPixel>
			xF += x[1];
 8003f14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f20:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f28:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8003f2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f58:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f60:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8003f64:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003f70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003f74:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	dba3      	blt.n	8003ec4 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8003f7c:	e05e      	b.n	800403c <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8003f7e:	2300      	movs	r3, #0
 8003f80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003f82:	e055      	b.n	8004030 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8003f84:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	db20      	blt.n	8003fd4 <lcd_setLine+0x1cc>
 8003f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9e:	db19      	blt.n	8003fd4 <lcd_setLine+0x1cc>
 8003fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fac:	793b      	ldrb	r3, [r7, #4]
 8003fae:	b2d8      	uxtb	r0, r3
 8003fb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fbc:	793b      	ldrb	r3, [r7, #4]
 8003fbe:	b2d9      	uxtb	r1, r3
 8003fc0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f7ff fe22 	bl	8003c18 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8003fd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fe0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004000:	ed97 7a08 	vldr	s14, [r7, #32]
 8004004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004008:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 800400c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004018:	ed97 7a07 	vldr	s14, [r7, #28]
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004024:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004028:	b29b      	uxth	r3, r3
 800402a:	3301      	adds	r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004030:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004034:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004038:	429a      	cmp	r2, r3
 800403a:	dba3      	blt.n	8003f84 <lcd_setLine+0x17c>
}
 800403c:	bf00      	nop
 800403e:	372c      	adds	r7, #44	@ 0x2c
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <lcd_show>:

void lcd_show(void){
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 800404a:	2300      	movs	r3, #0
 800404c:	71fb      	strb	r3, [r7, #7]
 800404e:	e022      	b.n	8004096 <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	3b50      	subs	r3, #80	@ 0x50
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fd76 	bl	8003b48 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 800405c:	2010      	movs	r0, #16
 800405e:	f7ff fd73 	bl	8003b48 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8004062:	2000      	movs	r0, #0
 8004064:	f7ff fd70 	bl	8003b48 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004068:	2300      	movs	r3, #0
 800406a:	71bb      	strb	r3, [r7, #6]
 800406c:	e00c      	b.n	8004088 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 800406e:	79ba      	ldrb	r2, [r7, #6]
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	490d      	ldr	r1, [pc, #52]	@ (80040a8 <lcd_show+0x64>)
 8004074:	0092      	lsls	r2, r2, #2
 8004076:	440a      	add	r2, r1
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fd7d 	bl	8003b7c <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004082:	79bb      	ldrb	r3, [r7, #6]
 8004084:	3301      	adds	r3, #1
 8004086:	71bb      	strb	r3, [r7, #6]
 8004088:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	daee      	bge.n	800406e <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	3301      	adds	r3, #1
 8004094:	71fb      	strb	r3, [r7, #7]
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d9d9      	bls.n	8004050 <lcd_show+0xc>
    }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200002f0 	.word	0x200002f0

080040ac <RC522_SPI_Transfer>:

#include "rc522.h"

// Transfers a byte of data via SPI and returns the received byte
uint8_t RC522_SPI_Transfer(uint8_t tx_data)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, 100);
 80040b6:	f107 020f 	add.w	r2, r7, #15
 80040ba:	1df9      	adds	r1, r7, #7
 80040bc:	2364      	movs	r3, #100	@ 0x64
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2301      	movs	r3, #1
 80040c2:	4804      	ldr	r0, [pc, #16]	@ (80040d4 <RC522_SPI_Transfer+0x28>)
 80040c4:	f7fe fe6f 	bl	8002da6 <HAL_SPI_TransmitReceive>
    return rx_data;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200001f0 	.word	0x200001f0

080040d8 <write_RC522>:

// Writes a value to a specific RC522 register
void write_RC522(uint8_t ADD, uint8_t val)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	460a      	mov	r2, r1
 80040e2:	71fb      	strb	r3, [r7, #7]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71bb      	strb	r3, [r7, #6]
    // Pull the Chip Select Pin Down to activate the RFID
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040ee:	480d      	ldr	r0, [pc, #52]	@ (8004124 <write_RC522+0x4c>)
 80040f0:	f7fd ff10 	bl	8001f14 <HAL_GPIO_WritePin>
    RC522_SPI_Transfer((ADD << 1) & 0x7E);  // Send address byte with write bit
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ffd3 	bl	80040ac <RC522_SPI_Transfer>
    RC522_SPI_Transfer(val);  // Send the value to write
 8004106:	79bb      	ldrb	r3, [r7, #6]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ffcf 	bl	80040ac <RC522_SPI_Transfer>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // Deactivate RFID
 800410e:	2201      	movs	r2, #1
 8004110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004114:	4803      	ldr	r0, [pc, #12]	@ (8004124 <write_RC522+0x4c>)
 8004116:	f7fd fefd 	bl	8001f14 <HAL_GPIO_WritePin>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40020400 	.word	0x40020400

08004128 <read_RC522>:

// Reads a value from a specific RC522 register
uint8_t read_RC522(uint8_t addr)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);  // Activate RFID
 8004132:	2200      	movs	r2, #0
 8004134:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004138:	480f      	ldr	r0, [pc, #60]	@ (8004178 <read_RC522+0x50>)
 800413a:	f7fd feeb 	bl	8001f14 <HAL_GPIO_WritePin>
    RC522_SPI_Transfer(((addr << 1) & 0x7E) | 0x80);  // Send address byte with read bit
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	b25b      	sxtb	r3, r3
 8004144:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004148:	b25b      	sxtb	r3, r3
 800414a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800414e:	b25b      	sxtb	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff ffaa 	bl	80040ac <RC522_SPI_Transfer>
    val = RC522_SPI_Transfer(MI_OK);  // Read the value from the register
 8004158:	2000      	movs	r0, #0
 800415a:	f7ff ffa7 	bl	80040ac <RC522_SPI_Transfer>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // Deactivate RFID
 8004162:	2201      	movs	r2, #1
 8004164:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004168:	4803      	ldr	r0, [pc, #12]	@ (8004178 <read_RC522+0x50>)
 800416a:	f7fd fed3 	bl	8001f14 <HAL_GPIO_WritePin>
    return val;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40020400 	.word	0x40020400

0800417c <SetBitMask>:

// Sets specific bits of a register
void SetBitMask(uint8_t reg, uint8_t mask)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	460a      	mov	r2, r1
 8004186:	71fb      	strb	r3, [r7, #7]
 8004188:	4613      	mov	r3, r2
 800418a:	71bb      	strb	r3, [r7, #6]
    uint8_t temp = read_RC522(reg);
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ffca 	bl	8004128 <read_RC522>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
    write_RC522(reg, temp | mask);  // Set bits defined by mask
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	79bb      	ldrb	r3, [r7, #6]
 800419c:	4313      	orrs	r3, r2
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff97 	bl	80040d8 <write_RC522>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <ClearBitMask>:

// Clears specific bits of a register
void ClearBitMask(uint8_t reg, uint8_t mask)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	460a      	mov	r2, r1
 80041bc:	71fb      	strb	r3, [r7, #7]
 80041be:	4613      	mov	r3, r2
 80041c0:	71bb      	strb	r3, [r7, #6]
    uint8_t temp = read_RC522(reg);
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ffaf 	bl	8004128 <read_RC522>
 80041ca:	4603      	mov	r3, r0
 80041cc:	73fb      	strb	r3, [r7, #15]
    write_RC522(reg, temp & (~mask));  // Clear bits defined by mask
 80041ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	b25a      	sxtb	r2, r3
 80041d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041da:	4013      	ands	r3, r2
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff77 	bl	80040d8 <write_RC522>
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <RC522_ToCard>:
    antenna_on();
}

// Sends data to RC522 and gets response
uint8_t RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint8_t *backLen)
{
 80041f2:	b590      	push	{r4, r7, lr}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	4613      	mov	r3, r2
 8004202:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8004204:	2302      	movs	r3, #2
 8004206:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x00;
 8004208:	2300      	movs	r3, #0
 800420a:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x00;
 800420c:	2300      	movs	r3, #0
 800420e:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    // Set IRQ based on the command type
    switch (command)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d006      	beq.n	8004224 <RC522_ToCard+0x32>
 8004216:	2b0e      	cmp	r3, #14
 8004218:	d109      	bne.n	800422e <RC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:
            irqEn = 0x12;
 800421a:	2312      	movs	r3, #18
 800421c:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
 800421e:	2310      	movs	r3, #16
 8004220:	757b      	strb	r3, [r7, #21]
            break;
 8004222:	e005      	b.n	8004230 <RC522_ToCard+0x3e>
        case PCD_TRANSCEIVE:
            irqEn = 0x77;
 8004224:	2377      	movs	r3, #119	@ 0x77
 8004226:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
 8004228:	2330      	movs	r3, #48	@ 0x30
 800422a:	757b      	strb	r3, [r7, #21]
            break;
 800422c:	e000      	b.n	8004230 <RC522_ToCard+0x3e>
        default:
            break;
 800422e:	bf00      	nop
    }

    // Enable IRQ, clear interrupt request bits, and flush FIFO
    write_RC522(ComlEnReg, irqEn | 0x80);
 8004230:	7dbb      	ldrb	r3, [r7, #22]
 8004232:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004236:	b2db      	uxtb	r3, r3
 8004238:	4619      	mov	r1, r3
 800423a:	2002      	movs	r0, #2
 800423c:	f7ff ff4c 	bl	80040d8 <write_RC522>
    ClearBitMask(ComIrqReg, 0x80);
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	2004      	movs	r0, #4
 8004244:	f7ff ffb5 	bl	80041b2 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);
 8004248:	2180      	movs	r1, #128	@ 0x80
 800424a:	200a      	movs	r0, #10
 800424c:	f7ff ff96 	bl	800417c <SetBitMask>
    write_RC522(CommandReg, PCD_IDLE);
 8004250:	2100      	movs	r1, #0
 8004252:	2001      	movs	r0, #1
 8004254:	f7ff ff40 	bl	80040d8 <write_RC522>

    // Write data to FIFO
    for (i = 0; i < sendLen; ++i)
 8004258:	2300      	movs	r3, #0
 800425a:	827b      	strh	r3, [r7, #18]
 800425c:	e00a      	b.n	8004274 <RC522_ToCard+0x82>
    {
        write_RC522(FIFODataReg, sendData[i]);
 800425e:	8a7b      	ldrh	r3, [r7, #18]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	2009      	movs	r0, #9
 800426a:	f7ff ff35 	bl	80040d8 <write_RC522>
    for (i = 0; i < sendLen; ++i)
 800426e:	8a7b      	ldrh	r3, [r7, #18]
 8004270:	3301      	adds	r3, #1
 8004272:	827b      	strh	r3, [r7, #18]
 8004274:	7bbb      	ldrb	r3, [r7, #14]
 8004276:	b29b      	uxth	r3, r3
 8004278:	8a7a      	ldrh	r2, [r7, #18]
 800427a:	429a      	cmp	r2, r3
 800427c:	d3ef      	bcc.n	800425e <RC522_ToCard+0x6c>
    }

    // Start the command
    write_RC522(CommandReg, command);
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	4619      	mov	r1, r3
 8004282:	2001      	movs	r0, #1
 8004284:	f7ff ff28 	bl	80040d8 <write_RC522>
    if (command == PCD_TRANSCEIVE)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d103      	bne.n	8004296 <RC522_ToCard+0xa4>
    {
        SetBitMask(BitFramingReg, 0x80);  // Start transmitting data
 800428e:	2180      	movs	r1, #128	@ 0x80
 8004290:	200d      	movs	r0, #13
 8004292:	f7ff ff73 	bl	800417c <SetBitMask>
    }

    // Wait for the command to complete (or timeout)
    i = 2000;
 8004296:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800429a:	827b      	strh	r3, [r7, #18]
    do
    {
        n = read_RC522(ComIrqReg);
 800429c:	2004      	movs	r0, #4
 800429e:	f7ff ff43 	bl	8004128 <read_RC522>
 80042a2:	4603      	mov	r3, r0
 80042a4:	753b      	strb	r3, [r7, #20]
        i--;
 80042a6:	8a7b      	ldrh	r3, [r7, #18]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && (n & 0x01) && !(n & waitIRq));
 80042ac:	8a7b      	ldrh	r3, [r7, #18]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <RC522_ToCard+0xd6>
 80042b2:	7d3b      	ldrb	r3, [r7, #20]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <RC522_ToCard+0xd6>
 80042bc:	7d3a      	ldrb	r2, [r7, #20]
 80042be:	7d7b      	ldrb	r3, [r7, #21]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0e9      	beq.n	800429c <RC522_ToCard+0xaa>

    // Stop sending data
    ClearBitMask(BitFramingReg, 0x80);
 80042c8:	2180      	movs	r1, #128	@ 0x80
 80042ca:	200d      	movs	r0, #13
 80042cc:	f7ff ff71 	bl	80041b2 <ClearBitMask>

    if (i != 0)
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d055      	beq.n	8004382 <RC522_ToCard+0x190>
    {
        if (!(read_RC522(ErrorReg) & 0x1B))
 80042d6:	2006      	movs	r0, #6
 80042d8:	f7ff ff26 	bl	8004128 <read_RC522>
 80042dc:	4603      	mov	r3, r0
 80042de:	f003 031b 	and.w	r3, r3, #27
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d14b      	bne.n	800437e <RC522_ToCard+0x18c>
        {
            status = MI_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
            if (n & irqEn & 0x01)
 80042ea:	7d3a      	ldrb	r2, [r7, #20]
 80042ec:	7dbb      	ldrb	r3, [r7, #22]
 80042ee:	4013      	ands	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <RC522_ToCard+0x10c>
            {
                status = MI_NOTAGERR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
            }
            if (command == PCD_TRANSCEIVE)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d13e      	bne.n	8004382 <RC522_ToCard+0x190>
            {
                n = read_RC522(FIFOLevelReg);
 8004304:	200a      	movs	r0, #10
 8004306:	f7ff ff0f 	bl	8004128 <read_RC522>
 800430a:	4603      	mov	r3, r0
 800430c:	753b      	strb	r3, [r7, #20]
                lastBits = read_RC522(ControlReg) & 0x07;
 800430e:	200c      	movs	r0, #12
 8004310:	f7ff ff0a 	bl	8004128 <read_RC522>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	747b      	strb	r3, [r7, #17]
                if (lastBits)
 800431c:	7c7b      	ldrb	r3, [r7, #17]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <RC522_ToCard+0x146>
                {
                    *backLen = (n - 1) * 8 + lastBits;
 8004322:	7d3b      	ldrb	r3, [r7, #20]
 8004324:	3b01      	subs	r3, #1
 8004326:	b2db      	uxtb	r3, r3
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	b2da      	uxtb	r2, r3
 800432c:	7c7b      	ldrb	r3, [r7, #17]
 800432e:	4413      	add	r3, r2
 8004330:	b2da      	uxtb	r2, r3
 8004332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e004      	b.n	8004342 <RC522_ToCard+0x150>
                }
                else
                {
                    *backLen = n * 8;
 8004338:	7d3b      	ldrb	r3, [r7, #20]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	b2da      	uxtb	r2, r3
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	701a      	strb	r2, [r3, #0]
                }

                if (n == 0)
 8004342:	7d3b      	ldrb	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <RC522_ToCard+0x15a>
                {
                    n = 1;
 8004348:	2301      	movs	r3, #1
 800434a:	753b      	strb	r3, [r7, #20]
                }
                if (n > MAX_LEN)
 800434c:	7d3b      	ldrb	r3, [r7, #20]
 800434e:	2b10      	cmp	r3, #16
 8004350:	d901      	bls.n	8004356 <RC522_ToCard+0x164>
                {
                    n = MAX_LEN;
 8004352:	2310      	movs	r3, #16
 8004354:	753b      	strb	r3, [r7, #20]
                }

                // Read the received data from FIFO
                for (i = 0; i < n; ++i)
 8004356:	2300      	movs	r3, #0
 8004358:	827b      	strh	r3, [r7, #18]
 800435a:	e00a      	b.n	8004372 <RC522_ToCard+0x180>
                {
                    backData[i] = read_RC522(FIFODataReg);
 800435c:	8a7b      	ldrh	r3, [r7, #18]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	18d4      	adds	r4, r2, r3
 8004362:	2009      	movs	r0, #9
 8004364:	f7ff fee0 	bl	8004128 <read_RC522>
 8004368:	4603      	mov	r3, r0
 800436a:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; ++i)
 800436c:	8a7b      	ldrh	r3, [r7, #18]
 800436e:	3301      	adds	r3, #1
 8004370:	827b      	strh	r3, [r7, #18]
 8004372:	7d3b      	ldrb	r3, [r7, #20]
 8004374:	b29b      	uxth	r3, r3
 8004376:	8a7a      	ldrh	r2, [r7, #18]
 8004378:	429a      	cmp	r2, r3
 800437a:	d3ef      	bcc.n	800435c <RC522_ToCard+0x16a>
 800437c:	e001      	b.n	8004382 <RC522_ToCard+0x190>
                }
            }
        }
        else
        {
            status = MI_ERR;
 800437e:	2302      	movs	r3, #2
 8004380:	75fb      	strb	r3, [r7, #23]
        }
    }
    return status;
 8004382:	7dfb      	ldrb	r3, [r7, #23]
}
 8004384:	4618      	mov	r0, r3
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}

0800438c <RC522_Request>:

// Requests to read RFID tag type
uint8_t RC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af02      	add	r7, sp, #8
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint8_t backBits;

    write_RC522(BitFramingReg, 0x07);  // Set bit framing
 8004398:	2107      	movs	r1, #7
 800439a:	200d      	movs	r0, #13
 800439c:	f7ff fe9c 	bl	80040d8 <write_RC522>
    TagType[0] = reqMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	79fa      	ldrb	r2, [r7, #7]
 80043a4:	701a      	strb	r2, [r3, #0]
    status = RC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80043a6:	f107 030e 	add.w	r3, r7, #14
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	6839      	ldr	r1, [r7, #0]
 80043b2:	200c      	movs	r0, #12
 80043b4:	f7ff ff1d 	bl	80041f2 <RC522_ToCard>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (backBits != 0x10))
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <RC522_Request+0x3c>
 80043c2:	7bbb      	ldrb	r3, [r7, #14]
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d001      	beq.n	80043cc <RC522_Request+0x40>
    {
        status = MI_ERR;
 80043c8:	2302      	movs	r3, #2
 80043ca:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <RC522_Anticoll>:

// Performs anti-collision detection to find the tag's serial number
uint8_t RC522_Anticoll(uint8_t *serNum)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af02      	add	r7, sp, #8
 80043dc:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	737b      	strb	r3, [r7, #13]
    uint8_t unLen;

    write_RC522(BitFramingReg, 0x00);  // Set bit framing to default
 80043e2:	2100      	movs	r1, #0
 80043e4:	200d      	movs	r0, #13
 80043e6:	f7ff fe77 	bl	80040d8 <write_RC522>
    serNum[0] = PICC_ANTICOLL;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2293      	movs	r2, #147	@ 0x93
 80043ee:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	2220      	movs	r2, #32
 80043f6:	701a      	strb	r2, [r3, #0]
    status = RC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	200c      	movs	r0, #12
 8004406:	f7ff fef4 	bl	80041f2 <RC522_ToCard>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d118      	bne.n	8004446 <RC522_Anticoll+0x70>
    {
        for (i = 0; i < 4; ++i)
 8004414:	2300      	movs	r3, #0
 8004416:	73bb      	strb	r3, [r7, #14]
 8004418:	e009      	b.n	800442e <RC522_Anticoll+0x58>
        {
            serNumCheck ^= serNum[i];  // Calculate checksum
 800441a:	7bbb      	ldrb	r3, [r7, #14]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	7b7b      	ldrb	r3, [r7, #13]
 8004424:	4053      	eors	r3, r2
 8004426:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; ++i)
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	3301      	adds	r3, #1
 800442c:	73bb      	strb	r3, [r7, #14]
 800442e:	7bbb      	ldrb	r3, [r7, #14]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d9f2      	bls.n	800441a <RC522_Anticoll+0x44>
        }
        if (serNumCheck != serNum[i])
 8004434:	7bbb      	ldrb	r3, [r7, #14]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	7b7a      	ldrb	r2, [r7, #13]
 800443e:	429a      	cmp	r2, r3
 8004440:	d001      	beq.n	8004446 <RC522_Anticoll+0x70>
        {
            status = MI_ERR;
 8004442:	2302      	movs	r3, #2
 8004444:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <__cvt>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	ec57 6b10 	vmov	r6, r7, d0
 8004458:	2f00      	cmp	r7, #0
 800445a:	460c      	mov	r4, r1
 800445c:	4619      	mov	r1, r3
 800445e:	463b      	mov	r3, r7
 8004460:	bfbb      	ittet	lt
 8004462:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004466:	461f      	movlt	r7, r3
 8004468:	2300      	movge	r3, #0
 800446a:	232d      	movlt	r3, #45	@ 0x2d
 800446c:	700b      	strb	r3, [r1, #0]
 800446e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004470:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004474:	4691      	mov	r9, r2
 8004476:	f023 0820 	bic.w	r8, r3, #32
 800447a:	bfbc      	itt	lt
 800447c:	4632      	movlt	r2, r6
 800447e:	4616      	movlt	r6, r2
 8004480:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004484:	d005      	beq.n	8004492 <__cvt+0x42>
 8004486:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800448a:	d100      	bne.n	800448e <__cvt+0x3e>
 800448c:	3401      	adds	r4, #1
 800448e:	2102      	movs	r1, #2
 8004490:	e000      	b.n	8004494 <__cvt+0x44>
 8004492:	2103      	movs	r1, #3
 8004494:	ab03      	add	r3, sp, #12
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	ab02      	add	r3, sp, #8
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	ec47 6b10 	vmov	d0, r6, r7
 80044a0:	4653      	mov	r3, sl
 80044a2:	4622      	mov	r2, r4
 80044a4:	f001 f978 	bl	8005798 <_dtoa_r>
 80044a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80044ac:	4605      	mov	r5, r0
 80044ae:	d119      	bne.n	80044e4 <__cvt+0x94>
 80044b0:	f019 0f01 	tst.w	r9, #1
 80044b4:	d00e      	beq.n	80044d4 <__cvt+0x84>
 80044b6:	eb00 0904 	add.w	r9, r0, r4
 80044ba:	2200      	movs	r2, #0
 80044bc:	2300      	movs	r3, #0
 80044be:	4630      	mov	r0, r6
 80044c0:	4639      	mov	r1, r7
 80044c2:	f7fc fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80044c6:	b108      	cbz	r0, 80044cc <__cvt+0x7c>
 80044c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80044cc:	2230      	movs	r2, #48	@ 0x30
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	454b      	cmp	r3, r9
 80044d2:	d31e      	bcc.n	8004512 <__cvt+0xc2>
 80044d4:	9b03      	ldr	r3, [sp, #12]
 80044d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044d8:	1b5b      	subs	r3, r3, r5
 80044da:	4628      	mov	r0, r5
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	b004      	add	sp, #16
 80044e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80044e8:	eb00 0904 	add.w	r9, r0, r4
 80044ec:	d1e5      	bne.n	80044ba <__cvt+0x6a>
 80044ee:	7803      	ldrb	r3, [r0, #0]
 80044f0:	2b30      	cmp	r3, #48	@ 0x30
 80044f2:	d10a      	bne.n	800450a <__cvt+0xba>
 80044f4:	2200      	movs	r2, #0
 80044f6:	2300      	movs	r3, #0
 80044f8:	4630      	mov	r0, r6
 80044fa:	4639      	mov	r1, r7
 80044fc:	f7fc fb04 	bl	8000b08 <__aeabi_dcmpeq>
 8004500:	b918      	cbnz	r0, 800450a <__cvt+0xba>
 8004502:	f1c4 0401 	rsb	r4, r4, #1
 8004506:	f8ca 4000 	str.w	r4, [sl]
 800450a:	f8da 3000 	ldr.w	r3, [sl]
 800450e:	4499      	add	r9, r3
 8004510:	e7d3      	b.n	80044ba <__cvt+0x6a>
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e7d9      	b.n	80044ce <__cvt+0x7e>

0800451a <__exponent>:
 800451a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451c:	2900      	cmp	r1, #0
 800451e:	bfba      	itte	lt
 8004520:	4249      	neglt	r1, r1
 8004522:	232d      	movlt	r3, #45	@ 0x2d
 8004524:	232b      	movge	r3, #43	@ 0x2b
 8004526:	2909      	cmp	r1, #9
 8004528:	7002      	strb	r2, [r0, #0]
 800452a:	7043      	strb	r3, [r0, #1]
 800452c:	dd29      	ble.n	8004582 <__exponent+0x68>
 800452e:	f10d 0307 	add.w	r3, sp, #7
 8004532:	461d      	mov	r5, r3
 8004534:	270a      	movs	r7, #10
 8004536:	461a      	mov	r2, r3
 8004538:	fbb1 f6f7 	udiv	r6, r1, r7
 800453c:	fb07 1416 	mls	r4, r7, r6, r1
 8004540:	3430      	adds	r4, #48	@ 0x30
 8004542:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004546:	460c      	mov	r4, r1
 8004548:	2c63      	cmp	r4, #99	@ 0x63
 800454a:	f103 33ff 	add.w	r3, r3, #4294967295
 800454e:	4631      	mov	r1, r6
 8004550:	dcf1      	bgt.n	8004536 <__exponent+0x1c>
 8004552:	3130      	adds	r1, #48	@ 0x30
 8004554:	1e94      	subs	r4, r2, #2
 8004556:	f803 1c01 	strb.w	r1, [r3, #-1]
 800455a:	1c41      	adds	r1, r0, #1
 800455c:	4623      	mov	r3, r4
 800455e:	42ab      	cmp	r3, r5
 8004560:	d30a      	bcc.n	8004578 <__exponent+0x5e>
 8004562:	f10d 0309 	add.w	r3, sp, #9
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	42ac      	cmp	r4, r5
 800456a:	bf88      	it	hi
 800456c:	2300      	movhi	r3, #0
 800456e:	3302      	adds	r3, #2
 8004570:	4403      	add	r3, r0
 8004572:	1a18      	subs	r0, r3, r0
 8004574:	b003      	add	sp, #12
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004578:	f813 6b01 	ldrb.w	r6, [r3], #1
 800457c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004580:	e7ed      	b.n	800455e <__exponent+0x44>
 8004582:	2330      	movs	r3, #48	@ 0x30
 8004584:	3130      	adds	r1, #48	@ 0x30
 8004586:	7083      	strb	r3, [r0, #2]
 8004588:	70c1      	strb	r1, [r0, #3]
 800458a:	1d03      	adds	r3, r0, #4
 800458c:	e7f1      	b.n	8004572 <__exponent+0x58>
	...

08004590 <_printf_float>:
 8004590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004594:	b08d      	sub	sp, #52	@ 0x34
 8004596:	460c      	mov	r4, r1
 8004598:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800459c:	4616      	mov	r6, r2
 800459e:	461f      	mov	r7, r3
 80045a0:	4605      	mov	r5, r0
 80045a2:	f000 fff3 	bl	800558c <_localeconv_r>
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb fe80 	bl	80002b0 <strlen>
 80045b0:	2300      	movs	r3, #0
 80045b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80045b4:	f8d8 3000 	ldr.w	r3, [r8]
 80045b8:	9005      	str	r0, [sp, #20]
 80045ba:	3307      	adds	r3, #7
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	f103 0208 	add.w	r2, r3, #8
 80045c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045c8:	f8d4 b000 	ldr.w	fp, [r4]
 80045cc:	f8c8 2000 	str.w	r2, [r8]
 80045d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80045d8:	9307      	str	r3, [sp, #28]
 80045da:	f8cd 8018 	str.w	r8, [sp, #24]
 80045de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80045e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004858 <_printf_float+0x2c8>)
 80045e8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ec:	f7fc fabe 	bl	8000b6c <__aeabi_dcmpun>
 80045f0:	bb70      	cbnz	r0, 8004650 <_printf_float+0xc0>
 80045f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045f6:	4b98      	ldr	r3, [pc, #608]	@ (8004858 <_printf_float+0x2c8>)
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	f7fc fa98 	bl	8000b30 <__aeabi_dcmple>
 8004600:	bb30      	cbnz	r0, 8004650 <_printf_float+0xc0>
 8004602:	2200      	movs	r2, #0
 8004604:	2300      	movs	r3, #0
 8004606:	4640      	mov	r0, r8
 8004608:	4649      	mov	r1, r9
 800460a:	f7fc fa87 	bl	8000b1c <__aeabi_dcmplt>
 800460e:	b110      	cbz	r0, 8004616 <_printf_float+0x86>
 8004610:	232d      	movs	r3, #45	@ 0x2d
 8004612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004616:	4a91      	ldr	r2, [pc, #580]	@ (800485c <_printf_float+0x2cc>)
 8004618:	4b91      	ldr	r3, [pc, #580]	@ (8004860 <_printf_float+0x2d0>)
 800461a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800461e:	bf94      	ite	ls
 8004620:	4690      	movls	r8, r2
 8004622:	4698      	movhi	r8, r3
 8004624:	2303      	movs	r3, #3
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	f02b 0304 	bic.w	r3, fp, #4
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	f04f 0900 	mov.w	r9, #0
 8004632:	9700      	str	r7, [sp, #0]
 8004634:	4633      	mov	r3, r6
 8004636:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004638:	4621      	mov	r1, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f9d2 	bl	80049e4 <_printf_common>
 8004640:	3001      	adds	r0, #1
 8004642:	f040 808d 	bne.w	8004760 <_printf_float+0x1d0>
 8004646:	f04f 30ff 	mov.w	r0, #4294967295
 800464a:	b00d      	add	sp, #52	@ 0x34
 800464c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	4640      	mov	r0, r8
 8004656:	4649      	mov	r1, r9
 8004658:	f7fc fa88 	bl	8000b6c <__aeabi_dcmpun>
 800465c:	b140      	cbz	r0, 8004670 <_printf_float+0xe0>
 800465e:	464b      	mov	r3, r9
 8004660:	2b00      	cmp	r3, #0
 8004662:	bfbc      	itt	lt
 8004664:	232d      	movlt	r3, #45	@ 0x2d
 8004666:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800466a:	4a7e      	ldr	r2, [pc, #504]	@ (8004864 <_printf_float+0x2d4>)
 800466c:	4b7e      	ldr	r3, [pc, #504]	@ (8004868 <_printf_float+0x2d8>)
 800466e:	e7d4      	b.n	800461a <_printf_float+0x8a>
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004676:	9206      	str	r2, [sp, #24]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	d13b      	bne.n	80046f4 <_printf_float+0x164>
 800467c:	2306      	movs	r3, #6
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004684:	2300      	movs	r3, #0
 8004686:	6022      	str	r2, [r4, #0]
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	ab0a      	add	r3, sp, #40	@ 0x28
 800468c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004690:	ab09      	add	r3, sp, #36	@ 0x24
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	6861      	ldr	r1, [r4, #4]
 8004696:	ec49 8b10 	vmov	d0, r8, r9
 800469a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800469e:	4628      	mov	r0, r5
 80046a0:	f7ff fed6 	bl	8004450 <__cvt>
 80046a4:	9b06      	ldr	r3, [sp, #24]
 80046a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80046a8:	2b47      	cmp	r3, #71	@ 0x47
 80046aa:	4680      	mov	r8, r0
 80046ac:	d129      	bne.n	8004702 <_printf_float+0x172>
 80046ae:	1cc8      	adds	r0, r1, #3
 80046b0:	db02      	blt.n	80046b8 <_printf_float+0x128>
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	4299      	cmp	r1, r3
 80046b6:	dd41      	ble.n	800473c <_printf_float+0x1ac>
 80046b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80046bc:	fa5f fa8a 	uxtb.w	sl, sl
 80046c0:	3901      	subs	r1, #1
 80046c2:	4652      	mov	r2, sl
 80046c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80046c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80046ca:	f7ff ff26 	bl	800451a <__exponent>
 80046ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80046d0:	1813      	adds	r3, r2, r0
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	4681      	mov	r9, r0
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	dc02      	bgt.n	80046e0 <_printf_float+0x150>
 80046da:	6822      	ldr	r2, [r4, #0]
 80046dc:	07d2      	lsls	r2, r2, #31
 80046de:	d501      	bpl.n	80046e4 <_printf_float+0x154>
 80046e0:	3301      	adds	r3, #1
 80046e2:	6123      	str	r3, [r4, #16]
 80046e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0a2      	beq.n	8004632 <_printf_float+0xa2>
 80046ec:	232d      	movs	r3, #45	@ 0x2d
 80046ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f2:	e79e      	b.n	8004632 <_printf_float+0xa2>
 80046f4:	9a06      	ldr	r2, [sp, #24]
 80046f6:	2a47      	cmp	r2, #71	@ 0x47
 80046f8:	d1c2      	bne.n	8004680 <_printf_float+0xf0>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1c0      	bne.n	8004680 <_printf_float+0xf0>
 80046fe:	2301      	movs	r3, #1
 8004700:	e7bd      	b.n	800467e <_printf_float+0xee>
 8004702:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004706:	d9db      	bls.n	80046c0 <_printf_float+0x130>
 8004708:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800470c:	d118      	bne.n	8004740 <_printf_float+0x1b0>
 800470e:	2900      	cmp	r1, #0
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	dd0b      	ble.n	800472c <_printf_float+0x19c>
 8004714:	6121      	str	r1, [r4, #16]
 8004716:	b913      	cbnz	r3, 800471e <_printf_float+0x18e>
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	07d0      	lsls	r0, r2, #31
 800471c:	d502      	bpl.n	8004724 <_printf_float+0x194>
 800471e:	3301      	adds	r3, #1
 8004720:	440b      	add	r3, r1
 8004722:	6123      	str	r3, [r4, #16]
 8004724:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004726:	f04f 0900 	mov.w	r9, #0
 800472a:	e7db      	b.n	80046e4 <_printf_float+0x154>
 800472c:	b913      	cbnz	r3, 8004734 <_printf_float+0x1a4>
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	07d2      	lsls	r2, r2, #31
 8004732:	d501      	bpl.n	8004738 <_printf_float+0x1a8>
 8004734:	3302      	adds	r3, #2
 8004736:	e7f4      	b.n	8004722 <_printf_float+0x192>
 8004738:	2301      	movs	r3, #1
 800473a:	e7f2      	b.n	8004722 <_printf_float+0x192>
 800473c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004742:	4299      	cmp	r1, r3
 8004744:	db05      	blt.n	8004752 <_printf_float+0x1c2>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	6121      	str	r1, [r4, #16]
 800474a:	07d8      	lsls	r0, r3, #31
 800474c:	d5ea      	bpl.n	8004724 <_printf_float+0x194>
 800474e:	1c4b      	adds	r3, r1, #1
 8004750:	e7e7      	b.n	8004722 <_printf_float+0x192>
 8004752:	2900      	cmp	r1, #0
 8004754:	bfd4      	ite	le
 8004756:	f1c1 0202 	rsble	r2, r1, #2
 800475a:	2201      	movgt	r2, #1
 800475c:	4413      	add	r3, r2
 800475e:	e7e0      	b.n	8004722 <_printf_float+0x192>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	055a      	lsls	r2, r3, #21
 8004764:	d407      	bmi.n	8004776 <_printf_float+0x1e6>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	4642      	mov	r2, r8
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	d12b      	bne.n	80047cc <_printf_float+0x23c>
 8004774:	e767      	b.n	8004646 <_printf_float+0xb6>
 8004776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800477a:	f240 80dd 	bls.w	8004938 <_printf_float+0x3a8>
 800477e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004782:	2200      	movs	r2, #0
 8004784:	2300      	movs	r3, #0
 8004786:	f7fc f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800478a:	2800      	cmp	r0, #0
 800478c:	d033      	beq.n	80047f6 <_printf_float+0x266>
 800478e:	4a37      	ldr	r2, [pc, #220]	@ (800486c <_printf_float+0x2dc>)
 8004790:	2301      	movs	r3, #1
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f af54 	beq.w	8004646 <_printf_float+0xb6>
 800479e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80047a2:	4543      	cmp	r3, r8
 80047a4:	db02      	blt.n	80047ac <_printf_float+0x21c>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	07d8      	lsls	r0, r3, #31
 80047aa:	d50f      	bpl.n	80047cc <_printf_float+0x23c>
 80047ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b8      	blx	r7
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f af45 	beq.w	8004646 <_printf_float+0xb6>
 80047bc:	f04f 0900 	mov.w	r9, #0
 80047c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80047c4:	f104 0a1a 	add.w	sl, r4, #26
 80047c8:	45c8      	cmp	r8, r9
 80047ca:	dc09      	bgt.n	80047e0 <_printf_float+0x250>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	079b      	lsls	r3, r3, #30
 80047d0:	f100 8103 	bmi.w	80049da <_printf_float+0x44a>
 80047d4:	68e0      	ldr	r0, [r4, #12]
 80047d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047d8:	4298      	cmp	r0, r3
 80047da:	bfb8      	it	lt
 80047dc:	4618      	movlt	r0, r3
 80047de:	e734      	b.n	800464a <_printf_float+0xba>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4652      	mov	r2, sl
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f af2b 	beq.w	8004646 <_printf_float+0xb6>
 80047f0:	f109 0901 	add.w	r9, r9, #1
 80047f4:	e7e8      	b.n	80047c8 <_printf_float+0x238>
 80047f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dc39      	bgt.n	8004870 <_printf_float+0x2e0>
 80047fc:	4a1b      	ldr	r2, [pc, #108]	@ (800486c <_printf_float+0x2dc>)
 80047fe:	2301      	movs	r3, #1
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f af1d 	beq.w	8004646 <_printf_float+0xb6>
 800480c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004810:	ea59 0303 	orrs.w	r3, r9, r3
 8004814:	d102      	bne.n	800481c <_printf_float+0x28c>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	07d9      	lsls	r1, r3, #31
 800481a:	d5d7      	bpl.n	80047cc <_printf_float+0x23c>
 800481c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004820:	4631      	mov	r1, r6
 8004822:	4628      	mov	r0, r5
 8004824:	47b8      	blx	r7
 8004826:	3001      	adds	r0, #1
 8004828:	f43f af0d 	beq.w	8004646 <_printf_float+0xb6>
 800482c:	f04f 0a00 	mov.w	sl, #0
 8004830:	f104 0b1a 	add.w	fp, r4, #26
 8004834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004836:	425b      	negs	r3, r3
 8004838:	4553      	cmp	r3, sl
 800483a:	dc01      	bgt.n	8004840 <_printf_float+0x2b0>
 800483c:	464b      	mov	r3, r9
 800483e:	e793      	b.n	8004768 <_printf_float+0x1d8>
 8004840:	2301      	movs	r3, #1
 8004842:	465a      	mov	r2, fp
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f aefb 	beq.w	8004646 <_printf_float+0xb6>
 8004850:	f10a 0a01 	add.w	sl, sl, #1
 8004854:	e7ee      	b.n	8004834 <_printf_float+0x2a4>
 8004856:	bf00      	nop
 8004858:	7fefffff 	.word	0x7fefffff
 800485c:	08009160 	.word	0x08009160
 8004860:	08009164 	.word	0x08009164
 8004864:	08009168 	.word	0x08009168
 8004868:	0800916c 	.word	0x0800916c
 800486c:	08009170 	.word	0x08009170
 8004870:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004872:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004876:	4553      	cmp	r3, sl
 8004878:	bfa8      	it	ge
 800487a:	4653      	movge	r3, sl
 800487c:	2b00      	cmp	r3, #0
 800487e:	4699      	mov	r9, r3
 8004880:	dc36      	bgt.n	80048f0 <_printf_float+0x360>
 8004882:	f04f 0b00 	mov.w	fp, #0
 8004886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800488a:	f104 021a 	add.w	r2, r4, #26
 800488e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004890:	9306      	str	r3, [sp, #24]
 8004892:	eba3 0309 	sub.w	r3, r3, r9
 8004896:	455b      	cmp	r3, fp
 8004898:	dc31      	bgt.n	80048fe <_printf_float+0x36e>
 800489a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800489c:	459a      	cmp	sl, r3
 800489e:	dc3a      	bgt.n	8004916 <_printf_float+0x386>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	07da      	lsls	r2, r3, #31
 80048a4:	d437      	bmi.n	8004916 <_printf_float+0x386>
 80048a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a8:	ebaa 0903 	sub.w	r9, sl, r3
 80048ac:	9b06      	ldr	r3, [sp, #24]
 80048ae:	ebaa 0303 	sub.w	r3, sl, r3
 80048b2:	4599      	cmp	r9, r3
 80048b4:	bfa8      	it	ge
 80048b6:	4699      	movge	r9, r3
 80048b8:	f1b9 0f00 	cmp.w	r9, #0
 80048bc:	dc33      	bgt.n	8004926 <_printf_float+0x396>
 80048be:	f04f 0800 	mov.w	r8, #0
 80048c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048c6:	f104 0b1a 	add.w	fp, r4, #26
 80048ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048cc:	ebaa 0303 	sub.w	r3, sl, r3
 80048d0:	eba3 0309 	sub.w	r3, r3, r9
 80048d4:	4543      	cmp	r3, r8
 80048d6:	f77f af79 	ble.w	80047cc <_printf_float+0x23c>
 80048da:	2301      	movs	r3, #1
 80048dc:	465a      	mov	r2, fp
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f aeae 	beq.w	8004646 <_printf_float+0xb6>
 80048ea:	f108 0801 	add.w	r8, r8, #1
 80048ee:	e7ec      	b.n	80048ca <_printf_float+0x33a>
 80048f0:	4642      	mov	r2, r8
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b8      	blx	r7
 80048f8:	3001      	adds	r0, #1
 80048fa:	d1c2      	bne.n	8004882 <_printf_float+0x2f2>
 80048fc:	e6a3      	b.n	8004646 <_printf_float+0xb6>
 80048fe:	2301      	movs	r3, #1
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	9206      	str	r2, [sp, #24]
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f ae9c 	beq.w	8004646 <_printf_float+0xb6>
 800490e:	9a06      	ldr	r2, [sp, #24]
 8004910:	f10b 0b01 	add.w	fp, fp, #1
 8004914:	e7bb      	b.n	800488e <_printf_float+0x2fe>
 8004916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800491a:	4631      	mov	r1, r6
 800491c:	4628      	mov	r0, r5
 800491e:	47b8      	blx	r7
 8004920:	3001      	adds	r0, #1
 8004922:	d1c0      	bne.n	80048a6 <_printf_float+0x316>
 8004924:	e68f      	b.n	8004646 <_printf_float+0xb6>
 8004926:	9a06      	ldr	r2, [sp, #24]
 8004928:	464b      	mov	r3, r9
 800492a:	4442      	add	r2, r8
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	d1c3      	bne.n	80048be <_printf_float+0x32e>
 8004936:	e686      	b.n	8004646 <_printf_float+0xb6>
 8004938:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800493c:	f1ba 0f01 	cmp.w	sl, #1
 8004940:	dc01      	bgt.n	8004946 <_printf_float+0x3b6>
 8004942:	07db      	lsls	r3, r3, #31
 8004944:	d536      	bpl.n	80049b4 <_printf_float+0x424>
 8004946:	2301      	movs	r3, #1
 8004948:	4642      	mov	r2, r8
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	47b8      	blx	r7
 8004950:	3001      	adds	r0, #1
 8004952:	f43f ae78 	beq.w	8004646 <_printf_float+0xb6>
 8004956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f ae70 	beq.w	8004646 <_printf_float+0xb6>
 8004966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004972:	f7fc f8c9 	bl	8000b08 <__aeabi_dcmpeq>
 8004976:	b9c0      	cbnz	r0, 80049aa <_printf_float+0x41a>
 8004978:	4653      	mov	r3, sl
 800497a:	f108 0201 	add.w	r2, r8, #1
 800497e:	4631      	mov	r1, r6
 8004980:	4628      	mov	r0, r5
 8004982:	47b8      	blx	r7
 8004984:	3001      	adds	r0, #1
 8004986:	d10c      	bne.n	80049a2 <_printf_float+0x412>
 8004988:	e65d      	b.n	8004646 <_printf_float+0xb6>
 800498a:	2301      	movs	r3, #1
 800498c:	465a      	mov	r2, fp
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae56 	beq.w	8004646 <_printf_float+0xb6>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	45d0      	cmp	r8, sl
 80049a0:	dbf3      	blt.n	800498a <_printf_float+0x3fa>
 80049a2:	464b      	mov	r3, r9
 80049a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80049a8:	e6df      	b.n	800476a <_printf_float+0x1da>
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	f104 0b1a 	add.w	fp, r4, #26
 80049b2:	e7f4      	b.n	800499e <_printf_float+0x40e>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4642      	mov	r2, r8
 80049b8:	e7e1      	b.n	800497e <_printf_float+0x3ee>
 80049ba:	2301      	movs	r3, #1
 80049bc:	464a      	mov	r2, r9
 80049be:	4631      	mov	r1, r6
 80049c0:	4628      	mov	r0, r5
 80049c2:	47b8      	blx	r7
 80049c4:	3001      	adds	r0, #1
 80049c6:	f43f ae3e 	beq.w	8004646 <_printf_float+0xb6>
 80049ca:	f108 0801 	add.w	r8, r8, #1
 80049ce:	68e3      	ldr	r3, [r4, #12]
 80049d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049d2:	1a5b      	subs	r3, r3, r1
 80049d4:	4543      	cmp	r3, r8
 80049d6:	dcf0      	bgt.n	80049ba <_printf_float+0x42a>
 80049d8:	e6fc      	b.n	80047d4 <_printf_float+0x244>
 80049da:	f04f 0800 	mov.w	r8, #0
 80049de:	f104 0919 	add.w	r9, r4, #25
 80049e2:	e7f4      	b.n	80049ce <_printf_float+0x43e>

080049e4 <_printf_common>:
 80049e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	4616      	mov	r6, r2
 80049ea:	4698      	mov	r8, r3
 80049ec:	688a      	ldr	r2, [r1, #8]
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bfb8      	it	lt
 80049f8:	4613      	movlt	r3, r2
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a00:	4607      	mov	r7, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b10a      	cbz	r2, 8004a0a <_printf_common+0x26>
 8004a06:	3301      	adds	r3, #1
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	0699      	lsls	r1, r3, #26
 8004a0e:	bf42      	ittt	mi
 8004a10:	6833      	ldrmi	r3, [r6, #0]
 8004a12:	3302      	addmi	r3, #2
 8004a14:	6033      	strmi	r3, [r6, #0]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d106      	bne.n	8004a2c <_printf_common+0x48>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	6832      	ldr	r2, [r6, #0]
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	dc26      	bgt.n	8004a7a <_printf_common+0x96>
 8004a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	3b00      	subs	r3, #0
 8004a34:	bf18      	it	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	0692      	lsls	r2, r2, #26
 8004a3a:	d42b      	bmi.n	8004a94 <_printf_common+0xb0>
 8004a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a40:	4641      	mov	r1, r8
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c8      	blx	r9
 8004a46:	3001      	adds	r0, #1
 8004a48:	d01e      	beq.n	8004a88 <_printf_common+0xa4>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	f003 0306 	and.w	r3, r3, #6
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	bf02      	ittt	eq
 8004a56:	68e5      	ldreq	r5, [r4, #12]
 8004a58:	6833      	ldreq	r3, [r6, #0]
 8004a5a:	1aed      	subeq	r5, r5, r3
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	bf0c      	ite	eq
 8004a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a64:	2500      	movne	r5, #0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfc4      	itt	gt
 8004a6a:	1a9b      	subgt	r3, r3, r2
 8004a6c:	18ed      	addgt	r5, r5, r3
 8004a6e:	2600      	movs	r6, #0
 8004a70:	341a      	adds	r4, #26
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d11a      	bne.n	8004aac <_printf_common+0xc8>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e008      	b.n	8004a8c <_printf_common+0xa8>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	4641      	mov	r1, r8
 8004a80:	4638      	mov	r0, r7
 8004a82:	47c8      	blx	r9
 8004a84:	3001      	adds	r0, #1
 8004a86:	d103      	bne.n	8004a90 <_printf_common+0xac>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	3501      	adds	r5, #1
 8004a92:	e7c6      	b.n	8004a22 <_printf_common+0x3e>
 8004a94:	18e1      	adds	r1, r4, r3
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	2030      	movs	r0, #48	@ 0x30
 8004a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a9e:	4422      	add	r2, r4
 8004aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	e7c7      	b.n	8004a3c <_printf_common+0x58>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c8      	blx	r9
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0e6      	beq.n	8004a88 <_printf_common+0xa4>
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7d9      	b.n	8004a72 <_printf_common+0x8e>
	...

08004ac0 <_printf_i>:
 8004ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	7e0f      	ldrb	r7, [r1, #24]
 8004ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ac8:	2f78      	cmp	r7, #120	@ 0x78
 8004aca:	4691      	mov	r9, r2
 8004acc:	4680      	mov	r8, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	469a      	mov	sl, r3
 8004ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ad6:	d807      	bhi.n	8004ae8 <_printf_i+0x28>
 8004ad8:	2f62      	cmp	r7, #98	@ 0x62
 8004ada:	d80a      	bhi.n	8004af2 <_printf_i+0x32>
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	f000 80d2 	beq.w	8004c86 <_printf_i+0x1c6>
 8004ae2:	2f58      	cmp	r7, #88	@ 0x58
 8004ae4:	f000 80b9 	beq.w	8004c5a <_printf_i+0x19a>
 8004ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004af0:	e03a      	b.n	8004b68 <_printf_i+0xa8>
 8004af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004af6:	2b15      	cmp	r3, #21
 8004af8:	d8f6      	bhi.n	8004ae8 <_printf_i+0x28>
 8004afa:	a101      	add	r1, pc, #4	@ (adr r1, 8004b00 <_printf_i+0x40>)
 8004afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b00:	08004b59 	.word	0x08004b59
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004ae9 	.word	0x08004ae9
 8004b0c:	08004ae9 	.word	0x08004ae9
 8004b10:	08004ae9 	.word	0x08004ae9
 8004b14:	08004ae9 	.word	0x08004ae9
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004ae9 	.word	0x08004ae9
 8004b20:	08004ae9 	.word	0x08004ae9
 8004b24:	08004ae9 	.word	0x08004ae9
 8004b28:	08004ae9 	.word	0x08004ae9
 8004b2c:	08004c6d 	.word	0x08004c6d
 8004b30:	08004b97 	.word	0x08004b97
 8004b34:	08004c27 	.word	0x08004c27
 8004b38:	08004ae9 	.word	0x08004ae9
 8004b3c:	08004ae9 	.word	0x08004ae9
 8004b40:	08004c8f 	.word	0x08004c8f
 8004b44:	08004ae9 	.word	0x08004ae9
 8004b48:	08004b97 	.word	0x08004b97
 8004b4c:	08004ae9 	.word	0x08004ae9
 8004b50:	08004ae9 	.word	0x08004ae9
 8004b54:	08004c2f 	.word	0x08004c2f
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6032      	str	r2, [r6, #0]
 8004b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e09d      	b.n	8004ca8 <_printf_i+0x1e8>
 8004b6c:	6833      	ldr	r3, [r6, #0]
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	1d19      	adds	r1, r3, #4
 8004b72:	6031      	str	r1, [r6, #0]
 8004b74:	0606      	lsls	r6, r0, #24
 8004b76:	d501      	bpl.n	8004b7c <_printf_i+0xbc>
 8004b78:	681d      	ldr	r5, [r3, #0]
 8004b7a:	e003      	b.n	8004b84 <_printf_i+0xc4>
 8004b7c:	0645      	lsls	r5, r0, #25
 8004b7e:	d5fb      	bpl.n	8004b78 <_printf_i+0xb8>
 8004b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	da03      	bge.n	8004b90 <_printf_i+0xd0>
 8004b88:	232d      	movs	r3, #45	@ 0x2d
 8004b8a:	426d      	negs	r5, r5
 8004b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b90:	4859      	ldr	r0, [pc, #356]	@ (8004cf8 <_printf_i+0x238>)
 8004b92:	230a      	movs	r3, #10
 8004b94:	e011      	b.n	8004bba <_printf_i+0xfa>
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	6833      	ldr	r3, [r6, #0]
 8004b9a:	0608      	lsls	r0, r1, #24
 8004b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ba0:	d402      	bmi.n	8004ba8 <_printf_i+0xe8>
 8004ba2:	0649      	lsls	r1, r1, #25
 8004ba4:	bf48      	it	mi
 8004ba6:	b2ad      	uxthmi	r5, r5
 8004ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004baa:	4853      	ldr	r0, [pc, #332]	@ (8004cf8 <_printf_i+0x238>)
 8004bac:	6033      	str	r3, [r6, #0]
 8004bae:	bf14      	ite	ne
 8004bb0:	230a      	movne	r3, #10
 8004bb2:	2308      	moveq	r3, #8
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bba:	6866      	ldr	r6, [r4, #4]
 8004bbc:	60a6      	str	r6, [r4, #8]
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	bfa2      	ittt	ge
 8004bc2:	6821      	ldrge	r1, [r4, #0]
 8004bc4:	f021 0104 	bicge.w	r1, r1, #4
 8004bc8:	6021      	strge	r1, [r4, #0]
 8004bca:	b90d      	cbnz	r5, 8004bd0 <_printf_i+0x110>
 8004bcc:	2e00      	cmp	r6, #0
 8004bce:	d04b      	beq.n	8004c68 <_printf_i+0x1a8>
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bd6:	fb03 5711 	mls	r7, r3, r1, r5
 8004bda:	5dc7      	ldrb	r7, [r0, r7]
 8004bdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004be0:	462f      	mov	r7, r5
 8004be2:	42bb      	cmp	r3, r7
 8004be4:	460d      	mov	r5, r1
 8004be6:	d9f4      	bls.n	8004bd2 <_printf_i+0x112>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d10b      	bne.n	8004c04 <_printf_i+0x144>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	07df      	lsls	r7, r3, #31
 8004bf0:	d508      	bpl.n	8004c04 <_printf_i+0x144>
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	6861      	ldr	r1, [r4, #4]
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	bfde      	ittt	le
 8004bfa:	2330      	movle	r3, #48	@ 0x30
 8004bfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c04:	1b92      	subs	r2, r2, r6
 8004c06:	6122      	str	r2, [r4, #16]
 8004c08:	f8cd a000 	str.w	sl, [sp]
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	aa03      	add	r2, sp, #12
 8004c10:	4621      	mov	r1, r4
 8004c12:	4640      	mov	r0, r8
 8004c14:	f7ff fee6 	bl	80049e4 <_printf_common>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d14a      	bne.n	8004cb2 <_printf_i+0x1f2>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b004      	add	sp, #16
 8004c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f043 0320 	orr.w	r3, r3, #32
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	4833      	ldr	r0, [pc, #204]	@ (8004cfc <_printf_i+0x23c>)
 8004c30:	2778      	movs	r7, #120	@ 0x78
 8004c32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	6831      	ldr	r1, [r6, #0]
 8004c3a:	061f      	lsls	r7, r3, #24
 8004c3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c40:	d402      	bmi.n	8004c48 <_printf_i+0x188>
 8004c42:	065f      	lsls	r7, r3, #25
 8004c44:	bf48      	it	mi
 8004c46:	b2ad      	uxthmi	r5, r5
 8004c48:	6031      	str	r1, [r6, #0]
 8004c4a:	07d9      	lsls	r1, r3, #31
 8004c4c:	bf44      	itt	mi
 8004c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c52:	6023      	strmi	r3, [r4, #0]
 8004c54:	b11d      	cbz	r5, 8004c5e <_printf_i+0x19e>
 8004c56:	2310      	movs	r3, #16
 8004c58:	e7ac      	b.n	8004bb4 <_printf_i+0xf4>
 8004c5a:	4827      	ldr	r0, [pc, #156]	@ (8004cf8 <_printf_i+0x238>)
 8004c5c:	e7e9      	b.n	8004c32 <_printf_i+0x172>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	f023 0320 	bic.w	r3, r3, #32
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	e7f6      	b.n	8004c56 <_printf_i+0x196>
 8004c68:	4616      	mov	r6, r2
 8004c6a:	e7bd      	b.n	8004be8 <_printf_i+0x128>
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	6825      	ldr	r5, [r4, #0]
 8004c70:	6961      	ldr	r1, [r4, #20]
 8004c72:	1d18      	adds	r0, r3, #4
 8004c74:	6030      	str	r0, [r6, #0]
 8004c76:	062e      	lsls	r6, r5, #24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	d501      	bpl.n	8004c80 <_printf_i+0x1c0>
 8004c7c:	6019      	str	r1, [r3, #0]
 8004c7e:	e002      	b.n	8004c86 <_printf_i+0x1c6>
 8004c80:	0668      	lsls	r0, r5, #25
 8004c82:	d5fb      	bpl.n	8004c7c <_printf_i+0x1bc>
 8004c84:	8019      	strh	r1, [r3, #0]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4616      	mov	r6, r2
 8004c8c:	e7bc      	b.n	8004c08 <_printf_i+0x148>
 8004c8e:	6833      	ldr	r3, [r6, #0]
 8004c90:	1d1a      	adds	r2, r3, #4
 8004c92:	6032      	str	r2, [r6, #0]
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	6862      	ldr	r2, [r4, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7fb fab8 	bl	8000210 <memchr>
 8004ca0:	b108      	cbz	r0, 8004ca6 <_printf_i+0x1e6>
 8004ca2:	1b80      	subs	r0, r0, r6
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb0:	e7aa      	b.n	8004c08 <_printf_i+0x148>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d0ad      	beq.n	8004c1c <_printf_i+0x15c>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	079b      	lsls	r3, r3, #30
 8004cc4:	d413      	bmi.n	8004cee <_printf_i+0x22e>
 8004cc6:	68e0      	ldr	r0, [r4, #12]
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	bfb8      	it	lt
 8004cce:	4618      	movlt	r0, r3
 8004cd0:	e7a6      	b.n	8004c20 <_printf_i+0x160>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d09d      	beq.n	8004c1c <_printf_i+0x15c>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	9903      	ldr	r1, [sp, #12]
 8004ce6:	1a5b      	subs	r3, r3, r1
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	dcf2      	bgt.n	8004cd2 <_printf_i+0x212>
 8004cec:	e7eb      	b.n	8004cc6 <_printf_i+0x206>
 8004cee:	2500      	movs	r5, #0
 8004cf0:	f104 0619 	add.w	r6, r4, #25
 8004cf4:	e7f5      	b.n	8004ce2 <_printf_i+0x222>
 8004cf6:	bf00      	nop
 8004cf8:	08009172 	.word	0x08009172
 8004cfc:	08009183 	.word	0x08009183

08004d00 <_scanf_float>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	b087      	sub	sp, #28
 8004d06:	4617      	mov	r7, r2
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	688b      	ldr	r3, [r1, #8]
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d12:	bf81      	itttt	hi
 8004d14:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d18:	eb03 0b05 	addhi.w	fp, r3, r5
 8004d1c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004d20:	608b      	strhi	r3, [r1, #8]
 8004d22:	680b      	ldr	r3, [r1, #0]
 8004d24:	460a      	mov	r2, r1
 8004d26:	f04f 0500 	mov.w	r5, #0
 8004d2a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004d2e:	f842 3b1c 	str.w	r3, [r2], #28
 8004d32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d36:	4680      	mov	r8, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	bf98      	it	ls
 8004d3c:	f04f 0b00 	movls.w	fp, #0
 8004d40:	9201      	str	r2, [sp, #4]
 8004d42:	4616      	mov	r6, r2
 8004d44:	46aa      	mov	sl, r5
 8004d46:	46a9      	mov	r9, r5
 8004d48:	9502      	str	r5, [sp, #8]
 8004d4a:	68a2      	ldr	r2, [r4, #8]
 8004d4c:	b152      	cbz	r2, 8004d64 <_scanf_float+0x64>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b4e      	cmp	r3, #78	@ 0x4e
 8004d54:	d864      	bhi.n	8004e20 <_scanf_float+0x120>
 8004d56:	2b40      	cmp	r3, #64	@ 0x40
 8004d58:	d83c      	bhi.n	8004dd4 <_scanf_float+0xd4>
 8004d5a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004d5e:	b2c8      	uxtb	r0, r1
 8004d60:	280e      	cmp	r0, #14
 8004d62:	d93a      	bls.n	8004dda <_scanf_float+0xda>
 8004d64:	f1b9 0f00 	cmp.w	r9, #0
 8004d68:	d003      	beq.n	8004d72 <_scanf_float+0x72>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d76:	f1ba 0f01 	cmp.w	sl, #1
 8004d7a:	f200 8117 	bhi.w	8004fac <_scanf_float+0x2ac>
 8004d7e:	9b01      	ldr	r3, [sp, #4]
 8004d80:	429e      	cmp	r6, r3
 8004d82:	f200 8108 	bhi.w	8004f96 <_scanf_float+0x296>
 8004d86:	2001      	movs	r0, #1
 8004d88:	b007      	add	sp, #28
 8004d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004d92:	2a0d      	cmp	r2, #13
 8004d94:	d8e6      	bhi.n	8004d64 <_scanf_float+0x64>
 8004d96:	a101      	add	r1, pc, #4	@ (adr r1, 8004d9c <_scanf_float+0x9c>)
 8004d98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d9c:	08004ee3 	.word	0x08004ee3
 8004da0:	08004d65 	.word	0x08004d65
 8004da4:	08004d65 	.word	0x08004d65
 8004da8:	08004d65 	.word	0x08004d65
 8004dac:	08004f43 	.word	0x08004f43
 8004db0:	08004f1b 	.word	0x08004f1b
 8004db4:	08004d65 	.word	0x08004d65
 8004db8:	08004d65 	.word	0x08004d65
 8004dbc:	08004ef1 	.word	0x08004ef1
 8004dc0:	08004d65 	.word	0x08004d65
 8004dc4:	08004d65 	.word	0x08004d65
 8004dc8:	08004d65 	.word	0x08004d65
 8004dcc:	08004d65 	.word	0x08004d65
 8004dd0:	08004ea9 	.word	0x08004ea9
 8004dd4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004dd8:	e7db      	b.n	8004d92 <_scanf_float+0x92>
 8004dda:	290e      	cmp	r1, #14
 8004ddc:	d8c2      	bhi.n	8004d64 <_scanf_float+0x64>
 8004dde:	a001      	add	r0, pc, #4	@ (adr r0, 8004de4 <_scanf_float+0xe4>)
 8004de0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004de4:	08004e99 	.word	0x08004e99
 8004de8:	08004d65 	.word	0x08004d65
 8004dec:	08004e99 	.word	0x08004e99
 8004df0:	08004f2f 	.word	0x08004f2f
 8004df4:	08004d65 	.word	0x08004d65
 8004df8:	08004e41 	.word	0x08004e41
 8004dfc:	08004e7f 	.word	0x08004e7f
 8004e00:	08004e7f 	.word	0x08004e7f
 8004e04:	08004e7f 	.word	0x08004e7f
 8004e08:	08004e7f 	.word	0x08004e7f
 8004e0c:	08004e7f 	.word	0x08004e7f
 8004e10:	08004e7f 	.word	0x08004e7f
 8004e14:	08004e7f 	.word	0x08004e7f
 8004e18:	08004e7f 	.word	0x08004e7f
 8004e1c:	08004e7f 	.word	0x08004e7f
 8004e20:	2b6e      	cmp	r3, #110	@ 0x6e
 8004e22:	d809      	bhi.n	8004e38 <_scanf_float+0x138>
 8004e24:	2b60      	cmp	r3, #96	@ 0x60
 8004e26:	d8b2      	bhi.n	8004d8e <_scanf_float+0x8e>
 8004e28:	2b54      	cmp	r3, #84	@ 0x54
 8004e2a:	d07b      	beq.n	8004f24 <_scanf_float+0x224>
 8004e2c:	2b59      	cmp	r3, #89	@ 0x59
 8004e2e:	d199      	bne.n	8004d64 <_scanf_float+0x64>
 8004e30:	2d07      	cmp	r5, #7
 8004e32:	d197      	bne.n	8004d64 <_scanf_float+0x64>
 8004e34:	2508      	movs	r5, #8
 8004e36:	e02c      	b.n	8004e92 <_scanf_float+0x192>
 8004e38:	2b74      	cmp	r3, #116	@ 0x74
 8004e3a:	d073      	beq.n	8004f24 <_scanf_float+0x224>
 8004e3c:	2b79      	cmp	r3, #121	@ 0x79
 8004e3e:	e7f6      	b.n	8004e2e <_scanf_float+0x12e>
 8004e40:	6821      	ldr	r1, [r4, #0]
 8004e42:	05c8      	lsls	r0, r1, #23
 8004e44:	d51b      	bpl.n	8004e7e <_scanf_float+0x17e>
 8004e46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004e4a:	6021      	str	r1, [r4, #0]
 8004e4c:	f109 0901 	add.w	r9, r9, #1
 8004e50:	f1bb 0f00 	cmp.w	fp, #0
 8004e54:	d003      	beq.n	8004e5e <_scanf_float+0x15e>
 8004e56:	3201      	adds	r2, #1
 8004e58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e5c:	60a2      	str	r2, [r4, #8]
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60a3      	str	r3, [r4, #8]
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	3301      	adds	r3, #1
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	f340 8087 	ble.w	8004f84 <_scanf_float+0x284>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	e765      	b.n	8004d4a <_scanf_float+0x4a>
 8004e7e:	eb1a 0105 	adds.w	r1, sl, r5
 8004e82:	f47f af6f 	bne.w	8004d64 <_scanf_float+0x64>
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	460d      	mov	r5, r1
 8004e90:	468a      	mov	sl, r1
 8004e92:	f806 3b01 	strb.w	r3, [r6], #1
 8004e96:	e7e2      	b.n	8004e5e <_scanf_float+0x15e>
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	0610      	lsls	r0, r2, #24
 8004e9c:	f57f af62 	bpl.w	8004d64 <_scanf_float+0x64>
 8004ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ea4:	6022      	str	r2, [r4, #0]
 8004ea6:	e7f4      	b.n	8004e92 <_scanf_float+0x192>
 8004ea8:	f1ba 0f00 	cmp.w	sl, #0
 8004eac:	d10e      	bne.n	8004ecc <_scanf_float+0x1cc>
 8004eae:	f1b9 0f00 	cmp.w	r9, #0
 8004eb2:	d10e      	bne.n	8004ed2 <_scanf_float+0x1d2>
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004eba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ebe:	d108      	bne.n	8004ed2 <_scanf_float+0x1d2>
 8004ec0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ec4:	6022      	str	r2, [r4, #0]
 8004ec6:	f04f 0a01 	mov.w	sl, #1
 8004eca:	e7e2      	b.n	8004e92 <_scanf_float+0x192>
 8004ecc:	f1ba 0f02 	cmp.w	sl, #2
 8004ed0:	d055      	beq.n	8004f7e <_scanf_float+0x27e>
 8004ed2:	2d01      	cmp	r5, #1
 8004ed4:	d002      	beq.n	8004edc <_scanf_float+0x1dc>
 8004ed6:	2d04      	cmp	r5, #4
 8004ed8:	f47f af44 	bne.w	8004d64 <_scanf_float+0x64>
 8004edc:	3501      	adds	r5, #1
 8004ede:	b2ed      	uxtb	r5, r5
 8004ee0:	e7d7      	b.n	8004e92 <_scanf_float+0x192>
 8004ee2:	f1ba 0f01 	cmp.w	sl, #1
 8004ee6:	f47f af3d 	bne.w	8004d64 <_scanf_float+0x64>
 8004eea:	f04f 0a02 	mov.w	sl, #2
 8004eee:	e7d0      	b.n	8004e92 <_scanf_float+0x192>
 8004ef0:	b97d      	cbnz	r5, 8004f12 <_scanf_float+0x212>
 8004ef2:	f1b9 0f00 	cmp.w	r9, #0
 8004ef6:	f47f af38 	bne.w	8004d6a <_scanf_float+0x6a>
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f04:	f040 8108 	bne.w	8005118 <_scanf_float+0x418>
 8004f08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	2501      	movs	r5, #1
 8004f10:	e7bf      	b.n	8004e92 <_scanf_float+0x192>
 8004f12:	2d03      	cmp	r5, #3
 8004f14:	d0e2      	beq.n	8004edc <_scanf_float+0x1dc>
 8004f16:	2d05      	cmp	r5, #5
 8004f18:	e7de      	b.n	8004ed8 <_scanf_float+0x1d8>
 8004f1a:	2d02      	cmp	r5, #2
 8004f1c:	f47f af22 	bne.w	8004d64 <_scanf_float+0x64>
 8004f20:	2503      	movs	r5, #3
 8004f22:	e7b6      	b.n	8004e92 <_scanf_float+0x192>
 8004f24:	2d06      	cmp	r5, #6
 8004f26:	f47f af1d 	bne.w	8004d64 <_scanf_float+0x64>
 8004f2a:	2507      	movs	r5, #7
 8004f2c:	e7b1      	b.n	8004e92 <_scanf_float+0x192>
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	0591      	lsls	r1, r2, #22
 8004f32:	f57f af17 	bpl.w	8004d64 <_scanf_float+0x64>
 8004f36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004f3a:	6022      	str	r2, [r4, #0]
 8004f3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f40:	e7a7      	b.n	8004e92 <_scanf_float+0x192>
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004f48:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004f4c:	d006      	beq.n	8004f5c <_scanf_float+0x25c>
 8004f4e:	0550      	lsls	r0, r2, #21
 8004f50:	f57f af08 	bpl.w	8004d64 <_scanf_float+0x64>
 8004f54:	f1b9 0f00 	cmp.w	r9, #0
 8004f58:	f000 80de 	beq.w	8005118 <_scanf_float+0x418>
 8004f5c:	0591      	lsls	r1, r2, #22
 8004f5e:	bf58      	it	pl
 8004f60:	9902      	ldrpl	r1, [sp, #8]
 8004f62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f66:	bf58      	it	pl
 8004f68:	eba9 0101 	subpl.w	r1, r9, r1
 8004f6c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004f70:	bf58      	it	pl
 8004f72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f76:	6022      	str	r2, [r4, #0]
 8004f78:	f04f 0900 	mov.w	r9, #0
 8004f7c:	e789      	b.n	8004e92 <_scanf_float+0x192>
 8004f7e:	f04f 0a03 	mov.w	sl, #3
 8004f82:	e786      	b.n	8004e92 <_scanf_float+0x192>
 8004f84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004f88:	4639      	mov	r1, r7
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	4798      	blx	r3
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f43f aedb 	beq.w	8004d4a <_scanf_float+0x4a>
 8004f94:	e6e6      	b.n	8004d64 <_scanf_float+0x64>
 8004f96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f9e:	463a      	mov	r2, r7
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4798      	blx	r3
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	e6e8      	b.n	8004d7e <_scanf_float+0x7e>
 8004fac:	1e6b      	subs	r3, r5, #1
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d824      	bhi.n	8004ffc <_scanf_float+0x2fc>
 8004fb2:	2d02      	cmp	r5, #2
 8004fb4:	d836      	bhi.n	8005024 <_scanf_float+0x324>
 8004fb6:	9b01      	ldr	r3, [sp, #4]
 8004fb8:	429e      	cmp	r6, r3
 8004fba:	f67f aee4 	bls.w	8004d86 <_scanf_float+0x86>
 8004fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4798      	blx	r3
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	e7f0      	b.n	8004fb6 <_scanf_float+0x2b6>
 8004fd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fd8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004fdc:	463a      	mov	r2, r7
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4798      	blx	r3
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fec:	fa5f fa8a 	uxtb.w	sl, sl
 8004ff0:	f1ba 0f02 	cmp.w	sl, #2
 8004ff4:	d1ee      	bne.n	8004fd4 <_scanf_float+0x2d4>
 8004ff6:	3d03      	subs	r5, #3
 8004ff8:	b2ed      	uxtb	r5, r5
 8004ffa:	1b76      	subs	r6, r6, r5
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	05da      	lsls	r2, r3, #23
 8005000:	d530      	bpl.n	8005064 <_scanf_float+0x364>
 8005002:	055b      	lsls	r3, r3, #21
 8005004:	d511      	bpl.n	800502a <_scanf_float+0x32a>
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	429e      	cmp	r6, r3
 800500a:	f67f aebc 	bls.w	8004d86 <_scanf_float+0x86>
 800500e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005016:	463a      	mov	r2, r7
 8005018:	4640      	mov	r0, r8
 800501a:	4798      	blx	r3
 800501c:	6923      	ldr	r3, [r4, #16]
 800501e:	3b01      	subs	r3, #1
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	e7f0      	b.n	8005006 <_scanf_float+0x306>
 8005024:	46aa      	mov	sl, r5
 8005026:	46b3      	mov	fp, r6
 8005028:	e7de      	b.n	8004fe8 <_scanf_float+0x2e8>
 800502a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	2965      	cmp	r1, #101	@ 0x65
 8005032:	f103 33ff 	add.w	r3, r3, #4294967295
 8005036:	f106 35ff 	add.w	r5, r6, #4294967295
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	d00c      	beq.n	8005058 <_scanf_float+0x358>
 800503e:	2945      	cmp	r1, #69	@ 0x45
 8005040:	d00a      	beq.n	8005058 <_scanf_float+0x358>
 8005042:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005046:	463a      	mov	r2, r7
 8005048:	4640      	mov	r0, r8
 800504a:	4798      	blx	r3
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005052:	3b01      	subs	r3, #1
 8005054:	1eb5      	subs	r5, r6, #2
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800505c:	463a      	mov	r2, r7
 800505e:	4640      	mov	r0, r8
 8005060:	4798      	blx	r3
 8005062:	462e      	mov	r6, r5
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	f012 0210 	ands.w	r2, r2, #16
 800506a:	d001      	beq.n	8005070 <_scanf_float+0x370>
 800506c:	2000      	movs	r0, #0
 800506e:	e68b      	b.n	8004d88 <_scanf_float+0x88>
 8005070:	7032      	strb	r2, [r6, #0]
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507c:	d11c      	bne.n	80050b8 <_scanf_float+0x3b8>
 800507e:	9b02      	ldr	r3, [sp, #8]
 8005080:	454b      	cmp	r3, r9
 8005082:	eba3 0209 	sub.w	r2, r3, r9
 8005086:	d123      	bne.n	80050d0 <_scanf_float+0x3d0>
 8005088:	9901      	ldr	r1, [sp, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	4640      	mov	r0, r8
 800508e:	f002 fcfb 	bl	8007a88 <_strtod_r>
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	6821      	ldr	r1, [r4, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f011 0f02 	tst.w	r1, #2
 800509c:	ec57 6b10 	vmov	r6, r7, d0
 80050a0:	f103 0204 	add.w	r2, r3, #4
 80050a4:	d01f      	beq.n	80050e6 <_scanf_float+0x3e6>
 80050a6:	9903      	ldr	r1, [sp, #12]
 80050a8:	600a      	str	r2, [r1, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	e9c3 6700 	strd	r6, r7, [r3]
 80050b0:	68e3      	ldr	r3, [r4, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60e3      	str	r3, [r4, #12]
 80050b6:	e7d9      	b.n	800506c <_scanf_float+0x36c>
 80050b8:	9b04      	ldr	r3, [sp, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0e4      	beq.n	8005088 <_scanf_float+0x388>
 80050be:	9905      	ldr	r1, [sp, #20]
 80050c0:	230a      	movs	r3, #10
 80050c2:	3101      	adds	r1, #1
 80050c4:	4640      	mov	r0, r8
 80050c6:	f002 fd5f 	bl	8007b88 <_strtol_r>
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	9e05      	ldr	r6, [sp, #20]
 80050ce:	1ac2      	subs	r2, r0, r3
 80050d0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80050d4:	429e      	cmp	r6, r3
 80050d6:	bf28      	it	cs
 80050d8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80050dc:	4910      	ldr	r1, [pc, #64]	@ (8005120 <_scanf_float+0x420>)
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f954 	bl	800538c <siprintf>
 80050e4:	e7d0      	b.n	8005088 <_scanf_float+0x388>
 80050e6:	f011 0f04 	tst.w	r1, #4
 80050ea:	9903      	ldr	r1, [sp, #12]
 80050ec:	600a      	str	r2, [r1, #0]
 80050ee:	d1dc      	bne.n	80050aa <_scanf_float+0x3aa>
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	4632      	mov	r2, r6
 80050f4:	463b      	mov	r3, r7
 80050f6:	4630      	mov	r0, r6
 80050f8:	4639      	mov	r1, r7
 80050fa:	f7fb fd37 	bl	8000b6c <__aeabi_dcmpun>
 80050fe:	b128      	cbz	r0, 800510c <_scanf_float+0x40c>
 8005100:	4808      	ldr	r0, [pc, #32]	@ (8005124 <_scanf_float+0x424>)
 8005102:	f000 fabb 	bl	800567c <nanf>
 8005106:	ed85 0a00 	vstr	s0, [r5]
 800510a:	e7d1      	b.n	80050b0 <_scanf_float+0x3b0>
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	f7fb fd8a 	bl	8000c28 <__aeabi_d2f>
 8005114:	6028      	str	r0, [r5, #0]
 8005116:	e7cb      	b.n	80050b0 <_scanf_float+0x3b0>
 8005118:	f04f 0900 	mov.w	r9, #0
 800511c:	e629      	b.n	8004d72 <_scanf_float+0x72>
 800511e:	bf00      	nop
 8005120:	08009194 	.word	0x08009194
 8005124:	0800952d 	.word	0x0800952d

08005128 <std>:
 8005128:	2300      	movs	r3, #0
 800512a:	b510      	push	{r4, lr}
 800512c:	4604      	mov	r4, r0
 800512e:	e9c0 3300 	strd	r3, r3, [r0]
 8005132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005136:	6083      	str	r3, [r0, #8]
 8005138:	8181      	strh	r1, [r0, #12]
 800513a:	6643      	str	r3, [r0, #100]	@ 0x64
 800513c:	81c2      	strh	r2, [r0, #14]
 800513e:	6183      	str	r3, [r0, #24]
 8005140:	4619      	mov	r1, r3
 8005142:	2208      	movs	r2, #8
 8005144:	305c      	adds	r0, #92	@ 0x5c
 8005146:	f000 fa19 	bl	800557c <memset>
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <std+0x58>)
 800514c:	6263      	str	r3, [r4, #36]	@ 0x24
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <std+0x5c>)
 8005150:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005152:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <std+0x60>)
 8005154:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <std+0x64>)
 8005158:	6323      	str	r3, [r4, #48]	@ 0x30
 800515a:	4b0d      	ldr	r3, [pc, #52]	@ (8005190 <std+0x68>)
 800515c:	6224      	str	r4, [r4, #32]
 800515e:	429c      	cmp	r4, r3
 8005160:	d006      	beq.n	8005170 <std+0x48>
 8005162:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005166:	4294      	cmp	r4, r2
 8005168:	d002      	beq.n	8005170 <std+0x48>
 800516a:	33d0      	adds	r3, #208	@ 0xd0
 800516c:	429c      	cmp	r4, r3
 800516e:	d105      	bne.n	800517c <std+0x54>
 8005170:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	f000 ba7c 	b.w	8005674 <__retarget_lock_init_recursive>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	bf00      	nop
 8005180:	080053cd 	.word	0x080053cd
 8005184:	080053ef 	.word	0x080053ef
 8005188:	08005427 	.word	0x08005427
 800518c:	0800544b 	.word	0x0800544b
 8005190:	200004f0 	.word	0x200004f0

08005194 <stdio_exit_handler>:
 8005194:	4a02      	ldr	r2, [pc, #8]	@ (80051a0 <stdio_exit_handler+0xc>)
 8005196:	4903      	ldr	r1, [pc, #12]	@ (80051a4 <stdio_exit_handler+0x10>)
 8005198:	4803      	ldr	r0, [pc, #12]	@ (80051a8 <stdio_exit_handler+0x14>)
 800519a:	f000 b869 	b.w	8005270 <_fwalk_sglue>
 800519e:	bf00      	nop
 80051a0:	2000000c 	.word	0x2000000c
 80051a4:	080081c9 	.word	0x080081c9
 80051a8:	2000001c 	.word	0x2000001c

080051ac <cleanup_stdio>:
 80051ac:	6841      	ldr	r1, [r0, #4]
 80051ae:	4b0c      	ldr	r3, [pc, #48]	@ (80051e0 <cleanup_stdio+0x34>)
 80051b0:	4299      	cmp	r1, r3
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	d001      	beq.n	80051bc <cleanup_stdio+0x10>
 80051b8:	f003 f806 	bl	80081c8 <_fflush_r>
 80051bc:	68a1      	ldr	r1, [r4, #8]
 80051be:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <cleanup_stdio+0x38>)
 80051c0:	4299      	cmp	r1, r3
 80051c2:	d002      	beq.n	80051ca <cleanup_stdio+0x1e>
 80051c4:	4620      	mov	r0, r4
 80051c6:	f002 ffff 	bl	80081c8 <_fflush_r>
 80051ca:	68e1      	ldr	r1, [r4, #12]
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <cleanup_stdio+0x3c>)
 80051ce:	4299      	cmp	r1, r3
 80051d0:	d004      	beq.n	80051dc <cleanup_stdio+0x30>
 80051d2:	4620      	mov	r0, r4
 80051d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d8:	f002 bff6 	b.w	80081c8 <_fflush_r>
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	bf00      	nop
 80051e0:	200004f0 	.word	0x200004f0
 80051e4:	20000558 	.word	0x20000558
 80051e8:	200005c0 	.word	0x200005c0

080051ec <global_stdio_init.part.0>:
 80051ec:	b510      	push	{r4, lr}
 80051ee:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <global_stdio_init.part.0+0x30>)
 80051f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005220 <global_stdio_init.part.0+0x34>)
 80051f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005224 <global_stdio_init.part.0+0x38>)
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	4620      	mov	r0, r4
 80051f8:	2200      	movs	r2, #0
 80051fa:	2104      	movs	r1, #4
 80051fc:	f7ff ff94 	bl	8005128 <std>
 8005200:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005204:	2201      	movs	r2, #1
 8005206:	2109      	movs	r1, #9
 8005208:	f7ff ff8e 	bl	8005128 <std>
 800520c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005210:	2202      	movs	r2, #2
 8005212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005216:	2112      	movs	r1, #18
 8005218:	f7ff bf86 	b.w	8005128 <std>
 800521c:	20000628 	.word	0x20000628
 8005220:	200004f0 	.word	0x200004f0
 8005224:	08005195 	.word	0x08005195

08005228 <__sfp_lock_acquire>:
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <__sfp_lock_acquire+0x8>)
 800522a:	f000 ba24 	b.w	8005676 <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20000631 	.word	0x20000631

08005234 <__sfp_lock_release>:
 8005234:	4801      	ldr	r0, [pc, #4]	@ (800523c <__sfp_lock_release+0x8>)
 8005236:	f000 ba1f 	b.w	8005678 <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20000631 	.word	0x20000631

08005240 <__sinit>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	f7ff fff0 	bl	8005228 <__sfp_lock_acquire>
 8005248:	6a23      	ldr	r3, [r4, #32]
 800524a:	b11b      	cbz	r3, 8005254 <__sinit+0x14>
 800524c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005250:	f7ff bff0 	b.w	8005234 <__sfp_lock_release>
 8005254:	4b04      	ldr	r3, [pc, #16]	@ (8005268 <__sinit+0x28>)
 8005256:	6223      	str	r3, [r4, #32]
 8005258:	4b04      	ldr	r3, [pc, #16]	@ (800526c <__sinit+0x2c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f5      	bne.n	800524c <__sinit+0xc>
 8005260:	f7ff ffc4 	bl	80051ec <global_stdio_init.part.0>
 8005264:	e7f2      	b.n	800524c <__sinit+0xc>
 8005266:	bf00      	nop
 8005268:	080051ad 	.word	0x080051ad
 800526c:	20000628 	.word	0x20000628

08005270 <_fwalk_sglue>:
 8005270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005274:	4607      	mov	r7, r0
 8005276:	4688      	mov	r8, r1
 8005278:	4614      	mov	r4, r2
 800527a:	2600      	movs	r6, #0
 800527c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005280:	f1b9 0901 	subs.w	r9, r9, #1
 8005284:	d505      	bpl.n	8005292 <_fwalk_sglue+0x22>
 8005286:	6824      	ldr	r4, [r4, #0]
 8005288:	2c00      	cmp	r4, #0
 800528a:	d1f7      	bne.n	800527c <_fwalk_sglue+0xc>
 800528c:	4630      	mov	r0, r6
 800528e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005292:	89ab      	ldrh	r3, [r5, #12]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d907      	bls.n	80052a8 <_fwalk_sglue+0x38>
 8005298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800529c:	3301      	adds	r3, #1
 800529e:	d003      	beq.n	80052a8 <_fwalk_sglue+0x38>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4638      	mov	r0, r7
 80052a4:	47c0      	blx	r8
 80052a6:	4306      	orrs	r6, r0
 80052a8:	3568      	adds	r5, #104	@ 0x68
 80052aa:	e7e9      	b.n	8005280 <_fwalk_sglue+0x10>

080052ac <iprintf>:
 80052ac:	b40f      	push	{r0, r1, r2, r3}
 80052ae:	b507      	push	{r0, r1, r2, lr}
 80052b0:	4906      	ldr	r1, [pc, #24]	@ (80052cc <iprintf+0x20>)
 80052b2:	ab04      	add	r3, sp, #16
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ba:	6881      	ldr	r1, [r0, #8]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	f002 fde7 	bl	8007e90 <_vfiprintf_r>
 80052c2:	b003      	add	sp, #12
 80052c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80052c8:	b004      	add	sp, #16
 80052ca:	4770      	bx	lr
 80052cc:	20000018 	.word	0x20000018

080052d0 <_puts_r>:
 80052d0:	6a03      	ldr	r3, [r0, #32]
 80052d2:	b570      	push	{r4, r5, r6, lr}
 80052d4:	6884      	ldr	r4, [r0, #8]
 80052d6:	4605      	mov	r5, r0
 80052d8:	460e      	mov	r6, r1
 80052da:	b90b      	cbnz	r3, 80052e0 <_puts_r+0x10>
 80052dc:	f7ff ffb0 	bl	8005240 <__sinit>
 80052e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052e2:	07db      	lsls	r3, r3, #31
 80052e4:	d405      	bmi.n	80052f2 <_puts_r+0x22>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	0598      	lsls	r0, r3, #22
 80052ea:	d402      	bmi.n	80052f2 <_puts_r+0x22>
 80052ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ee:	f000 f9c2 	bl	8005676 <__retarget_lock_acquire_recursive>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	0719      	lsls	r1, r3, #28
 80052f6:	d502      	bpl.n	80052fe <_puts_r+0x2e>
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d135      	bne.n	800536a <_puts_r+0x9a>
 80052fe:	4621      	mov	r1, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 f8e5 	bl	80054d0 <__swsetup_r>
 8005306:	b380      	cbz	r0, 800536a <_puts_r+0x9a>
 8005308:	f04f 35ff 	mov.w	r5, #4294967295
 800530c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800530e:	07da      	lsls	r2, r3, #31
 8005310:	d405      	bmi.n	800531e <_puts_r+0x4e>
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	059b      	lsls	r3, r3, #22
 8005316:	d402      	bmi.n	800531e <_puts_r+0x4e>
 8005318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800531a:	f000 f9ad 	bl	8005678 <__retarget_lock_release_recursive>
 800531e:	4628      	mov	r0, r5
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	2b00      	cmp	r3, #0
 8005324:	da04      	bge.n	8005330 <_puts_r+0x60>
 8005326:	69a2      	ldr	r2, [r4, #24]
 8005328:	429a      	cmp	r2, r3
 800532a:	dc17      	bgt.n	800535c <_puts_r+0x8c>
 800532c:	290a      	cmp	r1, #10
 800532e:	d015      	beq.n	800535c <_puts_r+0x8c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	7019      	strb	r1, [r3, #0]
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800533e:	3b01      	subs	r3, #1
 8005340:	60a3      	str	r3, [r4, #8]
 8005342:	2900      	cmp	r1, #0
 8005344:	d1ed      	bne.n	8005322 <_puts_r+0x52>
 8005346:	2b00      	cmp	r3, #0
 8005348:	da11      	bge.n	800536e <_puts_r+0x9e>
 800534a:	4622      	mov	r2, r4
 800534c:	210a      	movs	r1, #10
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f87f 	bl	8005452 <__swbuf_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d0d7      	beq.n	8005308 <_puts_r+0x38>
 8005358:	250a      	movs	r5, #10
 800535a:	e7d7      	b.n	800530c <_puts_r+0x3c>
 800535c:	4622      	mov	r2, r4
 800535e:	4628      	mov	r0, r5
 8005360:	f000 f877 	bl	8005452 <__swbuf_r>
 8005364:	3001      	adds	r0, #1
 8005366:	d1e7      	bne.n	8005338 <_puts_r+0x68>
 8005368:	e7ce      	b.n	8005308 <_puts_r+0x38>
 800536a:	3e01      	subs	r6, #1
 800536c:	e7e4      	b.n	8005338 <_puts_r+0x68>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	220a      	movs	r2, #10
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e7ee      	b.n	8005358 <_puts_r+0x88>
	...

0800537c <puts>:
 800537c:	4b02      	ldr	r3, [pc, #8]	@ (8005388 <puts+0xc>)
 800537e:	4601      	mov	r1, r0
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f7ff bfa5 	b.w	80052d0 <_puts_r>
 8005386:	bf00      	nop
 8005388:	20000018 	.word	0x20000018

0800538c <siprintf>:
 800538c:	b40e      	push	{r1, r2, r3}
 800538e:	b500      	push	{lr}
 8005390:	b09c      	sub	sp, #112	@ 0x70
 8005392:	ab1d      	add	r3, sp, #116	@ 0x74
 8005394:	9002      	str	r0, [sp, #8]
 8005396:	9006      	str	r0, [sp, #24]
 8005398:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800539c:	4809      	ldr	r0, [pc, #36]	@ (80053c4 <siprintf+0x38>)
 800539e:	9107      	str	r1, [sp, #28]
 80053a0:	9104      	str	r1, [sp, #16]
 80053a2:	4909      	ldr	r1, [pc, #36]	@ (80053c8 <siprintf+0x3c>)
 80053a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a8:	9105      	str	r1, [sp, #20]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	a902      	add	r1, sp, #8
 80053b0:	f002 fc48 	bl	8007c44 <_svfiprintf_r>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	b01c      	add	sp, #112	@ 0x70
 80053bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053c0:	b003      	add	sp, #12
 80053c2:	4770      	bx	lr
 80053c4:	20000018 	.word	0x20000018
 80053c8:	ffff0208 	.word	0xffff0208

080053cc <__sread>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	460c      	mov	r4, r1
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	f000 f900 	bl	80055d8 <_read_r>
 80053d8:	2800      	cmp	r0, #0
 80053da:	bfab      	itete	ge
 80053dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053de:	89a3      	ldrhlt	r3, [r4, #12]
 80053e0:	181b      	addge	r3, r3, r0
 80053e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053e6:	bfac      	ite	ge
 80053e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053ea:	81a3      	strhlt	r3, [r4, #12]
 80053ec:	bd10      	pop	{r4, pc}

080053ee <__swrite>:
 80053ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	461f      	mov	r7, r3
 80053f4:	898b      	ldrh	r3, [r1, #12]
 80053f6:	05db      	lsls	r3, r3, #23
 80053f8:	4605      	mov	r5, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	4616      	mov	r6, r2
 80053fe:	d505      	bpl.n	800540c <__swrite+0x1e>
 8005400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005404:	2302      	movs	r3, #2
 8005406:	2200      	movs	r2, #0
 8005408:	f000 f8d4 	bl	80055b4 <_lseek_r>
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	4632      	mov	r2, r6
 800541a:	463b      	mov	r3, r7
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	f000 b8eb 	b.w	80055fc <_write_r>

08005426 <__sseek>:
 8005426:	b510      	push	{r4, lr}
 8005428:	460c      	mov	r4, r1
 800542a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542e:	f000 f8c1 	bl	80055b4 <_lseek_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	bf15      	itete	ne
 8005438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800543a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800543e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005442:	81a3      	strheq	r3, [r4, #12]
 8005444:	bf18      	it	ne
 8005446:	81a3      	strhne	r3, [r4, #12]
 8005448:	bd10      	pop	{r4, pc}

0800544a <__sclose>:
 800544a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544e:	f000 b8a1 	b.w	8005594 <_close_r>

08005452 <__swbuf_r>:
 8005452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005454:	460e      	mov	r6, r1
 8005456:	4614      	mov	r4, r2
 8005458:	4605      	mov	r5, r0
 800545a:	b118      	cbz	r0, 8005464 <__swbuf_r+0x12>
 800545c:	6a03      	ldr	r3, [r0, #32]
 800545e:	b90b      	cbnz	r3, 8005464 <__swbuf_r+0x12>
 8005460:	f7ff feee 	bl	8005240 <__sinit>
 8005464:	69a3      	ldr	r3, [r4, #24]
 8005466:	60a3      	str	r3, [r4, #8]
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	071a      	lsls	r2, r3, #28
 800546c:	d501      	bpl.n	8005472 <__swbuf_r+0x20>
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	b943      	cbnz	r3, 8005484 <__swbuf_r+0x32>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f82b 	bl	80054d0 <__swsetup_r>
 800547a:	b118      	cbz	r0, 8005484 <__swbuf_r+0x32>
 800547c:	f04f 37ff 	mov.w	r7, #4294967295
 8005480:	4638      	mov	r0, r7
 8005482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	6922      	ldr	r2, [r4, #16]
 8005488:	1a98      	subs	r0, r3, r2
 800548a:	6963      	ldr	r3, [r4, #20]
 800548c:	b2f6      	uxtb	r6, r6
 800548e:	4283      	cmp	r3, r0
 8005490:	4637      	mov	r7, r6
 8005492:	dc05      	bgt.n	80054a0 <__swbuf_r+0x4e>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f002 fe96 	bl	80081c8 <_fflush_r>
 800549c:	2800      	cmp	r0, #0
 800549e:	d1ed      	bne.n	800547c <__swbuf_r+0x2a>
 80054a0:	68a3      	ldr	r3, [r4, #8]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60a3      	str	r3, [r4, #8]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	6022      	str	r2, [r4, #0]
 80054ac:	701e      	strb	r6, [r3, #0]
 80054ae:	6962      	ldr	r2, [r4, #20]
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d004      	beq.n	80054c0 <__swbuf_r+0x6e>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	07db      	lsls	r3, r3, #31
 80054ba:	d5e1      	bpl.n	8005480 <__swbuf_r+0x2e>
 80054bc:	2e0a      	cmp	r6, #10
 80054be:	d1df      	bne.n	8005480 <__swbuf_r+0x2e>
 80054c0:	4621      	mov	r1, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	f002 fe80 	bl	80081c8 <_fflush_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d0d9      	beq.n	8005480 <__swbuf_r+0x2e>
 80054cc:	e7d6      	b.n	800547c <__swbuf_r+0x2a>
	...

080054d0 <__swsetup_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4b29      	ldr	r3, [pc, #164]	@ (8005578 <__swsetup_r+0xa8>)
 80054d4:	4605      	mov	r5, r0
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	460c      	mov	r4, r1
 80054da:	b118      	cbz	r0, 80054e4 <__swsetup_r+0x14>
 80054dc:	6a03      	ldr	r3, [r0, #32]
 80054de:	b90b      	cbnz	r3, 80054e4 <__swsetup_r+0x14>
 80054e0:	f7ff feae 	bl	8005240 <__sinit>
 80054e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e8:	0719      	lsls	r1, r3, #28
 80054ea:	d422      	bmi.n	8005532 <__swsetup_r+0x62>
 80054ec:	06da      	lsls	r2, r3, #27
 80054ee:	d407      	bmi.n	8005500 <__swsetup_r+0x30>
 80054f0:	2209      	movs	r2, #9
 80054f2:	602a      	str	r2, [r5, #0]
 80054f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	f04f 30ff 	mov.w	r0, #4294967295
 80054fe:	e033      	b.n	8005568 <__swsetup_r+0x98>
 8005500:	0758      	lsls	r0, r3, #29
 8005502:	d512      	bpl.n	800552a <__swsetup_r+0x5a>
 8005504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005506:	b141      	cbz	r1, 800551a <__swsetup_r+0x4a>
 8005508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800550c:	4299      	cmp	r1, r3
 800550e:	d002      	beq.n	8005516 <__swsetup_r+0x46>
 8005510:	4628      	mov	r0, r5
 8005512:	f000 ff05 	bl	8006320 <_free_r>
 8005516:	2300      	movs	r3, #0
 8005518:	6363      	str	r3, [r4, #52]	@ 0x34
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	2300      	movs	r3, #0
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	f043 0308 	orr.w	r3, r3, #8
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	b94b      	cbnz	r3, 800554a <__swsetup_r+0x7a>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800553c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005540:	d003      	beq.n	800554a <__swsetup_r+0x7a>
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f002 fe8d 	bl	8008264 <__smakebuf_r>
 800554a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800554e:	f013 0201 	ands.w	r2, r3, #1
 8005552:	d00a      	beq.n	800556a <__swsetup_r+0x9a>
 8005554:	2200      	movs	r2, #0
 8005556:	60a2      	str	r2, [r4, #8]
 8005558:	6962      	ldr	r2, [r4, #20]
 800555a:	4252      	negs	r2, r2
 800555c:	61a2      	str	r2, [r4, #24]
 800555e:	6922      	ldr	r2, [r4, #16]
 8005560:	b942      	cbnz	r2, 8005574 <__swsetup_r+0xa4>
 8005562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005566:	d1c5      	bne.n	80054f4 <__swsetup_r+0x24>
 8005568:	bd38      	pop	{r3, r4, r5, pc}
 800556a:	0799      	lsls	r1, r3, #30
 800556c:	bf58      	it	pl
 800556e:	6962      	ldrpl	r2, [r4, #20]
 8005570:	60a2      	str	r2, [r4, #8]
 8005572:	e7f4      	b.n	800555e <__swsetup_r+0x8e>
 8005574:	2000      	movs	r0, #0
 8005576:	e7f7      	b.n	8005568 <__swsetup_r+0x98>
 8005578:	20000018 	.word	0x20000018

0800557c <memset>:
 800557c:	4402      	add	r2, r0
 800557e:	4603      	mov	r3, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <_localeconv_r>:
 800558c:	4800      	ldr	r0, [pc, #0]	@ (8005590 <_localeconv_r+0x4>)
 800558e:	4770      	bx	lr
 8005590:	20000158 	.word	0x20000158

08005594 <_close_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4d06      	ldr	r5, [pc, #24]	@ (80055b0 <_close_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4604      	mov	r4, r0
 800559c:	4608      	mov	r0, r1
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	f7fc f88f 	bl	80016c2 <_close>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_close_r+0x1a>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_close_r+0x1a>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	2000062c 	.word	0x2000062c

080055b4 <_lseek_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d07      	ldr	r5, [pc, #28]	@ (80055d4 <_lseek_r+0x20>)
 80055b8:	4604      	mov	r4, r0
 80055ba:	4608      	mov	r0, r1
 80055bc:	4611      	mov	r1, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	602a      	str	r2, [r5, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f7fc f8a4 	bl	8001710 <_lseek>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_lseek_r+0x1e>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_lseek_r+0x1e>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	2000062c 	.word	0x2000062c

080055d8 <_read_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4d07      	ldr	r5, [pc, #28]	@ (80055f8 <_read_r+0x20>)
 80055dc:	4604      	mov	r4, r0
 80055de:	4608      	mov	r0, r1
 80055e0:	4611      	mov	r1, r2
 80055e2:	2200      	movs	r2, #0
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fc f84e 	bl	8001688 <_read>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_read_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_read_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000062c 	.word	0x2000062c

080055fc <_write_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d07      	ldr	r5, [pc, #28]	@ (800561c <_write_r+0x20>)
 8005600:	4604      	mov	r4, r0
 8005602:	4608      	mov	r0, r1
 8005604:	4611      	mov	r1, r2
 8005606:	2200      	movs	r2, #0
 8005608:	602a      	str	r2, [r5, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f7fb fe32 	bl	8001274 <_write>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_write_r+0x1e>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_write_r+0x1e>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	2000062c 	.word	0x2000062c

08005620 <__errno>:
 8005620:	4b01      	ldr	r3, [pc, #4]	@ (8005628 <__errno+0x8>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000018 	.word	0x20000018

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	@ (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	@ (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	@ (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	@ (8005670 <__libc_init_array+0x44>)
 8005640:	f003 fae0 	bl	8008c04 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08009598 	.word	0x08009598
 8005668:	08009598 	.word	0x08009598
 800566c:	08009598 	.word	0x08009598
 8005670:	0800959c 	.word	0x0800959c

08005674 <__retarget_lock_init_recursive>:
 8005674:	4770      	bx	lr

08005676 <__retarget_lock_acquire_recursive>:
 8005676:	4770      	bx	lr

08005678 <__retarget_lock_release_recursive>:
 8005678:	4770      	bx	lr
	...

0800567c <nanf>:
 800567c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005684 <nanf+0x8>
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	7fc00000 	.word	0x7fc00000

08005688 <quorem>:
 8005688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	6903      	ldr	r3, [r0, #16]
 800568e:	690c      	ldr	r4, [r1, #16]
 8005690:	42a3      	cmp	r3, r4
 8005692:	4607      	mov	r7, r0
 8005694:	db7e      	blt.n	8005794 <quorem+0x10c>
 8005696:	3c01      	subs	r4, #1
 8005698:	f101 0814 	add.w	r8, r1, #20
 800569c:	00a3      	lsls	r3, r4, #2
 800569e:	f100 0514 	add.w	r5, r0, #20
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056b2:	3301      	adds	r3, #1
 80056b4:	429a      	cmp	r2, r3
 80056b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80056be:	d32e      	bcc.n	800571e <quorem+0x96>
 80056c0:	f04f 0a00 	mov.w	sl, #0
 80056c4:	46c4      	mov	ip, r8
 80056c6:	46ae      	mov	lr, r5
 80056c8:	46d3      	mov	fp, sl
 80056ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056ce:	b298      	uxth	r0, r3
 80056d0:	fb06 a000 	mla	r0, r6, r0, sl
 80056d4:	0c02      	lsrs	r2, r0, #16
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	fb06 2303 	mla	r3, r6, r3, r2
 80056dc:	f8de 2000 	ldr.w	r2, [lr]
 80056e0:	b280      	uxth	r0, r0
 80056e2:	b292      	uxth	r2, r2
 80056e4:	1a12      	subs	r2, r2, r0
 80056e6:	445a      	add	r2, fp
 80056e8:	f8de 0000 	ldr.w	r0, [lr]
 80056ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80056f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80056fa:	b292      	uxth	r2, r2
 80056fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005700:	45e1      	cmp	r9, ip
 8005702:	f84e 2b04 	str.w	r2, [lr], #4
 8005706:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800570a:	d2de      	bcs.n	80056ca <quorem+0x42>
 800570c:	9b00      	ldr	r3, [sp, #0]
 800570e:	58eb      	ldr	r3, [r5, r3]
 8005710:	b92b      	cbnz	r3, 800571e <quorem+0x96>
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	3b04      	subs	r3, #4
 8005716:	429d      	cmp	r5, r3
 8005718:	461a      	mov	r2, r3
 800571a:	d32f      	bcc.n	800577c <quorem+0xf4>
 800571c:	613c      	str	r4, [r7, #16]
 800571e:	4638      	mov	r0, r7
 8005720:	f001 f9c2 	bl	8006aa8 <__mcmp>
 8005724:	2800      	cmp	r0, #0
 8005726:	db25      	blt.n	8005774 <quorem+0xec>
 8005728:	4629      	mov	r1, r5
 800572a:	2000      	movs	r0, #0
 800572c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005730:	f8d1 c000 	ldr.w	ip, [r1]
 8005734:	fa1f fe82 	uxth.w	lr, r2
 8005738:	fa1f f38c 	uxth.w	r3, ip
 800573c:	eba3 030e 	sub.w	r3, r3, lr
 8005740:	4403      	add	r3, r0
 8005742:	0c12      	lsrs	r2, r2, #16
 8005744:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005748:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800574c:	b29b      	uxth	r3, r3
 800574e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005752:	45c1      	cmp	r9, r8
 8005754:	f841 3b04 	str.w	r3, [r1], #4
 8005758:	ea4f 4022 	mov.w	r0, r2, asr #16
 800575c:	d2e6      	bcs.n	800572c <quorem+0xa4>
 800575e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005766:	b922      	cbnz	r2, 8005772 <quorem+0xea>
 8005768:	3b04      	subs	r3, #4
 800576a:	429d      	cmp	r5, r3
 800576c:	461a      	mov	r2, r3
 800576e:	d30b      	bcc.n	8005788 <quorem+0x100>
 8005770:	613c      	str	r4, [r7, #16]
 8005772:	3601      	adds	r6, #1
 8005774:	4630      	mov	r0, r6
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	3b04      	subs	r3, #4
 8005780:	2a00      	cmp	r2, #0
 8005782:	d1cb      	bne.n	800571c <quorem+0x94>
 8005784:	3c01      	subs	r4, #1
 8005786:	e7c6      	b.n	8005716 <quorem+0x8e>
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	3b04      	subs	r3, #4
 800578c:	2a00      	cmp	r2, #0
 800578e:	d1ef      	bne.n	8005770 <quorem+0xe8>
 8005790:	3c01      	subs	r4, #1
 8005792:	e7ea      	b.n	800576a <quorem+0xe2>
 8005794:	2000      	movs	r0, #0
 8005796:	e7ee      	b.n	8005776 <quorem+0xee>

08005798 <_dtoa_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	69c7      	ldr	r7, [r0, #28]
 800579e:	b099      	sub	sp, #100	@ 0x64
 80057a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057a4:	ec55 4b10 	vmov	r4, r5, d0
 80057a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80057aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80057ac:	4683      	mov	fp, r0
 80057ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80057b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057b2:	b97f      	cbnz	r7, 80057d4 <_dtoa_r+0x3c>
 80057b4:	2010      	movs	r0, #16
 80057b6:	f000 fdfd 	bl	80063b4 <malloc>
 80057ba:	4602      	mov	r2, r0
 80057bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80057c0:	b920      	cbnz	r0, 80057cc <_dtoa_r+0x34>
 80057c2:	4ba7      	ldr	r3, [pc, #668]	@ (8005a60 <_dtoa_r+0x2c8>)
 80057c4:	21ef      	movs	r1, #239	@ 0xef
 80057c6:	48a7      	ldr	r0, [pc, #668]	@ (8005a64 <_dtoa_r+0x2cc>)
 80057c8:	f002 fdfe 	bl	80083c8 <__assert_func>
 80057cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80057d0:	6007      	str	r7, [r0, #0]
 80057d2:	60c7      	str	r7, [r0, #12]
 80057d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	b159      	cbz	r1, 80057f4 <_dtoa_r+0x5c>
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	604a      	str	r2, [r1, #4]
 80057e0:	2301      	movs	r3, #1
 80057e2:	4093      	lsls	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
 80057e6:	4658      	mov	r0, fp
 80057e8:	f000 feda 	bl	80065a0 <_Bfree>
 80057ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	1e2b      	subs	r3, r5, #0
 80057f6:	bfb9      	ittee	lt
 80057f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80057fc:	9303      	strlt	r3, [sp, #12]
 80057fe:	2300      	movge	r3, #0
 8005800:	6033      	strge	r3, [r6, #0]
 8005802:	9f03      	ldr	r7, [sp, #12]
 8005804:	4b98      	ldr	r3, [pc, #608]	@ (8005a68 <_dtoa_r+0x2d0>)
 8005806:	bfbc      	itt	lt
 8005808:	2201      	movlt	r2, #1
 800580a:	6032      	strlt	r2, [r6, #0]
 800580c:	43bb      	bics	r3, r7
 800580e:	d112      	bne.n	8005836 <_dtoa_r+0x9e>
 8005810:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005812:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800581c:	4323      	orrs	r3, r4
 800581e:	f000 854d 	beq.w	80062bc <_dtoa_r+0xb24>
 8005822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005824:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005a7c <_dtoa_r+0x2e4>
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 854f 	beq.w	80062cc <_dtoa_r+0xb34>
 800582e:	f10a 0303 	add.w	r3, sl, #3
 8005832:	f000 bd49 	b.w	80062c8 <_dtoa_r+0xb30>
 8005836:	ed9d 7b02 	vldr	d7, [sp, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	ec51 0b17 	vmov	r0, r1, d7
 8005840:	2300      	movs	r3, #0
 8005842:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005846:	f7fb f95f 	bl	8000b08 <__aeabi_dcmpeq>
 800584a:	4680      	mov	r8, r0
 800584c:	b158      	cbz	r0, 8005866 <_dtoa_r+0xce>
 800584e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005850:	2301      	movs	r3, #1
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005856:	b113      	cbz	r3, 800585e <_dtoa_r+0xc6>
 8005858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800585a:	4b84      	ldr	r3, [pc, #528]	@ (8005a6c <_dtoa_r+0x2d4>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005a80 <_dtoa_r+0x2e8>
 8005862:	f000 bd33 	b.w	80062cc <_dtoa_r+0xb34>
 8005866:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800586a:	aa16      	add	r2, sp, #88	@ 0x58
 800586c:	a917      	add	r1, sp, #92	@ 0x5c
 800586e:	4658      	mov	r0, fp
 8005870:	f001 fa3a 	bl	8006ce8 <__d2b>
 8005874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005878:	4681      	mov	r9, r0
 800587a:	2e00      	cmp	r6, #0
 800587c:	d077      	beq.n	800596e <_dtoa_r+0x1d6>
 800587e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005880:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800588c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005898:	4619      	mov	r1, r3
 800589a:	2200      	movs	r2, #0
 800589c:	4b74      	ldr	r3, [pc, #464]	@ (8005a70 <_dtoa_r+0x2d8>)
 800589e:	f7fa fd13 	bl	80002c8 <__aeabi_dsub>
 80058a2:	a369      	add	r3, pc, #420	@ (adr r3, 8005a48 <_dtoa_r+0x2b0>)
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f7fa fec6 	bl	8000638 <__aeabi_dmul>
 80058ac:	a368      	add	r3, pc, #416	@ (adr r3, 8005a50 <_dtoa_r+0x2b8>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	f7fa fd0b 	bl	80002cc <__adddf3>
 80058b6:	4604      	mov	r4, r0
 80058b8:	4630      	mov	r0, r6
 80058ba:	460d      	mov	r5, r1
 80058bc:	f7fa fe52 	bl	8000564 <__aeabi_i2d>
 80058c0:	a365      	add	r3, pc, #404	@ (adr r3, 8005a58 <_dtoa_r+0x2c0>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa feb7 	bl	8000638 <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fcfb 	bl	80002cc <__adddf3>
 80058d6:	4604      	mov	r4, r0
 80058d8:	460d      	mov	r5, r1
 80058da:	f7fb f95d 	bl	8000b98 <__aeabi_d2iz>
 80058de:	2200      	movs	r2, #0
 80058e0:	4607      	mov	r7, r0
 80058e2:	2300      	movs	r3, #0
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fb f918 	bl	8000b1c <__aeabi_dcmplt>
 80058ec:	b140      	cbz	r0, 8005900 <_dtoa_r+0x168>
 80058ee:	4638      	mov	r0, r7
 80058f0:	f7fa fe38 	bl	8000564 <__aeabi_i2d>
 80058f4:	4622      	mov	r2, r4
 80058f6:	462b      	mov	r3, r5
 80058f8:	f7fb f906 	bl	8000b08 <__aeabi_dcmpeq>
 80058fc:	b900      	cbnz	r0, 8005900 <_dtoa_r+0x168>
 80058fe:	3f01      	subs	r7, #1
 8005900:	2f16      	cmp	r7, #22
 8005902:	d851      	bhi.n	80059a8 <_dtoa_r+0x210>
 8005904:	4b5b      	ldr	r3, [pc, #364]	@ (8005a74 <_dtoa_r+0x2dc>)
 8005906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005912:	f7fb f903 	bl	8000b1c <__aeabi_dcmplt>
 8005916:	2800      	cmp	r0, #0
 8005918:	d048      	beq.n	80059ac <_dtoa_r+0x214>
 800591a:	3f01      	subs	r7, #1
 800591c:	2300      	movs	r3, #0
 800591e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005920:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005922:	1b9b      	subs	r3, r3, r6
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	bf44      	itt	mi
 8005928:	f1c3 0801 	rsbmi	r8, r3, #1
 800592c:	2300      	movmi	r3, #0
 800592e:	9208      	str	r2, [sp, #32]
 8005930:	bf54      	ite	pl
 8005932:	f04f 0800 	movpl.w	r8, #0
 8005936:	9308      	strmi	r3, [sp, #32]
 8005938:	2f00      	cmp	r7, #0
 800593a:	db39      	blt.n	80059b0 <_dtoa_r+0x218>
 800593c:	9b08      	ldr	r3, [sp, #32]
 800593e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005940:	443b      	add	r3, r7
 8005942:	9308      	str	r3, [sp, #32]
 8005944:	2300      	movs	r3, #0
 8005946:	930a      	str	r3, [sp, #40]	@ 0x28
 8005948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800594a:	2b09      	cmp	r3, #9
 800594c:	d864      	bhi.n	8005a18 <_dtoa_r+0x280>
 800594e:	2b05      	cmp	r3, #5
 8005950:	bfc4      	itt	gt
 8005952:	3b04      	subgt	r3, #4
 8005954:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005958:	f1a3 0302 	sub.w	r3, r3, #2
 800595c:	bfcc      	ite	gt
 800595e:	2400      	movgt	r4, #0
 8005960:	2401      	movle	r4, #1
 8005962:	2b03      	cmp	r3, #3
 8005964:	d863      	bhi.n	8005a2e <_dtoa_r+0x296>
 8005966:	e8df f003 	tbb	[pc, r3]
 800596a:	372a      	.short	0x372a
 800596c:	5535      	.short	0x5535
 800596e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005972:	441e      	add	r6, r3
 8005974:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005978:	2b20      	cmp	r3, #32
 800597a:	bfc1      	itttt	gt
 800597c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005980:	409f      	lslgt	r7, r3
 8005982:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005986:	fa24 f303 	lsrgt.w	r3, r4, r3
 800598a:	bfd6      	itet	le
 800598c:	f1c3 0320 	rsble	r3, r3, #32
 8005990:	ea47 0003 	orrgt.w	r0, r7, r3
 8005994:	fa04 f003 	lslle.w	r0, r4, r3
 8005998:	f7fa fdd4 	bl	8000544 <__aeabi_ui2d>
 800599c:	2201      	movs	r2, #1
 800599e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059a2:	3e01      	subs	r6, #1
 80059a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80059a6:	e777      	b.n	8005898 <_dtoa_r+0x100>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7b8      	b.n	800591e <_dtoa_r+0x186>
 80059ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80059ae:	e7b7      	b.n	8005920 <_dtoa_r+0x188>
 80059b0:	427b      	negs	r3, r7
 80059b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80059b4:	2300      	movs	r3, #0
 80059b6:	eba8 0807 	sub.w	r8, r8, r7
 80059ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059bc:	e7c4      	b.n	8005948 <_dtoa_r+0x1b0>
 80059be:	2300      	movs	r3, #0
 80059c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dc35      	bgt.n	8005a34 <_dtoa_r+0x29c>
 80059c8:	2301      	movs	r3, #1
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	9307      	str	r3, [sp, #28]
 80059ce:	461a      	mov	r2, r3
 80059d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80059d2:	e00b      	b.n	80059ec <_dtoa_r+0x254>
 80059d4:	2301      	movs	r3, #1
 80059d6:	e7f3      	b.n	80059c0 <_dtoa_r+0x228>
 80059d8:	2300      	movs	r3, #0
 80059da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	bfb8      	it	lt
 80059ea:	2301      	movlt	r3, #1
 80059ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80059f0:	2100      	movs	r1, #0
 80059f2:	2204      	movs	r2, #4
 80059f4:	f102 0514 	add.w	r5, r2, #20
 80059f8:	429d      	cmp	r5, r3
 80059fa:	d91f      	bls.n	8005a3c <_dtoa_r+0x2a4>
 80059fc:	6041      	str	r1, [r0, #4]
 80059fe:	4658      	mov	r0, fp
 8005a00:	f000 fd8e 	bl	8006520 <_Balloc>
 8005a04:	4682      	mov	sl, r0
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d13c      	bne.n	8005a84 <_dtoa_r+0x2ec>
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <_dtoa_r+0x2e0>)
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a12:	e6d8      	b.n	80057c6 <_dtoa_r+0x2e>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e7e0      	b.n	80059da <_dtoa_r+0x242>
 8005a18:	2401      	movs	r4, #1
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2312      	movs	r3, #18
 8005a2c:	e7d0      	b.n	80059d0 <_dtoa_r+0x238>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a32:	e7f5      	b.n	8005a20 <_dtoa_r+0x288>
 8005a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	9307      	str	r3, [sp, #28]
 8005a3a:	e7d7      	b.n	80059ec <_dtoa_r+0x254>
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	0052      	lsls	r2, r2, #1
 8005a40:	e7d8      	b.n	80059f4 <_dtoa_r+0x25c>
 8005a42:	bf00      	nop
 8005a44:	f3af 8000 	nop.w
 8005a48:	636f4361 	.word	0x636f4361
 8005a4c:	3fd287a7 	.word	0x3fd287a7
 8005a50:	8b60c8b3 	.word	0x8b60c8b3
 8005a54:	3fc68a28 	.word	0x3fc68a28
 8005a58:	509f79fb 	.word	0x509f79fb
 8005a5c:	3fd34413 	.word	0x3fd34413
 8005a60:	080091a6 	.word	0x080091a6
 8005a64:	080091bd 	.word	0x080091bd
 8005a68:	7ff00000 	.word	0x7ff00000
 8005a6c:	08009171 	.word	0x08009171
 8005a70:	3ff80000 	.word	0x3ff80000
 8005a74:	080092b8 	.word	0x080092b8
 8005a78:	08009215 	.word	0x08009215
 8005a7c:	080091a2 	.word	0x080091a2
 8005a80:	08009170 	.word	0x08009170
 8005a84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	9b07      	ldr	r3, [sp, #28]
 8005a8c:	2b0e      	cmp	r3, #14
 8005a8e:	f200 80a4 	bhi.w	8005bda <_dtoa_r+0x442>
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	f000 80a1 	beq.w	8005bda <_dtoa_r+0x442>
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	dd33      	ble.n	8005b04 <_dtoa_r+0x36c>
 8005a9c:	4bad      	ldr	r3, [pc, #692]	@ (8005d54 <_dtoa_r+0x5bc>)
 8005a9e:	f007 020f 	and.w	r2, r7, #15
 8005aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aa6:	ed93 7b00 	vldr	d7, [r3]
 8005aaa:	05f8      	lsls	r0, r7, #23
 8005aac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ab0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ab4:	d516      	bpl.n	8005ae4 <_dtoa_r+0x34c>
 8005ab6:	4ba8      	ldr	r3, [pc, #672]	@ (8005d58 <_dtoa_r+0x5c0>)
 8005ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005abc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ac0:	f7fa fee4 	bl	800088c <__aeabi_ddiv>
 8005ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ac8:	f004 040f 	and.w	r4, r4, #15
 8005acc:	2603      	movs	r6, #3
 8005ace:	4da2      	ldr	r5, [pc, #648]	@ (8005d58 <_dtoa_r+0x5c0>)
 8005ad0:	b954      	cbnz	r4, 8005ae8 <_dtoa_r+0x350>
 8005ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ada:	f7fa fed7 	bl	800088c <__aeabi_ddiv>
 8005ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae2:	e028      	b.n	8005b36 <_dtoa_r+0x39e>
 8005ae4:	2602      	movs	r6, #2
 8005ae6:	e7f2      	b.n	8005ace <_dtoa_r+0x336>
 8005ae8:	07e1      	lsls	r1, r4, #31
 8005aea:	d508      	bpl.n	8005afe <_dtoa_r+0x366>
 8005aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005af0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005af4:	f7fa fda0 	bl	8000638 <__aeabi_dmul>
 8005af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005afc:	3601      	adds	r6, #1
 8005afe:	1064      	asrs	r4, r4, #1
 8005b00:	3508      	adds	r5, #8
 8005b02:	e7e5      	b.n	8005ad0 <_dtoa_r+0x338>
 8005b04:	f000 80d2 	beq.w	8005cac <_dtoa_r+0x514>
 8005b08:	427c      	negs	r4, r7
 8005b0a:	4b92      	ldr	r3, [pc, #584]	@ (8005d54 <_dtoa_r+0x5bc>)
 8005b0c:	4d92      	ldr	r5, [pc, #584]	@ (8005d58 <_dtoa_r+0x5c0>)
 8005b0e:	f004 020f 	and.w	r2, r4, #15
 8005b12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b1e:	f7fa fd8b 	bl	8000638 <__aeabi_dmul>
 8005b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b26:	1124      	asrs	r4, r4, #4
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2602      	movs	r6, #2
 8005b2c:	2c00      	cmp	r4, #0
 8005b2e:	f040 80b2 	bne.w	8005c96 <_dtoa_r+0x4fe>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1d3      	bne.n	8005ade <_dtoa_r+0x346>
 8005b36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80b7 	beq.w	8005cb0 <_dtoa_r+0x518>
 8005b42:	4b86      	ldr	r3, [pc, #536]	@ (8005d5c <_dtoa_r+0x5c4>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f000 80ae 	beq.w	8005cb0 <_dtoa_r+0x518>
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80aa 	beq.w	8005cb0 <_dtoa_r+0x518>
 8005b5c:	9b00      	ldr	r3, [sp, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dd37      	ble.n	8005bd2 <_dtoa_r+0x43a>
 8005b62:	1e7b      	subs	r3, r7, #1
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	4620      	mov	r0, r4
 8005b68:	4b7d      	ldr	r3, [pc, #500]	@ (8005d60 <_dtoa_r+0x5c8>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa fd63 	bl	8000638 <__aeabi_dmul>
 8005b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b76:	9c00      	ldr	r4, [sp, #0]
 8005b78:	3601      	adds	r6, #1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7fa fcf2 	bl	8000564 <__aeabi_i2d>
 8005b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b84:	f7fa fd58 	bl	8000638 <__aeabi_dmul>
 8005b88:	4b76      	ldr	r3, [pc, #472]	@ (8005d64 <_dtoa_r+0x5cc>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f7fa fb9e 	bl	80002cc <__adddf3>
 8005b90:	4605      	mov	r5, r0
 8005b92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005b96:	2c00      	cmp	r4, #0
 8005b98:	f040 808d 	bne.w	8005cb6 <_dtoa_r+0x51e>
 8005b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ba0:	4b71      	ldr	r3, [pc, #452]	@ (8005d68 <_dtoa_r+0x5d0>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f7fa fb90 	bl	80002c8 <__aeabi_dsub>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4633      	mov	r3, r6
 8005bb4:	f7fa ffd0 	bl	8000b58 <__aeabi_dcmpgt>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f040 828b 	bne.w	80060d4 <_dtoa_r+0x93c>
 8005bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005bc8:	f7fa ffa8 	bl	8000b1c <__aeabi_dcmplt>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	f040 8128 	bne.w	8005e22 <_dtoa_r+0x68a>
 8005bd2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005bd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005bda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f2c0 815a 	blt.w	8005e96 <_dtoa_r+0x6fe>
 8005be2:	2f0e      	cmp	r7, #14
 8005be4:	f300 8157 	bgt.w	8005e96 <_dtoa_r+0x6fe>
 8005be8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d54 <_dtoa_r+0x5bc>)
 8005bea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bee:	ed93 7b00 	vldr	d7, [r3]
 8005bf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	ed8d 7b00 	vstr	d7, [sp]
 8005bfa:	da03      	bge.n	8005c04 <_dtoa_r+0x46c>
 8005bfc:	9b07      	ldr	r3, [sp, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f340 8101 	ble.w	8005e06 <_dtoa_r+0x66e>
 8005c04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c08:	4656      	mov	r6, sl
 8005c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	4629      	mov	r1, r5
 8005c12:	f7fa fe3b 	bl	800088c <__aeabi_ddiv>
 8005c16:	f7fa ffbf 	bl	8000b98 <__aeabi_d2iz>
 8005c1a:	4680      	mov	r8, r0
 8005c1c:	f7fa fca2 	bl	8000564 <__aeabi_i2d>
 8005c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c24:	f7fa fd08 	bl	8000638 <__aeabi_dmul>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c34:	f7fa fb48 	bl	80002c8 <__aeabi_dsub>
 8005c38:	f806 4b01 	strb.w	r4, [r6], #1
 8005c3c:	9d07      	ldr	r5, [sp, #28]
 8005c3e:	eba6 040a 	sub.w	r4, r6, sl
 8005c42:	42a5      	cmp	r5, r4
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	f040 8117 	bne.w	8005e7a <_dtoa_r+0x6e2>
 8005c4c:	f7fa fb3e 	bl	80002cc <__adddf3>
 8005c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	f7fa ff7e 	bl	8000b58 <__aeabi_dcmpgt>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	f040 80f9 	bne.w	8005e54 <_dtoa_r+0x6bc>
 8005c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa ff4d 	bl	8000b08 <__aeabi_dcmpeq>
 8005c6e:	b118      	cbz	r0, 8005c78 <_dtoa_r+0x4e0>
 8005c70:	f018 0f01 	tst.w	r8, #1
 8005c74:	f040 80ee 	bne.w	8005e54 <_dtoa_r+0x6bc>
 8005c78:	4649      	mov	r1, r9
 8005c7a:	4658      	mov	r0, fp
 8005c7c:	f000 fc90 	bl	80065a0 <_Bfree>
 8005c80:	2300      	movs	r3, #0
 8005c82:	7033      	strb	r3, [r6, #0]
 8005c84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c86:	3701      	adds	r7, #1
 8005c88:	601f      	str	r7, [r3, #0]
 8005c8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 831d 	beq.w	80062cc <_dtoa_r+0xb34>
 8005c92:	601e      	str	r6, [r3, #0]
 8005c94:	e31a      	b.n	80062cc <_dtoa_r+0xb34>
 8005c96:	07e2      	lsls	r2, r4, #31
 8005c98:	d505      	bpl.n	8005ca6 <_dtoa_r+0x50e>
 8005c9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c9e:	f7fa fccb 	bl	8000638 <__aeabi_dmul>
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	1064      	asrs	r4, r4, #1
 8005ca8:	3508      	adds	r5, #8
 8005caa:	e73f      	b.n	8005b2c <_dtoa_r+0x394>
 8005cac:	2602      	movs	r6, #2
 8005cae:	e742      	b.n	8005b36 <_dtoa_r+0x39e>
 8005cb0:	9c07      	ldr	r4, [sp, #28]
 8005cb2:	9704      	str	r7, [sp, #16]
 8005cb4:	e761      	b.n	8005b7a <_dtoa_r+0x3e2>
 8005cb6:	4b27      	ldr	r3, [pc, #156]	@ (8005d54 <_dtoa_r+0x5bc>)
 8005cb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cc2:	4454      	add	r4, sl
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d053      	beq.n	8005d70 <_dtoa_r+0x5d8>
 8005cc8:	4928      	ldr	r1, [pc, #160]	@ (8005d6c <_dtoa_r+0x5d4>)
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fa fdde 	bl	800088c <__aeabi_ddiv>
 8005cd0:	4633      	mov	r3, r6
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	f7fa faf8 	bl	80002c8 <__aeabi_dsub>
 8005cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cdc:	4656      	mov	r6, sl
 8005cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ce2:	f7fa ff59 	bl	8000b98 <__aeabi_d2iz>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	f7fa fc3c 	bl	8000564 <__aeabi_i2d>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf4:	f7fa fae8 	bl	80002c8 <__aeabi_dsub>
 8005cf8:	3530      	adds	r5, #48	@ 0x30
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d02:	f806 5b01 	strb.w	r5, [r6], #1
 8005d06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d0a:	f7fa ff07 	bl	8000b1c <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d171      	bne.n	8005df6 <_dtoa_r+0x65e>
 8005d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d16:	4911      	ldr	r1, [pc, #68]	@ (8005d5c <_dtoa_r+0x5c4>)
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f7fa fad5 	bl	80002c8 <__aeabi_dsub>
 8005d1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d22:	f7fa fefb 	bl	8000b1c <__aeabi_dcmplt>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f040 8095 	bne.w	8005e56 <_dtoa_r+0x6be>
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	f43f af50 	beq.w	8005bd2 <_dtoa_r+0x43a>
 8005d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d36:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <_dtoa_r+0x5c8>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f7fa fc7d 	bl	8000638 <__aeabi_dmul>
 8005d3e:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <_dtoa_r+0x5c8>)
 8005d40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d44:	2200      	movs	r2, #0
 8005d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4a:	f7fa fc75 	bl	8000638 <__aeabi_dmul>
 8005d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d52:	e7c4      	b.n	8005cde <_dtoa_r+0x546>
 8005d54:	080092b8 	.word	0x080092b8
 8005d58:	08009290 	.word	0x08009290
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	40240000 	.word	0x40240000
 8005d64:	401c0000 	.word	0x401c0000
 8005d68:	40140000 	.word	0x40140000
 8005d6c:	3fe00000 	.word	0x3fe00000
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005d7e:	4656      	mov	r6, sl
 8005d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d84:	f7fa ff08 	bl	8000b98 <__aeabi_d2iz>
 8005d88:	4605      	mov	r5, r0
 8005d8a:	f7fa fbeb 	bl	8000564 <__aeabi_i2d>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d96:	f7fa fa97 	bl	80002c8 <__aeabi_dsub>
 8005d9a:	3530      	adds	r5, #48	@ 0x30
 8005d9c:	f806 5b01 	strb.w	r5, [r6], #1
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	42a6      	cmp	r6, r4
 8005da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	d124      	bne.n	8005dfa <_dtoa_r+0x662>
 8005db0:	4bac      	ldr	r3, [pc, #688]	@ (8006064 <_dtoa_r+0x8cc>)
 8005db2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005db6:	f7fa fa89 	bl	80002cc <__adddf3>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dc2:	f7fa fec9 	bl	8000b58 <__aeabi_dcmpgt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d145      	bne.n	8005e56 <_dtoa_r+0x6be>
 8005dca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dce:	49a5      	ldr	r1, [pc, #660]	@ (8006064 <_dtoa_r+0x8cc>)
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f7fa fa79 	bl	80002c8 <__aeabi_dsub>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dde:	f7fa fe9d 	bl	8000b1c <__aeabi_dcmplt>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f43f aef5 	beq.w	8005bd2 <_dtoa_r+0x43a>
 8005de8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005dea:	1e73      	subs	r3, r6, #1
 8005dec:	9315      	str	r3, [sp, #84]	@ 0x54
 8005dee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005df2:	2b30      	cmp	r3, #48	@ 0x30
 8005df4:	d0f8      	beq.n	8005de8 <_dtoa_r+0x650>
 8005df6:	9f04      	ldr	r7, [sp, #16]
 8005df8:	e73e      	b.n	8005c78 <_dtoa_r+0x4e0>
 8005dfa:	4b9b      	ldr	r3, [pc, #620]	@ (8006068 <_dtoa_r+0x8d0>)
 8005dfc:	f7fa fc1c 	bl	8000638 <__aeabi_dmul>
 8005e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e04:	e7bc      	b.n	8005d80 <_dtoa_r+0x5e8>
 8005e06:	d10c      	bne.n	8005e22 <_dtoa_r+0x68a>
 8005e08:	4b98      	ldr	r3, [pc, #608]	@ (800606c <_dtoa_r+0x8d4>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e10:	f7fa fc12 	bl	8000638 <__aeabi_dmul>
 8005e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e18:	f7fa fe94 	bl	8000b44 <__aeabi_dcmpge>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f000 8157 	beq.w	80060d0 <_dtoa_r+0x938>
 8005e22:	2400      	movs	r4, #0
 8005e24:	4625      	mov	r5, r4
 8005e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	4656      	mov	r6, sl
 8005e2e:	2700      	movs	r7, #0
 8005e30:	4621      	mov	r1, r4
 8005e32:	4658      	mov	r0, fp
 8005e34:	f000 fbb4 	bl	80065a0 <_Bfree>
 8005e38:	2d00      	cmp	r5, #0
 8005e3a:	d0dc      	beq.n	8005df6 <_dtoa_r+0x65e>
 8005e3c:	b12f      	cbz	r7, 8005e4a <_dtoa_r+0x6b2>
 8005e3e:	42af      	cmp	r7, r5
 8005e40:	d003      	beq.n	8005e4a <_dtoa_r+0x6b2>
 8005e42:	4639      	mov	r1, r7
 8005e44:	4658      	mov	r0, fp
 8005e46:	f000 fbab 	bl	80065a0 <_Bfree>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4658      	mov	r0, fp
 8005e4e:	f000 fba7 	bl	80065a0 <_Bfree>
 8005e52:	e7d0      	b.n	8005df6 <_dtoa_r+0x65e>
 8005e54:	9704      	str	r7, [sp, #16]
 8005e56:	4633      	mov	r3, r6
 8005e58:	461e      	mov	r6, r3
 8005e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e5e:	2a39      	cmp	r2, #57	@ 0x39
 8005e60:	d107      	bne.n	8005e72 <_dtoa_r+0x6da>
 8005e62:	459a      	cmp	sl, r3
 8005e64:	d1f8      	bne.n	8005e58 <_dtoa_r+0x6c0>
 8005e66:	9a04      	ldr	r2, [sp, #16]
 8005e68:	3201      	adds	r2, #1
 8005e6a:	9204      	str	r2, [sp, #16]
 8005e6c:	2230      	movs	r2, #48	@ 0x30
 8005e6e:	f88a 2000 	strb.w	r2, [sl]
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	3201      	adds	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e7bd      	b.n	8005df6 <_dtoa_r+0x65e>
 8005e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8006068 <_dtoa_r+0x8d0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f7fa fbdb 	bl	8000638 <__aeabi_dmul>
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	f7fa fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f aebb 	beq.w	8005c0a <_dtoa_r+0x472>
 8005e94:	e6f0      	b.n	8005c78 <_dtoa_r+0x4e0>
 8005e96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	f000 80db 	beq.w	8006054 <_dtoa_r+0x8bc>
 8005e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea0:	2a01      	cmp	r2, #1
 8005ea2:	f300 80bf 	bgt.w	8006024 <_dtoa_r+0x88c>
 8005ea6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	f000 80b7 	beq.w	800601c <_dtoa_r+0x884>
 8005eae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005eb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eb4:	4646      	mov	r6, r8
 8005eb6:	9a08      	ldr	r2, [sp, #32]
 8005eb8:	2101      	movs	r1, #1
 8005eba:	441a      	add	r2, r3
 8005ebc:	4658      	mov	r0, fp
 8005ebe:	4498      	add	r8, r3
 8005ec0:	9208      	str	r2, [sp, #32]
 8005ec2:	f000 fc6b 	bl	800679c <__i2b>
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	b15e      	cbz	r6, 8005ee2 <_dtoa_r+0x74a>
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dd08      	ble.n	8005ee2 <_dtoa_r+0x74a>
 8005ed0:	42b3      	cmp	r3, r6
 8005ed2:	9a08      	ldr	r2, [sp, #32]
 8005ed4:	bfa8      	it	ge
 8005ed6:	4633      	movge	r3, r6
 8005ed8:	eba8 0803 	sub.w	r8, r8, r3
 8005edc:	1af6      	subs	r6, r6, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ee4:	b1f3      	cbz	r3, 8005f24 <_dtoa_r+0x78c>
 8005ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80b7 	beq.w	800605c <_dtoa_r+0x8c4>
 8005eee:	b18c      	cbz	r4, 8005f14 <_dtoa_r+0x77c>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4658      	mov	r0, fp
 8005ef6:	f000 fd11 	bl	800691c <__pow5mult>
 8005efa:	464a      	mov	r2, r9
 8005efc:	4601      	mov	r1, r0
 8005efe:	4605      	mov	r5, r0
 8005f00:	4658      	mov	r0, fp
 8005f02:	f000 fc61 	bl	80067c8 <__multiply>
 8005f06:	4649      	mov	r1, r9
 8005f08:	9004      	str	r0, [sp, #16]
 8005f0a:	4658      	mov	r0, fp
 8005f0c:	f000 fb48 	bl	80065a0 <_Bfree>
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	4699      	mov	r9, r3
 8005f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f16:	1b1a      	subs	r2, r3, r4
 8005f18:	d004      	beq.n	8005f24 <_dtoa_r+0x78c>
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	4658      	mov	r0, fp
 8005f1e:	f000 fcfd 	bl	800691c <__pow5mult>
 8005f22:	4681      	mov	r9, r0
 8005f24:	2101      	movs	r1, #1
 8005f26:	4658      	mov	r0, fp
 8005f28:	f000 fc38 	bl	800679c <__i2b>
 8005f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f2e:	4604      	mov	r4, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 81cf 	beq.w	80062d4 <_dtoa_r+0xb3c>
 8005f36:	461a      	mov	r2, r3
 8005f38:	4601      	mov	r1, r0
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	f000 fcee 	bl	800691c <__pow5mult>
 8005f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	4604      	mov	r4, r0
 8005f46:	f300 8095 	bgt.w	8006074 <_dtoa_r+0x8dc>
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 8087 	bne.w	8006060 <_dtoa_r+0x8c8>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8089 	bne.w	8006070 <_dtoa_r+0x8d8>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f64:	0d1b      	lsrs	r3, r3, #20
 8005f66:	051b      	lsls	r3, r3, #20
 8005f68:	b12b      	cbz	r3, 8005f76 <_dtoa_r+0x7de>
 8005f6a:	9b08      	ldr	r3, [sp, #32]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	9308      	str	r3, [sp, #32]
 8005f70:	f108 0801 	add.w	r8, r8, #1
 8005f74:	2301      	movs	r3, #1
 8005f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 81b0 	beq.w	80062e0 <_dtoa_r+0xb48>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f86:	6918      	ldr	r0, [r3, #16]
 8005f88:	f000 fbbc 	bl	8006704 <__hi0bits>
 8005f8c:	f1c0 0020 	rsb	r0, r0, #32
 8005f90:	9b08      	ldr	r3, [sp, #32]
 8005f92:	4418      	add	r0, r3
 8005f94:	f010 001f 	ands.w	r0, r0, #31
 8005f98:	d077      	beq.n	800608a <_dtoa_r+0x8f2>
 8005f9a:	f1c0 0320 	rsb	r3, r0, #32
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	dd6b      	ble.n	800607a <_dtoa_r+0x8e2>
 8005fa2:	9b08      	ldr	r3, [sp, #32]
 8005fa4:	f1c0 001c 	rsb	r0, r0, #28
 8005fa8:	4403      	add	r3, r0
 8005faa:	4480      	add	r8, r0
 8005fac:	4406      	add	r6, r0
 8005fae:	9308      	str	r3, [sp, #32]
 8005fb0:	f1b8 0f00 	cmp.w	r8, #0
 8005fb4:	dd05      	ble.n	8005fc2 <_dtoa_r+0x82a>
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4658      	mov	r0, fp
 8005fbc:	f000 fd08 	bl	80069d0 <__lshift>
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	9b08      	ldr	r3, [sp, #32]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dd05      	ble.n	8005fd4 <_dtoa_r+0x83c>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4658      	mov	r0, fp
 8005fce:	f000 fcff 	bl	80069d0 <__lshift>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d059      	beq.n	800608e <_dtoa_r+0x8f6>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4648      	mov	r0, r9
 8005fde:	f000 fd63 	bl	8006aa8 <__mcmp>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	da53      	bge.n	800608e <_dtoa_r+0x8f6>
 8005fe6:	1e7b      	subs	r3, r7, #1
 8005fe8:	9304      	str	r3, [sp, #16]
 8005fea:	4649      	mov	r1, r9
 8005fec:	2300      	movs	r3, #0
 8005fee:	220a      	movs	r2, #10
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f000 faf7 	bl	80065e4 <__multadd>
 8005ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ff8:	4681      	mov	r9, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8172 	beq.w	80062e4 <_dtoa_r+0xb4c>
 8006000:	2300      	movs	r3, #0
 8006002:	4629      	mov	r1, r5
 8006004:	220a      	movs	r2, #10
 8006006:	4658      	mov	r0, fp
 8006008:	f000 faec 	bl	80065e4 <__multadd>
 800600c:	9b00      	ldr	r3, [sp, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	4605      	mov	r5, r0
 8006012:	dc67      	bgt.n	80060e4 <_dtoa_r+0x94c>
 8006014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006016:	2b02      	cmp	r3, #2
 8006018:	dc41      	bgt.n	800609e <_dtoa_r+0x906>
 800601a:	e063      	b.n	80060e4 <_dtoa_r+0x94c>
 800601c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800601e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006022:	e746      	b.n	8005eb2 <_dtoa_r+0x71a>
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	1e5c      	subs	r4, r3, #1
 8006028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602a:	42a3      	cmp	r3, r4
 800602c:	bfbf      	itttt	lt
 800602e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006030:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006032:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006034:	1ae3      	sublt	r3, r4, r3
 8006036:	bfb4      	ite	lt
 8006038:	18d2      	addlt	r2, r2, r3
 800603a:	1b1c      	subge	r4, r3, r4
 800603c:	9b07      	ldr	r3, [sp, #28]
 800603e:	bfbc      	itt	lt
 8006040:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006042:	2400      	movlt	r4, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	bfb5      	itete	lt
 8006048:	eba8 0603 	sublt.w	r6, r8, r3
 800604c:	9b07      	ldrge	r3, [sp, #28]
 800604e:	2300      	movlt	r3, #0
 8006050:	4646      	movge	r6, r8
 8006052:	e730      	b.n	8005eb6 <_dtoa_r+0x71e>
 8006054:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006056:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006058:	4646      	mov	r6, r8
 800605a:	e735      	b.n	8005ec8 <_dtoa_r+0x730>
 800605c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800605e:	e75c      	b.n	8005f1a <_dtoa_r+0x782>
 8006060:	2300      	movs	r3, #0
 8006062:	e788      	b.n	8005f76 <_dtoa_r+0x7de>
 8006064:	3fe00000 	.word	0x3fe00000
 8006068:	40240000 	.word	0x40240000
 800606c:	40140000 	.word	0x40140000
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	e780      	b.n	8005f76 <_dtoa_r+0x7de>
 8006074:	2300      	movs	r3, #0
 8006076:	930a      	str	r3, [sp, #40]	@ 0x28
 8006078:	e782      	b.n	8005f80 <_dtoa_r+0x7e8>
 800607a:	d099      	beq.n	8005fb0 <_dtoa_r+0x818>
 800607c:	9a08      	ldr	r2, [sp, #32]
 800607e:	331c      	adds	r3, #28
 8006080:	441a      	add	r2, r3
 8006082:	4498      	add	r8, r3
 8006084:	441e      	add	r6, r3
 8006086:	9208      	str	r2, [sp, #32]
 8006088:	e792      	b.n	8005fb0 <_dtoa_r+0x818>
 800608a:	4603      	mov	r3, r0
 800608c:	e7f6      	b.n	800607c <_dtoa_r+0x8e4>
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	9704      	str	r7, [sp, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dc20      	bgt.n	80060d8 <_dtoa_r+0x940>
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609a:	2b02      	cmp	r3, #2
 800609c:	dd1e      	ble.n	80060dc <_dtoa_r+0x944>
 800609e:	9b00      	ldr	r3, [sp, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f47f aec0 	bne.w	8005e26 <_dtoa_r+0x68e>
 80060a6:	4621      	mov	r1, r4
 80060a8:	2205      	movs	r2, #5
 80060aa:	4658      	mov	r0, fp
 80060ac:	f000 fa9a 	bl	80065e4 <__multadd>
 80060b0:	4601      	mov	r1, r0
 80060b2:	4604      	mov	r4, r0
 80060b4:	4648      	mov	r0, r9
 80060b6:	f000 fcf7 	bl	8006aa8 <__mcmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f77f aeb3 	ble.w	8005e26 <_dtoa_r+0x68e>
 80060c0:	4656      	mov	r6, sl
 80060c2:	2331      	movs	r3, #49	@ 0x31
 80060c4:	f806 3b01 	strb.w	r3, [r6], #1
 80060c8:	9b04      	ldr	r3, [sp, #16]
 80060ca:	3301      	adds	r3, #1
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	e6ae      	b.n	8005e2e <_dtoa_r+0x696>
 80060d0:	9c07      	ldr	r4, [sp, #28]
 80060d2:	9704      	str	r7, [sp, #16]
 80060d4:	4625      	mov	r5, r4
 80060d6:	e7f3      	b.n	80060c0 <_dtoa_r+0x928>
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8104 	beq.w	80062ec <_dtoa_r+0xb54>
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	dd05      	ble.n	80060f4 <_dtoa_r+0x95c>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4632      	mov	r2, r6
 80060ec:	4658      	mov	r0, fp
 80060ee:	f000 fc6f 	bl	80069d0 <__lshift>
 80060f2:	4605      	mov	r5, r0
 80060f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d05a      	beq.n	80061b0 <_dtoa_r+0xa18>
 80060fa:	6869      	ldr	r1, [r5, #4]
 80060fc:	4658      	mov	r0, fp
 80060fe:	f000 fa0f 	bl	8006520 <_Balloc>
 8006102:	4606      	mov	r6, r0
 8006104:	b928      	cbnz	r0, 8006112 <_dtoa_r+0x97a>
 8006106:	4b84      	ldr	r3, [pc, #528]	@ (8006318 <_dtoa_r+0xb80>)
 8006108:	4602      	mov	r2, r0
 800610a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800610e:	f7ff bb5a 	b.w	80057c6 <_dtoa_r+0x2e>
 8006112:	692a      	ldr	r2, [r5, #16]
 8006114:	3202      	adds	r2, #2
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	f105 010c 	add.w	r1, r5, #12
 800611c:	300c      	adds	r0, #12
 800611e:	f002 f93b 	bl	8008398 <memcpy>
 8006122:	2201      	movs	r2, #1
 8006124:	4631      	mov	r1, r6
 8006126:	4658      	mov	r0, fp
 8006128:	f000 fc52 	bl	80069d0 <__lshift>
 800612c:	f10a 0301 	add.w	r3, sl, #1
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	4453      	add	r3, sl
 8006136:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006138:	9b02      	ldr	r3, [sp, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	462f      	mov	r7, r5
 8006140:	930a      	str	r3, [sp, #40]	@ 0x28
 8006142:	4605      	mov	r5, r0
 8006144:	9b07      	ldr	r3, [sp, #28]
 8006146:	4621      	mov	r1, r4
 8006148:	3b01      	subs	r3, #1
 800614a:	4648      	mov	r0, r9
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	f7ff fa9b 	bl	8005688 <quorem>
 8006152:	4639      	mov	r1, r7
 8006154:	9002      	str	r0, [sp, #8]
 8006156:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800615a:	4648      	mov	r0, r9
 800615c:	f000 fca4 	bl	8006aa8 <__mcmp>
 8006160:	462a      	mov	r2, r5
 8006162:	9008      	str	r0, [sp, #32]
 8006164:	4621      	mov	r1, r4
 8006166:	4658      	mov	r0, fp
 8006168:	f000 fcba 	bl	8006ae0 <__mdiff>
 800616c:	68c2      	ldr	r2, [r0, #12]
 800616e:	4606      	mov	r6, r0
 8006170:	bb02      	cbnz	r2, 80061b4 <_dtoa_r+0xa1c>
 8006172:	4601      	mov	r1, r0
 8006174:	4648      	mov	r0, r9
 8006176:	f000 fc97 	bl	8006aa8 <__mcmp>
 800617a:	4602      	mov	r2, r0
 800617c:	4631      	mov	r1, r6
 800617e:	4658      	mov	r0, fp
 8006180:	920e      	str	r2, [sp, #56]	@ 0x38
 8006182:	f000 fa0d 	bl	80065a0 <_Bfree>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800618a:	9e07      	ldr	r6, [sp, #28]
 800618c:	ea43 0102 	orr.w	r1, r3, r2
 8006190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006192:	4319      	orrs	r1, r3
 8006194:	d110      	bne.n	80061b8 <_dtoa_r+0xa20>
 8006196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800619a:	d029      	beq.n	80061f0 <_dtoa_r+0xa58>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dd02      	ble.n	80061a8 <_dtoa_r+0xa10>
 80061a2:	9b02      	ldr	r3, [sp, #8]
 80061a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80061a8:	9b00      	ldr	r3, [sp, #0]
 80061aa:	f883 8000 	strb.w	r8, [r3]
 80061ae:	e63f      	b.n	8005e30 <_dtoa_r+0x698>
 80061b0:	4628      	mov	r0, r5
 80061b2:	e7bb      	b.n	800612c <_dtoa_r+0x994>
 80061b4:	2201      	movs	r2, #1
 80061b6:	e7e1      	b.n	800617c <_dtoa_r+0x9e4>
 80061b8:	9b08      	ldr	r3, [sp, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	db04      	blt.n	80061c8 <_dtoa_r+0xa30>
 80061be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061c0:	430b      	orrs	r3, r1
 80061c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061c4:	430b      	orrs	r3, r1
 80061c6:	d120      	bne.n	800620a <_dtoa_r+0xa72>
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	dded      	ble.n	80061a8 <_dtoa_r+0xa10>
 80061cc:	4649      	mov	r1, r9
 80061ce:	2201      	movs	r2, #1
 80061d0:	4658      	mov	r0, fp
 80061d2:	f000 fbfd 	bl	80069d0 <__lshift>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4681      	mov	r9, r0
 80061da:	f000 fc65 	bl	8006aa8 <__mcmp>
 80061de:	2800      	cmp	r0, #0
 80061e0:	dc03      	bgt.n	80061ea <_dtoa_r+0xa52>
 80061e2:	d1e1      	bne.n	80061a8 <_dtoa_r+0xa10>
 80061e4:	f018 0f01 	tst.w	r8, #1
 80061e8:	d0de      	beq.n	80061a8 <_dtoa_r+0xa10>
 80061ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061ee:	d1d8      	bne.n	80061a2 <_dtoa_r+0xa0a>
 80061f0:	9a00      	ldr	r2, [sp, #0]
 80061f2:	2339      	movs	r3, #57	@ 0x39
 80061f4:	7013      	strb	r3, [r2, #0]
 80061f6:	4633      	mov	r3, r6
 80061f8:	461e      	mov	r6, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006200:	2a39      	cmp	r2, #57	@ 0x39
 8006202:	d052      	beq.n	80062aa <_dtoa_r+0xb12>
 8006204:	3201      	adds	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e612      	b.n	8005e30 <_dtoa_r+0x698>
 800620a:	2a00      	cmp	r2, #0
 800620c:	dd07      	ble.n	800621e <_dtoa_r+0xa86>
 800620e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006212:	d0ed      	beq.n	80061f0 <_dtoa_r+0xa58>
 8006214:	9a00      	ldr	r2, [sp, #0]
 8006216:	f108 0301 	add.w	r3, r8, #1
 800621a:	7013      	strb	r3, [r2, #0]
 800621c:	e608      	b.n	8005e30 <_dtoa_r+0x698>
 800621e:	9b07      	ldr	r3, [sp, #28]
 8006220:	9a07      	ldr	r2, [sp, #28]
 8006222:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006228:	4293      	cmp	r3, r2
 800622a:	d028      	beq.n	800627e <_dtoa_r+0xae6>
 800622c:	4649      	mov	r1, r9
 800622e:	2300      	movs	r3, #0
 8006230:	220a      	movs	r2, #10
 8006232:	4658      	mov	r0, fp
 8006234:	f000 f9d6 	bl	80065e4 <__multadd>
 8006238:	42af      	cmp	r7, r5
 800623a:	4681      	mov	r9, r0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	f04f 020a 	mov.w	r2, #10
 8006244:	4639      	mov	r1, r7
 8006246:	4658      	mov	r0, fp
 8006248:	d107      	bne.n	800625a <_dtoa_r+0xac2>
 800624a:	f000 f9cb 	bl	80065e4 <__multadd>
 800624e:	4607      	mov	r7, r0
 8006250:	4605      	mov	r5, r0
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	e774      	b.n	8006144 <_dtoa_r+0x9ac>
 800625a:	f000 f9c3 	bl	80065e4 <__multadd>
 800625e:	4629      	mov	r1, r5
 8006260:	4607      	mov	r7, r0
 8006262:	2300      	movs	r3, #0
 8006264:	220a      	movs	r2, #10
 8006266:	4658      	mov	r0, fp
 8006268:	f000 f9bc 	bl	80065e4 <__multadd>
 800626c:	4605      	mov	r5, r0
 800626e:	e7f0      	b.n	8006252 <_dtoa_r+0xaba>
 8006270:	9b00      	ldr	r3, [sp, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfcc      	ite	gt
 8006276:	461e      	movgt	r6, r3
 8006278:	2601      	movle	r6, #1
 800627a:	4456      	add	r6, sl
 800627c:	2700      	movs	r7, #0
 800627e:	4649      	mov	r1, r9
 8006280:	2201      	movs	r2, #1
 8006282:	4658      	mov	r0, fp
 8006284:	f000 fba4 	bl	80069d0 <__lshift>
 8006288:	4621      	mov	r1, r4
 800628a:	4681      	mov	r9, r0
 800628c:	f000 fc0c 	bl	8006aa8 <__mcmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	dcb0      	bgt.n	80061f6 <_dtoa_r+0xa5e>
 8006294:	d102      	bne.n	800629c <_dtoa_r+0xb04>
 8006296:	f018 0f01 	tst.w	r8, #1
 800629a:	d1ac      	bne.n	80061f6 <_dtoa_r+0xa5e>
 800629c:	4633      	mov	r3, r6
 800629e:	461e      	mov	r6, r3
 80062a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062a4:	2a30      	cmp	r2, #48	@ 0x30
 80062a6:	d0fa      	beq.n	800629e <_dtoa_r+0xb06>
 80062a8:	e5c2      	b.n	8005e30 <_dtoa_r+0x698>
 80062aa:	459a      	cmp	sl, r3
 80062ac:	d1a4      	bne.n	80061f8 <_dtoa_r+0xa60>
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	3301      	adds	r3, #1
 80062b2:	9304      	str	r3, [sp, #16]
 80062b4:	2331      	movs	r3, #49	@ 0x31
 80062b6:	f88a 3000 	strb.w	r3, [sl]
 80062ba:	e5b9      	b.n	8005e30 <_dtoa_r+0x698>
 80062bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800631c <_dtoa_r+0xb84>
 80062c2:	b11b      	cbz	r3, 80062cc <_dtoa_r+0xb34>
 80062c4:	f10a 0308 	add.w	r3, sl, #8
 80062c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	4650      	mov	r0, sl
 80062ce:	b019      	add	sp, #100	@ 0x64
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	f77f ae37 	ble.w	8005f4a <_dtoa_r+0x7b2>
 80062dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062de:	930a      	str	r3, [sp, #40]	@ 0x28
 80062e0:	2001      	movs	r0, #1
 80062e2:	e655      	b.n	8005f90 <_dtoa_r+0x7f8>
 80062e4:	9b00      	ldr	r3, [sp, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f77f aed6 	ble.w	8006098 <_dtoa_r+0x900>
 80062ec:	4656      	mov	r6, sl
 80062ee:	4621      	mov	r1, r4
 80062f0:	4648      	mov	r0, r9
 80062f2:	f7ff f9c9 	bl	8005688 <quorem>
 80062f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062fa:	f806 8b01 	strb.w	r8, [r6], #1
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	eba6 020a 	sub.w	r2, r6, sl
 8006304:	4293      	cmp	r3, r2
 8006306:	ddb3      	ble.n	8006270 <_dtoa_r+0xad8>
 8006308:	4649      	mov	r1, r9
 800630a:	2300      	movs	r3, #0
 800630c:	220a      	movs	r2, #10
 800630e:	4658      	mov	r0, fp
 8006310:	f000 f968 	bl	80065e4 <__multadd>
 8006314:	4681      	mov	r9, r0
 8006316:	e7ea      	b.n	80062ee <_dtoa_r+0xb56>
 8006318:	08009215 	.word	0x08009215
 800631c:	08009199 	.word	0x08009199

08006320 <_free_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4605      	mov	r5, r0
 8006324:	2900      	cmp	r1, #0
 8006326:	d041      	beq.n	80063ac <_free_r+0x8c>
 8006328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632c:	1f0c      	subs	r4, r1, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfb8      	it	lt
 8006332:	18e4      	addlt	r4, r4, r3
 8006334:	f000 f8e8 	bl	8006508 <__malloc_lock>
 8006338:	4a1d      	ldr	r2, [pc, #116]	@ (80063b0 <_free_r+0x90>)
 800633a:	6813      	ldr	r3, [r2, #0]
 800633c:	b933      	cbnz	r3, 800634c <_free_r+0x2c>
 800633e:	6063      	str	r3, [r4, #4]
 8006340:	6014      	str	r4, [r2, #0]
 8006342:	4628      	mov	r0, r5
 8006344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006348:	f000 b8e4 	b.w	8006514 <__malloc_unlock>
 800634c:	42a3      	cmp	r3, r4
 800634e:	d908      	bls.n	8006362 <_free_r+0x42>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	1821      	adds	r1, r4, r0
 8006354:	428b      	cmp	r3, r1
 8006356:	bf01      	itttt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	1809      	addeq	r1, r1, r0
 800635e:	6021      	streq	r1, [r4, #0]
 8006360:	e7ed      	b.n	800633e <_free_r+0x1e>
 8006362:	461a      	mov	r2, r3
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b10b      	cbz	r3, 800636c <_free_r+0x4c>
 8006368:	42a3      	cmp	r3, r4
 800636a:	d9fa      	bls.n	8006362 <_free_r+0x42>
 800636c:	6811      	ldr	r1, [r2, #0]
 800636e:	1850      	adds	r0, r2, r1
 8006370:	42a0      	cmp	r0, r4
 8006372:	d10b      	bne.n	800638c <_free_r+0x6c>
 8006374:	6820      	ldr	r0, [r4, #0]
 8006376:	4401      	add	r1, r0
 8006378:	1850      	adds	r0, r2, r1
 800637a:	4283      	cmp	r3, r0
 800637c:	6011      	str	r1, [r2, #0]
 800637e:	d1e0      	bne.n	8006342 <_free_r+0x22>
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	6053      	str	r3, [r2, #4]
 8006386:	4408      	add	r0, r1
 8006388:	6010      	str	r0, [r2, #0]
 800638a:	e7da      	b.n	8006342 <_free_r+0x22>
 800638c:	d902      	bls.n	8006394 <_free_r+0x74>
 800638e:	230c      	movs	r3, #12
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	e7d6      	b.n	8006342 <_free_r+0x22>
 8006394:	6820      	ldr	r0, [r4, #0]
 8006396:	1821      	adds	r1, r4, r0
 8006398:	428b      	cmp	r3, r1
 800639a:	bf04      	itt	eq
 800639c:	6819      	ldreq	r1, [r3, #0]
 800639e:	685b      	ldreq	r3, [r3, #4]
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	bf04      	itt	eq
 80063a4:	1809      	addeq	r1, r1, r0
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	6054      	str	r4, [r2, #4]
 80063aa:	e7ca      	b.n	8006342 <_free_r+0x22>
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	bf00      	nop
 80063b0:	20000638 	.word	0x20000638

080063b4 <malloc>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	@ (80063c0 <malloc+0xc>)
 80063b6:	4601      	mov	r1, r0
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	f000 b825 	b.w	8006408 <_malloc_r>
 80063be:	bf00      	nop
 80063c0:	20000018 	.word	0x20000018

080063c4 <sbrk_aligned>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006404 <sbrk_aligned+0x40>)
 80063c8:	460c      	mov	r4, r1
 80063ca:	6831      	ldr	r1, [r6, #0]
 80063cc:	4605      	mov	r5, r0
 80063ce:	b911      	cbnz	r1, 80063d6 <sbrk_aligned+0x12>
 80063d0:	f001 ffd2 	bl	8008378 <_sbrk_r>
 80063d4:	6030      	str	r0, [r6, #0]
 80063d6:	4621      	mov	r1, r4
 80063d8:	4628      	mov	r0, r5
 80063da:	f001 ffcd 	bl	8008378 <_sbrk_r>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	d103      	bne.n	80063ea <sbrk_aligned+0x26>
 80063e2:	f04f 34ff 	mov.w	r4, #4294967295
 80063e6:	4620      	mov	r0, r4
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	1cc4      	adds	r4, r0, #3
 80063ec:	f024 0403 	bic.w	r4, r4, #3
 80063f0:	42a0      	cmp	r0, r4
 80063f2:	d0f8      	beq.n	80063e6 <sbrk_aligned+0x22>
 80063f4:	1a21      	subs	r1, r4, r0
 80063f6:	4628      	mov	r0, r5
 80063f8:	f001 ffbe 	bl	8008378 <_sbrk_r>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d1f2      	bne.n	80063e6 <sbrk_aligned+0x22>
 8006400:	e7ef      	b.n	80063e2 <sbrk_aligned+0x1e>
 8006402:	bf00      	nop
 8006404:	20000634 	.word	0x20000634

08006408 <_malloc_r>:
 8006408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800640c:	1ccd      	adds	r5, r1, #3
 800640e:	f025 0503 	bic.w	r5, r5, #3
 8006412:	3508      	adds	r5, #8
 8006414:	2d0c      	cmp	r5, #12
 8006416:	bf38      	it	cc
 8006418:	250c      	movcc	r5, #12
 800641a:	2d00      	cmp	r5, #0
 800641c:	4606      	mov	r6, r0
 800641e:	db01      	blt.n	8006424 <_malloc_r+0x1c>
 8006420:	42a9      	cmp	r1, r5
 8006422:	d904      	bls.n	800642e <_malloc_r+0x26>
 8006424:	230c      	movs	r3, #12
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	2000      	movs	r0, #0
 800642a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800642e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006504 <_malloc_r+0xfc>
 8006432:	f000 f869 	bl	8006508 <__malloc_lock>
 8006436:	f8d8 3000 	ldr.w	r3, [r8]
 800643a:	461c      	mov	r4, r3
 800643c:	bb44      	cbnz	r4, 8006490 <_malloc_r+0x88>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff ffbf 	bl	80063c4 <sbrk_aligned>
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	4604      	mov	r4, r0
 800644a:	d158      	bne.n	80064fe <_malloc_r+0xf6>
 800644c:	f8d8 4000 	ldr.w	r4, [r8]
 8006450:	4627      	mov	r7, r4
 8006452:	2f00      	cmp	r7, #0
 8006454:	d143      	bne.n	80064de <_malloc_r+0xd6>
 8006456:	2c00      	cmp	r4, #0
 8006458:	d04b      	beq.n	80064f2 <_malloc_r+0xea>
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	4639      	mov	r1, r7
 800645e:	4630      	mov	r0, r6
 8006460:	eb04 0903 	add.w	r9, r4, r3
 8006464:	f001 ff88 	bl	8008378 <_sbrk_r>
 8006468:	4581      	cmp	r9, r0
 800646a:	d142      	bne.n	80064f2 <_malloc_r+0xea>
 800646c:	6821      	ldr	r1, [r4, #0]
 800646e:	1a6d      	subs	r5, r5, r1
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff ffa6 	bl	80063c4 <sbrk_aligned>
 8006478:	3001      	adds	r0, #1
 800647a:	d03a      	beq.n	80064f2 <_malloc_r+0xea>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	442b      	add	r3, r5
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	f8d8 3000 	ldr.w	r3, [r8]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	bb62      	cbnz	r2, 80064e4 <_malloc_r+0xdc>
 800648a:	f8c8 7000 	str.w	r7, [r8]
 800648e:	e00f      	b.n	80064b0 <_malloc_r+0xa8>
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	1b52      	subs	r2, r2, r5
 8006494:	d420      	bmi.n	80064d8 <_malloc_r+0xd0>
 8006496:	2a0b      	cmp	r2, #11
 8006498:	d917      	bls.n	80064ca <_malloc_r+0xc2>
 800649a:	1961      	adds	r1, r4, r5
 800649c:	42a3      	cmp	r3, r4
 800649e:	6025      	str	r5, [r4, #0]
 80064a0:	bf18      	it	ne
 80064a2:	6059      	strne	r1, [r3, #4]
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	bf08      	it	eq
 80064a8:	f8c8 1000 	streq.w	r1, [r8]
 80064ac:	5162      	str	r2, [r4, r5]
 80064ae:	604b      	str	r3, [r1, #4]
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 f82f 	bl	8006514 <__malloc_unlock>
 80064b6:	f104 000b 	add.w	r0, r4, #11
 80064ba:	1d23      	adds	r3, r4, #4
 80064bc:	f020 0007 	bic.w	r0, r0, #7
 80064c0:	1ac2      	subs	r2, r0, r3
 80064c2:	bf1c      	itt	ne
 80064c4:	1a1b      	subne	r3, r3, r0
 80064c6:	50a3      	strne	r3, [r4, r2]
 80064c8:	e7af      	b.n	800642a <_malloc_r+0x22>
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	bf0c      	ite	eq
 80064d0:	f8c8 2000 	streq.w	r2, [r8]
 80064d4:	605a      	strne	r2, [r3, #4]
 80064d6:	e7eb      	b.n	80064b0 <_malloc_r+0xa8>
 80064d8:	4623      	mov	r3, r4
 80064da:	6864      	ldr	r4, [r4, #4]
 80064dc:	e7ae      	b.n	800643c <_malloc_r+0x34>
 80064de:	463c      	mov	r4, r7
 80064e0:	687f      	ldr	r7, [r7, #4]
 80064e2:	e7b6      	b.n	8006452 <_malloc_r+0x4a>
 80064e4:	461a      	mov	r2, r3
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	d1fb      	bne.n	80064e4 <_malloc_r+0xdc>
 80064ec:	2300      	movs	r3, #0
 80064ee:	6053      	str	r3, [r2, #4]
 80064f0:	e7de      	b.n	80064b0 <_malloc_r+0xa8>
 80064f2:	230c      	movs	r3, #12
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	4630      	mov	r0, r6
 80064f8:	f000 f80c 	bl	8006514 <__malloc_unlock>
 80064fc:	e794      	b.n	8006428 <_malloc_r+0x20>
 80064fe:	6005      	str	r5, [r0, #0]
 8006500:	e7d6      	b.n	80064b0 <_malloc_r+0xa8>
 8006502:	bf00      	nop
 8006504:	20000638 	.word	0x20000638

08006508 <__malloc_lock>:
 8006508:	4801      	ldr	r0, [pc, #4]	@ (8006510 <__malloc_lock+0x8>)
 800650a:	f7ff b8b4 	b.w	8005676 <__retarget_lock_acquire_recursive>
 800650e:	bf00      	nop
 8006510:	20000630 	.word	0x20000630

08006514 <__malloc_unlock>:
 8006514:	4801      	ldr	r0, [pc, #4]	@ (800651c <__malloc_unlock+0x8>)
 8006516:	f7ff b8af 	b.w	8005678 <__retarget_lock_release_recursive>
 800651a:	bf00      	nop
 800651c:	20000630 	.word	0x20000630

08006520 <_Balloc>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	69c6      	ldr	r6, [r0, #28]
 8006524:	4604      	mov	r4, r0
 8006526:	460d      	mov	r5, r1
 8006528:	b976      	cbnz	r6, 8006548 <_Balloc+0x28>
 800652a:	2010      	movs	r0, #16
 800652c:	f7ff ff42 	bl	80063b4 <malloc>
 8006530:	4602      	mov	r2, r0
 8006532:	61e0      	str	r0, [r4, #28]
 8006534:	b920      	cbnz	r0, 8006540 <_Balloc+0x20>
 8006536:	4b18      	ldr	r3, [pc, #96]	@ (8006598 <_Balloc+0x78>)
 8006538:	4818      	ldr	r0, [pc, #96]	@ (800659c <_Balloc+0x7c>)
 800653a:	216b      	movs	r1, #107	@ 0x6b
 800653c:	f001 ff44 	bl	80083c8 <__assert_func>
 8006540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006544:	6006      	str	r6, [r0, #0]
 8006546:	60c6      	str	r6, [r0, #12]
 8006548:	69e6      	ldr	r6, [r4, #28]
 800654a:	68f3      	ldr	r3, [r6, #12]
 800654c:	b183      	cbz	r3, 8006570 <_Balloc+0x50>
 800654e:	69e3      	ldr	r3, [r4, #28]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006556:	b9b8      	cbnz	r0, 8006588 <_Balloc+0x68>
 8006558:	2101      	movs	r1, #1
 800655a:	fa01 f605 	lsl.w	r6, r1, r5
 800655e:	1d72      	adds	r2, r6, #5
 8006560:	0092      	lsls	r2, r2, #2
 8006562:	4620      	mov	r0, r4
 8006564:	f001 ff4e 	bl	8008404 <_calloc_r>
 8006568:	b160      	cbz	r0, 8006584 <_Balloc+0x64>
 800656a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800656e:	e00e      	b.n	800658e <_Balloc+0x6e>
 8006570:	2221      	movs	r2, #33	@ 0x21
 8006572:	2104      	movs	r1, #4
 8006574:	4620      	mov	r0, r4
 8006576:	f001 ff45 	bl	8008404 <_calloc_r>
 800657a:	69e3      	ldr	r3, [r4, #28]
 800657c:	60f0      	str	r0, [r6, #12]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e4      	bne.n	800654e <_Balloc+0x2e>
 8006584:	2000      	movs	r0, #0
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	6802      	ldr	r2, [r0, #0]
 800658a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800658e:	2300      	movs	r3, #0
 8006590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006594:	e7f7      	b.n	8006586 <_Balloc+0x66>
 8006596:	bf00      	nop
 8006598:	080091a6 	.word	0x080091a6
 800659c:	08009226 	.word	0x08009226

080065a0 <_Bfree>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	69c6      	ldr	r6, [r0, #28]
 80065a4:	4605      	mov	r5, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	b976      	cbnz	r6, 80065c8 <_Bfree+0x28>
 80065aa:	2010      	movs	r0, #16
 80065ac:	f7ff ff02 	bl	80063b4 <malloc>
 80065b0:	4602      	mov	r2, r0
 80065b2:	61e8      	str	r0, [r5, #28]
 80065b4:	b920      	cbnz	r0, 80065c0 <_Bfree+0x20>
 80065b6:	4b09      	ldr	r3, [pc, #36]	@ (80065dc <_Bfree+0x3c>)
 80065b8:	4809      	ldr	r0, [pc, #36]	@ (80065e0 <_Bfree+0x40>)
 80065ba:	218f      	movs	r1, #143	@ 0x8f
 80065bc:	f001 ff04 	bl	80083c8 <__assert_func>
 80065c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065c4:	6006      	str	r6, [r0, #0]
 80065c6:	60c6      	str	r6, [r0, #12]
 80065c8:	b13c      	cbz	r4, 80065da <_Bfree+0x3a>
 80065ca:	69eb      	ldr	r3, [r5, #28]
 80065cc:	6862      	ldr	r2, [r4, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065d4:	6021      	str	r1, [r4, #0]
 80065d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	080091a6 	.word	0x080091a6
 80065e0:	08009226 	.word	0x08009226

080065e4 <__multadd>:
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	690d      	ldr	r5, [r1, #16]
 80065ea:	4607      	mov	r7, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	461e      	mov	r6, r3
 80065f0:	f101 0c14 	add.w	ip, r1, #20
 80065f4:	2000      	movs	r0, #0
 80065f6:	f8dc 3000 	ldr.w	r3, [ip]
 80065fa:	b299      	uxth	r1, r3
 80065fc:	fb02 6101 	mla	r1, r2, r1, r6
 8006600:	0c1e      	lsrs	r6, r3, #16
 8006602:	0c0b      	lsrs	r3, r1, #16
 8006604:	fb02 3306 	mla	r3, r2, r6, r3
 8006608:	b289      	uxth	r1, r1
 800660a:	3001      	adds	r0, #1
 800660c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006610:	4285      	cmp	r5, r0
 8006612:	f84c 1b04 	str.w	r1, [ip], #4
 8006616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800661a:	dcec      	bgt.n	80065f6 <__multadd+0x12>
 800661c:	b30e      	cbz	r6, 8006662 <__multadd+0x7e>
 800661e:	68a3      	ldr	r3, [r4, #8]
 8006620:	42ab      	cmp	r3, r5
 8006622:	dc19      	bgt.n	8006658 <__multadd+0x74>
 8006624:	6861      	ldr	r1, [r4, #4]
 8006626:	4638      	mov	r0, r7
 8006628:	3101      	adds	r1, #1
 800662a:	f7ff ff79 	bl	8006520 <_Balloc>
 800662e:	4680      	mov	r8, r0
 8006630:	b928      	cbnz	r0, 800663e <__multadd+0x5a>
 8006632:	4602      	mov	r2, r0
 8006634:	4b0c      	ldr	r3, [pc, #48]	@ (8006668 <__multadd+0x84>)
 8006636:	480d      	ldr	r0, [pc, #52]	@ (800666c <__multadd+0x88>)
 8006638:	21ba      	movs	r1, #186	@ 0xba
 800663a:	f001 fec5 	bl	80083c8 <__assert_func>
 800663e:	6922      	ldr	r2, [r4, #16]
 8006640:	3202      	adds	r2, #2
 8006642:	f104 010c 	add.w	r1, r4, #12
 8006646:	0092      	lsls	r2, r2, #2
 8006648:	300c      	adds	r0, #12
 800664a:	f001 fea5 	bl	8008398 <memcpy>
 800664e:	4621      	mov	r1, r4
 8006650:	4638      	mov	r0, r7
 8006652:	f7ff ffa5 	bl	80065a0 <_Bfree>
 8006656:	4644      	mov	r4, r8
 8006658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800665c:	3501      	adds	r5, #1
 800665e:	615e      	str	r6, [r3, #20]
 8006660:	6125      	str	r5, [r4, #16]
 8006662:	4620      	mov	r0, r4
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	08009215 	.word	0x08009215
 800666c:	08009226 	.word	0x08009226

08006670 <__s2b>:
 8006670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	4615      	mov	r5, r2
 8006678:	461f      	mov	r7, r3
 800667a:	2209      	movs	r2, #9
 800667c:	3308      	adds	r3, #8
 800667e:	4606      	mov	r6, r0
 8006680:	fb93 f3f2 	sdiv	r3, r3, r2
 8006684:	2100      	movs	r1, #0
 8006686:	2201      	movs	r2, #1
 8006688:	429a      	cmp	r2, r3
 800668a:	db09      	blt.n	80066a0 <__s2b+0x30>
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff ff47 	bl	8006520 <_Balloc>
 8006692:	b940      	cbnz	r0, 80066a6 <__s2b+0x36>
 8006694:	4602      	mov	r2, r0
 8006696:	4b19      	ldr	r3, [pc, #100]	@ (80066fc <__s2b+0x8c>)
 8006698:	4819      	ldr	r0, [pc, #100]	@ (8006700 <__s2b+0x90>)
 800669a:	21d3      	movs	r1, #211	@ 0xd3
 800669c:	f001 fe94 	bl	80083c8 <__assert_func>
 80066a0:	0052      	lsls	r2, r2, #1
 80066a2:	3101      	adds	r1, #1
 80066a4:	e7f0      	b.n	8006688 <__s2b+0x18>
 80066a6:	9b08      	ldr	r3, [sp, #32]
 80066a8:	6143      	str	r3, [r0, #20]
 80066aa:	2d09      	cmp	r5, #9
 80066ac:	f04f 0301 	mov.w	r3, #1
 80066b0:	6103      	str	r3, [r0, #16]
 80066b2:	dd16      	ble.n	80066e2 <__s2b+0x72>
 80066b4:	f104 0909 	add.w	r9, r4, #9
 80066b8:	46c8      	mov	r8, r9
 80066ba:	442c      	add	r4, r5
 80066bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066c0:	4601      	mov	r1, r0
 80066c2:	3b30      	subs	r3, #48	@ 0x30
 80066c4:	220a      	movs	r2, #10
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ff8c 	bl	80065e4 <__multadd>
 80066cc:	45a0      	cmp	r8, r4
 80066ce:	d1f5      	bne.n	80066bc <__s2b+0x4c>
 80066d0:	f1a5 0408 	sub.w	r4, r5, #8
 80066d4:	444c      	add	r4, r9
 80066d6:	1b2d      	subs	r5, r5, r4
 80066d8:	1963      	adds	r3, r4, r5
 80066da:	42bb      	cmp	r3, r7
 80066dc:	db04      	blt.n	80066e8 <__s2b+0x78>
 80066de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e2:	340a      	adds	r4, #10
 80066e4:	2509      	movs	r5, #9
 80066e6:	e7f6      	b.n	80066d6 <__s2b+0x66>
 80066e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066ec:	4601      	mov	r1, r0
 80066ee:	3b30      	subs	r3, #48	@ 0x30
 80066f0:	220a      	movs	r2, #10
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ff76 	bl	80065e4 <__multadd>
 80066f8:	e7ee      	b.n	80066d8 <__s2b+0x68>
 80066fa:	bf00      	nop
 80066fc:	08009215 	.word	0x08009215
 8006700:	08009226 	.word	0x08009226

08006704 <__hi0bits>:
 8006704:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006708:	4603      	mov	r3, r0
 800670a:	bf36      	itet	cc
 800670c:	0403      	lslcc	r3, r0, #16
 800670e:	2000      	movcs	r0, #0
 8006710:	2010      	movcc	r0, #16
 8006712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006716:	bf3c      	itt	cc
 8006718:	021b      	lslcc	r3, r3, #8
 800671a:	3008      	addcc	r0, #8
 800671c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006720:	bf3c      	itt	cc
 8006722:	011b      	lslcc	r3, r3, #4
 8006724:	3004      	addcc	r0, #4
 8006726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672a:	bf3c      	itt	cc
 800672c:	009b      	lslcc	r3, r3, #2
 800672e:	3002      	addcc	r0, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	db05      	blt.n	8006740 <__hi0bits+0x3c>
 8006734:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006738:	f100 0001 	add.w	r0, r0, #1
 800673c:	bf08      	it	eq
 800673e:	2020      	moveq	r0, #32
 8006740:	4770      	bx	lr

08006742 <__lo0bits>:
 8006742:	6803      	ldr	r3, [r0, #0]
 8006744:	4602      	mov	r2, r0
 8006746:	f013 0007 	ands.w	r0, r3, #7
 800674a:	d00b      	beq.n	8006764 <__lo0bits+0x22>
 800674c:	07d9      	lsls	r1, r3, #31
 800674e:	d421      	bmi.n	8006794 <__lo0bits+0x52>
 8006750:	0798      	lsls	r0, r3, #30
 8006752:	bf49      	itett	mi
 8006754:	085b      	lsrmi	r3, r3, #1
 8006756:	089b      	lsrpl	r3, r3, #2
 8006758:	2001      	movmi	r0, #1
 800675a:	6013      	strmi	r3, [r2, #0]
 800675c:	bf5c      	itt	pl
 800675e:	6013      	strpl	r3, [r2, #0]
 8006760:	2002      	movpl	r0, #2
 8006762:	4770      	bx	lr
 8006764:	b299      	uxth	r1, r3
 8006766:	b909      	cbnz	r1, 800676c <__lo0bits+0x2a>
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	2010      	movs	r0, #16
 800676c:	b2d9      	uxtb	r1, r3
 800676e:	b909      	cbnz	r1, 8006774 <__lo0bits+0x32>
 8006770:	3008      	adds	r0, #8
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	0719      	lsls	r1, r3, #28
 8006776:	bf04      	itt	eq
 8006778:	091b      	lsreq	r3, r3, #4
 800677a:	3004      	addeq	r0, #4
 800677c:	0799      	lsls	r1, r3, #30
 800677e:	bf04      	itt	eq
 8006780:	089b      	lsreq	r3, r3, #2
 8006782:	3002      	addeq	r0, #2
 8006784:	07d9      	lsls	r1, r3, #31
 8006786:	d403      	bmi.n	8006790 <__lo0bits+0x4e>
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	f100 0001 	add.w	r0, r0, #1
 800678e:	d003      	beq.n	8006798 <__lo0bits+0x56>
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4770      	bx	lr
 8006794:	2000      	movs	r0, #0
 8006796:	4770      	bx	lr
 8006798:	2020      	movs	r0, #32
 800679a:	4770      	bx	lr

0800679c <__i2b>:
 800679c:	b510      	push	{r4, lr}
 800679e:	460c      	mov	r4, r1
 80067a0:	2101      	movs	r1, #1
 80067a2:	f7ff febd 	bl	8006520 <_Balloc>
 80067a6:	4602      	mov	r2, r0
 80067a8:	b928      	cbnz	r0, 80067b6 <__i2b+0x1a>
 80067aa:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <__i2b+0x24>)
 80067ac:	4805      	ldr	r0, [pc, #20]	@ (80067c4 <__i2b+0x28>)
 80067ae:	f240 1145 	movw	r1, #325	@ 0x145
 80067b2:	f001 fe09 	bl	80083c8 <__assert_func>
 80067b6:	2301      	movs	r3, #1
 80067b8:	6144      	str	r4, [r0, #20]
 80067ba:	6103      	str	r3, [r0, #16]
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	bf00      	nop
 80067c0:	08009215 	.word	0x08009215
 80067c4:	08009226 	.word	0x08009226

080067c8 <__multiply>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	4614      	mov	r4, r2
 80067ce:	690a      	ldr	r2, [r1, #16]
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	bfa8      	it	ge
 80067d6:	4623      	movge	r3, r4
 80067d8:	460f      	mov	r7, r1
 80067da:	bfa4      	itt	ge
 80067dc:	460c      	movge	r4, r1
 80067de:	461f      	movge	r7, r3
 80067e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80067e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80067e8:	68a3      	ldr	r3, [r4, #8]
 80067ea:	6861      	ldr	r1, [r4, #4]
 80067ec:	eb0a 0609 	add.w	r6, sl, r9
 80067f0:	42b3      	cmp	r3, r6
 80067f2:	b085      	sub	sp, #20
 80067f4:	bfb8      	it	lt
 80067f6:	3101      	addlt	r1, #1
 80067f8:	f7ff fe92 	bl	8006520 <_Balloc>
 80067fc:	b930      	cbnz	r0, 800680c <__multiply+0x44>
 80067fe:	4602      	mov	r2, r0
 8006800:	4b44      	ldr	r3, [pc, #272]	@ (8006914 <__multiply+0x14c>)
 8006802:	4845      	ldr	r0, [pc, #276]	@ (8006918 <__multiply+0x150>)
 8006804:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006808:	f001 fdde 	bl	80083c8 <__assert_func>
 800680c:	f100 0514 	add.w	r5, r0, #20
 8006810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006814:	462b      	mov	r3, r5
 8006816:	2200      	movs	r2, #0
 8006818:	4543      	cmp	r3, r8
 800681a:	d321      	bcc.n	8006860 <__multiply+0x98>
 800681c:	f107 0114 	add.w	r1, r7, #20
 8006820:	f104 0214 	add.w	r2, r4, #20
 8006824:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006828:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	1b13      	subs	r3, r2, r4
 8006830:	3b15      	subs	r3, #21
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	3304      	adds	r3, #4
 8006838:	f104 0715 	add.w	r7, r4, #21
 800683c:	42ba      	cmp	r2, r7
 800683e:	bf38      	it	cc
 8006840:	2304      	movcc	r3, #4
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	9103      	str	r1, [sp, #12]
 8006848:	428b      	cmp	r3, r1
 800684a:	d80c      	bhi.n	8006866 <__multiply+0x9e>
 800684c:	2e00      	cmp	r6, #0
 800684e:	dd03      	ble.n	8006858 <__multiply+0x90>
 8006850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006854:	2b00      	cmp	r3, #0
 8006856:	d05b      	beq.n	8006910 <__multiply+0x148>
 8006858:	6106      	str	r6, [r0, #16]
 800685a:	b005      	add	sp, #20
 800685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006860:	f843 2b04 	str.w	r2, [r3], #4
 8006864:	e7d8      	b.n	8006818 <__multiply+0x50>
 8006866:	f8b1 a000 	ldrh.w	sl, [r1]
 800686a:	f1ba 0f00 	cmp.w	sl, #0
 800686e:	d024      	beq.n	80068ba <__multiply+0xf2>
 8006870:	f104 0e14 	add.w	lr, r4, #20
 8006874:	46a9      	mov	r9, r5
 8006876:	f04f 0c00 	mov.w	ip, #0
 800687a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800687e:	f8d9 3000 	ldr.w	r3, [r9]
 8006882:	fa1f fb87 	uxth.w	fp, r7
 8006886:	b29b      	uxth	r3, r3
 8006888:	fb0a 330b 	mla	r3, sl, fp, r3
 800688c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006890:	f8d9 7000 	ldr.w	r7, [r9]
 8006894:	4463      	add	r3, ip
 8006896:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800689a:	fb0a c70b 	mla	r7, sl, fp, ip
 800689e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068a8:	4572      	cmp	r2, lr
 80068aa:	f849 3b04 	str.w	r3, [r9], #4
 80068ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80068b2:	d8e2      	bhi.n	800687a <__multiply+0xb2>
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	f845 c003 	str.w	ip, [r5, r3]
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80068c0:	3104      	adds	r1, #4
 80068c2:	f1b9 0f00 	cmp.w	r9, #0
 80068c6:	d021      	beq.n	800690c <__multiply+0x144>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	f104 0c14 	add.w	ip, r4, #20
 80068ce:	46ae      	mov	lr, r5
 80068d0:	f04f 0a00 	mov.w	sl, #0
 80068d4:	f8bc b000 	ldrh.w	fp, [ip]
 80068d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80068dc:	fb09 770b 	mla	r7, r9, fp, r7
 80068e0:	4457      	add	r7, sl
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068e8:	f84e 3b04 	str.w	r3, [lr], #4
 80068ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068f4:	f8be 3000 	ldrh.w	r3, [lr]
 80068f8:	fb09 330a 	mla	r3, r9, sl, r3
 80068fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006900:	4562      	cmp	r2, ip
 8006902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006906:	d8e5      	bhi.n	80068d4 <__multiply+0x10c>
 8006908:	9f01      	ldr	r7, [sp, #4]
 800690a:	51eb      	str	r3, [r5, r7]
 800690c:	3504      	adds	r5, #4
 800690e:	e799      	b.n	8006844 <__multiply+0x7c>
 8006910:	3e01      	subs	r6, #1
 8006912:	e79b      	b.n	800684c <__multiply+0x84>
 8006914:	08009215 	.word	0x08009215
 8006918:	08009226 	.word	0x08009226

0800691c <__pow5mult>:
 800691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006920:	4615      	mov	r5, r2
 8006922:	f012 0203 	ands.w	r2, r2, #3
 8006926:	4607      	mov	r7, r0
 8006928:	460e      	mov	r6, r1
 800692a:	d007      	beq.n	800693c <__pow5mult+0x20>
 800692c:	4c25      	ldr	r4, [pc, #148]	@ (80069c4 <__pow5mult+0xa8>)
 800692e:	3a01      	subs	r2, #1
 8006930:	2300      	movs	r3, #0
 8006932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006936:	f7ff fe55 	bl	80065e4 <__multadd>
 800693a:	4606      	mov	r6, r0
 800693c:	10ad      	asrs	r5, r5, #2
 800693e:	d03d      	beq.n	80069bc <__pow5mult+0xa0>
 8006940:	69fc      	ldr	r4, [r7, #28]
 8006942:	b97c      	cbnz	r4, 8006964 <__pow5mult+0x48>
 8006944:	2010      	movs	r0, #16
 8006946:	f7ff fd35 	bl	80063b4 <malloc>
 800694a:	4602      	mov	r2, r0
 800694c:	61f8      	str	r0, [r7, #28]
 800694e:	b928      	cbnz	r0, 800695c <__pow5mult+0x40>
 8006950:	4b1d      	ldr	r3, [pc, #116]	@ (80069c8 <__pow5mult+0xac>)
 8006952:	481e      	ldr	r0, [pc, #120]	@ (80069cc <__pow5mult+0xb0>)
 8006954:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006958:	f001 fd36 	bl	80083c8 <__assert_func>
 800695c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006960:	6004      	str	r4, [r0, #0]
 8006962:	60c4      	str	r4, [r0, #12]
 8006964:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800696c:	b94c      	cbnz	r4, 8006982 <__pow5mult+0x66>
 800696e:	f240 2171 	movw	r1, #625	@ 0x271
 8006972:	4638      	mov	r0, r7
 8006974:	f7ff ff12 	bl	800679c <__i2b>
 8006978:	2300      	movs	r3, #0
 800697a:	f8c8 0008 	str.w	r0, [r8, #8]
 800697e:	4604      	mov	r4, r0
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	f04f 0900 	mov.w	r9, #0
 8006986:	07eb      	lsls	r3, r5, #31
 8006988:	d50a      	bpl.n	80069a0 <__pow5mult+0x84>
 800698a:	4631      	mov	r1, r6
 800698c:	4622      	mov	r2, r4
 800698e:	4638      	mov	r0, r7
 8006990:	f7ff ff1a 	bl	80067c8 <__multiply>
 8006994:	4631      	mov	r1, r6
 8006996:	4680      	mov	r8, r0
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff fe01 	bl	80065a0 <_Bfree>
 800699e:	4646      	mov	r6, r8
 80069a0:	106d      	asrs	r5, r5, #1
 80069a2:	d00b      	beq.n	80069bc <__pow5mult+0xa0>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	b938      	cbnz	r0, 80069b8 <__pow5mult+0x9c>
 80069a8:	4622      	mov	r2, r4
 80069aa:	4621      	mov	r1, r4
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7ff ff0b 	bl	80067c8 <__multiply>
 80069b2:	6020      	str	r0, [r4, #0]
 80069b4:	f8c0 9000 	str.w	r9, [r0]
 80069b8:	4604      	mov	r4, r0
 80069ba:	e7e4      	b.n	8006986 <__pow5mult+0x6a>
 80069bc:	4630      	mov	r0, r6
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	bf00      	nop
 80069c4:	08009280 	.word	0x08009280
 80069c8:	080091a6 	.word	0x080091a6
 80069cc:	08009226 	.word	0x08009226

080069d0 <__lshift>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	6849      	ldr	r1, [r1, #4]
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069de:	68a3      	ldr	r3, [r4, #8]
 80069e0:	4607      	mov	r7, r0
 80069e2:	4691      	mov	r9, r2
 80069e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069e8:	f108 0601 	add.w	r6, r8, #1
 80069ec:	42b3      	cmp	r3, r6
 80069ee:	db0b      	blt.n	8006a08 <__lshift+0x38>
 80069f0:	4638      	mov	r0, r7
 80069f2:	f7ff fd95 	bl	8006520 <_Balloc>
 80069f6:	4605      	mov	r5, r0
 80069f8:	b948      	cbnz	r0, 8006a0e <__lshift+0x3e>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b28      	ldr	r3, [pc, #160]	@ (8006aa0 <__lshift+0xd0>)
 80069fe:	4829      	ldr	r0, [pc, #164]	@ (8006aa4 <__lshift+0xd4>)
 8006a00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a04:	f001 fce0 	bl	80083c8 <__assert_func>
 8006a08:	3101      	adds	r1, #1
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	e7ee      	b.n	80069ec <__lshift+0x1c>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f100 0114 	add.w	r1, r0, #20
 8006a14:	f100 0210 	add.w	r2, r0, #16
 8006a18:	4618      	mov	r0, r3
 8006a1a:	4553      	cmp	r3, sl
 8006a1c:	db33      	blt.n	8006a86 <__lshift+0xb6>
 8006a1e:	6920      	ldr	r0, [r4, #16]
 8006a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a24:	f104 0314 	add.w	r3, r4, #20
 8006a28:	f019 091f 	ands.w	r9, r9, #31
 8006a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a34:	d02b      	beq.n	8006a8e <__lshift+0xbe>
 8006a36:	f1c9 0e20 	rsb	lr, r9, #32
 8006a3a:	468a      	mov	sl, r1
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	fa00 f009 	lsl.w	r0, r0, r9
 8006a44:	4310      	orrs	r0, r2
 8006a46:	f84a 0b04 	str.w	r0, [sl], #4
 8006a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a4e:	459c      	cmp	ip, r3
 8006a50:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a54:	d8f3      	bhi.n	8006a3e <__lshift+0x6e>
 8006a56:	ebac 0304 	sub.w	r3, ip, r4
 8006a5a:	3b15      	subs	r3, #21
 8006a5c:	f023 0303 	bic.w	r3, r3, #3
 8006a60:	3304      	adds	r3, #4
 8006a62:	f104 0015 	add.w	r0, r4, #21
 8006a66:	4584      	cmp	ip, r0
 8006a68:	bf38      	it	cc
 8006a6a:	2304      	movcc	r3, #4
 8006a6c:	50ca      	str	r2, [r1, r3]
 8006a6e:	b10a      	cbz	r2, 8006a74 <__lshift+0xa4>
 8006a70:	f108 0602 	add.w	r6, r8, #2
 8006a74:	3e01      	subs	r6, #1
 8006a76:	4638      	mov	r0, r7
 8006a78:	612e      	str	r6, [r5, #16]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	f7ff fd90 	bl	80065a0 <_Bfree>
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a86:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	e7c5      	b.n	8006a1a <__lshift+0x4a>
 8006a8e:	3904      	subs	r1, #4
 8006a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a94:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a98:	459c      	cmp	ip, r3
 8006a9a:	d8f9      	bhi.n	8006a90 <__lshift+0xc0>
 8006a9c:	e7ea      	b.n	8006a74 <__lshift+0xa4>
 8006a9e:	bf00      	nop
 8006aa0:	08009215 	.word	0x08009215
 8006aa4:	08009226 	.word	0x08009226

08006aa8 <__mcmp>:
 8006aa8:	690a      	ldr	r2, [r1, #16]
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6900      	ldr	r0, [r0, #16]
 8006aae:	1a80      	subs	r0, r0, r2
 8006ab0:	b530      	push	{r4, r5, lr}
 8006ab2:	d10e      	bne.n	8006ad2 <__mcmp+0x2a>
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	3114      	adds	r1, #20
 8006ab8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006abc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ac8:	4295      	cmp	r5, r2
 8006aca:	d003      	beq.n	8006ad4 <__mcmp+0x2c>
 8006acc:	d205      	bcs.n	8006ada <__mcmp+0x32>
 8006ace:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad2:	bd30      	pop	{r4, r5, pc}
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d3f3      	bcc.n	8006ac0 <__mcmp+0x18>
 8006ad8:	e7fb      	b.n	8006ad2 <__mcmp+0x2a>
 8006ada:	2001      	movs	r0, #1
 8006adc:	e7f9      	b.n	8006ad2 <__mcmp+0x2a>
	...

08006ae0 <__mdiff>:
 8006ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	4689      	mov	r9, r1
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4648      	mov	r0, r9
 8006aec:	4614      	mov	r4, r2
 8006aee:	f7ff ffdb 	bl	8006aa8 <__mcmp>
 8006af2:	1e05      	subs	r5, r0, #0
 8006af4:	d112      	bne.n	8006b1c <__mdiff+0x3c>
 8006af6:	4629      	mov	r1, r5
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7ff fd11 	bl	8006520 <_Balloc>
 8006afe:	4602      	mov	r2, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <__mdiff+0x2e>
 8006b02:	4b3f      	ldr	r3, [pc, #252]	@ (8006c00 <__mdiff+0x120>)
 8006b04:	f240 2137 	movw	r1, #567	@ 0x237
 8006b08:	483e      	ldr	r0, [pc, #248]	@ (8006c04 <__mdiff+0x124>)
 8006b0a:	f001 fc5d 	bl	80083c8 <__assert_func>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b14:	4610      	mov	r0, r2
 8006b16:	b003      	add	sp, #12
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	bfbc      	itt	lt
 8006b1e:	464b      	movlt	r3, r9
 8006b20:	46a1      	movlt	r9, r4
 8006b22:	4630      	mov	r0, r6
 8006b24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b28:	bfba      	itte	lt
 8006b2a:	461c      	movlt	r4, r3
 8006b2c:	2501      	movlt	r5, #1
 8006b2e:	2500      	movge	r5, #0
 8006b30:	f7ff fcf6 	bl	8006520 <_Balloc>
 8006b34:	4602      	mov	r2, r0
 8006b36:	b918      	cbnz	r0, 8006b40 <__mdiff+0x60>
 8006b38:	4b31      	ldr	r3, [pc, #196]	@ (8006c00 <__mdiff+0x120>)
 8006b3a:	f240 2145 	movw	r1, #581	@ 0x245
 8006b3e:	e7e3      	b.n	8006b08 <__mdiff+0x28>
 8006b40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b44:	6926      	ldr	r6, [r4, #16]
 8006b46:	60c5      	str	r5, [r0, #12]
 8006b48:	f109 0310 	add.w	r3, r9, #16
 8006b4c:	f109 0514 	add.w	r5, r9, #20
 8006b50:	f104 0e14 	add.w	lr, r4, #20
 8006b54:	f100 0b14 	add.w	fp, r0, #20
 8006b58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	46d9      	mov	r9, fp
 8006b64:	f04f 0c00 	mov.w	ip, #0
 8006b68:	9b01      	ldr	r3, [sp, #4]
 8006b6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	fa1f f38a 	uxth.w	r3, sl
 8006b78:	4619      	mov	r1, r3
 8006b7a:	b283      	uxth	r3, r0
 8006b7c:	1acb      	subs	r3, r1, r3
 8006b7e:	0c00      	lsrs	r0, r0, #16
 8006b80:	4463      	add	r3, ip
 8006b82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b90:	4576      	cmp	r6, lr
 8006b92:	f849 3b04 	str.w	r3, [r9], #4
 8006b96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b9a:	d8e5      	bhi.n	8006b68 <__mdiff+0x88>
 8006b9c:	1b33      	subs	r3, r6, r4
 8006b9e:	3b15      	subs	r3, #21
 8006ba0:	f023 0303 	bic.w	r3, r3, #3
 8006ba4:	3415      	adds	r4, #21
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	42a6      	cmp	r6, r4
 8006baa:	bf38      	it	cc
 8006bac:	2304      	movcc	r3, #4
 8006bae:	441d      	add	r5, r3
 8006bb0:	445b      	add	r3, fp
 8006bb2:	461e      	mov	r6, r3
 8006bb4:	462c      	mov	r4, r5
 8006bb6:	4544      	cmp	r4, r8
 8006bb8:	d30e      	bcc.n	8006bd8 <__mdiff+0xf8>
 8006bba:	f108 0103 	add.w	r1, r8, #3
 8006bbe:	1b49      	subs	r1, r1, r5
 8006bc0:	f021 0103 	bic.w	r1, r1, #3
 8006bc4:	3d03      	subs	r5, #3
 8006bc6:	45a8      	cmp	r8, r5
 8006bc8:	bf38      	it	cc
 8006bca:	2100      	movcc	r1, #0
 8006bcc:	440b      	add	r3, r1
 8006bce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bd2:	b191      	cbz	r1, 8006bfa <__mdiff+0x11a>
 8006bd4:	6117      	str	r7, [r2, #16]
 8006bd6:	e79d      	b.n	8006b14 <__mdiff+0x34>
 8006bd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006bdc:	46e6      	mov	lr, ip
 8006bde:	0c08      	lsrs	r0, r1, #16
 8006be0:	fa1c fc81 	uxtah	ip, ip, r1
 8006be4:	4471      	add	r1, lr
 8006be6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006bea:	b289      	uxth	r1, r1
 8006bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bf0:	f846 1b04 	str.w	r1, [r6], #4
 8006bf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bf8:	e7dd      	b.n	8006bb6 <__mdiff+0xd6>
 8006bfa:	3f01      	subs	r7, #1
 8006bfc:	e7e7      	b.n	8006bce <__mdiff+0xee>
 8006bfe:	bf00      	nop
 8006c00:	08009215 	.word	0x08009215
 8006c04:	08009226 	.word	0x08009226

08006c08 <__ulp>:
 8006c08:	b082      	sub	sp, #8
 8006c0a:	ed8d 0b00 	vstr	d0, [sp]
 8006c0e:	9a01      	ldr	r2, [sp, #4]
 8006c10:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <__ulp+0x48>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	dc08      	bgt.n	8006c2e <__ulp+0x26>
 8006c1c:	425b      	negs	r3, r3
 8006c1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006c22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c26:	da04      	bge.n	8006c32 <__ulp+0x2a>
 8006c28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006c2c:	4113      	asrs	r3, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	e008      	b.n	8006c44 <__ulp+0x3c>
 8006c32:	f1a2 0314 	sub.w	r3, r2, #20
 8006c36:	2b1e      	cmp	r3, #30
 8006c38:	bfda      	itte	le
 8006c3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006c3e:	40da      	lsrle	r2, r3
 8006c40:	2201      	movgt	r2, #1
 8006c42:	2300      	movs	r3, #0
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	ec41 0b10 	vmov	d0, r0, r1
 8006c4c:	b002      	add	sp, #8
 8006c4e:	4770      	bx	lr
 8006c50:	7ff00000 	.word	0x7ff00000

08006c54 <__b2d>:
 8006c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c58:	6906      	ldr	r6, [r0, #16]
 8006c5a:	f100 0814 	add.w	r8, r0, #20
 8006c5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006c62:	1f37      	subs	r7, r6, #4
 8006c64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7ff fd4b 	bl	8006704 <__hi0bits>
 8006c6e:	f1c0 0320 	rsb	r3, r0, #32
 8006c72:	280a      	cmp	r0, #10
 8006c74:	600b      	str	r3, [r1, #0]
 8006c76:	491b      	ldr	r1, [pc, #108]	@ (8006ce4 <__b2d+0x90>)
 8006c78:	dc15      	bgt.n	8006ca6 <__b2d+0x52>
 8006c7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006c7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006c82:	45b8      	cmp	r8, r7
 8006c84:	ea43 0501 	orr.w	r5, r3, r1
 8006c88:	bf34      	ite	cc
 8006c8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c8e:	2300      	movcs	r3, #0
 8006c90:	3015      	adds	r0, #21
 8006c92:	fa02 f000 	lsl.w	r0, r2, r0
 8006c96:	fa23 f30c 	lsr.w	r3, r3, ip
 8006c9a:	4303      	orrs	r3, r0
 8006c9c:	461c      	mov	r4, r3
 8006c9e:	ec45 4b10 	vmov	d0, r4, r5
 8006ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca6:	45b8      	cmp	r8, r7
 8006ca8:	bf3a      	itte	cc
 8006caa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006cae:	f1a6 0708 	subcc.w	r7, r6, #8
 8006cb2:	2300      	movcs	r3, #0
 8006cb4:	380b      	subs	r0, #11
 8006cb6:	d012      	beq.n	8006cde <__b2d+0x8a>
 8006cb8:	f1c0 0120 	rsb	r1, r0, #32
 8006cbc:	fa23 f401 	lsr.w	r4, r3, r1
 8006cc0:	4082      	lsls	r2, r0
 8006cc2:	4322      	orrs	r2, r4
 8006cc4:	4547      	cmp	r7, r8
 8006cc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006cca:	bf8c      	ite	hi
 8006ccc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006cd0:	2200      	movls	r2, #0
 8006cd2:	4083      	lsls	r3, r0
 8006cd4:	40ca      	lsrs	r2, r1
 8006cd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	e7de      	b.n	8006c9c <__b2d+0x48>
 8006cde:	ea42 0501 	orr.w	r5, r2, r1
 8006ce2:	e7db      	b.n	8006c9c <__b2d+0x48>
 8006ce4:	3ff00000 	.word	0x3ff00000

08006ce8 <__d2b>:
 8006ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	460f      	mov	r7, r1
 8006cee:	2101      	movs	r1, #1
 8006cf0:	ec59 8b10 	vmov	r8, r9, d0
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	f7ff fc13 	bl	8006520 <_Balloc>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	b930      	cbnz	r0, 8006d0c <__d2b+0x24>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b23      	ldr	r3, [pc, #140]	@ (8006d90 <__d2b+0xa8>)
 8006d02:	4824      	ldr	r0, [pc, #144]	@ (8006d94 <__d2b+0xac>)
 8006d04:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d08:	f001 fb5e 	bl	80083c8 <__assert_func>
 8006d0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d14:	b10d      	cbz	r5, 8006d1a <__d2b+0x32>
 8006d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	f1b8 0300 	subs.w	r3, r8, #0
 8006d20:	d023      	beq.n	8006d6a <__d2b+0x82>
 8006d22:	4668      	mov	r0, sp
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	f7ff fd0c 	bl	8006742 <__lo0bits>
 8006d2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d2e:	b1d0      	cbz	r0, 8006d66 <__d2b+0x7e>
 8006d30:	f1c0 0320 	rsb	r3, r0, #32
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	40c2      	lsrs	r2, r0
 8006d3c:	6163      	str	r3, [r4, #20]
 8006d3e:	9201      	str	r2, [sp, #4]
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	61a3      	str	r3, [r4, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bf0c      	ite	eq
 8006d48:	2201      	moveq	r2, #1
 8006d4a:	2202      	movne	r2, #2
 8006d4c:	6122      	str	r2, [r4, #16]
 8006d4e:	b1a5      	cbz	r5, 8006d7a <__d2b+0x92>
 8006d50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d54:	4405      	add	r5, r0
 8006d56:	603d      	str	r5, [r7, #0]
 8006d58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d5c:	6030      	str	r0, [r6, #0]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	b003      	add	sp, #12
 8006d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d66:	6161      	str	r1, [r4, #20]
 8006d68:	e7ea      	b.n	8006d40 <__d2b+0x58>
 8006d6a:	a801      	add	r0, sp, #4
 8006d6c:	f7ff fce9 	bl	8006742 <__lo0bits>
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	6163      	str	r3, [r4, #20]
 8006d74:	3020      	adds	r0, #32
 8006d76:	2201      	movs	r2, #1
 8006d78:	e7e8      	b.n	8006d4c <__d2b+0x64>
 8006d7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d82:	6038      	str	r0, [r7, #0]
 8006d84:	6918      	ldr	r0, [r3, #16]
 8006d86:	f7ff fcbd 	bl	8006704 <__hi0bits>
 8006d8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d8e:	e7e5      	b.n	8006d5c <__d2b+0x74>
 8006d90:	08009215 	.word	0x08009215
 8006d94:	08009226 	.word	0x08009226

08006d98 <__ratio>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	e9cd 1000 	strd	r1, r0, [sp]
 8006da2:	a902      	add	r1, sp, #8
 8006da4:	f7ff ff56 	bl	8006c54 <__b2d>
 8006da8:	9800      	ldr	r0, [sp, #0]
 8006daa:	a903      	add	r1, sp, #12
 8006dac:	ec55 4b10 	vmov	r4, r5, d0
 8006db0:	f7ff ff50 	bl	8006c54 <__b2d>
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	6919      	ldr	r1, [r3, #16]
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	1ac9      	subs	r1, r1, r3
 8006dbe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	ec5b ab10 	vmov	sl, fp, d0
 8006dc8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bfce      	itee	gt
 8006dd0:	462a      	movgt	r2, r5
 8006dd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006dd6:	465a      	movle	r2, fp
 8006dd8:	462f      	mov	r7, r5
 8006dda:	46d9      	mov	r9, fp
 8006ddc:	bfcc      	ite	gt
 8006dde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006de2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006de6:	464b      	mov	r3, r9
 8006de8:	4652      	mov	r2, sl
 8006dea:	4620      	mov	r0, r4
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fd4d 	bl	800088c <__aeabi_ddiv>
 8006df2:	ec41 0b10 	vmov	d0, r0, r1
 8006df6:	b005      	add	sp, #20
 8006df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006dfc <__copybits>:
 8006dfc:	3901      	subs	r1, #1
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	1149      	asrs	r1, r1, #5
 8006e02:	6914      	ldr	r4, [r2, #16]
 8006e04:	3101      	adds	r1, #1
 8006e06:	f102 0314 	add.w	r3, r2, #20
 8006e0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e12:	1f05      	subs	r5, r0, #4
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d30c      	bcc.n	8006e32 <__copybits+0x36>
 8006e18:	1aa3      	subs	r3, r4, r2
 8006e1a:	3b11      	subs	r3, #17
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	3211      	adds	r2, #17
 8006e22:	42a2      	cmp	r2, r4
 8006e24:	bf88      	it	hi
 8006e26:	2300      	movhi	r3, #0
 8006e28:	4418      	add	r0, r3
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4288      	cmp	r0, r1
 8006e2e:	d305      	bcc.n	8006e3c <__copybits+0x40>
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e36:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e3a:	e7eb      	b.n	8006e14 <__copybits+0x18>
 8006e3c:	f840 3b04 	str.w	r3, [r0], #4
 8006e40:	e7f4      	b.n	8006e2c <__copybits+0x30>

08006e42 <__any_on>:
 8006e42:	f100 0214 	add.w	r2, r0, #20
 8006e46:	6900      	ldr	r0, [r0, #16]
 8006e48:	114b      	asrs	r3, r1, #5
 8006e4a:	4298      	cmp	r0, r3
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	db11      	blt.n	8006e74 <__any_on+0x32>
 8006e50:	dd0a      	ble.n	8006e68 <__any_on+0x26>
 8006e52:	f011 011f 	ands.w	r1, r1, #31
 8006e56:	d007      	beq.n	8006e68 <__any_on+0x26>
 8006e58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e5c:	fa24 f001 	lsr.w	r0, r4, r1
 8006e60:	fa00 f101 	lsl.w	r1, r0, r1
 8006e64:	428c      	cmp	r4, r1
 8006e66:	d10b      	bne.n	8006e80 <__any_on+0x3e>
 8006e68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d803      	bhi.n	8006e78 <__any_on+0x36>
 8006e70:	2000      	movs	r0, #0
 8006e72:	bd10      	pop	{r4, pc}
 8006e74:	4603      	mov	r3, r0
 8006e76:	e7f7      	b.n	8006e68 <__any_on+0x26>
 8006e78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d0f5      	beq.n	8006e6c <__any_on+0x2a>
 8006e80:	2001      	movs	r0, #1
 8006e82:	e7f6      	b.n	8006e72 <__any_on+0x30>

08006e84 <sulp>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	ec45 4b10 	vmov	d0, r4, r5
 8006e8e:	4616      	mov	r6, r2
 8006e90:	f7ff feba 	bl	8006c08 <__ulp>
 8006e94:	ec51 0b10 	vmov	r0, r1, d0
 8006e98:	b17e      	cbz	r6, 8006eba <sulp+0x36>
 8006e9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dd09      	ble.n	8006eba <sulp+0x36>
 8006ea6:	051b      	lsls	r3, r3, #20
 8006ea8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006eac:	2400      	movs	r4, #0
 8006eae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	f7f9 fbbf 	bl	8000638 <__aeabi_dmul>
 8006eba:	ec41 0b10 	vmov	d0, r0, r1
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}

08006ec0 <_strtod_l>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b09f      	sub	sp, #124	@ 0x7c
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006eca:	2200      	movs	r2, #0
 8006ecc:	921a      	str	r2, [sp, #104]	@ 0x68
 8006ece:	9005      	str	r0, [sp, #20]
 8006ed0:	f04f 0a00 	mov.w	sl, #0
 8006ed4:	f04f 0b00 	mov.w	fp, #0
 8006ed8:	460a      	mov	r2, r1
 8006eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8006edc:	7811      	ldrb	r1, [r2, #0]
 8006ede:	292b      	cmp	r1, #43	@ 0x2b
 8006ee0:	d04a      	beq.n	8006f78 <_strtod_l+0xb8>
 8006ee2:	d838      	bhi.n	8006f56 <_strtod_l+0x96>
 8006ee4:	290d      	cmp	r1, #13
 8006ee6:	d832      	bhi.n	8006f4e <_strtod_l+0x8e>
 8006ee8:	2908      	cmp	r1, #8
 8006eea:	d832      	bhi.n	8006f52 <_strtod_l+0x92>
 8006eec:	2900      	cmp	r1, #0
 8006eee:	d03b      	beq.n	8006f68 <_strtod_l+0xa8>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006ef4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006ef6:	782a      	ldrb	r2, [r5, #0]
 8006ef8:	2a30      	cmp	r2, #48	@ 0x30
 8006efa:	f040 80b3 	bne.w	8007064 <_strtod_l+0x1a4>
 8006efe:	786a      	ldrb	r2, [r5, #1]
 8006f00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006f04:	2a58      	cmp	r2, #88	@ 0x58
 8006f06:	d16e      	bne.n	8006fe6 <_strtod_l+0x126>
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4a8e      	ldr	r2, [pc, #568]	@ (800714c <_strtod_l+0x28c>)
 8006f14:	9805      	ldr	r0, [sp, #20]
 8006f16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f18:	a919      	add	r1, sp, #100	@ 0x64
 8006f1a:	f001 faef 	bl	80084fc <__gethex>
 8006f1e:	f010 060f 	ands.w	r6, r0, #15
 8006f22:	4604      	mov	r4, r0
 8006f24:	d005      	beq.n	8006f32 <_strtod_l+0x72>
 8006f26:	2e06      	cmp	r6, #6
 8006f28:	d128      	bne.n	8006f7c <_strtod_l+0xbc>
 8006f2a:	3501      	adds	r5, #1
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006f30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 858e 	bne.w	8007a56 <_strtod_l+0xb96>
 8006f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f3c:	b1cb      	cbz	r3, 8006f72 <_strtod_l+0xb2>
 8006f3e:	4652      	mov	r2, sl
 8006f40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006f44:	ec43 2b10 	vmov	d0, r2, r3
 8006f48:	b01f      	add	sp, #124	@ 0x7c
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	2920      	cmp	r1, #32
 8006f50:	d1ce      	bne.n	8006ef0 <_strtod_l+0x30>
 8006f52:	3201      	adds	r2, #1
 8006f54:	e7c1      	b.n	8006eda <_strtod_l+0x1a>
 8006f56:	292d      	cmp	r1, #45	@ 0x2d
 8006f58:	d1ca      	bne.n	8006ef0 <_strtod_l+0x30>
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006f5e:	1c51      	adds	r1, r2, #1
 8006f60:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f62:	7852      	ldrb	r2, [r2, #1]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d1c5      	bne.n	8006ef4 <_strtod_l+0x34>
 8006f68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 8570 	bne.w	8007a52 <_strtod_l+0xb92>
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	e7e5      	b.n	8006f44 <_strtod_l+0x84>
 8006f78:	2100      	movs	r1, #0
 8006f7a:	e7ef      	b.n	8006f5c <_strtod_l+0x9c>
 8006f7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f7e:	b13a      	cbz	r2, 8006f90 <_strtod_l+0xd0>
 8006f80:	2135      	movs	r1, #53	@ 0x35
 8006f82:	a81c      	add	r0, sp, #112	@ 0x70
 8006f84:	f7ff ff3a 	bl	8006dfc <__copybits>
 8006f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f8a:	9805      	ldr	r0, [sp, #20]
 8006f8c:	f7ff fb08 	bl	80065a0 <_Bfree>
 8006f90:	3e01      	subs	r6, #1
 8006f92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f94:	2e04      	cmp	r6, #4
 8006f96:	d806      	bhi.n	8006fa6 <_strtod_l+0xe6>
 8006f98:	e8df f006 	tbb	[pc, r6]
 8006f9c:	201d0314 	.word	0x201d0314
 8006fa0:	14          	.byte	0x14
 8006fa1:	00          	.byte	0x00
 8006fa2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006fa6:	05e1      	lsls	r1, r4, #23
 8006fa8:	bf48      	it	mi
 8006faa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fb2:	0d1b      	lsrs	r3, r3, #20
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1bb      	bne.n	8006f32 <_strtod_l+0x72>
 8006fba:	f7fe fb31 	bl	8005620 <__errno>
 8006fbe:	2322      	movs	r3, #34	@ 0x22
 8006fc0:	6003      	str	r3, [r0, #0]
 8006fc2:	e7b6      	b.n	8006f32 <_strtod_l+0x72>
 8006fc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006fc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006fcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006fd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fd4:	e7e7      	b.n	8006fa6 <_strtod_l+0xe6>
 8006fd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007154 <_strtod_l+0x294>
 8006fda:	e7e4      	b.n	8006fa6 <_strtod_l+0xe6>
 8006fdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006fe0:	f04f 3aff 	mov.w	sl, #4294967295
 8006fe4:	e7df      	b.n	8006fa6 <_strtod_l+0xe6>
 8006fe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	9219      	str	r2, [sp, #100]	@ 0x64
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b30      	cmp	r3, #48	@ 0x30
 8006ff0:	d0f9      	beq.n	8006fe6 <_strtod_l+0x126>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d09d      	beq.n	8006f32 <_strtod_l+0x72>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ffc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ffe:	2300      	movs	r3, #0
 8007000:	9308      	str	r3, [sp, #32]
 8007002:	930a      	str	r3, [sp, #40]	@ 0x28
 8007004:	461f      	mov	r7, r3
 8007006:	220a      	movs	r2, #10
 8007008:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800700a:	7805      	ldrb	r5, [r0, #0]
 800700c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007010:	b2d9      	uxtb	r1, r3
 8007012:	2909      	cmp	r1, #9
 8007014:	d928      	bls.n	8007068 <_strtod_l+0x1a8>
 8007016:	494e      	ldr	r1, [pc, #312]	@ (8007150 <_strtod_l+0x290>)
 8007018:	2201      	movs	r2, #1
 800701a:	f001 f979 	bl	8008310 <strncmp>
 800701e:	2800      	cmp	r0, #0
 8007020:	d032      	beq.n	8007088 <_strtod_l+0x1c8>
 8007022:	2000      	movs	r0, #0
 8007024:	462a      	mov	r2, r5
 8007026:	4681      	mov	r9, r0
 8007028:	463d      	mov	r5, r7
 800702a:	4603      	mov	r3, r0
 800702c:	2a65      	cmp	r2, #101	@ 0x65
 800702e:	d001      	beq.n	8007034 <_strtod_l+0x174>
 8007030:	2a45      	cmp	r2, #69	@ 0x45
 8007032:	d114      	bne.n	800705e <_strtod_l+0x19e>
 8007034:	b91d      	cbnz	r5, 800703e <_strtod_l+0x17e>
 8007036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007038:	4302      	orrs	r2, r0
 800703a:	d095      	beq.n	8006f68 <_strtod_l+0xa8>
 800703c:	2500      	movs	r5, #0
 800703e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007040:	1c62      	adds	r2, r4, #1
 8007042:	9219      	str	r2, [sp, #100]	@ 0x64
 8007044:	7862      	ldrb	r2, [r4, #1]
 8007046:	2a2b      	cmp	r2, #43	@ 0x2b
 8007048:	d077      	beq.n	800713a <_strtod_l+0x27a>
 800704a:	2a2d      	cmp	r2, #45	@ 0x2d
 800704c:	d07b      	beq.n	8007146 <_strtod_l+0x286>
 800704e:	f04f 0c00 	mov.w	ip, #0
 8007052:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007056:	2909      	cmp	r1, #9
 8007058:	f240 8082 	bls.w	8007160 <_strtod_l+0x2a0>
 800705c:	9419      	str	r4, [sp, #100]	@ 0x64
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	e0a2      	b.n	80071aa <_strtod_l+0x2ea>
 8007064:	2300      	movs	r3, #0
 8007066:	e7c7      	b.n	8006ff8 <_strtod_l+0x138>
 8007068:	2f08      	cmp	r7, #8
 800706a:	bfd5      	itete	le
 800706c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800706e:	9908      	ldrgt	r1, [sp, #32]
 8007070:	fb02 3301 	mlale	r3, r2, r1, r3
 8007074:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007078:	f100 0001 	add.w	r0, r0, #1
 800707c:	bfd4      	ite	le
 800707e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007080:	9308      	strgt	r3, [sp, #32]
 8007082:	3701      	adds	r7, #1
 8007084:	9019      	str	r0, [sp, #100]	@ 0x64
 8007086:	e7bf      	b.n	8007008 <_strtod_l+0x148>
 8007088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	9219      	str	r2, [sp, #100]	@ 0x64
 800708e:	785a      	ldrb	r2, [r3, #1]
 8007090:	b37f      	cbz	r7, 80070f2 <_strtod_l+0x232>
 8007092:	4681      	mov	r9, r0
 8007094:	463d      	mov	r5, r7
 8007096:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800709a:	2b09      	cmp	r3, #9
 800709c:	d912      	bls.n	80070c4 <_strtod_l+0x204>
 800709e:	2301      	movs	r3, #1
 80070a0:	e7c4      	b.n	800702c <_strtod_l+0x16c>
 80070a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80070a8:	785a      	ldrb	r2, [r3, #1]
 80070aa:	3001      	adds	r0, #1
 80070ac:	2a30      	cmp	r2, #48	@ 0x30
 80070ae:	d0f8      	beq.n	80070a2 <_strtod_l+0x1e2>
 80070b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	f200 84d3 	bhi.w	8007a60 <_strtod_l+0xba0>
 80070ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80070be:	4681      	mov	r9, r0
 80070c0:	2000      	movs	r0, #0
 80070c2:	4605      	mov	r5, r0
 80070c4:	3a30      	subs	r2, #48	@ 0x30
 80070c6:	f100 0301 	add.w	r3, r0, #1
 80070ca:	d02a      	beq.n	8007122 <_strtod_l+0x262>
 80070cc:	4499      	add	r9, r3
 80070ce:	eb00 0c05 	add.w	ip, r0, r5
 80070d2:	462b      	mov	r3, r5
 80070d4:	210a      	movs	r1, #10
 80070d6:	4563      	cmp	r3, ip
 80070d8:	d10d      	bne.n	80070f6 <_strtod_l+0x236>
 80070da:	1c69      	adds	r1, r5, #1
 80070dc:	4401      	add	r1, r0
 80070de:	4428      	add	r0, r5
 80070e0:	2808      	cmp	r0, #8
 80070e2:	dc16      	bgt.n	8007112 <_strtod_l+0x252>
 80070e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070e6:	230a      	movs	r3, #10
 80070e8:	fb03 2300 	mla	r3, r3, r0, r2
 80070ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ee:	2300      	movs	r3, #0
 80070f0:	e018      	b.n	8007124 <_strtod_l+0x264>
 80070f2:	4638      	mov	r0, r7
 80070f4:	e7da      	b.n	80070ac <_strtod_l+0x1ec>
 80070f6:	2b08      	cmp	r3, #8
 80070f8:	f103 0301 	add.w	r3, r3, #1
 80070fc:	dc03      	bgt.n	8007106 <_strtod_l+0x246>
 80070fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007100:	434e      	muls	r6, r1
 8007102:	960a      	str	r6, [sp, #40]	@ 0x28
 8007104:	e7e7      	b.n	80070d6 <_strtod_l+0x216>
 8007106:	2b10      	cmp	r3, #16
 8007108:	bfde      	ittt	le
 800710a:	9e08      	ldrle	r6, [sp, #32]
 800710c:	434e      	mulle	r6, r1
 800710e:	9608      	strle	r6, [sp, #32]
 8007110:	e7e1      	b.n	80070d6 <_strtod_l+0x216>
 8007112:	280f      	cmp	r0, #15
 8007114:	dceb      	bgt.n	80070ee <_strtod_l+0x22e>
 8007116:	9808      	ldr	r0, [sp, #32]
 8007118:	230a      	movs	r3, #10
 800711a:	fb03 2300 	mla	r3, r3, r0, r2
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	e7e5      	b.n	80070ee <_strtod_l+0x22e>
 8007122:	4629      	mov	r1, r5
 8007124:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007126:	1c50      	adds	r0, r2, #1
 8007128:	9019      	str	r0, [sp, #100]	@ 0x64
 800712a:	7852      	ldrb	r2, [r2, #1]
 800712c:	4618      	mov	r0, r3
 800712e:	460d      	mov	r5, r1
 8007130:	e7b1      	b.n	8007096 <_strtod_l+0x1d6>
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	2301      	movs	r3, #1
 8007138:	e77d      	b.n	8007036 <_strtod_l+0x176>
 800713a:	f04f 0c00 	mov.w	ip, #0
 800713e:	1ca2      	adds	r2, r4, #2
 8007140:	9219      	str	r2, [sp, #100]	@ 0x64
 8007142:	78a2      	ldrb	r2, [r4, #2]
 8007144:	e785      	b.n	8007052 <_strtod_l+0x192>
 8007146:	f04f 0c01 	mov.w	ip, #1
 800714a:	e7f8      	b.n	800713e <_strtod_l+0x27e>
 800714c:	08009398 	.word	0x08009398
 8007150:	08009380 	.word	0x08009380
 8007154:	7ff00000 	.word	0x7ff00000
 8007158:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800715a:	1c51      	adds	r1, r2, #1
 800715c:	9119      	str	r1, [sp, #100]	@ 0x64
 800715e:	7852      	ldrb	r2, [r2, #1]
 8007160:	2a30      	cmp	r2, #48	@ 0x30
 8007162:	d0f9      	beq.n	8007158 <_strtod_l+0x298>
 8007164:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007168:	2908      	cmp	r1, #8
 800716a:	f63f af78 	bhi.w	800705e <_strtod_l+0x19e>
 800716e:	3a30      	subs	r2, #48	@ 0x30
 8007170:	920e      	str	r2, [sp, #56]	@ 0x38
 8007172:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007174:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007176:	f04f 080a 	mov.w	r8, #10
 800717a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800717c:	1c56      	adds	r6, r2, #1
 800717e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007180:	7852      	ldrb	r2, [r2, #1]
 8007182:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007186:	f1be 0f09 	cmp.w	lr, #9
 800718a:	d939      	bls.n	8007200 <_strtod_l+0x340>
 800718c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800718e:	1a76      	subs	r6, r6, r1
 8007190:	2e08      	cmp	r6, #8
 8007192:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007196:	dc03      	bgt.n	80071a0 <_strtod_l+0x2e0>
 8007198:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800719a:	4588      	cmp	r8, r1
 800719c:	bfa8      	it	ge
 800719e:	4688      	movge	r8, r1
 80071a0:	f1bc 0f00 	cmp.w	ip, #0
 80071a4:	d001      	beq.n	80071aa <_strtod_l+0x2ea>
 80071a6:	f1c8 0800 	rsb	r8, r8, #0
 80071aa:	2d00      	cmp	r5, #0
 80071ac:	d14e      	bne.n	800724c <_strtod_l+0x38c>
 80071ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071b0:	4308      	orrs	r0, r1
 80071b2:	f47f aebe 	bne.w	8006f32 <_strtod_l+0x72>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f47f aed6 	bne.w	8006f68 <_strtod_l+0xa8>
 80071bc:	2a69      	cmp	r2, #105	@ 0x69
 80071be:	d028      	beq.n	8007212 <_strtod_l+0x352>
 80071c0:	dc25      	bgt.n	800720e <_strtod_l+0x34e>
 80071c2:	2a49      	cmp	r2, #73	@ 0x49
 80071c4:	d025      	beq.n	8007212 <_strtod_l+0x352>
 80071c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80071c8:	f47f aece 	bne.w	8006f68 <_strtod_l+0xa8>
 80071cc:	499b      	ldr	r1, [pc, #620]	@ (800743c <_strtod_l+0x57c>)
 80071ce:	a819      	add	r0, sp, #100	@ 0x64
 80071d0:	f001 fbb6 	bl	8008940 <__match>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f aec7 	beq.w	8006f68 <_strtod_l+0xa8>
 80071da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b28      	cmp	r3, #40	@ 0x28
 80071e0:	d12e      	bne.n	8007240 <_strtod_l+0x380>
 80071e2:	4997      	ldr	r1, [pc, #604]	@ (8007440 <_strtod_l+0x580>)
 80071e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80071e6:	a819      	add	r0, sp, #100	@ 0x64
 80071e8:	f001 fbbe 	bl	8008968 <__hexnan>
 80071ec:	2805      	cmp	r0, #5
 80071ee:	d127      	bne.n	8007240 <_strtod_l+0x380>
 80071f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80071f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80071f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80071fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80071fe:	e698      	b.n	8006f32 <_strtod_l+0x72>
 8007200:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007202:	fb08 2101 	mla	r1, r8, r1, r2
 8007206:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800720a:	920e      	str	r2, [sp, #56]	@ 0x38
 800720c:	e7b5      	b.n	800717a <_strtod_l+0x2ba>
 800720e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007210:	e7da      	b.n	80071c8 <_strtod_l+0x308>
 8007212:	498c      	ldr	r1, [pc, #560]	@ (8007444 <_strtod_l+0x584>)
 8007214:	a819      	add	r0, sp, #100	@ 0x64
 8007216:	f001 fb93 	bl	8008940 <__match>
 800721a:	2800      	cmp	r0, #0
 800721c:	f43f aea4 	beq.w	8006f68 <_strtod_l+0xa8>
 8007220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007222:	4989      	ldr	r1, [pc, #548]	@ (8007448 <_strtod_l+0x588>)
 8007224:	3b01      	subs	r3, #1
 8007226:	a819      	add	r0, sp, #100	@ 0x64
 8007228:	9319      	str	r3, [sp, #100]	@ 0x64
 800722a:	f001 fb89 	bl	8008940 <__match>
 800722e:	b910      	cbnz	r0, 8007236 <_strtod_l+0x376>
 8007230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007232:	3301      	adds	r3, #1
 8007234:	9319      	str	r3, [sp, #100]	@ 0x64
 8007236:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007458 <_strtod_l+0x598>
 800723a:	f04f 0a00 	mov.w	sl, #0
 800723e:	e678      	b.n	8006f32 <_strtod_l+0x72>
 8007240:	4882      	ldr	r0, [pc, #520]	@ (800744c <_strtod_l+0x58c>)
 8007242:	f001 f8b9 	bl	80083b8 <nan>
 8007246:	ec5b ab10 	vmov	sl, fp, d0
 800724a:	e672      	b.n	8006f32 <_strtod_l+0x72>
 800724c:	eba8 0309 	sub.w	r3, r8, r9
 8007250:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007252:	9309      	str	r3, [sp, #36]	@ 0x24
 8007254:	2f00      	cmp	r7, #0
 8007256:	bf08      	it	eq
 8007258:	462f      	moveq	r7, r5
 800725a:	2d10      	cmp	r5, #16
 800725c:	462c      	mov	r4, r5
 800725e:	bfa8      	it	ge
 8007260:	2410      	movge	r4, #16
 8007262:	f7f9 f96f 	bl	8000544 <__aeabi_ui2d>
 8007266:	2d09      	cmp	r5, #9
 8007268:	4682      	mov	sl, r0
 800726a:	468b      	mov	fp, r1
 800726c:	dc13      	bgt.n	8007296 <_strtod_l+0x3d6>
 800726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	f43f ae5e 	beq.w	8006f32 <_strtod_l+0x72>
 8007276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007278:	dd78      	ble.n	800736c <_strtod_l+0x4ac>
 800727a:	2b16      	cmp	r3, #22
 800727c:	dc5f      	bgt.n	800733e <_strtod_l+0x47e>
 800727e:	4974      	ldr	r1, [pc, #464]	@ (8007450 <_strtod_l+0x590>)
 8007280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007288:	4652      	mov	r2, sl
 800728a:	465b      	mov	r3, fp
 800728c:	f7f9 f9d4 	bl	8000638 <__aeabi_dmul>
 8007290:	4682      	mov	sl, r0
 8007292:	468b      	mov	fp, r1
 8007294:	e64d      	b.n	8006f32 <_strtod_l+0x72>
 8007296:	4b6e      	ldr	r3, [pc, #440]	@ (8007450 <_strtod_l+0x590>)
 8007298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800729c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80072a0:	f7f9 f9ca 	bl	8000638 <__aeabi_dmul>
 80072a4:	4682      	mov	sl, r0
 80072a6:	9808      	ldr	r0, [sp, #32]
 80072a8:	468b      	mov	fp, r1
 80072aa:	f7f9 f94b 	bl	8000544 <__aeabi_ui2d>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4650      	mov	r0, sl
 80072b4:	4659      	mov	r1, fp
 80072b6:	f7f9 f809 	bl	80002cc <__adddf3>
 80072ba:	2d0f      	cmp	r5, #15
 80072bc:	4682      	mov	sl, r0
 80072be:	468b      	mov	fp, r1
 80072c0:	ddd5      	ble.n	800726e <_strtod_l+0x3ae>
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	1b2c      	subs	r4, r5, r4
 80072c6:	441c      	add	r4, r3
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	f340 8096 	ble.w	80073fa <_strtod_l+0x53a>
 80072ce:	f014 030f 	ands.w	r3, r4, #15
 80072d2:	d00a      	beq.n	80072ea <_strtod_l+0x42a>
 80072d4:	495e      	ldr	r1, [pc, #376]	@ (8007450 <_strtod_l+0x590>)
 80072d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072da:	4652      	mov	r2, sl
 80072dc:	465b      	mov	r3, fp
 80072de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072e2:	f7f9 f9a9 	bl	8000638 <__aeabi_dmul>
 80072e6:	4682      	mov	sl, r0
 80072e8:	468b      	mov	fp, r1
 80072ea:	f034 040f 	bics.w	r4, r4, #15
 80072ee:	d073      	beq.n	80073d8 <_strtod_l+0x518>
 80072f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80072f4:	dd48      	ble.n	8007388 <_strtod_l+0x4c8>
 80072f6:	2400      	movs	r4, #0
 80072f8:	46a0      	mov	r8, r4
 80072fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80072fc:	46a1      	mov	r9, r4
 80072fe:	9a05      	ldr	r2, [sp, #20]
 8007300:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007458 <_strtod_l+0x598>
 8007304:	2322      	movs	r3, #34	@ 0x22
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	f04f 0a00 	mov.w	sl, #0
 800730c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	f43f ae0f 	beq.w	8006f32 <_strtod_l+0x72>
 8007314:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007316:	9805      	ldr	r0, [sp, #20]
 8007318:	f7ff f942 	bl	80065a0 <_Bfree>
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	4649      	mov	r1, r9
 8007320:	f7ff f93e 	bl	80065a0 <_Bfree>
 8007324:	9805      	ldr	r0, [sp, #20]
 8007326:	4641      	mov	r1, r8
 8007328:	f7ff f93a 	bl	80065a0 <_Bfree>
 800732c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800732e:	9805      	ldr	r0, [sp, #20]
 8007330:	f7ff f936 	bl	80065a0 <_Bfree>
 8007334:	9805      	ldr	r0, [sp, #20]
 8007336:	4621      	mov	r1, r4
 8007338:	f7ff f932 	bl	80065a0 <_Bfree>
 800733c:	e5f9      	b.n	8006f32 <_strtod_l+0x72>
 800733e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007340:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007344:	4293      	cmp	r3, r2
 8007346:	dbbc      	blt.n	80072c2 <_strtod_l+0x402>
 8007348:	4c41      	ldr	r4, [pc, #260]	@ (8007450 <_strtod_l+0x590>)
 800734a:	f1c5 050f 	rsb	r5, r5, #15
 800734e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800735a:	f7f9 f96d 	bl	8000638 <__aeabi_dmul>
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	1b5d      	subs	r5, r3, r5
 8007362:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007366:	e9d4 2300 	ldrd	r2, r3, [r4]
 800736a:	e78f      	b.n	800728c <_strtod_l+0x3cc>
 800736c:	3316      	adds	r3, #22
 800736e:	dba8      	blt.n	80072c2 <_strtod_l+0x402>
 8007370:	4b37      	ldr	r3, [pc, #220]	@ (8007450 <_strtod_l+0x590>)
 8007372:	eba9 0808 	sub.w	r8, r9, r8
 8007376:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800737a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800737e:	4650      	mov	r0, sl
 8007380:	4659      	mov	r1, fp
 8007382:	f7f9 fa83 	bl	800088c <__aeabi_ddiv>
 8007386:	e783      	b.n	8007290 <_strtod_l+0x3d0>
 8007388:	4b32      	ldr	r3, [pc, #200]	@ (8007454 <_strtod_l+0x594>)
 800738a:	9308      	str	r3, [sp, #32]
 800738c:	2300      	movs	r3, #0
 800738e:	1124      	asrs	r4, r4, #4
 8007390:	4650      	mov	r0, sl
 8007392:	4659      	mov	r1, fp
 8007394:	461e      	mov	r6, r3
 8007396:	2c01      	cmp	r4, #1
 8007398:	dc21      	bgt.n	80073de <_strtod_l+0x51e>
 800739a:	b10b      	cbz	r3, 80073a0 <_strtod_l+0x4e0>
 800739c:	4682      	mov	sl, r0
 800739e:	468b      	mov	fp, r1
 80073a0:	492c      	ldr	r1, [pc, #176]	@ (8007454 <_strtod_l+0x594>)
 80073a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80073a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80073aa:	4652      	mov	r2, sl
 80073ac:	465b      	mov	r3, fp
 80073ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b2:	f7f9 f941 	bl	8000638 <__aeabi_dmul>
 80073b6:	4b28      	ldr	r3, [pc, #160]	@ (8007458 <_strtod_l+0x598>)
 80073b8:	460a      	mov	r2, r1
 80073ba:	400b      	ands	r3, r1
 80073bc:	4927      	ldr	r1, [pc, #156]	@ (800745c <_strtod_l+0x59c>)
 80073be:	428b      	cmp	r3, r1
 80073c0:	4682      	mov	sl, r0
 80073c2:	d898      	bhi.n	80072f6 <_strtod_l+0x436>
 80073c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf86      	itte	hi
 80073cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007460 <_strtod_l+0x5a0>
 80073d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80073d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80073d8:	2300      	movs	r3, #0
 80073da:	9308      	str	r3, [sp, #32]
 80073dc:	e07a      	b.n	80074d4 <_strtod_l+0x614>
 80073de:	07e2      	lsls	r2, r4, #31
 80073e0:	d505      	bpl.n	80073ee <_strtod_l+0x52e>
 80073e2:	9b08      	ldr	r3, [sp, #32]
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f9 f926 	bl	8000638 <__aeabi_dmul>
 80073ec:	2301      	movs	r3, #1
 80073ee:	9a08      	ldr	r2, [sp, #32]
 80073f0:	3208      	adds	r2, #8
 80073f2:	3601      	adds	r6, #1
 80073f4:	1064      	asrs	r4, r4, #1
 80073f6:	9208      	str	r2, [sp, #32]
 80073f8:	e7cd      	b.n	8007396 <_strtod_l+0x4d6>
 80073fa:	d0ed      	beq.n	80073d8 <_strtod_l+0x518>
 80073fc:	4264      	negs	r4, r4
 80073fe:	f014 020f 	ands.w	r2, r4, #15
 8007402:	d00a      	beq.n	800741a <_strtod_l+0x55a>
 8007404:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <_strtod_l+0x590>)
 8007406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007412:	f7f9 fa3b 	bl	800088c <__aeabi_ddiv>
 8007416:	4682      	mov	sl, r0
 8007418:	468b      	mov	fp, r1
 800741a:	1124      	asrs	r4, r4, #4
 800741c:	d0dc      	beq.n	80073d8 <_strtod_l+0x518>
 800741e:	2c1f      	cmp	r4, #31
 8007420:	dd20      	ble.n	8007464 <_strtod_l+0x5a4>
 8007422:	2400      	movs	r4, #0
 8007424:	46a0      	mov	r8, r4
 8007426:	940a      	str	r4, [sp, #40]	@ 0x28
 8007428:	46a1      	mov	r9, r4
 800742a:	9a05      	ldr	r2, [sp, #20]
 800742c:	2322      	movs	r3, #34	@ 0x22
 800742e:	f04f 0a00 	mov.w	sl, #0
 8007432:	f04f 0b00 	mov.w	fp, #0
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	e768      	b.n	800730c <_strtod_l+0x44c>
 800743a:	bf00      	nop
 800743c:	0800916d 	.word	0x0800916d
 8007440:	08009384 	.word	0x08009384
 8007444:	08009165 	.word	0x08009165
 8007448:	0800919c 	.word	0x0800919c
 800744c:	0800952d 	.word	0x0800952d
 8007450:	080092b8 	.word	0x080092b8
 8007454:	08009290 	.word	0x08009290
 8007458:	7ff00000 	.word	0x7ff00000
 800745c:	7ca00000 	.word	0x7ca00000
 8007460:	7fefffff 	.word	0x7fefffff
 8007464:	f014 0310 	ands.w	r3, r4, #16
 8007468:	bf18      	it	ne
 800746a:	236a      	movne	r3, #106	@ 0x6a
 800746c:	4ea9      	ldr	r6, [pc, #676]	@ (8007714 <_strtod_l+0x854>)
 800746e:	9308      	str	r3, [sp, #32]
 8007470:	4650      	mov	r0, sl
 8007472:	4659      	mov	r1, fp
 8007474:	2300      	movs	r3, #0
 8007476:	07e2      	lsls	r2, r4, #31
 8007478:	d504      	bpl.n	8007484 <_strtod_l+0x5c4>
 800747a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800747e:	f7f9 f8db 	bl	8000638 <__aeabi_dmul>
 8007482:	2301      	movs	r3, #1
 8007484:	1064      	asrs	r4, r4, #1
 8007486:	f106 0608 	add.w	r6, r6, #8
 800748a:	d1f4      	bne.n	8007476 <_strtod_l+0x5b6>
 800748c:	b10b      	cbz	r3, 8007492 <_strtod_l+0x5d2>
 800748e:	4682      	mov	sl, r0
 8007490:	468b      	mov	fp, r1
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	b1b3      	cbz	r3, 80074c4 <_strtod_l+0x604>
 8007496:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800749a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800749e:	2b00      	cmp	r3, #0
 80074a0:	4659      	mov	r1, fp
 80074a2:	dd0f      	ble.n	80074c4 <_strtod_l+0x604>
 80074a4:	2b1f      	cmp	r3, #31
 80074a6:	dd55      	ble.n	8007554 <_strtod_l+0x694>
 80074a8:	2b34      	cmp	r3, #52	@ 0x34
 80074aa:	bfde      	ittt	le
 80074ac:	f04f 33ff 	movle.w	r3, #4294967295
 80074b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80074b4:	4093      	lslle	r3, r2
 80074b6:	f04f 0a00 	mov.w	sl, #0
 80074ba:	bfcc      	ite	gt
 80074bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80074c0:	ea03 0b01 	andle.w	fp, r3, r1
 80074c4:	2200      	movs	r2, #0
 80074c6:	2300      	movs	r3, #0
 80074c8:	4650      	mov	r0, sl
 80074ca:	4659      	mov	r1, fp
 80074cc:	f7f9 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d1a6      	bne.n	8007422 <_strtod_l+0x562>
 80074d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80074da:	9805      	ldr	r0, [sp, #20]
 80074dc:	462b      	mov	r3, r5
 80074de:	463a      	mov	r2, r7
 80074e0:	f7ff f8c6 	bl	8006670 <__s2b>
 80074e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074e6:	2800      	cmp	r0, #0
 80074e8:	f43f af05 	beq.w	80072f6 <_strtod_l+0x436>
 80074ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	eba9 0308 	sub.w	r3, r9, r8
 80074f4:	bfa8      	it	ge
 80074f6:	2300      	movge	r3, #0
 80074f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80074fa:	2400      	movs	r4, #0
 80074fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007500:	9316      	str	r3, [sp, #88]	@ 0x58
 8007502:	46a0      	mov	r8, r4
 8007504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007506:	9805      	ldr	r0, [sp, #20]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	f7ff f809 	bl	8006520 <_Balloc>
 800750e:	4681      	mov	r9, r0
 8007510:	2800      	cmp	r0, #0
 8007512:	f43f aef4 	beq.w	80072fe <_strtod_l+0x43e>
 8007516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	3202      	adds	r2, #2
 800751c:	f103 010c 	add.w	r1, r3, #12
 8007520:	0092      	lsls	r2, r2, #2
 8007522:	300c      	adds	r0, #12
 8007524:	f000 ff38 	bl	8008398 <memcpy>
 8007528:	ec4b ab10 	vmov	d0, sl, fp
 800752c:	9805      	ldr	r0, [sp, #20]
 800752e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007530:	a91b      	add	r1, sp, #108	@ 0x6c
 8007532:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007536:	f7ff fbd7 	bl	8006ce8 <__d2b>
 800753a:	901a      	str	r0, [sp, #104]	@ 0x68
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f aede 	beq.w	80072fe <_strtod_l+0x43e>
 8007542:	9805      	ldr	r0, [sp, #20]
 8007544:	2101      	movs	r1, #1
 8007546:	f7ff f929 	bl	800679c <__i2b>
 800754a:	4680      	mov	r8, r0
 800754c:	b948      	cbnz	r0, 8007562 <_strtod_l+0x6a2>
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	e6d4      	b.n	80072fe <_strtod_l+0x43e>
 8007554:	f04f 32ff 	mov.w	r2, #4294967295
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	ea03 0a0a 	and.w	sl, r3, sl
 8007560:	e7b0      	b.n	80074c4 <_strtod_l+0x604>
 8007562:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007564:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007566:	2d00      	cmp	r5, #0
 8007568:	bfab      	itete	ge
 800756a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800756c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800756e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007570:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007572:	bfac      	ite	ge
 8007574:	18ef      	addge	r7, r5, r3
 8007576:	1b5e      	sublt	r6, r3, r5
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	1aed      	subs	r5, r5, r3
 800757c:	4415      	add	r5, r2
 800757e:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <_strtod_l+0x858>)
 8007580:	3d01      	subs	r5, #1
 8007582:	429d      	cmp	r5, r3
 8007584:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007588:	da50      	bge.n	800762c <_strtod_l+0x76c>
 800758a:	1b5b      	subs	r3, r3, r5
 800758c:	2b1f      	cmp	r3, #31
 800758e:	eba2 0203 	sub.w	r2, r2, r3
 8007592:	f04f 0101 	mov.w	r1, #1
 8007596:	dc3d      	bgt.n	8007614 <_strtod_l+0x754>
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800759e:	2300      	movs	r3, #0
 80075a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80075a2:	18bd      	adds	r5, r7, r2
 80075a4:	9b08      	ldr	r3, [sp, #32]
 80075a6:	42af      	cmp	r7, r5
 80075a8:	4416      	add	r6, r2
 80075aa:	441e      	add	r6, r3
 80075ac:	463b      	mov	r3, r7
 80075ae:	bfa8      	it	ge
 80075b0:	462b      	movge	r3, r5
 80075b2:	42b3      	cmp	r3, r6
 80075b4:	bfa8      	it	ge
 80075b6:	4633      	movge	r3, r6
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	bfc2      	ittt	gt
 80075bc:	1aed      	subgt	r5, r5, r3
 80075be:	1af6      	subgt	r6, r6, r3
 80075c0:	1aff      	subgt	r7, r7, r3
 80075c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd16      	ble.n	80075f6 <_strtod_l+0x736>
 80075c8:	4641      	mov	r1, r8
 80075ca:	9805      	ldr	r0, [sp, #20]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f7ff f9a5 	bl	800691c <__pow5mult>
 80075d2:	4680      	mov	r8, r0
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d0ba      	beq.n	800754e <_strtod_l+0x68e>
 80075d8:	4601      	mov	r1, r0
 80075da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80075dc:	9805      	ldr	r0, [sp, #20]
 80075de:	f7ff f8f3 	bl	80067c8 <__multiply>
 80075e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f43f ae8a 	beq.w	80072fe <_strtod_l+0x43e>
 80075ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075ec:	9805      	ldr	r0, [sp, #20]
 80075ee:	f7fe ffd7 	bl	80065a0 <_Bfree>
 80075f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	dc1d      	bgt.n	8007636 <_strtod_l+0x776>
 80075fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dd23      	ble.n	8007648 <_strtod_l+0x788>
 8007600:	4649      	mov	r1, r9
 8007602:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	f7ff f989 	bl	800691c <__pow5mult>
 800760a:	4681      	mov	r9, r0
 800760c:	b9e0      	cbnz	r0, 8007648 <_strtod_l+0x788>
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	e674      	b.n	80072fe <_strtod_l+0x43e>
 8007614:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007618:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800761c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007620:	35e2      	adds	r5, #226	@ 0xe2
 8007622:	fa01 f305 	lsl.w	r3, r1, r5
 8007626:	9310      	str	r3, [sp, #64]	@ 0x40
 8007628:	9113      	str	r1, [sp, #76]	@ 0x4c
 800762a:	e7ba      	b.n	80075a2 <_strtod_l+0x6e2>
 800762c:	2300      	movs	r3, #0
 800762e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007630:	2301      	movs	r3, #1
 8007632:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007634:	e7b5      	b.n	80075a2 <_strtod_l+0x6e2>
 8007636:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007638:	9805      	ldr	r0, [sp, #20]
 800763a:	462a      	mov	r2, r5
 800763c:	f7ff f9c8 	bl	80069d0 <__lshift>
 8007640:	901a      	str	r0, [sp, #104]	@ 0x68
 8007642:	2800      	cmp	r0, #0
 8007644:	d1d9      	bne.n	80075fa <_strtod_l+0x73a>
 8007646:	e65a      	b.n	80072fe <_strtod_l+0x43e>
 8007648:	2e00      	cmp	r6, #0
 800764a:	dd07      	ble.n	800765c <_strtod_l+0x79c>
 800764c:	4649      	mov	r1, r9
 800764e:	9805      	ldr	r0, [sp, #20]
 8007650:	4632      	mov	r2, r6
 8007652:	f7ff f9bd 	bl	80069d0 <__lshift>
 8007656:	4681      	mov	r9, r0
 8007658:	2800      	cmp	r0, #0
 800765a:	d0d8      	beq.n	800760e <_strtod_l+0x74e>
 800765c:	2f00      	cmp	r7, #0
 800765e:	dd08      	ble.n	8007672 <_strtod_l+0x7b2>
 8007660:	4641      	mov	r1, r8
 8007662:	9805      	ldr	r0, [sp, #20]
 8007664:	463a      	mov	r2, r7
 8007666:	f7ff f9b3 	bl	80069d0 <__lshift>
 800766a:	4680      	mov	r8, r0
 800766c:	2800      	cmp	r0, #0
 800766e:	f43f ae46 	beq.w	80072fe <_strtod_l+0x43e>
 8007672:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007674:	9805      	ldr	r0, [sp, #20]
 8007676:	464a      	mov	r2, r9
 8007678:	f7ff fa32 	bl	8006ae0 <__mdiff>
 800767c:	4604      	mov	r4, r0
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f ae3d 	beq.w	80072fe <_strtod_l+0x43e>
 8007684:	68c3      	ldr	r3, [r0, #12]
 8007686:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007688:	2300      	movs	r3, #0
 800768a:	60c3      	str	r3, [r0, #12]
 800768c:	4641      	mov	r1, r8
 800768e:	f7ff fa0b 	bl	8006aa8 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	da46      	bge.n	8007724 <_strtod_l+0x864>
 8007696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007698:	ea53 030a 	orrs.w	r3, r3, sl
 800769c:	d16c      	bne.n	8007778 <_strtod_l+0x8b8>
 800769e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d168      	bne.n	8007778 <_strtod_l+0x8b8>
 80076a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076aa:	0d1b      	lsrs	r3, r3, #20
 80076ac:	051b      	lsls	r3, r3, #20
 80076ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076b2:	d961      	bls.n	8007778 <_strtod_l+0x8b8>
 80076b4:	6963      	ldr	r3, [r4, #20]
 80076b6:	b913      	cbnz	r3, 80076be <_strtod_l+0x7fe>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	dd5c      	ble.n	8007778 <_strtod_l+0x8b8>
 80076be:	4621      	mov	r1, r4
 80076c0:	2201      	movs	r2, #1
 80076c2:	9805      	ldr	r0, [sp, #20]
 80076c4:	f7ff f984 	bl	80069d0 <__lshift>
 80076c8:	4641      	mov	r1, r8
 80076ca:	4604      	mov	r4, r0
 80076cc:	f7ff f9ec 	bl	8006aa8 <__mcmp>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	dd51      	ble.n	8007778 <_strtod_l+0x8b8>
 80076d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076d8:	9a08      	ldr	r2, [sp, #32]
 80076da:	0d1b      	lsrs	r3, r3, #20
 80076dc:	051b      	lsls	r3, r3, #20
 80076de:	2a00      	cmp	r2, #0
 80076e0:	d06b      	beq.n	80077ba <_strtod_l+0x8fa>
 80076e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80076e6:	d868      	bhi.n	80077ba <_strtod_l+0x8fa>
 80076e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80076ec:	f67f ae9d 	bls.w	800742a <_strtod_l+0x56a>
 80076f0:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <_strtod_l+0x85c>)
 80076f2:	4650      	mov	r0, sl
 80076f4:	4659      	mov	r1, fp
 80076f6:	2200      	movs	r2, #0
 80076f8:	f7f8 ff9e 	bl	8000638 <__aeabi_dmul>
 80076fc:	4b08      	ldr	r3, [pc, #32]	@ (8007720 <_strtod_l+0x860>)
 80076fe:	400b      	ands	r3, r1
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	2b00      	cmp	r3, #0
 8007706:	f47f ae05 	bne.w	8007314 <_strtod_l+0x454>
 800770a:	9a05      	ldr	r2, [sp, #20]
 800770c:	2322      	movs	r3, #34	@ 0x22
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	e600      	b.n	8007314 <_strtod_l+0x454>
 8007712:	bf00      	nop
 8007714:	080093b0 	.word	0x080093b0
 8007718:	fffffc02 	.word	0xfffffc02
 800771c:	39500000 	.word	0x39500000
 8007720:	7ff00000 	.word	0x7ff00000
 8007724:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007728:	d165      	bne.n	80077f6 <_strtod_l+0x936>
 800772a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800772c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007730:	b35a      	cbz	r2, 800778a <_strtod_l+0x8ca>
 8007732:	4a9f      	ldr	r2, [pc, #636]	@ (80079b0 <_strtod_l+0xaf0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d12b      	bne.n	8007790 <_strtod_l+0x8d0>
 8007738:	9b08      	ldr	r3, [sp, #32]
 800773a:	4651      	mov	r1, sl
 800773c:	b303      	cbz	r3, 8007780 <_strtod_l+0x8c0>
 800773e:	4b9d      	ldr	r3, [pc, #628]	@ (80079b4 <_strtod_l+0xaf4>)
 8007740:	465a      	mov	r2, fp
 8007742:	4013      	ands	r3, r2
 8007744:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007748:	f04f 32ff 	mov.w	r2, #4294967295
 800774c:	d81b      	bhi.n	8007786 <_strtod_l+0x8c6>
 800774e:	0d1b      	lsrs	r3, r3, #20
 8007750:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	4299      	cmp	r1, r3
 800775a:	d119      	bne.n	8007790 <_strtod_l+0x8d0>
 800775c:	4b96      	ldr	r3, [pc, #600]	@ (80079b8 <_strtod_l+0xaf8>)
 800775e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007760:	429a      	cmp	r2, r3
 8007762:	d102      	bne.n	800776a <_strtod_l+0x8aa>
 8007764:	3101      	adds	r1, #1
 8007766:	f43f adca 	beq.w	80072fe <_strtod_l+0x43e>
 800776a:	4b92      	ldr	r3, [pc, #584]	@ (80079b4 <_strtod_l+0xaf4>)
 800776c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800776e:	401a      	ands	r2, r3
 8007770:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007774:	f04f 0a00 	mov.w	sl, #0
 8007778:	9b08      	ldr	r3, [sp, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1b8      	bne.n	80076f0 <_strtod_l+0x830>
 800777e:	e5c9      	b.n	8007314 <_strtod_l+0x454>
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	e7e8      	b.n	8007758 <_strtod_l+0x898>
 8007786:	4613      	mov	r3, r2
 8007788:	e7e6      	b.n	8007758 <_strtod_l+0x898>
 800778a:	ea53 030a 	orrs.w	r3, r3, sl
 800778e:	d0a1      	beq.n	80076d4 <_strtod_l+0x814>
 8007790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007792:	b1db      	cbz	r3, 80077cc <_strtod_l+0x90c>
 8007794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007796:	4213      	tst	r3, r2
 8007798:	d0ee      	beq.n	8007778 <_strtod_l+0x8b8>
 800779a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779c:	9a08      	ldr	r2, [sp, #32]
 800779e:	4650      	mov	r0, sl
 80077a0:	4659      	mov	r1, fp
 80077a2:	b1bb      	cbz	r3, 80077d4 <_strtod_l+0x914>
 80077a4:	f7ff fb6e 	bl	8006e84 <sulp>
 80077a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ac:	ec53 2b10 	vmov	r2, r3, d0
 80077b0:	f7f8 fd8c 	bl	80002cc <__adddf3>
 80077b4:	4682      	mov	sl, r0
 80077b6:	468b      	mov	fp, r1
 80077b8:	e7de      	b.n	8007778 <_strtod_l+0x8b8>
 80077ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80077be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077c6:	f04f 3aff 	mov.w	sl, #4294967295
 80077ca:	e7d5      	b.n	8007778 <_strtod_l+0x8b8>
 80077cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077ce:	ea13 0f0a 	tst.w	r3, sl
 80077d2:	e7e1      	b.n	8007798 <_strtod_l+0x8d8>
 80077d4:	f7ff fb56 	bl	8006e84 <sulp>
 80077d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077dc:	ec53 2b10 	vmov	r2, r3, d0
 80077e0:	f7f8 fd72 	bl	80002c8 <__aeabi_dsub>
 80077e4:	2200      	movs	r2, #0
 80077e6:	2300      	movs	r3, #0
 80077e8:	4682      	mov	sl, r0
 80077ea:	468b      	mov	fp, r1
 80077ec:	f7f9 f98c 	bl	8000b08 <__aeabi_dcmpeq>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d0c1      	beq.n	8007778 <_strtod_l+0x8b8>
 80077f4:	e619      	b.n	800742a <_strtod_l+0x56a>
 80077f6:	4641      	mov	r1, r8
 80077f8:	4620      	mov	r0, r4
 80077fa:	f7ff facd 	bl	8006d98 <__ratio>
 80077fe:	ec57 6b10 	vmov	r6, r7, d0
 8007802:	2200      	movs	r2, #0
 8007804:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f9 f990 	bl	8000b30 <__aeabi_dcmple>
 8007810:	2800      	cmp	r0, #0
 8007812:	d06f      	beq.n	80078f4 <_strtod_l+0xa34>
 8007814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d17a      	bne.n	8007910 <_strtod_l+0xa50>
 800781a:	f1ba 0f00 	cmp.w	sl, #0
 800781e:	d158      	bne.n	80078d2 <_strtod_l+0xa12>
 8007820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007826:	2b00      	cmp	r3, #0
 8007828:	d15a      	bne.n	80078e0 <_strtod_l+0xa20>
 800782a:	4b64      	ldr	r3, [pc, #400]	@ (80079bc <_strtod_l+0xafc>)
 800782c:	2200      	movs	r2, #0
 800782e:	4630      	mov	r0, r6
 8007830:	4639      	mov	r1, r7
 8007832:	f7f9 f973 	bl	8000b1c <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d159      	bne.n	80078ee <_strtod_l+0xa2e>
 800783a:	4630      	mov	r0, r6
 800783c:	4639      	mov	r1, r7
 800783e:	4b60      	ldr	r3, [pc, #384]	@ (80079c0 <_strtod_l+0xb00>)
 8007840:	2200      	movs	r2, #0
 8007842:	f7f8 fef9 	bl	8000638 <__aeabi_dmul>
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
 800784a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800784e:	9606      	str	r6, [sp, #24]
 8007850:	9307      	str	r3, [sp, #28]
 8007852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007856:	4d57      	ldr	r5, [pc, #348]	@ (80079b4 <_strtod_l+0xaf4>)
 8007858:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	401d      	ands	r5, r3
 8007860:	4b58      	ldr	r3, [pc, #352]	@ (80079c4 <_strtod_l+0xb04>)
 8007862:	429d      	cmp	r5, r3
 8007864:	f040 80b2 	bne.w	80079cc <_strtod_l+0xb0c>
 8007868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800786a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800786e:	ec4b ab10 	vmov	d0, sl, fp
 8007872:	f7ff f9c9 	bl	8006c08 <__ulp>
 8007876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800787a:	ec51 0b10 	vmov	r0, r1, d0
 800787e:	f7f8 fedb 	bl	8000638 <__aeabi_dmul>
 8007882:	4652      	mov	r2, sl
 8007884:	465b      	mov	r3, fp
 8007886:	f7f8 fd21 	bl	80002cc <__adddf3>
 800788a:	460b      	mov	r3, r1
 800788c:	4949      	ldr	r1, [pc, #292]	@ (80079b4 <_strtod_l+0xaf4>)
 800788e:	4a4e      	ldr	r2, [pc, #312]	@ (80079c8 <_strtod_l+0xb08>)
 8007890:	4019      	ands	r1, r3
 8007892:	4291      	cmp	r1, r2
 8007894:	4682      	mov	sl, r0
 8007896:	d942      	bls.n	800791e <_strtod_l+0xa5e>
 8007898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800789a:	4b47      	ldr	r3, [pc, #284]	@ (80079b8 <_strtod_l+0xaf8>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d103      	bne.n	80078a8 <_strtod_l+0x9e8>
 80078a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078a2:	3301      	adds	r3, #1
 80078a4:	f43f ad2b 	beq.w	80072fe <_strtod_l+0x43e>
 80078a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80079b8 <_strtod_l+0xaf8>
 80078ac:	f04f 3aff 	mov.w	sl, #4294967295
 80078b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b2:	9805      	ldr	r0, [sp, #20]
 80078b4:	f7fe fe74 	bl	80065a0 <_Bfree>
 80078b8:	9805      	ldr	r0, [sp, #20]
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7fe fe70 	bl	80065a0 <_Bfree>
 80078c0:	9805      	ldr	r0, [sp, #20]
 80078c2:	4641      	mov	r1, r8
 80078c4:	f7fe fe6c 	bl	80065a0 <_Bfree>
 80078c8:	9805      	ldr	r0, [sp, #20]
 80078ca:	4621      	mov	r1, r4
 80078cc:	f7fe fe68 	bl	80065a0 <_Bfree>
 80078d0:	e618      	b.n	8007504 <_strtod_l+0x644>
 80078d2:	f1ba 0f01 	cmp.w	sl, #1
 80078d6:	d103      	bne.n	80078e0 <_strtod_l+0xa20>
 80078d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f43f ada5 	beq.w	800742a <_strtod_l+0x56a>
 80078e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007990 <_strtod_l+0xad0>
 80078e4:	4f35      	ldr	r7, [pc, #212]	@ (80079bc <_strtod_l+0xafc>)
 80078e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078ea:	2600      	movs	r6, #0
 80078ec:	e7b1      	b.n	8007852 <_strtod_l+0x992>
 80078ee:	4f34      	ldr	r7, [pc, #208]	@ (80079c0 <_strtod_l+0xb00>)
 80078f0:	2600      	movs	r6, #0
 80078f2:	e7aa      	b.n	800784a <_strtod_l+0x98a>
 80078f4:	4b32      	ldr	r3, [pc, #200]	@ (80079c0 <_strtod_l+0xb00>)
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	2200      	movs	r2, #0
 80078fc:	f7f8 fe9c 	bl	8000638 <__aeabi_dmul>
 8007900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	2b00      	cmp	r3, #0
 8007908:	d09f      	beq.n	800784a <_strtod_l+0x98a>
 800790a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800790e:	e7a0      	b.n	8007852 <_strtod_l+0x992>
 8007910:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007998 <_strtod_l+0xad8>
 8007914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007918:	ec57 6b17 	vmov	r6, r7, d7
 800791c:	e799      	b.n	8007852 <_strtod_l+0x992>
 800791e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007922:	9b08      	ldr	r3, [sp, #32]
 8007924:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1c1      	bne.n	80078b0 <_strtod_l+0x9f0>
 800792c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007930:	0d1b      	lsrs	r3, r3, #20
 8007932:	051b      	lsls	r3, r3, #20
 8007934:	429d      	cmp	r5, r3
 8007936:	d1bb      	bne.n	80078b0 <_strtod_l+0x9f0>
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f9 f9dc 	bl	8000cf8 <__aeabi_d2lz>
 8007940:	f7f8 fe4c 	bl	80005dc <__aeabi_l2d>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f8 fcbc 	bl	80002c8 <__aeabi_dsub>
 8007950:	460b      	mov	r3, r1
 8007952:	4602      	mov	r2, r0
 8007954:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007958:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800795c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800795e:	ea46 060a 	orr.w	r6, r6, sl
 8007962:	431e      	orrs	r6, r3
 8007964:	d06f      	beq.n	8007a46 <_strtod_l+0xb86>
 8007966:	a30e      	add	r3, pc, #56	@ (adr r3, 80079a0 <_strtod_l+0xae0>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	f7f9 f8d6 	bl	8000b1c <__aeabi_dcmplt>
 8007970:	2800      	cmp	r0, #0
 8007972:	f47f accf 	bne.w	8007314 <_strtod_l+0x454>
 8007976:	a30c      	add	r3, pc, #48	@ (adr r3, 80079a8 <_strtod_l+0xae8>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007980:	f7f9 f8ea 	bl	8000b58 <__aeabi_dcmpgt>
 8007984:	2800      	cmp	r0, #0
 8007986:	d093      	beq.n	80078b0 <_strtod_l+0x9f0>
 8007988:	e4c4      	b.n	8007314 <_strtod_l+0x454>
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w
 8007990:	00000000 	.word	0x00000000
 8007994:	bff00000 	.word	0xbff00000
 8007998:	00000000 	.word	0x00000000
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	94a03595 	.word	0x94a03595
 80079a4:	3fdfffff 	.word	0x3fdfffff
 80079a8:	35afe535 	.word	0x35afe535
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	000fffff 	.word	0x000fffff
 80079b4:	7ff00000 	.word	0x7ff00000
 80079b8:	7fefffff 	.word	0x7fefffff
 80079bc:	3ff00000 	.word	0x3ff00000
 80079c0:	3fe00000 	.word	0x3fe00000
 80079c4:	7fe00000 	.word	0x7fe00000
 80079c8:	7c9fffff 	.word	0x7c9fffff
 80079cc:	9b08      	ldr	r3, [sp, #32]
 80079ce:	b323      	cbz	r3, 8007a1a <_strtod_l+0xb5a>
 80079d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80079d4:	d821      	bhi.n	8007a1a <_strtod_l+0xb5a>
 80079d6:	a328      	add	r3, pc, #160	@ (adr r3, 8007a78 <_strtod_l+0xbb8>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f9 f8a6 	bl	8000b30 <__aeabi_dcmple>
 80079e4:	b1a0      	cbz	r0, 8007a10 <_strtod_l+0xb50>
 80079e6:	4639      	mov	r1, r7
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7f9 f8fd 	bl	8000be8 <__aeabi_d2uiz>
 80079ee:	2801      	cmp	r0, #1
 80079f0:	bf38      	it	cc
 80079f2:	2001      	movcc	r0, #1
 80079f4:	f7f8 fda6 	bl	8000544 <__aeabi_ui2d>
 80079f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	b9fb      	cbnz	r3, 8007a40 <_strtod_l+0xb80>
 8007a00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a04:	9014      	str	r0, [sp, #80]	@ 0x50
 8007a06:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007a0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007a16:	1b5b      	subs	r3, r3, r5
 8007a18:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007a22:	f7ff f8f1 	bl	8006c08 <__ulp>
 8007a26:	4650      	mov	r0, sl
 8007a28:	ec53 2b10 	vmov	r2, r3, d0
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	f7f8 fe03 	bl	8000638 <__aeabi_dmul>
 8007a32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007a36:	f7f8 fc49 	bl	80002cc <__adddf3>
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	468b      	mov	fp, r1
 8007a3e:	e770      	b.n	8007922 <_strtod_l+0xa62>
 8007a40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007a44:	e7e0      	b.n	8007a08 <_strtod_l+0xb48>
 8007a46:	a30e      	add	r3, pc, #56	@ (adr r3, 8007a80 <_strtod_l+0xbc0>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f9 f866 	bl	8000b1c <__aeabi_dcmplt>
 8007a50:	e798      	b.n	8007984 <_strtod_l+0xac4>
 8007a52:	2300      	movs	r3, #0
 8007a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007a58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	f7ff ba6d 	b.w	8006f3a <_strtod_l+0x7a>
 8007a60:	2a65      	cmp	r2, #101	@ 0x65
 8007a62:	f43f ab66 	beq.w	8007132 <_strtod_l+0x272>
 8007a66:	2a45      	cmp	r2, #69	@ 0x45
 8007a68:	f43f ab63 	beq.w	8007132 <_strtod_l+0x272>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f7ff bb9e 	b.w	80071ae <_strtod_l+0x2ee>
 8007a72:	bf00      	nop
 8007a74:	f3af 8000 	nop.w
 8007a78:	ffc00000 	.word	0xffc00000
 8007a7c:	41dfffff 	.word	0x41dfffff
 8007a80:	94a03595 	.word	0x94a03595
 8007a84:	3fcfffff 	.word	0x3fcfffff

08007a88 <_strtod_r>:
 8007a88:	4b01      	ldr	r3, [pc, #4]	@ (8007a90 <_strtod_r+0x8>)
 8007a8a:	f7ff ba19 	b.w	8006ec0 <_strtod_l>
 8007a8e:	bf00      	nop
 8007a90:	20000068 	.word	0x20000068

08007a94 <_strtol_l.constprop.0>:
 8007a94:	2b24      	cmp	r3, #36	@ 0x24
 8007a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9a:	4686      	mov	lr, r0
 8007a9c:	4690      	mov	r8, r2
 8007a9e:	d801      	bhi.n	8007aa4 <_strtol_l.constprop.0+0x10>
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <_strtol_l.constprop.0+0x1e>
 8007aa4:	f7fd fdbc 	bl	8005620 <__errno>
 8007aa8:	2316      	movs	r3, #22
 8007aaa:	6003      	str	r3, [r0, #0]
 8007aac:	2000      	movs	r0, #0
 8007aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab2:	4834      	ldr	r0, [pc, #208]	@ (8007b84 <_strtol_l.constprop.0+0xf0>)
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007abc:	5d06      	ldrb	r6, [r0, r4]
 8007abe:	f016 0608 	ands.w	r6, r6, #8
 8007ac2:	d1f8      	bne.n	8007ab6 <_strtol_l.constprop.0+0x22>
 8007ac4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ac6:	d12d      	bne.n	8007b24 <_strtol_l.constprop.0+0x90>
 8007ac8:	782c      	ldrb	r4, [r5, #0]
 8007aca:	2601      	movs	r6, #1
 8007acc:	1c95      	adds	r5, r2, #2
 8007ace:	f033 0210 	bics.w	r2, r3, #16
 8007ad2:	d109      	bne.n	8007ae8 <_strtol_l.constprop.0+0x54>
 8007ad4:	2c30      	cmp	r4, #48	@ 0x30
 8007ad6:	d12a      	bne.n	8007b2e <_strtol_l.constprop.0+0x9a>
 8007ad8:	782a      	ldrb	r2, [r5, #0]
 8007ada:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ade:	2a58      	cmp	r2, #88	@ 0x58
 8007ae0:	d125      	bne.n	8007b2e <_strtol_l.constprop.0+0x9a>
 8007ae2:	786c      	ldrb	r4, [r5, #1]
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	3502      	adds	r5, #2
 8007ae8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007aec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007af0:	2200      	movs	r2, #0
 8007af2:	fbbc f9f3 	udiv	r9, ip, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007afc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007b00:	2f09      	cmp	r7, #9
 8007b02:	d81b      	bhi.n	8007b3c <_strtol_l.constprop.0+0xa8>
 8007b04:	463c      	mov	r4, r7
 8007b06:	42a3      	cmp	r3, r4
 8007b08:	dd27      	ble.n	8007b5a <_strtol_l.constprop.0+0xc6>
 8007b0a:	1c57      	adds	r7, r2, #1
 8007b0c:	d007      	beq.n	8007b1e <_strtol_l.constprop.0+0x8a>
 8007b0e:	4581      	cmp	r9, r0
 8007b10:	d320      	bcc.n	8007b54 <_strtol_l.constprop.0+0xc0>
 8007b12:	d101      	bne.n	8007b18 <_strtol_l.constprop.0+0x84>
 8007b14:	45a2      	cmp	sl, r4
 8007b16:	db1d      	blt.n	8007b54 <_strtol_l.constprop.0+0xc0>
 8007b18:	fb00 4003 	mla	r0, r0, r3, r4
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b22:	e7eb      	b.n	8007afc <_strtol_l.constprop.0+0x68>
 8007b24:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b26:	bf04      	itt	eq
 8007b28:	782c      	ldrbeq	r4, [r5, #0]
 8007b2a:	1c95      	addeq	r5, r2, #2
 8007b2c:	e7cf      	b.n	8007ace <_strtol_l.constprop.0+0x3a>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1da      	bne.n	8007ae8 <_strtol_l.constprop.0+0x54>
 8007b32:	2c30      	cmp	r4, #48	@ 0x30
 8007b34:	bf0c      	ite	eq
 8007b36:	2308      	moveq	r3, #8
 8007b38:	230a      	movne	r3, #10
 8007b3a:	e7d5      	b.n	8007ae8 <_strtol_l.constprop.0+0x54>
 8007b3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007b40:	2f19      	cmp	r7, #25
 8007b42:	d801      	bhi.n	8007b48 <_strtol_l.constprop.0+0xb4>
 8007b44:	3c37      	subs	r4, #55	@ 0x37
 8007b46:	e7de      	b.n	8007b06 <_strtol_l.constprop.0+0x72>
 8007b48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007b4c:	2f19      	cmp	r7, #25
 8007b4e:	d804      	bhi.n	8007b5a <_strtol_l.constprop.0+0xc6>
 8007b50:	3c57      	subs	r4, #87	@ 0x57
 8007b52:	e7d8      	b.n	8007b06 <_strtol_l.constprop.0+0x72>
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	e7e1      	b.n	8007b1e <_strtol_l.constprop.0+0x8a>
 8007b5a:	1c53      	adds	r3, r2, #1
 8007b5c:	d108      	bne.n	8007b70 <_strtol_l.constprop.0+0xdc>
 8007b5e:	2322      	movs	r3, #34	@ 0x22
 8007b60:	f8ce 3000 	str.w	r3, [lr]
 8007b64:	4660      	mov	r0, ip
 8007b66:	f1b8 0f00 	cmp.w	r8, #0
 8007b6a:	d0a0      	beq.n	8007aae <_strtol_l.constprop.0+0x1a>
 8007b6c:	1e69      	subs	r1, r5, #1
 8007b6e:	e006      	b.n	8007b7e <_strtol_l.constprop.0+0xea>
 8007b70:	b106      	cbz	r6, 8007b74 <_strtol_l.constprop.0+0xe0>
 8007b72:	4240      	negs	r0, r0
 8007b74:	f1b8 0f00 	cmp.w	r8, #0
 8007b78:	d099      	beq.n	8007aae <_strtol_l.constprop.0+0x1a>
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d1f6      	bne.n	8007b6c <_strtol_l.constprop.0+0xd8>
 8007b7e:	f8c8 1000 	str.w	r1, [r8]
 8007b82:	e794      	b.n	8007aae <_strtol_l.constprop.0+0x1a>
 8007b84:	080093d9 	.word	0x080093d9

08007b88 <_strtol_r>:
 8007b88:	f7ff bf84 	b.w	8007a94 <_strtol_l.constprop.0>

08007b8c <__ssputs_r>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	688e      	ldr	r6, [r1, #8]
 8007b92:	461f      	mov	r7, r3
 8007b94:	42be      	cmp	r6, r7
 8007b96:	680b      	ldr	r3, [r1, #0]
 8007b98:	4682      	mov	sl, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	4690      	mov	r8, r2
 8007b9e:	d82d      	bhi.n	8007bfc <__ssputs_r+0x70>
 8007ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ba8:	d026      	beq.n	8007bf8 <__ssputs_r+0x6c>
 8007baa:	6965      	ldr	r5, [r4, #20]
 8007bac:	6909      	ldr	r1, [r1, #16]
 8007bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb2:	eba3 0901 	sub.w	r9, r3, r1
 8007bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bba:	1c7b      	adds	r3, r7, #1
 8007bbc:	444b      	add	r3, r9
 8007bbe:	106d      	asrs	r5, r5, #1
 8007bc0:	429d      	cmp	r5, r3
 8007bc2:	bf38      	it	cc
 8007bc4:	461d      	movcc	r5, r3
 8007bc6:	0553      	lsls	r3, r2, #21
 8007bc8:	d527      	bpl.n	8007c1a <__ssputs_r+0x8e>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7fe fc1c 	bl	8006408 <_malloc_r>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b360      	cbz	r0, 8007c2e <__ssputs_r+0xa2>
 8007bd4:	6921      	ldr	r1, [r4, #16]
 8007bd6:	464a      	mov	r2, r9
 8007bd8:	f000 fbde 	bl	8008398 <memcpy>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	6126      	str	r6, [r4, #16]
 8007bea:	6165      	str	r5, [r4, #20]
 8007bec:	444e      	add	r6, r9
 8007bee:	eba5 0509 	sub.w	r5, r5, r9
 8007bf2:	6026      	str	r6, [r4, #0]
 8007bf4:	60a5      	str	r5, [r4, #8]
 8007bf6:	463e      	mov	r6, r7
 8007bf8:	42be      	cmp	r6, r7
 8007bfa:	d900      	bls.n	8007bfe <__ssputs_r+0x72>
 8007bfc:	463e      	mov	r6, r7
 8007bfe:	6820      	ldr	r0, [r4, #0]
 8007c00:	4632      	mov	r2, r6
 8007c02:	4641      	mov	r1, r8
 8007c04:	f000 fb6a 	bl	80082dc <memmove>
 8007c08:	68a3      	ldr	r3, [r4, #8]
 8007c0a:	1b9b      	subs	r3, r3, r6
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	4433      	add	r3, r6
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	2000      	movs	r0, #0
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	f000 ff51 	bl	8008ac2 <_realloc_r>
 8007c20:	4606      	mov	r6, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d1e0      	bne.n	8007be8 <__ssputs_r+0x5c>
 8007c26:	6921      	ldr	r1, [r4, #16]
 8007c28:	4650      	mov	r0, sl
 8007c2a:	f7fe fb79 	bl	8006320 <_free_r>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	f8ca 3000 	str.w	r3, [sl]
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e7e9      	b.n	8007c16 <__ssputs_r+0x8a>
	...

08007c44 <_svfiprintf_r>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	4698      	mov	r8, r3
 8007c4a:	898b      	ldrh	r3, [r1, #12]
 8007c4c:	061b      	lsls	r3, r3, #24
 8007c4e:	b09d      	sub	sp, #116	@ 0x74
 8007c50:	4607      	mov	r7, r0
 8007c52:	460d      	mov	r5, r1
 8007c54:	4614      	mov	r4, r2
 8007c56:	d510      	bpl.n	8007c7a <_svfiprintf_r+0x36>
 8007c58:	690b      	ldr	r3, [r1, #16]
 8007c5a:	b973      	cbnz	r3, 8007c7a <_svfiprintf_r+0x36>
 8007c5c:	2140      	movs	r1, #64	@ 0x40
 8007c5e:	f7fe fbd3 	bl	8006408 <_malloc_r>
 8007c62:	6028      	str	r0, [r5, #0]
 8007c64:	6128      	str	r0, [r5, #16]
 8007c66:	b930      	cbnz	r0, 8007c76 <_svfiprintf_r+0x32>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	b01d      	add	sp, #116	@ 0x74
 8007c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	2340      	movs	r3, #64	@ 0x40
 8007c78:	616b      	str	r3, [r5, #20]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7e:	2320      	movs	r3, #32
 8007c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c88:	2330      	movs	r3, #48	@ 0x30
 8007c8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e28 <_svfiprintf_r+0x1e4>
 8007c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c92:	f04f 0901 	mov.w	r9, #1
 8007c96:	4623      	mov	r3, r4
 8007c98:	469a      	mov	sl, r3
 8007c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9e:	b10a      	cbz	r2, 8007ca4 <_svfiprintf_r+0x60>
 8007ca0:	2a25      	cmp	r2, #37	@ 0x25
 8007ca2:	d1f9      	bne.n	8007c98 <_svfiprintf_r+0x54>
 8007ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca8:	d00b      	beq.n	8007cc2 <_svfiprintf_r+0x7e>
 8007caa:	465b      	mov	r3, fp
 8007cac:	4622      	mov	r2, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff ff6b 	bl	8007b8c <__ssputs_r>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f000 80a7 	beq.w	8007e0a <_svfiprintf_r+0x1c6>
 8007cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cbe:	445a      	add	r2, fp
 8007cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 809f 	beq.w	8007e0a <_svfiprintf_r+0x1c6>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd6:	f10a 0a01 	add.w	sl, sl, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce4:	4654      	mov	r4, sl
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	484e      	ldr	r0, [pc, #312]	@ (8007e28 <_svfiprintf_r+0x1e4>)
 8007cee:	f7f8 fa8f 	bl	8000210 <memchr>
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	b9d8      	cbnz	r0, 8007d2e <_svfiprintf_r+0xea>
 8007cf6:	06d0      	lsls	r0, r2, #27
 8007cf8:	bf44      	itt	mi
 8007cfa:	2320      	movmi	r3, #32
 8007cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d00:	0711      	lsls	r1, r2, #28
 8007d02:	bf44      	itt	mi
 8007d04:	232b      	movmi	r3, #43	@ 0x2b
 8007d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d10:	d015      	beq.n	8007d3e <_svfiprintf_r+0xfa>
 8007d12:	9a07      	ldr	r2, [sp, #28]
 8007d14:	4654      	mov	r4, sl
 8007d16:	2000      	movs	r0, #0
 8007d18:	f04f 0c0a 	mov.w	ip, #10
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d22:	3b30      	subs	r3, #48	@ 0x30
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d94b      	bls.n	8007dc0 <_svfiprintf_r+0x17c>
 8007d28:	b1b0      	cbz	r0, 8007d58 <_svfiprintf_r+0x114>
 8007d2a:	9207      	str	r2, [sp, #28]
 8007d2c:	e014      	b.n	8007d58 <_svfiprintf_r+0x114>
 8007d2e:	eba0 0308 	sub.w	r3, r0, r8
 8007d32:	fa09 f303 	lsl.w	r3, r9, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	46a2      	mov	sl, r4
 8007d3c:	e7d2      	b.n	8007ce4 <_svfiprintf_r+0xa0>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfbb      	ittet	lt
 8007d4a:	425b      	neglt	r3, r3
 8007d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d50:	9307      	strge	r3, [sp, #28]
 8007d52:	9307      	strlt	r3, [sp, #28]
 8007d54:	bfb8      	it	lt
 8007d56:	9204      	strlt	r2, [sp, #16]
 8007d58:	7823      	ldrb	r3, [r4, #0]
 8007d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5c:	d10a      	bne.n	8007d74 <_svfiprintf_r+0x130>
 8007d5e:	7863      	ldrb	r3, [r4, #1]
 8007d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d62:	d132      	bne.n	8007dca <_svfiprintf_r+0x186>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	9203      	str	r2, [sp, #12]
 8007d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d70:	3402      	adds	r4, #2
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e38 <_svfiprintf_r+0x1f4>
 8007d78:	7821      	ldrb	r1, [r4, #0]
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	f7f8 fa47 	bl	8000210 <memchr>
 8007d82:	b138      	cbz	r0, 8007d94 <_svfiprintf_r+0x150>
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	eba0 000a 	sub.w	r0, r0, sl
 8007d8a:	2240      	movs	r2, #64	@ 0x40
 8007d8c:	4082      	lsls	r2, r0
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	3401      	adds	r4, #1
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	4824      	ldr	r0, [pc, #144]	@ (8007e2c <_svfiprintf_r+0x1e8>)
 8007d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d9e:	2206      	movs	r2, #6
 8007da0:	f7f8 fa36 	bl	8000210 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d036      	beq.n	8007e16 <_svfiprintf_r+0x1d2>
 8007da8:	4b21      	ldr	r3, [pc, #132]	@ (8007e30 <_svfiprintf_r+0x1ec>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_svfiprintf_r+0x1b0>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dba:	4433      	add	r3, r6
 8007dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbe:	e76a      	b.n	8007c96 <_svfiprintf_r+0x52>
 8007dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7a8      	b.n	8007d1c <_svfiprintf_r+0xd8>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	3401      	adds	r4, #1
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	@ 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_svfiprintf_r+0x1a6>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c6      	beq.n	8007d74 <_svfiprintf_r+0x130>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c4      	b.n	8007d74 <_svfiprintf_r+0x130>
 8007dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dee:	4604      	mov	r4, r0
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7f0      	b.n	8007dd6 <_svfiprintf_r+0x192>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8007e34 <_svfiprintf_r+0x1f0>)
 8007dfc:	a904      	add	r1, sp, #16
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7fc fbc6 	bl	8004590 <_printf_float>
 8007e04:	1c42      	adds	r2, r0, #1
 8007e06:	4606      	mov	r6, r0
 8007e08:	d1d6      	bne.n	8007db8 <_svfiprintf_r+0x174>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	065b      	lsls	r3, r3, #25
 8007e0e:	f53f af2d 	bmi.w	8007c6c <_svfiprintf_r+0x28>
 8007e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e14:	e72c      	b.n	8007c70 <_svfiprintf_r+0x2c>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <_svfiprintf_r+0x1f0>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7fc fe4d 	bl	8004ac0 <_printf_i>
 8007e26:	e7ed      	b.n	8007e04 <_svfiprintf_r+0x1c0>
 8007e28:	080094d9 	.word	0x080094d9
 8007e2c:	080094e3 	.word	0x080094e3
 8007e30:	08004591 	.word	0x08004591
 8007e34:	08007b8d 	.word	0x08007b8d
 8007e38:	080094df 	.word	0x080094df

08007e3c <__sfputc_r>:
 8007e3c:	6893      	ldr	r3, [r2, #8]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	b410      	push	{r4}
 8007e44:	6093      	str	r3, [r2, #8]
 8007e46:	da08      	bge.n	8007e5a <__sfputc_r+0x1e>
 8007e48:	6994      	ldr	r4, [r2, #24]
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	db01      	blt.n	8007e52 <__sfputc_r+0x16>
 8007e4e:	290a      	cmp	r1, #10
 8007e50:	d103      	bne.n	8007e5a <__sfputc_r+0x1e>
 8007e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e56:	f7fd bafc 	b.w	8005452 <__swbuf_r>
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	1c58      	adds	r0, r3, #1
 8007e5e:	6010      	str	r0, [r2, #0]
 8007e60:	7019      	strb	r1, [r3, #0]
 8007e62:	4608      	mov	r0, r1
 8007e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <__sfputs_r>:
 8007e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	18d5      	adds	r5, r2, r3
 8007e74:	42ac      	cmp	r4, r5
 8007e76:	d101      	bne.n	8007e7c <__sfputs_r+0x12>
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e007      	b.n	8007e8c <__sfputs_r+0x22>
 8007e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e80:	463a      	mov	r2, r7
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ffda 	bl	8007e3c <__sfputc_r>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d1f3      	bne.n	8007e74 <__sfputs_r+0xa>
 8007e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e90 <_vfiprintf_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	460d      	mov	r5, r1
 8007e96:	b09d      	sub	sp, #116	@ 0x74
 8007e98:	4614      	mov	r4, r2
 8007e9a:	4698      	mov	r8, r3
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	b118      	cbz	r0, 8007ea8 <_vfiprintf_r+0x18>
 8007ea0:	6a03      	ldr	r3, [r0, #32]
 8007ea2:	b90b      	cbnz	r3, 8007ea8 <_vfiprintf_r+0x18>
 8007ea4:	f7fd f9cc 	bl	8005240 <__sinit>
 8007ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eaa:	07d9      	lsls	r1, r3, #31
 8007eac:	d405      	bmi.n	8007eba <_vfiprintf_r+0x2a>
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	059a      	lsls	r2, r3, #22
 8007eb2:	d402      	bmi.n	8007eba <_vfiprintf_r+0x2a>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eb6:	f7fd fbde 	bl	8005676 <__retarget_lock_acquire_recursive>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	071b      	lsls	r3, r3, #28
 8007ebe:	d501      	bpl.n	8007ec4 <_vfiprintf_r+0x34>
 8007ec0:	692b      	ldr	r3, [r5, #16]
 8007ec2:	b99b      	cbnz	r3, 8007eec <_vfiprintf_r+0x5c>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7fd fb02 	bl	80054d0 <__swsetup_r>
 8007ecc:	b170      	cbz	r0, 8007eec <_vfiprintf_r+0x5c>
 8007ece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed0:	07dc      	lsls	r4, r3, #31
 8007ed2:	d504      	bpl.n	8007ede <_vfiprintf_r+0x4e>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	b01d      	add	sp, #116	@ 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	0598      	lsls	r0, r3, #22
 8007ee2:	d4f7      	bmi.n	8007ed4 <_vfiprintf_r+0x44>
 8007ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee6:	f7fd fbc7 	bl	8005678 <__retarget_lock_release_recursive>
 8007eea:	e7f3      	b.n	8007ed4 <_vfiprintf_r+0x44>
 8007eec:	2300      	movs	r3, #0
 8007eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef0:	2320      	movs	r3, #32
 8007ef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efa:	2330      	movs	r3, #48	@ 0x30
 8007efc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080ac <_vfiprintf_r+0x21c>
 8007f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f04:	f04f 0901 	mov.w	r9, #1
 8007f08:	4623      	mov	r3, r4
 8007f0a:	469a      	mov	sl, r3
 8007f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f10:	b10a      	cbz	r2, 8007f16 <_vfiprintf_r+0x86>
 8007f12:	2a25      	cmp	r2, #37	@ 0x25
 8007f14:	d1f9      	bne.n	8007f0a <_vfiprintf_r+0x7a>
 8007f16:	ebba 0b04 	subs.w	fp, sl, r4
 8007f1a:	d00b      	beq.n	8007f34 <_vfiprintf_r+0xa4>
 8007f1c:	465b      	mov	r3, fp
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7ff ffa1 	bl	8007e6a <__sfputs_r>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f000 80a7 	beq.w	800807c <_vfiprintf_r+0x1ec>
 8007f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f30:	445a      	add	r2, fp
 8007f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f34:	f89a 3000 	ldrb.w	r3, [sl]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 809f 	beq.w	800807c <_vfiprintf_r+0x1ec>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295
 8007f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f48:	f10a 0a01 	add.w	sl, sl, #1
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	9307      	str	r3, [sp, #28]
 8007f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f56:	4654      	mov	r4, sl
 8007f58:	2205      	movs	r2, #5
 8007f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5e:	4853      	ldr	r0, [pc, #332]	@ (80080ac <_vfiprintf_r+0x21c>)
 8007f60:	f7f8 f956 	bl	8000210 <memchr>
 8007f64:	9a04      	ldr	r2, [sp, #16]
 8007f66:	b9d8      	cbnz	r0, 8007fa0 <_vfiprintf_r+0x110>
 8007f68:	06d1      	lsls	r1, r2, #27
 8007f6a:	bf44      	itt	mi
 8007f6c:	2320      	movmi	r3, #32
 8007f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f72:	0713      	lsls	r3, r2, #28
 8007f74:	bf44      	itt	mi
 8007f76:	232b      	movmi	r3, #43	@ 0x2b
 8007f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f82:	d015      	beq.n	8007fb0 <_vfiprintf_r+0x120>
 8007f84:	9a07      	ldr	r2, [sp, #28]
 8007f86:	4654      	mov	r4, sl
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f04f 0c0a 	mov.w	ip, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f94:	3b30      	subs	r3, #48	@ 0x30
 8007f96:	2b09      	cmp	r3, #9
 8007f98:	d94b      	bls.n	8008032 <_vfiprintf_r+0x1a2>
 8007f9a:	b1b0      	cbz	r0, 8007fca <_vfiprintf_r+0x13a>
 8007f9c:	9207      	str	r2, [sp, #28]
 8007f9e:	e014      	b.n	8007fca <_vfiprintf_r+0x13a>
 8007fa0:	eba0 0308 	sub.w	r3, r0, r8
 8007fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	46a2      	mov	sl, r4
 8007fae:	e7d2      	b.n	8007f56 <_vfiprintf_r+0xc6>
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	1d19      	adds	r1, r3, #4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	9103      	str	r1, [sp, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfbb      	ittet	lt
 8007fbc:	425b      	neglt	r3, r3
 8007fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc2:	9307      	strge	r3, [sp, #28]
 8007fc4:	9307      	strlt	r3, [sp, #28]
 8007fc6:	bfb8      	it	lt
 8007fc8:	9204      	strlt	r2, [sp, #16]
 8007fca:	7823      	ldrb	r3, [r4, #0]
 8007fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fce:	d10a      	bne.n	8007fe6 <_vfiprintf_r+0x156>
 8007fd0:	7863      	ldrb	r3, [r4, #1]
 8007fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd4:	d132      	bne.n	800803c <_vfiprintf_r+0x1ac>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	9203      	str	r2, [sp, #12]
 8007fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fe2:	3402      	adds	r4, #2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080bc <_vfiprintf_r+0x22c>
 8007fea:	7821      	ldrb	r1, [r4, #0]
 8007fec:	2203      	movs	r2, #3
 8007fee:	4650      	mov	r0, sl
 8007ff0:	f7f8 f90e 	bl	8000210 <memchr>
 8007ff4:	b138      	cbz	r0, 8008006 <_vfiprintf_r+0x176>
 8007ff6:	9b04      	ldr	r3, [sp, #16]
 8007ff8:	eba0 000a 	sub.w	r0, r0, sl
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	4082      	lsls	r2, r0
 8008000:	4313      	orrs	r3, r2
 8008002:	3401      	adds	r4, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800a:	4829      	ldr	r0, [pc, #164]	@ (80080b0 <_vfiprintf_r+0x220>)
 800800c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008010:	2206      	movs	r2, #6
 8008012:	f7f8 f8fd 	bl	8000210 <memchr>
 8008016:	2800      	cmp	r0, #0
 8008018:	d03f      	beq.n	800809a <_vfiprintf_r+0x20a>
 800801a:	4b26      	ldr	r3, [pc, #152]	@ (80080b4 <_vfiprintf_r+0x224>)
 800801c:	bb1b      	cbnz	r3, 8008066 <_vfiprintf_r+0x1d6>
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	3307      	adds	r3, #7
 8008022:	f023 0307 	bic.w	r3, r3, #7
 8008026:	3308      	adds	r3, #8
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802c:	443b      	add	r3, r7
 800802e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008030:	e76a      	b.n	8007f08 <_vfiprintf_r+0x78>
 8008032:	fb0c 3202 	mla	r2, ip, r2, r3
 8008036:	460c      	mov	r4, r1
 8008038:	2001      	movs	r0, #1
 800803a:	e7a8      	b.n	8007f8e <_vfiprintf_r+0xfe>
 800803c:	2300      	movs	r3, #0
 800803e:	3401      	adds	r4, #1
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0c0a 	mov.w	ip, #10
 8008048:	4620      	mov	r0, r4
 800804a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800804e:	3a30      	subs	r2, #48	@ 0x30
 8008050:	2a09      	cmp	r2, #9
 8008052:	d903      	bls.n	800805c <_vfiprintf_r+0x1cc>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0c6      	beq.n	8007fe6 <_vfiprintf_r+0x156>
 8008058:	9105      	str	r1, [sp, #20]
 800805a:	e7c4      	b.n	8007fe6 <_vfiprintf_r+0x156>
 800805c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008060:	4604      	mov	r4, r0
 8008062:	2301      	movs	r3, #1
 8008064:	e7f0      	b.n	8008048 <_vfiprintf_r+0x1b8>
 8008066:	ab03      	add	r3, sp, #12
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	462a      	mov	r2, r5
 800806c:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <_vfiprintf_r+0x228>)
 800806e:	a904      	add	r1, sp, #16
 8008070:	4630      	mov	r0, r6
 8008072:	f7fc fa8d 	bl	8004590 <_printf_float>
 8008076:	4607      	mov	r7, r0
 8008078:	1c78      	adds	r0, r7, #1
 800807a:	d1d6      	bne.n	800802a <_vfiprintf_r+0x19a>
 800807c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800807e:	07d9      	lsls	r1, r3, #31
 8008080:	d405      	bmi.n	800808e <_vfiprintf_r+0x1fe>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d402      	bmi.n	800808e <_vfiprintf_r+0x1fe>
 8008088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800808a:	f7fd faf5 	bl	8005678 <__retarget_lock_release_recursive>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	065b      	lsls	r3, r3, #25
 8008092:	f53f af1f 	bmi.w	8007ed4 <_vfiprintf_r+0x44>
 8008096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008098:	e71e      	b.n	8007ed8 <_vfiprintf_r+0x48>
 800809a:	ab03      	add	r3, sp, #12
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	462a      	mov	r2, r5
 80080a0:	4b05      	ldr	r3, [pc, #20]	@ (80080b8 <_vfiprintf_r+0x228>)
 80080a2:	a904      	add	r1, sp, #16
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7fc fd0b 	bl	8004ac0 <_printf_i>
 80080aa:	e7e4      	b.n	8008076 <_vfiprintf_r+0x1e6>
 80080ac:	080094d9 	.word	0x080094d9
 80080b0:	080094e3 	.word	0x080094e3
 80080b4:	08004591 	.word	0x08004591
 80080b8:	08007e6b 	.word	0x08007e6b
 80080bc:	080094df 	.word	0x080094df

080080c0 <__sflush_r>:
 80080c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	0716      	lsls	r6, r2, #28
 80080ca:	4605      	mov	r5, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	d454      	bmi.n	800817a <__sflush_r+0xba>
 80080d0:	684b      	ldr	r3, [r1, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	dc02      	bgt.n	80080dc <__sflush_r+0x1c>
 80080d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dd48      	ble.n	800816e <__sflush_r+0xae>
 80080dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d045      	beq.n	800816e <__sflush_r+0xae>
 80080e2:	2300      	movs	r3, #0
 80080e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080e8:	682f      	ldr	r7, [r5, #0]
 80080ea:	6a21      	ldr	r1, [r4, #32]
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	d030      	beq.n	8008152 <__sflush_r+0x92>
 80080f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	0759      	lsls	r1, r3, #29
 80080f6:	d505      	bpl.n	8008104 <__sflush_r+0x44>
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	1ad2      	subs	r2, r2, r3
 80080fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080fe:	b10b      	cbz	r3, 8008104 <__sflush_r+0x44>
 8008100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008102:	1ad2      	subs	r2, r2, r3
 8008104:	2300      	movs	r3, #0
 8008106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008108:	6a21      	ldr	r1, [r4, #32]
 800810a:	4628      	mov	r0, r5
 800810c:	47b0      	blx	r6
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	d106      	bne.n	8008122 <__sflush_r+0x62>
 8008114:	6829      	ldr	r1, [r5, #0]
 8008116:	291d      	cmp	r1, #29
 8008118:	d82b      	bhi.n	8008172 <__sflush_r+0xb2>
 800811a:	4a2a      	ldr	r2, [pc, #168]	@ (80081c4 <__sflush_r+0x104>)
 800811c:	410a      	asrs	r2, r1
 800811e:	07d6      	lsls	r6, r2, #31
 8008120:	d427      	bmi.n	8008172 <__sflush_r+0xb2>
 8008122:	2200      	movs	r2, #0
 8008124:	6062      	str	r2, [r4, #4]
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	6922      	ldr	r2, [r4, #16]
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	d504      	bpl.n	8008138 <__sflush_r+0x78>
 800812e:	1c42      	adds	r2, r0, #1
 8008130:	d101      	bne.n	8008136 <__sflush_r+0x76>
 8008132:	682b      	ldr	r3, [r5, #0]
 8008134:	b903      	cbnz	r3, 8008138 <__sflush_r+0x78>
 8008136:	6560      	str	r0, [r4, #84]	@ 0x54
 8008138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	b1b9      	cbz	r1, 800816e <__sflush_r+0xae>
 800813e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008142:	4299      	cmp	r1, r3
 8008144:	d002      	beq.n	800814c <__sflush_r+0x8c>
 8008146:	4628      	mov	r0, r5
 8008148:	f7fe f8ea 	bl	8006320 <_free_r>
 800814c:	2300      	movs	r3, #0
 800814e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008150:	e00d      	b.n	800816e <__sflush_r+0xae>
 8008152:	2301      	movs	r3, #1
 8008154:	4628      	mov	r0, r5
 8008156:	47b0      	blx	r6
 8008158:	4602      	mov	r2, r0
 800815a:	1c50      	adds	r0, r2, #1
 800815c:	d1c9      	bne.n	80080f2 <__sflush_r+0x32>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0c6      	beq.n	80080f2 <__sflush_r+0x32>
 8008164:	2b1d      	cmp	r3, #29
 8008166:	d001      	beq.n	800816c <__sflush_r+0xac>
 8008168:	2b16      	cmp	r3, #22
 800816a:	d11e      	bne.n	80081aa <__sflush_r+0xea>
 800816c:	602f      	str	r7, [r5, #0]
 800816e:	2000      	movs	r0, #0
 8008170:	e022      	b.n	80081b8 <__sflush_r+0xf8>
 8008172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008176:	b21b      	sxth	r3, r3
 8008178:	e01b      	b.n	80081b2 <__sflush_r+0xf2>
 800817a:	690f      	ldr	r7, [r1, #16]
 800817c:	2f00      	cmp	r7, #0
 800817e:	d0f6      	beq.n	800816e <__sflush_r+0xae>
 8008180:	0793      	lsls	r3, r2, #30
 8008182:	680e      	ldr	r6, [r1, #0]
 8008184:	bf08      	it	eq
 8008186:	694b      	ldreq	r3, [r1, #20]
 8008188:	600f      	str	r7, [r1, #0]
 800818a:	bf18      	it	ne
 800818c:	2300      	movne	r3, #0
 800818e:	eba6 0807 	sub.w	r8, r6, r7
 8008192:	608b      	str	r3, [r1, #8]
 8008194:	f1b8 0f00 	cmp.w	r8, #0
 8008198:	dde9      	ble.n	800816e <__sflush_r+0xae>
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800819e:	4643      	mov	r3, r8
 80081a0:	463a      	mov	r2, r7
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b0      	blx	r6
 80081a6:	2800      	cmp	r0, #0
 80081a8:	dc08      	bgt.n	80081bc <__sflush_r+0xfc>
 80081aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081bc:	4407      	add	r7, r0
 80081be:	eba8 0800 	sub.w	r8, r8, r0
 80081c2:	e7e7      	b.n	8008194 <__sflush_r+0xd4>
 80081c4:	dfbffffe 	.word	0xdfbffffe

080081c8 <_fflush_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	690b      	ldr	r3, [r1, #16]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b913      	cbnz	r3, 80081d8 <_fflush_r+0x10>
 80081d2:	2500      	movs	r5, #0
 80081d4:	4628      	mov	r0, r5
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	b118      	cbz	r0, 80081e2 <_fflush_r+0x1a>
 80081da:	6a03      	ldr	r3, [r0, #32]
 80081dc:	b90b      	cbnz	r3, 80081e2 <_fflush_r+0x1a>
 80081de:	f7fd f82f 	bl	8005240 <__sinit>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f3      	beq.n	80081d2 <_fflush_r+0xa>
 80081ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081ec:	07d0      	lsls	r0, r2, #31
 80081ee:	d404      	bmi.n	80081fa <_fflush_r+0x32>
 80081f0:	0599      	lsls	r1, r3, #22
 80081f2:	d402      	bmi.n	80081fa <_fflush_r+0x32>
 80081f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081f6:	f7fd fa3e 	bl	8005676 <__retarget_lock_acquire_recursive>
 80081fa:	4628      	mov	r0, r5
 80081fc:	4621      	mov	r1, r4
 80081fe:	f7ff ff5f 	bl	80080c0 <__sflush_r>
 8008202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008204:	07da      	lsls	r2, r3, #31
 8008206:	4605      	mov	r5, r0
 8008208:	d4e4      	bmi.n	80081d4 <_fflush_r+0xc>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	d4e1      	bmi.n	80081d4 <_fflush_r+0xc>
 8008210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008212:	f7fd fa31 	bl	8005678 <__retarget_lock_release_recursive>
 8008216:	e7dd      	b.n	80081d4 <_fflush_r+0xc>

08008218 <__swhatbuf_r>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	460c      	mov	r4, r1
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	2900      	cmp	r1, #0
 8008222:	b096      	sub	sp, #88	@ 0x58
 8008224:	4615      	mov	r5, r2
 8008226:	461e      	mov	r6, r3
 8008228:	da0d      	bge.n	8008246 <__swhatbuf_r+0x2e>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008230:	f04f 0100 	mov.w	r1, #0
 8008234:	bf14      	ite	ne
 8008236:	2340      	movne	r3, #64	@ 0x40
 8008238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800823c:	2000      	movs	r0, #0
 800823e:	6031      	str	r1, [r6, #0]
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	b016      	add	sp, #88	@ 0x58
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	466a      	mov	r2, sp
 8008248:	f000 f874 	bl	8008334 <_fstat_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	dbec      	blt.n	800822a <__swhatbuf_r+0x12>
 8008250:	9901      	ldr	r1, [sp, #4]
 8008252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800825a:	4259      	negs	r1, r3
 800825c:	4159      	adcs	r1, r3
 800825e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008262:	e7eb      	b.n	800823c <__swhatbuf_r+0x24>

08008264 <__smakebuf_r>:
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008268:	079d      	lsls	r5, r3, #30
 800826a:	4606      	mov	r6, r0
 800826c:	460c      	mov	r4, r1
 800826e:	d507      	bpl.n	8008280 <__smakebuf_r+0x1c>
 8008270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	2301      	movs	r3, #1
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	b003      	add	sp, #12
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	ab01      	add	r3, sp, #4
 8008282:	466a      	mov	r2, sp
 8008284:	f7ff ffc8 	bl	8008218 <__swhatbuf_r>
 8008288:	9f00      	ldr	r7, [sp, #0]
 800828a:	4605      	mov	r5, r0
 800828c:	4639      	mov	r1, r7
 800828e:	4630      	mov	r0, r6
 8008290:	f7fe f8ba 	bl	8006408 <_malloc_r>
 8008294:	b948      	cbnz	r0, 80082aa <__smakebuf_r+0x46>
 8008296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829a:	059a      	lsls	r2, r3, #22
 800829c:	d4ee      	bmi.n	800827c <__smakebuf_r+0x18>
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	f043 0302 	orr.w	r3, r3, #2
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	e7e2      	b.n	8008270 <__smakebuf_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	6020      	str	r0, [r4, #0]
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ba:	b15b      	cbz	r3, 80082d4 <__smakebuf_r+0x70>
 80082bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f849 	bl	8008358 <_isatty_r>
 80082c6:	b128      	cbz	r0, 80082d4 <__smakebuf_r+0x70>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f023 0303 	bic.w	r3, r3, #3
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	81a3      	strh	r3, [r4, #12]
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	431d      	orrs	r5, r3
 80082d8:	81a5      	strh	r5, [r4, #12]
 80082da:	e7cf      	b.n	800827c <__smakebuf_r+0x18>

080082dc <memmove>:
 80082dc:	4288      	cmp	r0, r1
 80082de:	b510      	push	{r4, lr}
 80082e0:	eb01 0402 	add.w	r4, r1, r2
 80082e4:	d902      	bls.n	80082ec <memmove+0x10>
 80082e6:	4284      	cmp	r4, r0
 80082e8:	4623      	mov	r3, r4
 80082ea:	d807      	bhi.n	80082fc <memmove+0x20>
 80082ec:	1e43      	subs	r3, r0, #1
 80082ee:	42a1      	cmp	r1, r4
 80082f0:	d008      	beq.n	8008304 <memmove+0x28>
 80082f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082fa:	e7f8      	b.n	80082ee <memmove+0x12>
 80082fc:	4402      	add	r2, r0
 80082fe:	4601      	mov	r1, r0
 8008300:	428a      	cmp	r2, r1
 8008302:	d100      	bne.n	8008306 <memmove+0x2a>
 8008304:	bd10      	pop	{r4, pc}
 8008306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800830a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800830e:	e7f7      	b.n	8008300 <memmove+0x24>

08008310 <strncmp>:
 8008310:	b510      	push	{r4, lr}
 8008312:	b16a      	cbz	r2, 8008330 <strncmp+0x20>
 8008314:	3901      	subs	r1, #1
 8008316:	1884      	adds	r4, r0, r2
 8008318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008320:	429a      	cmp	r2, r3
 8008322:	d103      	bne.n	800832c <strncmp+0x1c>
 8008324:	42a0      	cmp	r0, r4
 8008326:	d001      	beq.n	800832c <strncmp+0x1c>
 8008328:	2a00      	cmp	r2, #0
 800832a:	d1f5      	bne.n	8008318 <strncmp+0x8>
 800832c:	1ad0      	subs	r0, r2, r3
 800832e:	bd10      	pop	{r4, pc}
 8008330:	4610      	mov	r0, r2
 8008332:	e7fc      	b.n	800832e <strncmp+0x1e>

08008334 <_fstat_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	@ (8008354 <_fstat_r+0x20>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	4611      	mov	r1, r2
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	f7f9 f9ca 	bl	80016da <_fstat>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d102      	bne.n	8008350 <_fstat_r+0x1c>
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	b103      	cbz	r3, 8008350 <_fstat_r+0x1c>
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	bd38      	pop	{r3, r4, r5, pc}
 8008352:	bf00      	nop
 8008354:	2000062c 	.word	0x2000062c

08008358 <_isatty_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d06      	ldr	r5, [pc, #24]	@ (8008374 <_isatty_r+0x1c>)
 800835c:	2300      	movs	r3, #0
 800835e:	4604      	mov	r4, r0
 8008360:	4608      	mov	r0, r1
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f7f9 f9c9 	bl	80016fa <_isatty>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_isatty_r+0x1a>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_isatty_r+0x1a>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	2000062c 	.word	0x2000062c

08008378 <_sbrk_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d06      	ldr	r5, [pc, #24]	@ (8008394 <_sbrk_r+0x1c>)
 800837c:	2300      	movs	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	4608      	mov	r0, r1
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	f7f9 f9d2 	bl	800172c <_sbrk>
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	d102      	bne.n	8008392 <_sbrk_r+0x1a>
 800838c:	682b      	ldr	r3, [r5, #0]
 800838e:	b103      	cbz	r3, 8008392 <_sbrk_r+0x1a>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	2000062c 	.word	0x2000062c

08008398 <memcpy>:
 8008398:	440a      	add	r2, r1
 800839a:	4291      	cmp	r1, r2
 800839c:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a0:	d100      	bne.n	80083a4 <memcpy+0xc>
 80083a2:	4770      	bx	lr
 80083a4:	b510      	push	{r4, lr}
 80083a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ae:	4291      	cmp	r1, r2
 80083b0:	d1f9      	bne.n	80083a6 <memcpy+0xe>
 80083b2:	bd10      	pop	{r4, pc}
 80083b4:	0000      	movs	r0, r0
	...

080083b8 <nan>:
 80083b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80083c0 <nan+0x8>
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	00000000 	.word	0x00000000
 80083c4:	7ff80000 	.word	0x7ff80000

080083c8 <__assert_func>:
 80083c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ca:	4614      	mov	r4, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <__assert_func+0x2c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4605      	mov	r5, r0
 80083d4:	68d8      	ldr	r0, [r3, #12]
 80083d6:	b954      	cbnz	r4, 80083ee <__assert_func+0x26>
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <__assert_func+0x30>)
 80083da:	461c      	mov	r4, r3
 80083dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083e0:	9100      	str	r1, [sp, #0]
 80083e2:	462b      	mov	r3, r5
 80083e4:	4905      	ldr	r1, [pc, #20]	@ (80083fc <__assert_func+0x34>)
 80083e6:	f000 fba7 	bl	8008b38 <fiprintf>
 80083ea:	f000 fbb7 	bl	8008b5c <abort>
 80083ee:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <__assert_func+0x38>)
 80083f0:	e7f4      	b.n	80083dc <__assert_func+0x14>
 80083f2:	bf00      	nop
 80083f4:	20000018 	.word	0x20000018
 80083f8:	0800952d 	.word	0x0800952d
 80083fc:	080094ff 	.word	0x080094ff
 8008400:	080094f2 	.word	0x080094f2

08008404 <_calloc_r>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	fba1 5402 	umull	r5, r4, r1, r2
 800840a:	b93c      	cbnz	r4, 800841c <_calloc_r+0x18>
 800840c:	4629      	mov	r1, r5
 800840e:	f7fd fffb 	bl	8006408 <_malloc_r>
 8008412:	4606      	mov	r6, r0
 8008414:	b928      	cbnz	r0, 8008422 <_calloc_r+0x1e>
 8008416:	2600      	movs	r6, #0
 8008418:	4630      	mov	r0, r6
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	220c      	movs	r2, #12
 800841e:	6002      	str	r2, [r0, #0]
 8008420:	e7f9      	b.n	8008416 <_calloc_r+0x12>
 8008422:	462a      	mov	r2, r5
 8008424:	4621      	mov	r1, r4
 8008426:	f7fd f8a9 	bl	800557c <memset>
 800842a:	e7f5      	b.n	8008418 <_calloc_r+0x14>

0800842c <rshift>:
 800842c:	6903      	ldr	r3, [r0, #16]
 800842e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008436:	ea4f 1261 	mov.w	r2, r1, asr #5
 800843a:	f100 0414 	add.w	r4, r0, #20
 800843e:	dd45      	ble.n	80084cc <rshift+0xa0>
 8008440:	f011 011f 	ands.w	r1, r1, #31
 8008444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800844c:	d10c      	bne.n	8008468 <rshift+0x3c>
 800844e:	f100 0710 	add.w	r7, r0, #16
 8008452:	4629      	mov	r1, r5
 8008454:	42b1      	cmp	r1, r6
 8008456:	d334      	bcc.n	80084c2 <rshift+0x96>
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	1eea      	subs	r2, r5, #3
 800845e:	4296      	cmp	r6, r2
 8008460:	bf38      	it	cc
 8008462:	2300      	movcc	r3, #0
 8008464:	4423      	add	r3, r4
 8008466:	e015      	b.n	8008494 <rshift+0x68>
 8008468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800846c:	f1c1 0820 	rsb	r8, r1, #32
 8008470:	40cf      	lsrs	r7, r1
 8008472:	f105 0e04 	add.w	lr, r5, #4
 8008476:	46a1      	mov	r9, r4
 8008478:	4576      	cmp	r6, lr
 800847a:	46f4      	mov	ip, lr
 800847c:	d815      	bhi.n	80084aa <rshift+0x7e>
 800847e:	1a9a      	subs	r2, r3, r2
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	3a04      	subs	r2, #4
 8008484:	3501      	adds	r5, #1
 8008486:	42ae      	cmp	r6, r5
 8008488:	bf38      	it	cc
 800848a:	2200      	movcc	r2, #0
 800848c:	18a3      	adds	r3, r4, r2
 800848e:	50a7      	str	r7, [r4, r2]
 8008490:	b107      	cbz	r7, 8008494 <rshift+0x68>
 8008492:	3304      	adds	r3, #4
 8008494:	1b1a      	subs	r2, r3, r4
 8008496:	42a3      	cmp	r3, r4
 8008498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800849c:	bf08      	it	eq
 800849e:	2300      	moveq	r3, #0
 80084a0:	6102      	str	r2, [r0, #16]
 80084a2:	bf08      	it	eq
 80084a4:	6143      	streq	r3, [r0, #20]
 80084a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084aa:	f8dc c000 	ldr.w	ip, [ip]
 80084ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80084b2:	ea4c 0707 	orr.w	r7, ip, r7
 80084b6:	f849 7b04 	str.w	r7, [r9], #4
 80084ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084be:	40cf      	lsrs	r7, r1
 80084c0:	e7da      	b.n	8008478 <rshift+0x4c>
 80084c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80084c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80084ca:	e7c3      	b.n	8008454 <rshift+0x28>
 80084cc:	4623      	mov	r3, r4
 80084ce:	e7e1      	b.n	8008494 <rshift+0x68>

080084d0 <__hexdig_fun>:
 80084d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	d802      	bhi.n	80084de <__hexdig_fun+0xe>
 80084d8:	3820      	subs	r0, #32
 80084da:	b2c0      	uxtb	r0, r0
 80084dc:	4770      	bx	lr
 80084de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d801      	bhi.n	80084ea <__hexdig_fun+0x1a>
 80084e6:	3847      	subs	r0, #71	@ 0x47
 80084e8:	e7f7      	b.n	80084da <__hexdig_fun+0xa>
 80084ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d801      	bhi.n	80084f6 <__hexdig_fun+0x26>
 80084f2:	3827      	subs	r0, #39	@ 0x27
 80084f4:	e7f1      	b.n	80084da <__hexdig_fun+0xa>
 80084f6:	2000      	movs	r0, #0
 80084f8:	4770      	bx	lr
	...

080084fc <__gethex>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	b085      	sub	sp, #20
 8008502:	468a      	mov	sl, r1
 8008504:	9302      	str	r3, [sp, #8]
 8008506:	680b      	ldr	r3, [r1, #0]
 8008508:	9001      	str	r0, [sp, #4]
 800850a:	4690      	mov	r8, r2
 800850c:	1c9c      	adds	r4, r3, #2
 800850e:	46a1      	mov	r9, r4
 8008510:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008514:	2830      	cmp	r0, #48	@ 0x30
 8008516:	d0fa      	beq.n	800850e <__gethex+0x12>
 8008518:	eba9 0303 	sub.w	r3, r9, r3
 800851c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008520:	f7ff ffd6 	bl	80084d0 <__hexdig_fun>
 8008524:	4605      	mov	r5, r0
 8008526:	2800      	cmp	r0, #0
 8008528:	d168      	bne.n	80085fc <__gethex+0x100>
 800852a:	49a0      	ldr	r1, [pc, #640]	@ (80087ac <__gethex+0x2b0>)
 800852c:	2201      	movs	r2, #1
 800852e:	4648      	mov	r0, r9
 8008530:	f7ff feee 	bl	8008310 <strncmp>
 8008534:	4607      	mov	r7, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d167      	bne.n	800860a <__gethex+0x10e>
 800853a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800853e:	4626      	mov	r6, r4
 8008540:	f7ff ffc6 	bl	80084d0 <__hexdig_fun>
 8008544:	2800      	cmp	r0, #0
 8008546:	d062      	beq.n	800860e <__gethex+0x112>
 8008548:	4623      	mov	r3, r4
 800854a:	7818      	ldrb	r0, [r3, #0]
 800854c:	2830      	cmp	r0, #48	@ 0x30
 800854e:	4699      	mov	r9, r3
 8008550:	f103 0301 	add.w	r3, r3, #1
 8008554:	d0f9      	beq.n	800854a <__gethex+0x4e>
 8008556:	f7ff ffbb 	bl	80084d0 <__hexdig_fun>
 800855a:	fab0 f580 	clz	r5, r0
 800855e:	096d      	lsrs	r5, r5, #5
 8008560:	f04f 0b01 	mov.w	fp, #1
 8008564:	464a      	mov	r2, r9
 8008566:	4616      	mov	r6, r2
 8008568:	3201      	adds	r2, #1
 800856a:	7830      	ldrb	r0, [r6, #0]
 800856c:	f7ff ffb0 	bl	80084d0 <__hexdig_fun>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1f8      	bne.n	8008566 <__gethex+0x6a>
 8008574:	498d      	ldr	r1, [pc, #564]	@ (80087ac <__gethex+0x2b0>)
 8008576:	2201      	movs	r2, #1
 8008578:	4630      	mov	r0, r6
 800857a:	f7ff fec9 	bl	8008310 <strncmp>
 800857e:	2800      	cmp	r0, #0
 8008580:	d13f      	bne.n	8008602 <__gethex+0x106>
 8008582:	b944      	cbnz	r4, 8008596 <__gethex+0x9a>
 8008584:	1c74      	adds	r4, r6, #1
 8008586:	4622      	mov	r2, r4
 8008588:	4616      	mov	r6, r2
 800858a:	3201      	adds	r2, #1
 800858c:	7830      	ldrb	r0, [r6, #0]
 800858e:	f7ff ff9f 	bl	80084d0 <__hexdig_fun>
 8008592:	2800      	cmp	r0, #0
 8008594:	d1f8      	bne.n	8008588 <__gethex+0x8c>
 8008596:	1ba4      	subs	r4, r4, r6
 8008598:	00a7      	lsls	r7, r4, #2
 800859a:	7833      	ldrb	r3, [r6, #0]
 800859c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80085a0:	2b50      	cmp	r3, #80	@ 0x50
 80085a2:	d13e      	bne.n	8008622 <__gethex+0x126>
 80085a4:	7873      	ldrb	r3, [r6, #1]
 80085a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80085a8:	d033      	beq.n	8008612 <__gethex+0x116>
 80085aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80085ac:	d034      	beq.n	8008618 <__gethex+0x11c>
 80085ae:	1c71      	adds	r1, r6, #1
 80085b0:	2400      	movs	r4, #0
 80085b2:	7808      	ldrb	r0, [r1, #0]
 80085b4:	f7ff ff8c 	bl	80084d0 <__hexdig_fun>
 80085b8:	1e43      	subs	r3, r0, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b18      	cmp	r3, #24
 80085be:	d830      	bhi.n	8008622 <__gethex+0x126>
 80085c0:	f1a0 0210 	sub.w	r2, r0, #16
 80085c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085c8:	f7ff ff82 	bl	80084d0 <__hexdig_fun>
 80085cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80085d0:	fa5f fc8c 	uxtb.w	ip, ip
 80085d4:	f1bc 0f18 	cmp.w	ip, #24
 80085d8:	f04f 030a 	mov.w	r3, #10
 80085dc:	d91e      	bls.n	800861c <__gethex+0x120>
 80085de:	b104      	cbz	r4, 80085e2 <__gethex+0xe6>
 80085e0:	4252      	negs	r2, r2
 80085e2:	4417      	add	r7, r2
 80085e4:	f8ca 1000 	str.w	r1, [sl]
 80085e8:	b1ed      	cbz	r5, 8008626 <__gethex+0x12a>
 80085ea:	f1bb 0f00 	cmp.w	fp, #0
 80085ee:	bf0c      	ite	eq
 80085f0:	2506      	moveq	r5, #6
 80085f2:	2500      	movne	r5, #0
 80085f4:	4628      	mov	r0, r5
 80085f6:	b005      	add	sp, #20
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	2500      	movs	r5, #0
 80085fe:	462c      	mov	r4, r5
 8008600:	e7b0      	b.n	8008564 <__gethex+0x68>
 8008602:	2c00      	cmp	r4, #0
 8008604:	d1c7      	bne.n	8008596 <__gethex+0x9a>
 8008606:	4627      	mov	r7, r4
 8008608:	e7c7      	b.n	800859a <__gethex+0x9e>
 800860a:	464e      	mov	r6, r9
 800860c:	462f      	mov	r7, r5
 800860e:	2501      	movs	r5, #1
 8008610:	e7c3      	b.n	800859a <__gethex+0x9e>
 8008612:	2400      	movs	r4, #0
 8008614:	1cb1      	adds	r1, r6, #2
 8008616:	e7cc      	b.n	80085b2 <__gethex+0xb6>
 8008618:	2401      	movs	r4, #1
 800861a:	e7fb      	b.n	8008614 <__gethex+0x118>
 800861c:	fb03 0002 	mla	r0, r3, r2, r0
 8008620:	e7ce      	b.n	80085c0 <__gethex+0xc4>
 8008622:	4631      	mov	r1, r6
 8008624:	e7de      	b.n	80085e4 <__gethex+0xe8>
 8008626:	eba6 0309 	sub.w	r3, r6, r9
 800862a:	3b01      	subs	r3, #1
 800862c:	4629      	mov	r1, r5
 800862e:	2b07      	cmp	r3, #7
 8008630:	dc0a      	bgt.n	8008648 <__gethex+0x14c>
 8008632:	9801      	ldr	r0, [sp, #4]
 8008634:	f7fd ff74 	bl	8006520 <_Balloc>
 8008638:	4604      	mov	r4, r0
 800863a:	b940      	cbnz	r0, 800864e <__gethex+0x152>
 800863c:	4b5c      	ldr	r3, [pc, #368]	@ (80087b0 <__gethex+0x2b4>)
 800863e:	4602      	mov	r2, r0
 8008640:	21e4      	movs	r1, #228	@ 0xe4
 8008642:	485c      	ldr	r0, [pc, #368]	@ (80087b4 <__gethex+0x2b8>)
 8008644:	f7ff fec0 	bl	80083c8 <__assert_func>
 8008648:	3101      	adds	r1, #1
 800864a:	105b      	asrs	r3, r3, #1
 800864c:	e7ef      	b.n	800862e <__gethex+0x132>
 800864e:	f100 0a14 	add.w	sl, r0, #20
 8008652:	2300      	movs	r3, #0
 8008654:	4655      	mov	r5, sl
 8008656:	469b      	mov	fp, r3
 8008658:	45b1      	cmp	r9, r6
 800865a:	d337      	bcc.n	80086cc <__gethex+0x1d0>
 800865c:	f845 bb04 	str.w	fp, [r5], #4
 8008660:	eba5 050a 	sub.w	r5, r5, sl
 8008664:	10ad      	asrs	r5, r5, #2
 8008666:	6125      	str	r5, [r4, #16]
 8008668:	4658      	mov	r0, fp
 800866a:	f7fe f84b 	bl	8006704 <__hi0bits>
 800866e:	016d      	lsls	r5, r5, #5
 8008670:	f8d8 6000 	ldr.w	r6, [r8]
 8008674:	1a2d      	subs	r5, r5, r0
 8008676:	42b5      	cmp	r5, r6
 8008678:	dd54      	ble.n	8008724 <__gethex+0x228>
 800867a:	1bad      	subs	r5, r5, r6
 800867c:	4629      	mov	r1, r5
 800867e:	4620      	mov	r0, r4
 8008680:	f7fe fbdf 	bl	8006e42 <__any_on>
 8008684:	4681      	mov	r9, r0
 8008686:	b178      	cbz	r0, 80086a8 <__gethex+0x1ac>
 8008688:	1e6b      	subs	r3, r5, #1
 800868a:	1159      	asrs	r1, r3, #5
 800868c:	f003 021f 	and.w	r2, r3, #31
 8008690:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008694:	f04f 0901 	mov.w	r9, #1
 8008698:	fa09 f202 	lsl.w	r2, r9, r2
 800869c:	420a      	tst	r2, r1
 800869e:	d003      	beq.n	80086a8 <__gethex+0x1ac>
 80086a0:	454b      	cmp	r3, r9
 80086a2:	dc36      	bgt.n	8008712 <__gethex+0x216>
 80086a4:	f04f 0902 	mov.w	r9, #2
 80086a8:	4629      	mov	r1, r5
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7ff febe 	bl	800842c <rshift>
 80086b0:	442f      	add	r7, r5
 80086b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086b6:	42bb      	cmp	r3, r7
 80086b8:	da42      	bge.n	8008740 <__gethex+0x244>
 80086ba:	9801      	ldr	r0, [sp, #4]
 80086bc:	4621      	mov	r1, r4
 80086be:	f7fd ff6f 	bl	80065a0 <_Bfree>
 80086c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086c4:	2300      	movs	r3, #0
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	25a3      	movs	r5, #163	@ 0xa3
 80086ca:	e793      	b.n	80085f4 <__gethex+0xf8>
 80086cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80086d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80086d2:	d012      	beq.n	80086fa <__gethex+0x1fe>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d104      	bne.n	80086e2 <__gethex+0x1e6>
 80086d8:	f845 bb04 	str.w	fp, [r5], #4
 80086dc:	f04f 0b00 	mov.w	fp, #0
 80086e0:	465b      	mov	r3, fp
 80086e2:	7830      	ldrb	r0, [r6, #0]
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	f7ff fef3 	bl	80084d0 <__hexdig_fun>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	f000 000f 	and.w	r0, r0, #15
 80086f0:	4098      	lsls	r0, r3
 80086f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80086f6:	3304      	adds	r3, #4
 80086f8:	e7ae      	b.n	8008658 <__gethex+0x15c>
 80086fa:	45b1      	cmp	r9, r6
 80086fc:	d8ea      	bhi.n	80086d4 <__gethex+0x1d8>
 80086fe:	492b      	ldr	r1, [pc, #172]	@ (80087ac <__gethex+0x2b0>)
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff fe03 	bl	8008310 <strncmp>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	2800      	cmp	r0, #0
 800870e:	d1e1      	bne.n	80086d4 <__gethex+0x1d8>
 8008710:	e7a2      	b.n	8008658 <__gethex+0x15c>
 8008712:	1ea9      	subs	r1, r5, #2
 8008714:	4620      	mov	r0, r4
 8008716:	f7fe fb94 	bl	8006e42 <__any_on>
 800871a:	2800      	cmp	r0, #0
 800871c:	d0c2      	beq.n	80086a4 <__gethex+0x1a8>
 800871e:	f04f 0903 	mov.w	r9, #3
 8008722:	e7c1      	b.n	80086a8 <__gethex+0x1ac>
 8008724:	da09      	bge.n	800873a <__gethex+0x23e>
 8008726:	1b75      	subs	r5, r6, r5
 8008728:	4621      	mov	r1, r4
 800872a:	9801      	ldr	r0, [sp, #4]
 800872c:	462a      	mov	r2, r5
 800872e:	f7fe f94f 	bl	80069d0 <__lshift>
 8008732:	1b7f      	subs	r7, r7, r5
 8008734:	4604      	mov	r4, r0
 8008736:	f100 0a14 	add.w	sl, r0, #20
 800873a:	f04f 0900 	mov.w	r9, #0
 800873e:	e7b8      	b.n	80086b2 <__gethex+0x1b6>
 8008740:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008744:	42bd      	cmp	r5, r7
 8008746:	dd6f      	ble.n	8008828 <__gethex+0x32c>
 8008748:	1bed      	subs	r5, r5, r7
 800874a:	42ae      	cmp	r6, r5
 800874c:	dc34      	bgt.n	80087b8 <__gethex+0x2bc>
 800874e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d022      	beq.n	800879c <__gethex+0x2a0>
 8008756:	2b03      	cmp	r3, #3
 8008758:	d024      	beq.n	80087a4 <__gethex+0x2a8>
 800875a:	2b01      	cmp	r3, #1
 800875c:	d115      	bne.n	800878a <__gethex+0x28e>
 800875e:	42ae      	cmp	r6, r5
 8008760:	d113      	bne.n	800878a <__gethex+0x28e>
 8008762:	2e01      	cmp	r6, #1
 8008764:	d10b      	bne.n	800877e <__gethex+0x282>
 8008766:	9a02      	ldr	r2, [sp, #8]
 8008768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	2301      	movs	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	f8ca 3000 	str.w	r3, [sl]
 8008776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008778:	2562      	movs	r5, #98	@ 0x62
 800877a:	601c      	str	r4, [r3, #0]
 800877c:	e73a      	b.n	80085f4 <__gethex+0xf8>
 800877e:	1e71      	subs	r1, r6, #1
 8008780:	4620      	mov	r0, r4
 8008782:	f7fe fb5e 	bl	8006e42 <__any_on>
 8008786:	2800      	cmp	r0, #0
 8008788:	d1ed      	bne.n	8008766 <__gethex+0x26a>
 800878a:	9801      	ldr	r0, [sp, #4]
 800878c:	4621      	mov	r1, r4
 800878e:	f7fd ff07 	bl	80065a0 <_Bfree>
 8008792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008794:	2300      	movs	r3, #0
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	2550      	movs	r5, #80	@ 0x50
 800879a:	e72b      	b.n	80085f4 <__gethex+0xf8>
 800879c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1f3      	bne.n	800878a <__gethex+0x28e>
 80087a2:	e7e0      	b.n	8008766 <__gethex+0x26a>
 80087a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1dd      	bne.n	8008766 <__gethex+0x26a>
 80087aa:	e7ee      	b.n	800878a <__gethex+0x28e>
 80087ac:	08009380 	.word	0x08009380
 80087b0:	08009215 	.word	0x08009215
 80087b4:	0800952e 	.word	0x0800952e
 80087b8:	1e6f      	subs	r7, r5, #1
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	d130      	bne.n	8008822 <__gethex+0x326>
 80087c0:	b127      	cbz	r7, 80087cc <__gethex+0x2d0>
 80087c2:	4639      	mov	r1, r7
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7fe fb3c 	bl	8006e42 <__any_on>
 80087ca:	4681      	mov	r9, r0
 80087cc:	117a      	asrs	r2, r7, #5
 80087ce:	2301      	movs	r3, #1
 80087d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80087d4:	f007 071f 	and.w	r7, r7, #31
 80087d8:	40bb      	lsls	r3, r7
 80087da:	4213      	tst	r3, r2
 80087dc:	4629      	mov	r1, r5
 80087de:	4620      	mov	r0, r4
 80087e0:	bf18      	it	ne
 80087e2:	f049 0902 	orrne.w	r9, r9, #2
 80087e6:	f7ff fe21 	bl	800842c <rshift>
 80087ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80087ee:	1b76      	subs	r6, r6, r5
 80087f0:	2502      	movs	r5, #2
 80087f2:	f1b9 0f00 	cmp.w	r9, #0
 80087f6:	d047      	beq.n	8008888 <__gethex+0x38c>
 80087f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d015      	beq.n	800882c <__gethex+0x330>
 8008800:	2b03      	cmp	r3, #3
 8008802:	d017      	beq.n	8008834 <__gethex+0x338>
 8008804:	2b01      	cmp	r3, #1
 8008806:	d109      	bne.n	800881c <__gethex+0x320>
 8008808:	f019 0f02 	tst.w	r9, #2
 800880c:	d006      	beq.n	800881c <__gethex+0x320>
 800880e:	f8da 3000 	ldr.w	r3, [sl]
 8008812:	ea49 0903 	orr.w	r9, r9, r3
 8008816:	f019 0f01 	tst.w	r9, #1
 800881a:	d10e      	bne.n	800883a <__gethex+0x33e>
 800881c:	f045 0510 	orr.w	r5, r5, #16
 8008820:	e032      	b.n	8008888 <__gethex+0x38c>
 8008822:	f04f 0901 	mov.w	r9, #1
 8008826:	e7d1      	b.n	80087cc <__gethex+0x2d0>
 8008828:	2501      	movs	r5, #1
 800882a:	e7e2      	b.n	80087f2 <__gethex+0x2f6>
 800882c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800882e:	f1c3 0301 	rsb	r3, r3, #1
 8008832:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <__gethex+0x320>
 800883a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800883e:	f104 0314 	add.w	r3, r4, #20
 8008842:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008846:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800884a:	f04f 0c00 	mov.w	ip, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f853 2b04 	ldr.w	r2, [r3], #4
 8008854:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008858:	d01b      	beq.n	8008892 <__gethex+0x396>
 800885a:	3201      	adds	r2, #1
 800885c:	6002      	str	r2, [r0, #0]
 800885e:	2d02      	cmp	r5, #2
 8008860:	f104 0314 	add.w	r3, r4, #20
 8008864:	d13c      	bne.n	80088e0 <__gethex+0x3e4>
 8008866:	f8d8 2000 	ldr.w	r2, [r8]
 800886a:	3a01      	subs	r2, #1
 800886c:	42b2      	cmp	r2, r6
 800886e:	d109      	bne.n	8008884 <__gethex+0x388>
 8008870:	1171      	asrs	r1, r6, #5
 8008872:	2201      	movs	r2, #1
 8008874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008878:	f006 061f 	and.w	r6, r6, #31
 800887c:	fa02 f606 	lsl.w	r6, r2, r6
 8008880:	421e      	tst	r6, r3
 8008882:	d13a      	bne.n	80088fa <__gethex+0x3fe>
 8008884:	f045 0520 	orr.w	r5, r5, #32
 8008888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800888a:	601c      	str	r4, [r3, #0]
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	601f      	str	r7, [r3, #0]
 8008890:	e6b0      	b.n	80085f4 <__gethex+0xf8>
 8008892:	4299      	cmp	r1, r3
 8008894:	f843 cc04 	str.w	ip, [r3, #-4]
 8008898:	d8d9      	bhi.n	800884e <__gethex+0x352>
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	459b      	cmp	fp, r3
 800889e:	db17      	blt.n	80088d0 <__gethex+0x3d4>
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	9801      	ldr	r0, [sp, #4]
 80088a4:	3101      	adds	r1, #1
 80088a6:	f7fd fe3b 	bl	8006520 <_Balloc>
 80088aa:	4681      	mov	r9, r0
 80088ac:	b918      	cbnz	r0, 80088b6 <__gethex+0x3ba>
 80088ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <__gethex+0x41c>)
 80088b0:	4602      	mov	r2, r0
 80088b2:	2184      	movs	r1, #132	@ 0x84
 80088b4:	e6c5      	b.n	8008642 <__gethex+0x146>
 80088b6:	6922      	ldr	r2, [r4, #16]
 80088b8:	3202      	adds	r2, #2
 80088ba:	f104 010c 	add.w	r1, r4, #12
 80088be:	0092      	lsls	r2, r2, #2
 80088c0:	300c      	adds	r0, #12
 80088c2:	f7ff fd69 	bl	8008398 <memcpy>
 80088c6:	4621      	mov	r1, r4
 80088c8:	9801      	ldr	r0, [sp, #4]
 80088ca:	f7fd fe69 	bl	80065a0 <_Bfree>
 80088ce:	464c      	mov	r4, r9
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088d8:	6122      	str	r2, [r4, #16]
 80088da:	2201      	movs	r2, #1
 80088dc:	615a      	str	r2, [r3, #20]
 80088de:	e7be      	b.n	800885e <__gethex+0x362>
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	455a      	cmp	r2, fp
 80088e4:	dd0b      	ble.n	80088fe <__gethex+0x402>
 80088e6:	2101      	movs	r1, #1
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7ff fd9f 	bl	800842c <rshift>
 80088ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088f2:	3701      	adds	r7, #1
 80088f4:	42bb      	cmp	r3, r7
 80088f6:	f6ff aee0 	blt.w	80086ba <__gethex+0x1be>
 80088fa:	2501      	movs	r5, #1
 80088fc:	e7c2      	b.n	8008884 <__gethex+0x388>
 80088fe:	f016 061f 	ands.w	r6, r6, #31
 8008902:	d0fa      	beq.n	80088fa <__gethex+0x3fe>
 8008904:	4453      	add	r3, sl
 8008906:	f1c6 0620 	rsb	r6, r6, #32
 800890a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800890e:	f7fd fef9 	bl	8006704 <__hi0bits>
 8008912:	42b0      	cmp	r0, r6
 8008914:	dbe7      	blt.n	80088e6 <__gethex+0x3ea>
 8008916:	e7f0      	b.n	80088fa <__gethex+0x3fe>
 8008918:	08009215 	.word	0x08009215

0800891c <L_shift>:
 800891c:	f1c2 0208 	rsb	r2, r2, #8
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	b570      	push	{r4, r5, r6, lr}
 8008924:	f1c2 0620 	rsb	r6, r2, #32
 8008928:	6843      	ldr	r3, [r0, #4]
 800892a:	6804      	ldr	r4, [r0, #0]
 800892c:	fa03 f506 	lsl.w	r5, r3, r6
 8008930:	432c      	orrs	r4, r5
 8008932:	40d3      	lsrs	r3, r2
 8008934:	6004      	str	r4, [r0, #0]
 8008936:	f840 3f04 	str.w	r3, [r0, #4]!
 800893a:	4288      	cmp	r0, r1
 800893c:	d3f4      	bcc.n	8008928 <L_shift+0xc>
 800893e:	bd70      	pop	{r4, r5, r6, pc}

08008940 <__match>:
 8008940:	b530      	push	{r4, r5, lr}
 8008942:	6803      	ldr	r3, [r0, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800894a:	b914      	cbnz	r4, 8008952 <__match+0x12>
 800894c:	6003      	str	r3, [r0, #0]
 800894e:	2001      	movs	r0, #1
 8008950:	bd30      	pop	{r4, r5, pc}
 8008952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008956:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800895a:	2d19      	cmp	r5, #25
 800895c:	bf98      	it	ls
 800895e:	3220      	addls	r2, #32
 8008960:	42a2      	cmp	r2, r4
 8008962:	d0f0      	beq.n	8008946 <__match+0x6>
 8008964:	2000      	movs	r0, #0
 8008966:	e7f3      	b.n	8008950 <__match+0x10>

08008968 <__hexnan>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	680b      	ldr	r3, [r1, #0]
 800896e:	6801      	ldr	r1, [r0, #0]
 8008970:	115e      	asrs	r6, r3, #5
 8008972:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008976:	f013 031f 	ands.w	r3, r3, #31
 800897a:	b087      	sub	sp, #28
 800897c:	bf18      	it	ne
 800897e:	3604      	addne	r6, #4
 8008980:	2500      	movs	r5, #0
 8008982:	1f37      	subs	r7, r6, #4
 8008984:	4682      	mov	sl, r0
 8008986:	4690      	mov	r8, r2
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f846 5c04 	str.w	r5, [r6, #-4]
 800898e:	46b9      	mov	r9, r7
 8008990:	463c      	mov	r4, r7
 8008992:	9502      	str	r5, [sp, #8]
 8008994:	46ab      	mov	fp, r5
 8008996:	784a      	ldrb	r2, [r1, #1]
 8008998:	1c4b      	adds	r3, r1, #1
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	b342      	cbz	r2, 80089f0 <__hexnan+0x88>
 800899e:	4610      	mov	r0, r2
 80089a0:	9105      	str	r1, [sp, #20]
 80089a2:	9204      	str	r2, [sp, #16]
 80089a4:	f7ff fd94 	bl	80084d0 <__hexdig_fun>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d151      	bne.n	8008a50 <__hexnan+0xe8>
 80089ac:	9a04      	ldr	r2, [sp, #16]
 80089ae:	9905      	ldr	r1, [sp, #20]
 80089b0:	2a20      	cmp	r2, #32
 80089b2:	d818      	bhi.n	80089e6 <__hexnan+0x7e>
 80089b4:	9b02      	ldr	r3, [sp, #8]
 80089b6:	459b      	cmp	fp, r3
 80089b8:	dd13      	ble.n	80089e2 <__hexnan+0x7a>
 80089ba:	454c      	cmp	r4, r9
 80089bc:	d206      	bcs.n	80089cc <__hexnan+0x64>
 80089be:	2d07      	cmp	r5, #7
 80089c0:	dc04      	bgt.n	80089cc <__hexnan+0x64>
 80089c2:	462a      	mov	r2, r5
 80089c4:	4649      	mov	r1, r9
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7ff ffa8 	bl	800891c <L_shift>
 80089cc:	4544      	cmp	r4, r8
 80089ce:	d952      	bls.n	8008a76 <__hexnan+0x10e>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f1a4 0904 	sub.w	r9, r4, #4
 80089d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80089da:	f8cd b008 	str.w	fp, [sp, #8]
 80089de:	464c      	mov	r4, r9
 80089e0:	461d      	mov	r5, r3
 80089e2:	9903      	ldr	r1, [sp, #12]
 80089e4:	e7d7      	b.n	8008996 <__hexnan+0x2e>
 80089e6:	2a29      	cmp	r2, #41	@ 0x29
 80089e8:	d157      	bne.n	8008a9a <__hexnan+0x132>
 80089ea:	3102      	adds	r1, #2
 80089ec:	f8ca 1000 	str.w	r1, [sl]
 80089f0:	f1bb 0f00 	cmp.w	fp, #0
 80089f4:	d051      	beq.n	8008a9a <__hexnan+0x132>
 80089f6:	454c      	cmp	r4, r9
 80089f8:	d206      	bcs.n	8008a08 <__hexnan+0xa0>
 80089fa:	2d07      	cmp	r5, #7
 80089fc:	dc04      	bgt.n	8008a08 <__hexnan+0xa0>
 80089fe:	462a      	mov	r2, r5
 8008a00:	4649      	mov	r1, r9
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff ff8a 	bl	800891c <L_shift>
 8008a08:	4544      	cmp	r4, r8
 8008a0a:	d936      	bls.n	8008a7a <__hexnan+0x112>
 8008a0c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a10:	4623      	mov	r3, r4
 8008a12:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a16:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a1a:	429f      	cmp	r7, r3
 8008a1c:	d2f9      	bcs.n	8008a12 <__hexnan+0xaa>
 8008a1e:	1b3b      	subs	r3, r7, r4
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	3304      	adds	r3, #4
 8008a26:	3401      	adds	r4, #1
 8008a28:	3e03      	subs	r6, #3
 8008a2a:	42b4      	cmp	r4, r6
 8008a2c:	bf88      	it	hi
 8008a2e:	2304      	movhi	r3, #4
 8008a30:	4443      	add	r3, r8
 8008a32:	2200      	movs	r2, #0
 8008a34:	f843 2b04 	str.w	r2, [r3], #4
 8008a38:	429f      	cmp	r7, r3
 8008a3a:	d2fb      	bcs.n	8008a34 <__hexnan+0xcc>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	b91b      	cbnz	r3, 8008a48 <__hexnan+0xe0>
 8008a40:	4547      	cmp	r7, r8
 8008a42:	d128      	bne.n	8008a96 <__hexnan+0x12e>
 8008a44:	2301      	movs	r3, #1
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	2005      	movs	r0, #5
 8008a4a:	b007      	add	sp, #28
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	3501      	adds	r5, #1
 8008a52:	2d08      	cmp	r5, #8
 8008a54:	f10b 0b01 	add.w	fp, fp, #1
 8008a58:	dd06      	ble.n	8008a68 <__hexnan+0x100>
 8008a5a:	4544      	cmp	r4, r8
 8008a5c:	d9c1      	bls.n	80089e2 <__hexnan+0x7a>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a64:	2501      	movs	r5, #1
 8008a66:	3c04      	subs	r4, #4
 8008a68:	6822      	ldr	r2, [r4, #0]
 8008a6a:	f000 000f 	and.w	r0, r0, #15
 8008a6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a72:	6020      	str	r0, [r4, #0]
 8008a74:	e7b5      	b.n	80089e2 <__hexnan+0x7a>
 8008a76:	2508      	movs	r5, #8
 8008a78:	e7b3      	b.n	80089e2 <__hexnan+0x7a>
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0dd      	beq.n	8008a3c <__hexnan+0xd4>
 8008a80:	f1c3 0320 	rsb	r3, r3, #32
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	40da      	lsrs	r2, r3
 8008a8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a94:	e7d2      	b.n	8008a3c <__hexnan+0xd4>
 8008a96:	3f04      	subs	r7, #4
 8008a98:	e7d0      	b.n	8008a3c <__hexnan+0xd4>
 8008a9a:	2004      	movs	r0, #4
 8008a9c:	e7d5      	b.n	8008a4a <__hexnan+0xe2>

08008a9e <__ascii_mbtowc>:
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	b901      	cbnz	r1, 8008aa4 <__ascii_mbtowc+0x6>
 8008aa2:	a901      	add	r1, sp, #4
 8008aa4:	b142      	cbz	r2, 8008ab8 <__ascii_mbtowc+0x1a>
 8008aa6:	b14b      	cbz	r3, 8008abc <__ascii_mbtowc+0x1e>
 8008aa8:	7813      	ldrb	r3, [r2, #0]
 8008aaa:	600b      	str	r3, [r1, #0]
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	1e10      	subs	r0, r2, #0
 8008ab0:	bf18      	it	ne
 8008ab2:	2001      	movne	r0, #1
 8008ab4:	b002      	add	sp, #8
 8008ab6:	4770      	bx	lr
 8008ab8:	4610      	mov	r0, r2
 8008aba:	e7fb      	b.n	8008ab4 <__ascii_mbtowc+0x16>
 8008abc:	f06f 0001 	mvn.w	r0, #1
 8008ac0:	e7f8      	b.n	8008ab4 <__ascii_mbtowc+0x16>

08008ac2 <_realloc_r>:
 8008ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac6:	4680      	mov	r8, r0
 8008ac8:	4615      	mov	r5, r2
 8008aca:	460c      	mov	r4, r1
 8008acc:	b921      	cbnz	r1, 8008ad8 <_realloc_r+0x16>
 8008ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	f7fd bc98 	b.w	8006408 <_malloc_r>
 8008ad8:	b92a      	cbnz	r2, 8008ae6 <_realloc_r+0x24>
 8008ada:	f7fd fc21 	bl	8006320 <_free_r>
 8008ade:	2400      	movs	r4, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	f000 f840 	bl	8008b6a <_malloc_usable_size_r>
 8008aea:	4285      	cmp	r5, r0
 8008aec:	4606      	mov	r6, r0
 8008aee:	d802      	bhi.n	8008af6 <_realloc_r+0x34>
 8008af0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008af4:	d8f4      	bhi.n	8008ae0 <_realloc_r+0x1e>
 8008af6:	4629      	mov	r1, r5
 8008af8:	4640      	mov	r0, r8
 8008afa:	f7fd fc85 	bl	8006408 <_malloc_r>
 8008afe:	4607      	mov	r7, r0
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0ec      	beq.n	8008ade <_realloc_r+0x1c>
 8008b04:	42b5      	cmp	r5, r6
 8008b06:	462a      	mov	r2, r5
 8008b08:	4621      	mov	r1, r4
 8008b0a:	bf28      	it	cs
 8008b0c:	4632      	movcs	r2, r6
 8008b0e:	f7ff fc43 	bl	8008398 <memcpy>
 8008b12:	4621      	mov	r1, r4
 8008b14:	4640      	mov	r0, r8
 8008b16:	f7fd fc03 	bl	8006320 <_free_r>
 8008b1a:	463c      	mov	r4, r7
 8008b1c:	e7e0      	b.n	8008ae0 <_realloc_r+0x1e>

08008b1e <__ascii_wctomb>:
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	b141      	cbz	r1, 8008b36 <__ascii_wctomb+0x18>
 8008b24:	2aff      	cmp	r2, #255	@ 0xff
 8008b26:	d904      	bls.n	8008b32 <__ascii_wctomb+0x14>
 8008b28:	228a      	movs	r2, #138	@ 0x8a
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b30:	4770      	bx	lr
 8008b32:	700a      	strb	r2, [r1, #0]
 8008b34:	2001      	movs	r0, #1
 8008b36:	4770      	bx	lr

08008b38 <fiprintf>:
 8008b38:	b40e      	push	{r1, r2, r3}
 8008b3a:	b503      	push	{r0, r1, lr}
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	ab03      	add	r3, sp, #12
 8008b40:	4805      	ldr	r0, [pc, #20]	@ (8008b58 <fiprintf+0x20>)
 8008b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b46:	6800      	ldr	r0, [r0, #0]
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f7ff f9a1 	bl	8007e90 <_vfiprintf_r>
 8008b4e:	b002      	add	sp, #8
 8008b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b54:	b003      	add	sp, #12
 8008b56:	4770      	bx	lr
 8008b58:	20000018 	.word	0x20000018

08008b5c <abort>:
 8008b5c:	b508      	push	{r3, lr}
 8008b5e:	2006      	movs	r0, #6
 8008b60:	f000 f834 	bl	8008bcc <raise>
 8008b64:	2001      	movs	r0, #1
 8008b66:	f7f8 fd84 	bl	8001672 <_exit>

08008b6a <_malloc_usable_size_r>:
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	1f18      	subs	r0, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bfbc      	itt	lt
 8008b74:	580b      	ldrlt	r3, [r1, r0]
 8008b76:	18c0      	addlt	r0, r0, r3
 8008b78:	4770      	bx	lr

08008b7a <_raise_r>:
 8008b7a:	291f      	cmp	r1, #31
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4605      	mov	r5, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	d904      	bls.n	8008b8e <_raise_r+0x14>
 8008b84:	2316      	movs	r3, #22
 8008b86:	6003      	str	r3, [r0, #0]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b90:	b112      	cbz	r2, 8008b98 <_raise_r+0x1e>
 8008b92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b96:	b94b      	cbnz	r3, 8008bac <_raise_r+0x32>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 f831 	bl	8008c00 <_getpid_r>
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba8:	f000 b818 	b.w	8008bdc <_kill_r>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d00a      	beq.n	8008bc6 <_raise_r+0x4c>
 8008bb0:	1c59      	adds	r1, r3, #1
 8008bb2:	d103      	bne.n	8008bbc <_raise_r+0x42>
 8008bb4:	2316      	movs	r3, #22
 8008bb6:	6003      	str	r3, [r0, #0]
 8008bb8:	2001      	movs	r0, #1
 8008bba:	e7e7      	b.n	8008b8c <_raise_r+0x12>
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4798      	blx	r3
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	e7e0      	b.n	8008b8c <_raise_r+0x12>
	...

08008bcc <raise>:
 8008bcc:	4b02      	ldr	r3, [pc, #8]	@ (8008bd8 <raise+0xc>)
 8008bce:	4601      	mov	r1, r0
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f7ff bfd2 	b.w	8008b7a <_raise_r>
 8008bd6:	bf00      	nop
 8008bd8:	20000018 	.word	0x20000018

08008bdc <_kill_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d07      	ldr	r5, [pc, #28]	@ (8008bfc <_kill_r+0x20>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f7f8 fd32 	bl	8001652 <_kill>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d102      	bne.n	8008bf8 <_kill_r+0x1c>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b103      	cbz	r3, 8008bf8 <_kill_r+0x1c>
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2000062c 	.word	0x2000062c

08008c00 <_getpid_r>:
 8008c00:	f7f8 bd1f 	b.w	8001642 <_getpid>

08008c04 <_init>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr

08008c10 <_fini>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr
