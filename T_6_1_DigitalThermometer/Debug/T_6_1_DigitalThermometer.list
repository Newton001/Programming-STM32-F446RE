
T_6_1_DigitalThermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  08007c58  08007c58  00008c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008460  08008460  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008460  08008460  00009460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008468  08008468  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008468  08008468  00009468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800846c  0800846c  0000946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008470  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001d4  08008644  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08008644  0000a684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013faa  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb5  00000000  00000000  0001e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00021168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea9  00000000  00000000  00022428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244bc  00000000  00000000  000232d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd9  00000000  00000000  0004778d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d73f4  00000000  00000000  00060366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013775a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000603c  00000000  00000000  001377a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0013d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c40 	.word	0x08007c40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08007c40 	.word	0x08007c40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a22      	ldr	r2, [pc, #136]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_GPIO_Init+0xa8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000f2c:	4815      	ldr	r0, [pc, #84]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f2e:	f000 ff9d 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2140      	movs	r1, #64	@ 0x40
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <MX_GPIO_Init+0xb0>)
 8000f38:	f000 ff98 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8000f3c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <MX_GPIO_Init+0xac>)
 8000f56:	f000 fdf5 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 8000f5a:	2340      	movs	r3, #64	@ 0x40
 8000f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_GPIO_Init+0xb0>)
 8000f72:	f000 fde7 	bl	8001b44 <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400

08000f8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <MX_I2C1_Init+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <MX_I2C1_Init+0x58>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <MX_I2C1_Init+0x50>)
 8000fca:	f000 ff69 	bl	8001ea0 <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f970 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001f0 	.word	0x200001f0
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	000186a0 	.word	0x000186a0

08000fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12c      	bne.n	8001064 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001026:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	@ (8001074 <HAL_I2C_MspInit+0x8c>)
 8001044:	f000 fd7e 	bl	8001b44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 8001052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001056:	6413      	str	r3, [r2, #64]	@ 0x40
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_I2C_MspInit+0x88>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40005400 	.word	0x40005400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fbb9 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 f86f 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f7ff ff27 	bl	8000ed8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108a:	f7ff ff7f 	bl	8000f8c <MX_I2C1_Init>
  MX_SPI1_Init();
 800108e:	f000 f919 	bl	80012c4 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001092:	f000 fab5 	bl	8001600 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8001096:	f000 fb11 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	displayWelcome();
 800109a:	f000 f8df 	bl	800125c <displayWelcome>

  	// Initialise LCD and show "Welcome" top/left justified
	lcd_init();
 800109e:	f003 fc6e 	bl	800497e <lcd_init>
	lcd_clear();
 80010a2:	f003 fcc7 	bl	8004a34 <lcd_clear>

	lcd_setLine(127,0,127,31,1);
 80010a6:	2301      	movs	r3, #1
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	231f      	movs	r3, #31
 80010ac:	227f      	movs	r2, #127	@ 0x7f
 80010ae:	2100      	movs	r1, #0
 80010b0:	207f      	movs	r0, #127	@ 0x7f
 80010b2:	f003 fd7d 	bl	8004bb0 <lcd_setLine>
	lcd_setLine(0,0,0,31,1);
 80010b6:	2301      	movs	r3, #1
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	231f      	movs	r3, #31
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2000      	movs	r0, #0
 80010c2:	f003 fd75 	bl	8004bb0 <lcd_setLine>
	lcd_setString(4,4,"Training 6-1",LCD_FONT_8,false);
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <main+0xd4>)
 80010ce:	2104      	movs	r1, #4
 80010d0:	2004      	movs	r0, #4
 80010d2:	f003 fd3b 	bl	8004b4c <lcd_setString>
	lcd_setString(4,15,"Digital Thermometer",LCD_FONT_8,false);
 80010d6:	2300      	movs	r3, #0
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <main+0xd8>)
 80010de:	210f      	movs	r1, #15
 80010e0:	2004      	movs	r0, #4
 80010e2:	f003 fd33 	bl	8004b4c <lcd_setString>
	lcd_show();
 80010e6:	f003 fe81 	bl	8004dec <lcd_show>
	HAL_Delay(2500);
 80010ea:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80010ee:	f000 fbf3 	bl	80018d8 <HAL_Delay>
	lcd_clear();
 80010f2:	f003 fc9f 	bl	8004a34 <lcd_clear>

	// Start timer
	HAL_TIM_Base_Start_IT(&htim7); // Read out temperature every 200ms
 80010f6:	4817      	ldr	r0, [pc, #92]	@ (8001154 <main+0xdc>)
 80010f8:	f002 fcea 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	char msgBuf[30]; // Prepare buffer for message
	while (1)
	{
		if(doUpdate)
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <main+0xe0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0fb      	beq.n	80010fc <main+0x84>
		{
			doUpdate = 0; 				// reset update flag
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <main+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
			float tmp = readTemp(); 	// read actual temperatur
 800110a:	f003 fecd 	bl	8004ea8 <readTemp>
 800110e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			sprintf(msgBuf,"Temperature: %2.1f%cC",tmp,0x80); // fill message buffer
 8001112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001114:	f7ff fa38 	bl	8000588 <__aeabi_f2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	1d38      	adds	r0, r7, #4
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	9100      	str	r1, [sp, #0]
 8001122:	490e      	ldr	r1, [pc, #56]	@ (800115c <main+0xe4>)
 8001124:	f004 fc60 	bl	80059e8 <siprintf>
			lcd_setString(4,4, msgBuf,LCD_FONT_8, false); // lcd message
 8001128:	1d3a      	adds	r2, r7, #4
 800112a:	2300      	movs	r3, #0
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2300      	movs	r3, #0
 8001130:	2104      	movs	r1, #4
 8001132:	2004      	movs	r0, #4
 8001134:	f003 fd0a 	bl	8004b4c <lcd_setString>
			lcd_show();
 8001138:	f003 fe58 	bl	8004dec <lcd_show>
			puts(msgBuf); // Uart message
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fc4a 	bl	80059d8 <puts>
			puts("\r");
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <main+0xe8>)
 8001146:	f004 fc47 	bl	80059d8 <puts>
		if(doUpdate)
 800114a:	e7d7      	b.n	80010fc <main+0x84>
 800114c:	08007c58 	.word	0x08007c58
 8001150:	08007c68 	.word	0x08007c68
 8001154:	200002a4 	.word	0x200002a4
 8001158:	20000244 	.word	0x20000244
 800115c:	08007c7c 	.word	0x08007c7c
 8001160:	08007c94 	.word	0x08007c94

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	@ 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	@ 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fd30 	bl	8005bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <SystemClock_Config+0xb8>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	4a22      	ldr	r2, [pc, #136]	@ (800121c <SystemClock_Config+0xb8>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	@ 0x40
 8001198:	4b20      	ldr	r3, [pc, #128]	@ (800121c <SystemClock_Config+0xb8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <SystemClock_Config+0xbc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <SystemClock_Config+0xbc>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <SystemClock_Config+0xbc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fee1 	bl	8002fa0 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011e4:	f000 f868 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fc08 	bl	8002a18 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800120e:	f000 f853 	bl	80012b8 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	@ 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char* ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	b29a      	uxth	r2, r3
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <_write+0x34>)
 800123c:	f002 ff5c 	bl	80040f8 <HAL_UART_Transmit>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <_write+0x26>
		return len;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e001      	b.n	800124e <_write+0x2a>
	else
		return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002ec 	.word	0x200002ec

0800125c <displayWelcome>:

// NOTE: Carriage return "\r" helps for nice console output
void displayWelcome()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	puts("******** TRAINING 6.1 ******** \r\n");
 8001260:	4808      	ldr	r0, [pc, #32]	@ (8001284 <displayWelcome+0x28>)
 8001262:	f004 fbb9 	bl	80059d8 <puts>
	puts("- Uart connection ... Done\r\n");
 8001266:	4808      	ldr	r0, [pc, #32]	@ (8001288 <displayWelcome+0x2c>)
 8001268:	f004 fbb6 	bl	80059d8 <puts>
	puts("- printf retargeting to uart ... Done\r\n");
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <displayWelcome+0x30>)
 800126e:	f004 fbb3 	bl	80059d8 <puts>
	puts("- Temperatur Sensor connection ... Done\r\n");
 8001272:	4807      	ldr	r0, [pc, #28]	@ (8001290 <displayWelcome+0x34>)
 8001274:	f004 fbb0 	bl	80059d8 <puts>
	puts("***************************** \r\n");
 8001278:	4806      	ldr	r0, [pc, #24]	@ (8001294 <displayWelcome+0x38>)
 800127a:	f004 fbad 	bl	80059d8 <puts>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08007c98 	.word	0x08007c98
 8001288:	08007cbc 	.word	0x08007cbc
 800128c:	08007cdc 	.word	0x08007cdc
 8001290:	08007d04 	.word	0x08007d04
 8001294:	08007d30 	.word	0x08007d30

08001298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	doUpdate = 1;
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000244 	.word	0x20000244

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <Error_Handler+0x8>

080012c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <MX_SPI1_Init+0x68>)
 80012ca:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <MX_SPI1_Init+0x6c>)
 80012cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ce:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_SPI1_Init+0x68>)
 80012d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <MX_SPI1_Init+0x68>)
 80012d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012de:	4b13      	ldr	r3, [pc, #76]	@ (800132c <MX_SPI1_Init+0x68>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_SPI1_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <MX_SPI1_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_SPI1_Init+0x68>)
 80012f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_SPI1_Init+0x68>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <MX_SPI1_Init+0x68>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_SPI1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <MX_SPI1_Init+0x68>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_SPI1_Init+0x68>)
 8001312:	220a      	movs	r2, #10
 8001314:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	@ (800132c <MX_SPI1_Init+0x68>)
 8001318:	f002 f8e0 	bl	80034dc <HAL_SPI_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001322:	f7ff ffc9 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000248 	.word	0x20000248
 8001330:	40013000 	.word	0x40013000

08001334 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <HAL_SPI_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12b      	bne.n	80013ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 8001360:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_SPI_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800138e:	23a0      	movs	r3, #160	@ 0xa0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139e:	2305      	movs	r3, #5
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_SPI_MspInit+0x8c>)
 80013aa:	f000 fbcb 	bl	8001b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <NMI_Handler+0x4>

0800141c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <UsageFault_Handler+0x4>

0800143c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 fa15 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <TIM7_IRQHandler+0x10>)
 800147a:	f002 fb99 	bl	8003bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002a4 	.word	0x200002a4

08001488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_kill>:

int _kill(int pid, int sig)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014a2:	f004 fbeb 	bl	8005c7c <__errno>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2216      	movs	r2, #22
 80014aa:	601a      	str	r2, [r3, #0]
	return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_exit>:

void _exit (int status)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe7 	bl	8001498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ca:	bf00      	nop
 80014cc:	e7fd      	b.n	80014ca <_exit+0x12>

080014ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e00a      	b.n	80014f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014e0:	f3af 8000 	nop.w
 80014e4:	4601      	mov	r1, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	60ba      	str	r2, [r7, #8]
 80014ec:	b2ca      	uxtb	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf0      	blt.n	80014e0 <_read+0x12>
	}

return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
	return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_isatty>:

int _isatty(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f004 fb6c 	bl	8005c7c <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	20000688 	.word	0x20000688

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <MX_TIM7_Init+0x64>)
 8001610:	4a15      	ldr	r2, [pc, #84]	@ (8001668 <MX_TIM7_Init+0x68>)
 8001612:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <MX_TIM7_Init+0x64>)
 8001616:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800161a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_TIM7_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_TIM7_Init+0x64>)
 8001624:	22c8      	movs	r2, #200	@ 0xc8
 8001626:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_TIM7_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_TIM7_Init+0x64>)
 8001630:	f002 f9fe 	bl	8003a30 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800163a:	f7ff fe3d 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_TIM7_Init+0x64>)
 800164c:	f002 fc74 	bl	8003f38 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001656:	f7ff fe2f 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002a4 	.word	0x200002a4
 8001668:	40001400 	.word	0x40001400

0800166c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_TIM_Base_MspInit+0x48>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d115      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2037      	movs	r0, #55	@ 0x37
 80016a0:	f000 fa19 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016a4:	2037      	movs	r0, #55	@ 0x37
 80016a6:	f000 fa32 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40001400 	.word	0x40001400
 80016b8:	40023800 	.word	0x40023800

080016bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f002 fcb0 	bl	8004058 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f7ff fddb 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002ec 	.word	0x200002ec
 800170c:	40004400 	.word	0x40004400

08001710 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_UART_MspInit+0x88>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800176a:	230c      	movs	r3, #12
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177a:	2307      	movs	r3, #7
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <HAL_UART_MspInit+0x8c>)
 8001786:	f000 f9dd 	bl	8001b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40004400 	.word	0x40004400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a4:	480d      	ldr	r0, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017a6:	490e      	ldr	r1, [pc, #56]	@ (80017e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017a8:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017bc:	4c0b      	ldr	r4, [pc, #44]	@ (80017ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ca:	f7ff ff07 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f004 fa5b 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fc51 	bl	8001078 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e4:	08008470 	.word	0x08008470
  ldr r2, =_sbss
 80017e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017ec:	20000684 	.word	0x20000684

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_Init+0x40>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <HAL_Init+0x40>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_Init+0x40>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f94f 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fdcc 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f967 	bl	8001b2a <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f92f 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000334 	.word	0x20000334

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000334 	.word	0x20000334

080018d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff ffee 	bl	80018c0 <HAL_GetTick>
 80018e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d005      	beq.n	80018fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_Delay+0x44>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018fe:	bf00      	nop
 8001900:	f7ff ffde 	bl	80018c0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d8f7      	bhi.n	8001900 <HAL_Delay+0x28>
  {
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	@ (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	@ (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	@ 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	@ 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff3e 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff8e 	bl	8001a14 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff31 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffa2 	bl	8001a7c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e165      	b.n	8001e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8154 	bne.w	8001e26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80ae 	beq.w	8001e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b5a      	ldr	r3, [pc, #360]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a58      	ldr	r2, [pc, #352]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e4c <HAL_GPIO_Init+0x308>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_GPIO_Init+0x30c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_GPIO_Init+0x310>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x314>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_GPIO_Init+0x318>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	@ (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x206>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <HAL_GPIO_Init+0x320>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a31      	ldr	r2, [pc, #196]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a26      	ldr	r2, [pc, #152]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f ae96 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e12b      	b.n	800210a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff f88e 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2224      	movs	r2, #36	@ 0x24
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f04:	f000 fe7a 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a81      	ldr	r2, [pc, #516]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d807      	bhi.n	8001f24 <HAL_I2C_Init+0x84>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a80      	ldr	r2, [pc, #512]	@ (8002118 <HAL_I2C_Init+0x278>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	e006      	b.n	8001f32 <HAL_I2C_Init+0x92>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4a7d      	ldr	r2, [pc, #500]	@ (800211c <HAL_I2C_Init+0x27c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bf94      	ite	ls
 8001f2c:	2301      	movls	r3, #1
 8001f2e:	2300      	movhi	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0e7      	b.n	800210a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4a78      	ldr	r2, [pc, #480]	@ (8002120 <HAL_I2C_Init+0x280>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9b      	lsrs	r3, r3, #18
 8001f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d802      	bhi.n	8001f74 <HAL_I2C_Init+0xd4>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	e009      	b.n	8001f88 <HAL_I2C_Init+0xe8>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	4a69      	ldr	r2, [pc, #420]	@ (8002124 <HAL_I2C_Init+0x284>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	3301      	adds	r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	495c      	ldr	r1, [pc, #368]	@ (8002114 <HAL_I2C_Init+0x274>)
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d819      	bhi.n	8001fdc <HAL_I2C_Init+0x13c>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e59      	subs	r1, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_I2C_Init+0x138>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e59      	subs	r1, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd6:	e051      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e04f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d111      	bne.n	8002008 <HAL_I2C_Init+0x168>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	440b      	add	r3, r1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf0c      	ite	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2300      	movne	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	e012      	b.n	800202e <HAL_I2C_Init+0x18e>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	0099      	lsls	r1, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Init+0x196>
 8002032:	2301      	movs	r3, #1
 8002034:	e022      	b.n	800207c <HAL_I2C_Init+0x1dc>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10e      	bne.n	800205c <HAL_I2C_Init+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e58      	subs	r0, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800205a:	e00f      	b.n	800207c <HAL_I2C_Init+0x1dc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	0099      	lsls	r1, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	6809      	ldr	r1, [r1, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6911      	ldr	r1, [r2, #16]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68d2      	ldr	r2, [r2, #12]
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	430b      	orrs	r3, r1
 80020be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	000186a0 	.word	0x000186a0
 8002118:	001e847f 	.word	0x001e847f
 800211c:	003d08ff 	.word	0x003d08ff
 8002120:	431bde83 	.word	0x431bde83
 8002124:	10624dd3 	.word	0x10624dd3

08002128 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
 8002138:	4613      	mov	r3, r2
 800213a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff fbc0 	bl	80018c0 <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	f040 8217 	bne.w	800257e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	497c      	ldr	r1, [pc, #496]	@ (800234c <HAL_I2C_Master_Receive+0x224>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fae4 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002166:	2302      	movs	r3, #2
 8002168:	e20a      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2C_Master_Receive+0x50>
 8002174:	2302      	movs	r3, #2
 8002176:	e203      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d007      	beq.n	800219e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2222      	movs	r2, #34	@ 0x22
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2210      	movs	r2, #16
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	893a      	ldrh	r2, [r7, #8]
 80021ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <HAL_I2C_Master_Receive+0x228>)
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f9d0 	bl	800258c <I2C_MasterRequestRead>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1c4      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d113      	bne.n	8002226 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e198      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11b      	bne.n	8002266 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800223c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e178      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b02      	cmp	r3, #2
 800226c:	d11b      	bne.n	80022a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	e158      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022cc:	e144      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	f200 80f1 	bhi.w	80024ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d123      	bne.n	8002328 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb39 	bl	800295c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e145      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002326:	e117      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	2b02      	cmp	r3, #2
 800232e:	d14e      	bne.n	80023ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002336:	2200      	movs	r2, #0
 8002338:	4906      	ldr	r1, [pc, #24]	@ (8002354 <HAL_I2C_Master_Receive+0x22c>)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f9f4 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e11a      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
 800234a:	bf00      	nop
 800234c:	00100002 	.word	0x00100002
 8002350:	ffff0000 	.word	0xffff0000
 8002354:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023cc:	e0c4      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	496c      	ldr	r1, [pc, #432]	@ (8002588 <HAL_I2C_Master_Receive+0x460>)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f9a5 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0cb      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	2200      	movs	r2, #0
 8002432:	4955      	ldr	r1, [pc, #340]	@ (8002588 <HAL_I2C_Master_Receive+0x460>)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f977 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e09d      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024b8:	e04e      	b.n	8002558 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fa4c 	bl	800295c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e058      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d124      	bne.n	8002558 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002524:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f aeb6 	bne.w	80022ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3728      	adds	r7, #40	@ 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00010004 	.word	0x00010004

0800258c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af02      	add	r7, sp, #8
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	460b      	mov	r3, r1
 800259a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d006      	beq.n	80025c6 <I2C_MasterRequestRead+0x3a>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d003      	beq.n	80025c6 <I2C_MasterRequestRead+0x3a>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025c4:	d108      	bne.n	80025d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e00b      	b.n	80025f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	2b11      	cmp	r3, #17
 80025de:	d107      	bne.n	80025f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f893 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002616:	d103      	bne.n	8002620 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e079      	b.n	8002718 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800262c:	d108      	bne.n	8002640 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]
 800263e:	e05f      	b.n	8002700 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002640:	897b      	ldrh	r3, [r7, #10]
 8002642:	11db      	asrs	r3, r3, #7
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f003 0306 	and.w	r3, r3, #6
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f063 030f 	orn	r3, r3, #15
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4930      	ldr	r1, [pc, #192]	@ (8002720 <I2C_MasterRequestRead+0x194>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8dc 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e054      	b.n	8002718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4929      	ldr	r1, [pc, #164]	@ (8002724 <I2C_MasterRequestRead+0x198>)
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 f8cc 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e044      	b.n	8002718 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f831 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026da:	d103      	bne.n	80026e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e017      	b.n	8002718 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026e8:	897b      	ldrh	r3, [r7, #10]
 80026ea:	11db      	asrs	r3, r3, #7
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 0306 	and.w	r3, r3, #6
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f063 030e 	orn	r3, r3, #14
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4907      	ldr	r1, [pc, #28]	@ (8002724 <I2C_MasterRequestRead+0x198>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f888 	bl	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	00010008 	.word	0x00010008
 8002724:	00010002 	.word	0x00010002

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e048      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d044      	beq.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f8bd 	bl	80018c0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d139      	bne.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10d      	bne.n	800277e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	43da      	mvns	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	e00c      	b.n	8002798 <I2C_WaitOnFlagUntilTimeout+0x70>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	429a      	cmp	r2, r3
 800279c:	d116      	bne.n	80027cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e023      	b.n	8002814 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10d      	bne.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	43da      	mvns	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4013      	ands	r3, r2
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	e00c      	b.n	800280c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	429a      	cmp	r2, r3
 8002810:	d093      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282a:	e071      	b.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283a:	d123      	bne.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e067      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d041      	beq.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288c:	f7ff f818 	bl	80018c0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d136      	bne.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10c      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	e00b      	b.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e021      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0c1b      	lsrs	r3, r3, #16
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10c      	bne.n	8002934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	43da      	mvns	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e00b      	b.n	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af6d 	bne.w	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002968:	e049      	b.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b10      	cmp	r3, #16
 8002976:	d119      	bne.n	80029ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0210 	mvn.w	r2, #16
 8002980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e030      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fe ff88 	bl	80018c0 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d11d      	bne.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029cc:	2b40      	cmp	r3, #64	@ 0x40
 80029ce:	d016      	beq.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d1ae      	bne.n	800296a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d044      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e067      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4934      	ldr	r1, [pc, #208]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe feda 	bl	80018c0 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fed6 	bl	80018c0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f855 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe3a 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08007d54 	.word	0x08007d54
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b03      	ldr	r3, [pc, #12]	@ (8002bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000

08002bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c00:	f7ff fff0 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	0a9b      	lsrs	r3, r3, #10
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	08007d64 	.word	0x08007d64

08002c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c28:	f7ff ffdc 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	0b5b      	lsrs	r3, r3, #13
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	4903      	ldr	r1, [pc, #12]	@ (8002c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c3a:	5ccb      	ldrb	r3, [r1, r3]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40023800 	.word	0x40023800
 8002c48:	08007d64 	.word	0x08007d64

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b0a6      	sub	sp, #152	@ 0x98
 8002c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c72:	4bc8      	ldr	r3, [pc, #800]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	f200 817e 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x330>
 8002c80:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002cbd 	.word	0x08002cbd
 8002c8c:	08002f7d 	.word	0x08002f7d
 8002c90:	08002f7d 	.word	0x08002f7d
 8002c94:	08002f7d 	.word	0x08002f7d
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002f7d 	.word	0x08002f7d
 8002ca0:	08002f7d 	.word	0x08002f7d
 8002ca4:	08002f7d 	.word	0x08002f7d
 8002ca8:	08002ccd 	.word	0x08002ccd
 8002cac:	08002f7d 	.word	0x08002f7d
 8002cb0:	08002f7d 	.word	0x08002f7d
 8002cb4:	08002f7d 	.word	0x08002f7d
 8002cb8:	08002e37 	.word	0x08002e37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4bb6      	ldr	r3, [pc, #728]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cc2:	e15f      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc4:	4bb5      	ldr	r3, [pc, #724]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8002cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002cca:	e15b      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd8:	4bae      	ldr	r3, [pc, #696]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4bab      	ldr	r3, [pc, #684]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cfc:	4ba7      	ldr	r3, [pc, #668]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8002cfe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d02:	462a      	mov	r2, r5
 8002d04:	fb03 f202 	mul.w	r2, r3, r2
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	4aa2      	ldr	r2, [pc, #648]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d14:	4621      	mov	r1, r4
 8002d16:	fba1 1202 	umull	r1, r2, r1, r2
 8002d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d1c:	460a      	mov	r2, r1
 8002d1e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002d20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d22:	4413      	add	r3, r2
 8002d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002d38:	f7fd ff56 	bl	8000be8 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4613      	mov	r3, r2
 8002d42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d46:	e064      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d48:	4b92      	ldr	r3, [pc, #584]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	2200      	movs	r2, #0
 8002d50:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d52:	657a      	str	r2, [r7, #84]	@ 0x54
 8002d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d60:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002d64:	4622      	mov	r2, r4
 8002d66:	462b      	mov	r3, r5
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0159      	lsls	r1, r3, #5
 8002d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d76:	0150      	lsls	r0, r2, #5
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	1a51      	subs	r1, r2, r1
 8002d80:	6139      	str	r1, [r7, #16]
 8002d82:	4629      	mov	r1, r5
 8002d84:	eb63 0301 	sbc.w	r3, r3, r1
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d96:	4659      	mov	r1, fp
 8002d98:	018b      	lsls	r3, r1, #6
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da0:	4651      	mov	r1, sl
 8002da2:	018a      	lsls	r2, r1, #6
 8002da4:	4651      	mov	r1, sl
 8002da6:	ebb2 0801 	subs.w	r8, r2, r1
 8002daa:	4659      	mov	r1, fp
 8002dac:	eb63 0901 	sbc.w	r9, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dc4:	4690      	mov	r8, r2
 8002dc6:	4699      	mov	r9, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	eb18 0303 	adds.w	r3, r8, r3
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	eb49 0303 	adc.w	r3, r9, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002de4:	4629      	mov	r1, r5
 8002de6:	028b      	lsls	r3, r1, #10
 8002de8:	4621      	mov	r1, r4
 8002dea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dee:	4621      	mov	r1, r4
 8002df0:	028a      	lsls	r2, r1, #10
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e04:	f7fd fef0 	bl	8000be8 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e12:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002e24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e34:	e0a6      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e42:	4b54      	ldr	r3, [pc, #336]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d02a      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4e:	4b51      	ldr	r3, [pc, #324]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	2200      	movs	r2, #0
 8002e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e60:	2100      	movs	r1, #0
 8002e62:	4b4e      	ldr	r3, [pc, #312]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8002e64:	fb03 f201 	mul.w	r2, r3, r1
 8002e68:	2300      	movs	r3, #0
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a4a      	ldr	r2, [pc, #296]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x350>)
 8002e72:	fba0 1202 	umull	r1, r2, r0, r2
 8002e76:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e78:	460a      	mov	r2, r1
 8002e7a:	673a      	str	r2, [r7, #112]	@ 0x70
 8002e7c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e7e:	4413      	add	r3, r2
 8002e80:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e86:	2200      	movs	r2, #0
 8002e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e90:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e94:	f7fd fea8 	bl	8000be8 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ea2:	e05b      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	0159      	lsls	r1, r3, #5
 8002ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed2:	0150      	lsls	r0, r2, #5
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8002efc:	eb63 050b 	sbc.w	r5, r3, fp
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	00eb      	lsls	r3, r5, #3
 8002f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0e:	00e2      	lsls	r2, r4, #3
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	18e3      	adds	r3, r4, r3
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	eb45 0303 	adc.w	r3, r5, r3
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	028b      	lsls	r3, r1, #10
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f38:	4621      	mov	r1, r4
 8002f3a:	028a      	lsls	r2, r1, #10
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f44:	2200      	movs	r2, #0
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	61fa      	str	r2, [r7, #28]
 8002f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4e:	f7fd fe4b 	bl	8000be8 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0f1b      	lsrs	r3, r3, #28
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f7a:	e003      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3798      	adds	r7, #152	@ 0x98
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	017d7840 	.word	0x017d7840

08002fa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e28d      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8083 	beq.w	80030c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fc0:	4b94      	ldr	r3, [pc, #592]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d019      	beq.n	8003000 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fcc:	4b91      	ldr	r3, [pc, #580]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
        || \
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b84      	ldr	r3, [pc, #528]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x124>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e25a      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x90>
 8003022:	4b7c      	ldr	r3, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7b      	ldr	r2, [pc, #492]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xcc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0xb4>
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b73      	ldr	r3, [pc, #460]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a72      	ldr	r2, [pc, #456]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xcc>
 8003054:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6e      	ldr	r2, [pc, #440]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6b      	ldr	r2, [pc, #428]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fc24 	bl	80018c0 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fc20 	bl	80018c0 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e21f      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b61      	ldr	r3, [pc, #388]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xdc>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fc10 	bl	80018c0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fc0c 	bl	80018c0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	@ 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e20b      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b57      	ldr	r3, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x104>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06f      	beq.n	80031b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030d2:	4b50      	ldr	r3, [pc, #320]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030de:	4b4d      	ldr	r3, [pc, #308]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b47      	ldr	r3, [pc, #284]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	4b41      	ldr	r3, [pc, #260]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x186>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e1d3      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4937      	ldr	r1, [pc, #220]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	e03a      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003144:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <HAL_RCC_OscConfig+0x278>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe fbb9 	bl	80018c0 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe fbb5 	bl	80018c0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1b4      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4925      	ldr	r1, [pc, #148]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <HAL_RCC_OscConfig+0x278>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fb98 	bl	80018c0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fb94 	bl	80018c0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e193      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCC_OscConfig+0x27c>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fb78 	bl	80018c0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe fb74 	bl	80018c0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e173      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x234>
 80031f2:	e01b      	b.n	800322c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x27c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fe fb61 	bl	80018c0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7fe fb5d 	bl	80018c0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d907      	bls.n	8003220 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e15c      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b8a      	ldr	r3, [pc, #552]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ea      	bne.n	8003202 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8097 	beq.w	8003368 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b83      	ldr	r3, [pc, #524]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b7f      	ldr	r3, [pc, #508]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	4a7e      	ldr	r2, [pc, #504]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	@ 0x40
 800325a:	4b7c      	ldr	r3, [pc, #496]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b79      	ldr	r3, [pc, #484]	@ (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b76      	ldr	r3, [pc, #472]	@ (8003450 <HAL_RCC_OscConfig+0x4b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	@ (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe fb1d 	bl	80018c0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe fb19 	bl	80018c0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e118      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b6c      	ldr	r3, [pc, #432]	@ (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x31e>
 80032b0:	4b66      	ldr	r3, [pc, #408]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a65      	ldr	r2, [pc, #404]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x358>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x340>
 80032c6:	4b61      	ldr	r3, [pc, #388]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a60      	ldr	r2, [pc, #384]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	4b5e      	ldr	r3, [pc, #376]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5d      	ldr	r2, [pc, #372]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x358>
 80032e0:	4b5a      	ldr	r3, [pc, #360]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a59      	ldr	r2, [pc, #356]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	4b57      	ldr	r3, [pc, #348]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a56      	ldr	r2, [pc, #344]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032f2:	f023 0304 	bic.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe fade 	bl	80018c0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe fada 	bl	80018c0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0d7      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCC_OscConfig+0x368>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fac8 	bl	80018c0 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fac4 	bl	80018c0 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0c1      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	4b40      	ldr	r3, [pc, #256]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a3a      	ldr	r2, [pc, #232]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80ad 	beq.w	80034cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d060      	beq.n	8003440 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d145      	bne.n	8003412 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b33      	ldr	r3, [pc, #204]	@ (8003454 <HAL_RCC_OscConfig+0x4b4>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fa98 	bl	80018c0 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fa94 	bl	80018c0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e093      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	071b      	lsls	r3, r3, #28
 80033de:	491b      	ldr	r1, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <HAL_RCC_OscConfig+0x4b4>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fa69 	bl	80018c0 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fa65 	bl	80018c0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e064      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x452>
 8003410:	e05c      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b10      	ldr	r3, [pc, #64]	@ (8003454 <HAL_RCC_OscConfig+0x4b4>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fa52 	bl	80018c0 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fa4e 	bl	80018c0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04d      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x480>
 800343e:	e045      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e040      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <HAL_RCC_OscConfig+0x538>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d129      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d122      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800348e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	4293      	cmp	r3, r2
 8003492:	d119      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10f      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07b      	b.n	80035e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034fe:	d009      	beq.n	8003514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	e005      	b.n	8003514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd ff00 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800354a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	ea42 0103 	orr.w	r1, r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0104 	and.w	r1, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	f003 0210 	and.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b088      	sub	sp, #32
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035fe:	f7fe f95f 	bl	80018c0 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
 8003616:	e12a      	b.n	800386e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Transmit+0x36>
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e122      	b.n	800386e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_SPI_Transmit+0x48>
 8003632:	2302      	movs	r3, #2
 8003634:	e11b      	b.n	800386e <HAL_SPI_Transmit+0x280>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2203      	movs	r2, #3
 8003642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003684:	d10f      	bne.n	80036a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d007      	beq.n	80036c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036cc:	d152      	bne.n	8003774 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_Transmit+0xee>
 80036d6:	8b7b      	ldrh	r3, [r7, #26]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d145      	bne.n	8003768 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003700:	e032      	b.n	8003768 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d112      	bne.n	8003736 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003734:	e018      	b.n	8003768 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003736:	f7fe f8c3 	bl	80018c0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d803      	bhi.n	800374e <HAL_SPI_Transmit+0x160>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d102      	bne.n	8003754 <HAL_SPI_Transmit+0x166>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e082      	b.n	800386e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1c7      	bne.n	8003702 <HAL_SPI_Transmit+0x114>
 8003772:	e053      	b.n	800381c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_SPI_Transmit+0x194>
 800377c:	8b7b      	ldrh	r3, [r7, #26]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d147      	bne.n	8003812 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037a8:	e033      	b.n	8003812 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d113      	bne.n	80037e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037de:	e018      	b.n	8003812 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e0:	f7fe f86e 	bl	80018c0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d803      	bhi.n	80037f8 <HAL_SPI_Transmit+0x20a>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x210>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e02d      	b.n	800386e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1c6      	bne.n	80037aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	6839      	ldr	r1, [r7, #0]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f8b1 	bl	8003988 <SPI_EndRxTxTransaction>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003888:	f7fe f81a 	bl	80018c0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	4413      	add	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003898:	f7fe f812 	bl	80018c0 <HAL_GetTick>
 800389c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800389e:	4b39      	ldr	r3, [pc, #228]	@ (8003984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	0d1b      	lsrs	r3, r3, #20
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ae:	e054      	b.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d050      	beq.n	800395a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038b8:	f7fe f802 	bl	80018c0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d902      	bls.n	80038ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13d      	bne.n	800394a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e6:	d111      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038f0:	d004      	beq.n	80038fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d107      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800390a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003914:	d10f      	bne.n	8003936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e017      	b.n	800397a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b01      	subs	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d19b      	bne.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2201      	movs	r2, #1
 800399c:	2102      	movs	r1, #2
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ff6a 	bl	8003878 <SPI_WaitFlagStateUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e032      	b.n	8003a20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003a28 <SPI_EndRxTxTransaction+0xa0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <SPI_EndRxTxTransaction+0xa4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	0d5b      	lsrs	r3, r3, #21
 80039c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039d8:	d112      	bne.n	8003a00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff ff47 	bl	8003878 <SPI_WaitFlagStateUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e00f      	b.n	8003a20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	2b80      	cmp	r3, #128	@ 0x80
 8003a18:	d0f2      	beq.n	8003a00 <SPI_EndRxTxTransaction+0x78>
 8003a1a:	e000      	b.n	8003a1e <SPI_EndRxTxTransaction+0x96>
        break;
 8003a1c:	bf00      	nop
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	165e9f81 	.word	0x165e9f81

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fe08 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 f9b6 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04e      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	@ (8003b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	@ (8003b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	@ (8003ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	@ (8003bac <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8d2 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8c4 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8d5 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d020      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0204 	mvn.w	r2, #4
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8ac 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f89e 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8af 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d020      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01b      	beq.n	8003cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0208 	mvn.w	r2, #8
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2204      	movs	r2, #4
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f886 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f878 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f889 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f860 	bl	8003da4 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f852 	bl	8003d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f863 	bl	8003db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0201 	mvn.w	r2, #1
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fabe 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f982 	bl	8004044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f834 	bl	8003dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0220 	mvn.w	r2, #32
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f954 	bl	8004030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a46      	ldr	r2, [pc, #280]	@ (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a43      	ldr	r2, [pc, #268]	@ (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a42      	ldr	r2, [pc, #264]	@ (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a41      	ldr	r2, [pc, #260]	@ (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a40      	ldr	r2, [pc, #256]	@ (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a35      	ldr	r2, [pc, #212]	@ (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e40:	d027      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a32      	ldr	r2, [pc, #200]	@ (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d023      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2e      	ldr	r2, [pc, #184]	@ (8003f20 <TIM_Base_SetConfig+0x140>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f24 <TIM_Base_SetConfig+0x144>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <TIM_Base_SetConfig+0x148>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f2c <TIM_Base_SetConfig+0x14c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <TIM_Base_SetConfig+0x150>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	@ (8003f34 <TIM_Base_SetConfig+0x154>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	@ (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	@ (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	611a      	str	r2, [r3, #16]
  }
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40010400 	.word	0x40010400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800
 8003f2c:	40001800 	.word	0x40001800
 8003f30:	40001c00 	.word	0x40001c00
 8003f34:	40002000 	.word	0x40002000

08003f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e05a      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f9c:	d01d      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1b      	ldr	r2, [pc, #108]	@ (800401c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40010400 	.word	0x40010400
 8004028:	40014000 	.word	0x40014000
 800402c:	40001800 	.word	0x40001800

08004030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e042      	b.n	80040f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fb46 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	@ 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800409a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f973 	bl	8004388 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	@ 0x28
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d175      	bne.n	8004204 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_UART_Transmit+0x2c>
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e06e      	b.n	8004206 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2221      	movs	r2, #33	@ 0x21
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fd fbc3 	bl	80018c0 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d108      	bne.n	8004164 <HAL_UART_Transmit+0x6c>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e003      	b.n	800416c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800416c:	e02e      	b.n	80041cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2180      	movs	r1, #128	@ 0x80
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f848 	bl	800420e <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e03a      	b.n	8004206 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3302      	adds	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e007      	b.n	80041be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1cb      	bne.n	800416e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	@ 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f814 	bl	800420e <UART_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421e:	e03b      	b.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d037      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7fd fb4a 	bl	80018c0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	6a3a      	ldr	r2, [r7, #32]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <UART_WaitOnFlagUntilTimeout+0x30>
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e03a      	b.n	80042b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d023      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b80      	cmp	r3, #128	@ 0x80
 8004254:	d020      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b40      	cmp	r3, #64	@ 0x40
 800425a:	d01d      	beq.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b08      	cmp	r3, #8
 8004268:	d116      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f81d 	bl	80042c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2208      	movs	r2, #8
 800428a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e00f      	b.n	80042b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d0b4      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b095      	sub	sp, #84	@ 0x54
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3314      	adds	r3, #20
 8004302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	61fb      	str	r3, [r7, #28]
   return(result);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800431c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800431e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	d119      	bne.n	800436c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	60bb      	str	r3, [r7, #8]
   return(result);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004358:	61ba      	str	r2, [r7, #24]
 800435a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	613b      	str	r3, [r7, #16]
   return(result);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800437a:	bf00      	nop
 800437c:	3754      	adds	r7, #84	@ 0x54
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800438c:	b0c0      	sub	sp, #256	@ 0x100
 800438e:	af00      	add	r7, sp, #0
 8004390:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	68d9      	ldr	r1, [r3, #12]
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	ea40 0301 	orr.w	r3, r0, r1
 80043b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043e0:	f021 010c 	bic.w	r1, r1, #12
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043ee:	430b      	orrs	r3, r1
 80043f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	6999      	ldr	r1, [r3, #24]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	ea40 0301 	orr.w	r3, r0, r1
 800440e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b8f      	ldr	r3, [pc, #572]	@ (8004654 <UART_SetConfig+0x2cc>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d005      	beq.n	8004428 <UART_SetConfig+0xa0>
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b8d      	ldr	r3, [pc, #564]	@ (8004658 <UART_SetConfig+0x2d0>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d104      	bne.n	8004432 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe fbfc 	bl	8002c24 <HAL_RCC_GetPCLK2Freq>
 800442c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004430:	e003      	b.n	800443a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004432:	f7fe fbe3 	bl	8002bfc <HAL_RCC_GetPCLK1Freq>
 8004436:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004444:	f040 810c 	bne.w	8004660 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004452:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004456:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800445a:	4622      	mov	r2, r4
 800445c:	462b      	mov	r3, r5
 800445e:	1891      	adds	r1, r2, r2
 8004460:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004462:	415b      	adcs	r3, r3
 8004464:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004466:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800446a:	4621      	mov	r1, r4
 800446c:	eb12 0801 	adds.w	r8, r2, r1
 8004470:	4629      	mov	r1, r5
 8004472:	eb43 0901 	adc.w	r9, r3, r1
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800448a:	4690      	mov	r8, r2
 800448c:	4699      	mov	r9, r3
 800448e:	4623      	mov	r3, r4
 8004490:	eb18 0303 	adds.w	r3, r8, r3
 8004494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004498:	462b      	mov	r3, r5
 800449a:	eb49 0303 	adc.w	r3, r9, r3
 800449e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044b6:	460b      	mov	r3, r1
 80044b8:	18db      	adds	r3, r3, r3
 80044ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80044bc:	4613      	mov	r3, r2
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044cc:	f7fc fb8c 	bl	8000be8 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4b61      	ldr	r3, [pc, #388]	@ (800465c <UART_SetConfig+0x2d4>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011c      	lsls	r4, r3, #4
 80044de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044f8:	415b      	adcs	r3, r3
 80044fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004500:	4641      	mov	r1, r8
 8004502:	eb12 0a01 	adds.w	sl, r2, r1
 8004506:	4649      	mov	r1, r9
 8004508:	eb43 0b01 	adc.w	fp, r3, r1
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004518:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800451c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004520:	4692      	mov	sl, r2
 8004522:	469b      	mov	fp, r3
 8004524:	4643      	mov	r3, r8
 8004526:	eb1a 0303 	adds.w	r3, sl, r3
 800452a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800452e:	464b      	mov	r3, r9
 8004530:	eb4b 0303 	adc.w	r3, fp, r3
 8004534:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004544:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004548:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800454c:	460b      	mov	r3, r1
 800454e:	18db      	adds	r3, r3, r3
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
 8004552:	4613      	mov	r3, r2
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	647b      	str	r3, [r7, #68]	@ 0x44
 800455a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800455e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004562:	f7fc fb41 	bl	8000be8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4611      	mov	r1, r2
 800456c:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <UART_SetConfig+0x2d4>)
 800456e:	fba3 2301 	umull	r2, r3, r3, r1
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2264      	movs	r2, #100	@ 0x64
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	1acb      	subs	r3, r1, r3
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004582:	4b36      	ldr	r3, [pc, #216]	@ (800465c <UART_SetConfig+0x2d4>)
 8004584:	fba3 2302 	umull	r2, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004590:	441c      	add	r4, r3
 8004592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800459c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	1891      	adds	r1, r2, r2
 80045aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045ac:	415b      	adcs	r3, r3
 80045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045b4:	4641      	mov	r1, r8
 80045b6:	1851      	adds	r1, r2, r1
 80045b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045ba:	4649      	mov	r1, r9
 80045bc:	414b      	adcs	r3, r1
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045cc:	4659      	mov	r1, fp
 80045ce:	00cb      	lsls	r3, r1, #3
 80045d0:	4651      	mov	r1, sl
 80045d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045d6:	4651      	mov	r1, sl
 80045d8:	00ca      	lsls	r2, r1, #3
 80045da:	4610      	mov	r0, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	4642      	mov	r2, r8
 80045e2:	189b      	adds	r3, r3, r2
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e8:	464b      	mov	r3, r9
 80045ea:	460a      	mov	r2, r1
 80045ec:	eb42 0303 	adc.w	r3, r2, r3
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004600:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004608:	460b      	mov	r3, r1
 800460a:	18db      	adds	r3, r3, r3
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800460e:	4613      	mov	r3, r2
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800461e:	f7fc fae3 	bl	8000be8 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <UART_SetConfig+0x2d4>)
 8004628:	fba3 1302 	umull	r1, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2164      	movs	r1, #100	@ 0x64
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	3332      	adds	r3, #50	@ 0x32
 800463a:	4a08      	ldr	r2, [pc, #32]	@ (800465c <UART_SetConfig+0x2d4>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	f003 0207 	and.w	r2, r3, #7
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4422      	add	r2, r4
 800464e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004650:	e106      	b.n	8004860 <UART_SetConfig+0x4d8>
 8004652:	bf00      	nop
 8004654:	40011000 	.word	0x40011000
 8004658:	40011400 	.word	0x40011400
 800465c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800466a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800466e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004672:	4642      	mov	r2, r8
 8004674:	464b      	mov	r3, r9
 8004676:	1891      	adds	r1, r2, r2
 8004678:	6239      	str	r1, [r7, #32]
 800467a:	415b      	adcs	r3, r3
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
 800467e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004682:	4641      	mov	r1, r8
 8004684:	1854      	adds	r4, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0501 	adc.w	r5, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	00eb      	lsls	r3, r5, #3
 8004696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469a:	00e2      	lsls	r2, r4, #3
 800469c:	4614      	mov	r4, r2
 800469e:	461d      	mov	r5, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	18e3      	adds	r3, r4, r3
 80046a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046a8:	464b      	mov	r3, r9
 80046aa:	eb45 0303 	adc.w	r3, r5, r3
 80046ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046ce:	4629      	mov	r1, r5
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	4621      	mov	r1, r4
 80046d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d8:	4621      	mov	r1, r4
 80046da:	008a      	lsls	r2, r1, #2
 80046dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046e0:	f7fc fa82 	bl	8000be8 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b60      	ldr	r3, [pc, #384]	@ (800486c <UART_SetConfig+0x4e4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004700:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	61b9      	str	r1, [r7, #24]
 800470c:	415b      	adcs	r3, r3
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004714:	4641      	mov	r1, r8
 8004716:	1851      	adds	r1, r2, r1
 8004718:	6139      	str	r1, [r7, #16]
 800471a:	4649      	mov	r1, r9
 800471c:	414b      	adcs	r3, r1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800472c:	4659      	mov	r1, fp
 800472e:	00cb      	lsls	r3, r1, #3
 8004730:	4651      	mov	r1, sl
 8004732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004736:	4651      	mov	r1, sl
 8004738:	00ca      	lsls	r2, r1, #3
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	4603      	mov	r3, r0
 8004740:	4642      	mov	r2, r8
 8004742:	189b      	adds	r3, r3, r2
 8004744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004748:	464b      	mov	r3, r9
 800474a:	460a      	mov	r2, r1
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800475e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800476c:	4649      	mov	r1, r9
 800476e:	008b      	lsls	r3, r1, #2
 8004770:	4641      	mov	r1, r8
 8004772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004776:	4641      	mov	r1, r8
 8004778:	008a      	lsls	r2, r1, #2
 800477a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800477e:	f7fc fa33 	bl	8000be8 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4611      	mov	r1, r2
 8004788:	4b38      	ldr	r3, [pc, #224]	@ (800486c <UART_SetConfig+0x4e4>)
 800478a:	fba3 2301 	umull	r2, r3, r3, r1
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2264      	movs	r2, #100	@ 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	1acb      	subs	r3, r1, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	@ 0x32
 800479c:	4a33      	ldr	r2, [pc, #204]	@ (800486c <UART_SetConfig+0x4e4>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047a8:	441c      	add	r4, r3
 80047aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ae:	2200      	movs	r2, #0
 80047b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	415b      	adcs	r3, r3
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047fa:	464b      	mov	r3, r9
 80047fc:	460a      	mov	r2, r1
 80047fe:	eb42 0303 	adc.w	r3, r2, r3
 8004802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	663b      	str	r3, [r7, #96]	@ 0x60
 800480e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800481c:	4649      	mov	r1, r9
 800481e:	008b      	lsls	r3, r1, #2
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004826:	4641      	mov	r1, r8
 8004828:	008a      	lsls	r2, r1, #2
 800482a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800482e:	f7fc f9db 	bl	8000be8 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <UART_SetConfig+0x4e4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	@ 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	3332      	adds	r3, #50	@ 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	@ (800486c <UART_SetConfig+0x4e4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 020f 	and.w	r2, r3, #15
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486c:	51eb851f 	.word	0x51eb851f

08004870 <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f083 0301 	eor.w	r3, r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	2140      	movs	r1, #64	@ 0x40
 8004886:	4803      	ldr	r0, [pc, #12]	@ (8004894 <chipSelect+0x24>)
 8004888:	f7fd faf0 	bl	8001e6c <HAL_GPIO_WritePin>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40020400 	.word	0x40020400

08004898 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	461a      	mov	r2, r3
 80048a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048aa:	4803      	ldr	r0, [pc, #12]	@ (80048b8 <registerSelect+0x20>)
 80048ac:	f7fd fade 	bl	8001e6c <HAL_GPIO_WritePin>
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40020000 	.word	0x40020000

080048bc <displayReset>:

static void displayReset(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 80048c0:	2000      	movs	r0, #0
 80048c2:	f7ff ffd5 	bl	8004870 <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	@ 0x40
 80048ca:	4808      	ldr	r0, [pc, #32]	@ (80048ec <displayReset+0x30>)
 80048cc:	f7fd face 	bl	8001e6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7fd f801 	bl	80018d8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80048d6:	2201      	movs	r2, #1
 80048d8:	2140      	movs	r1, #64	@ 0x40
 80048da:	4804      	ldr	r0, [pc, #16]	@ (80048ec <displayReset+0x30>)
 80048dc:	f7fd fac6 	bl	8001e6c <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80048e0:	2001      	movs	r0, #1
 80048e2:	f7ff ffc5 	bl	8004870 <chipSelect>
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40020000 	.word	0x40020000

080048f0 <sendInstruction>:

static void sendInstruction(instruction command)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80048fa:	2000      	movs	r0, #0
 80048fc:	f7ff ffcc 	bl	8004898 <registerSelect>
    chipSelect(true);
 8004900:	2001      	movs	r0, #1
 8004902:	f7ff ffb5 	bl	8004870 <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 8004906:	1df9      	adds	r1, r7, #7
 8004908:	2301      	movs	r3, #1
 800490a:	2201      	movs	r2, #1
 800490c:	4804      	ldr	r0, [pc, #16]	@ (8004920 <sendInstruction+0x30>)
 800490e:	f7fe fe6e 	bl	80035ee <HAL_SPI_Transmit>
    chipSelect(false);
 8004912:	2000      	movs	r0, #0
 8004914:	f7ff ffac 	bl	8004870 <chipSelect>
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000248 	.word	0x20000248

08004924 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 800492e:	2001      	movs	r0, #1
 8004930:	f7ff ffb2 	bl	8004898 <registerSelect>
    chipSelect(true);
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff ff9b 	bl	8004870 <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 800493a:	1df9      	adds	r1, r7, #7
 800493c:	2301      	movs	r3, #1
 800493e:	2201      	movs	r2, #1
 8004940:	4804      	ldr	r0, [pc, #16]	@ (8004954 <sendData+0x30>)
 8004942:	f7fe fe54 	bl	80035ee <HAL_SPI_Transmit>
    chipSelect(false);
 8004946:	2000      	movs	r0, #0
 8004948:	f7ff ff92 	bl	8004870 <chipSelect>
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000248 	.word	0x20000248

08004958 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	2b3f      	cmp	r3, #63	@ 0x3f
 8004966:	d806      	bhi.n	8004976 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8004968:	2081      	movs	r0, #129	@ 0x81
 800496a:	f7ff ffc1 	bl	80048f0 <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ffbd 	bl	80048f0 <sendInstruction>
    }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <lcd_init>:

void lcd_init(void)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	af00      	add	r7, sp, #0
    lcd_clear();
 8004982:	f000 f857 	bl	8004a34 <lcd_clear>
    displayReset();
 8004986:	f7ff ff99 	bl	80048bc <displayReset>

    sendInstruction(ADC_NORMAL);
 800498a:	20a0      	movs	r0, #160	@ 0xa0
 800498c:	f7ff ffb0 	bl	80048f0 <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 8004990:	20ae      	movs	r0, #174	@ 0xae
 8004992:	f7ff ffad 	bl	80048f0 <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8004996:	20c8      	movs	r0, #200	@ 0xc8
 8004998:	f7ff ffaa 	bl	80048f0 <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 800499c:	20a2      	movs	r0, #162	@ 0xa2
 800499e:	f7ff ffa7 	bl	80048f0 <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 80049a2:	202f      	movs	r0, #47	@ 0x2f
 80049a4:	f7ff ffa4 	bl	80048f0 <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 80049a8:	2021      	movs	r0, #33	@ 0x21
 80049aa:	f7ff ffa1 	bl	80048f0 <sendInstruction>
    lcd_setContrast(40);
 80049ae:	2028      	movs	r0, #40	@ 0x28
 80049b0:	f7ff ffd2 	bl	8004958 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 80049b4:	20af      	movs	r0, #175	@ 0xaf
 80049b6:	f7ff ff9b 	bl	80048f0 <sendInstruction>
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
 80049ca:	460b      	mov	r3, r1
 80049cc:	71bb      	strb	r3, [r7, #6]
 80049ce:	4613      	mov	r3, r2
 80049d0:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db23      	blt.n	8004a22 <lcd_setPixel+0x62>
 80049da:	79bb      	ldrb	r3, [r7, #6]
 80049dc:	2b1f      	cmp	r3, #31
 80049de:	d820      	bhi.n	8004a22 <lcd_setPixel+0x62>
        if (pixelIsSet)
 80049e0:	797b      	ldrb	r3, [r7, #5]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	4a11      	ldr	r2, [pc, #68]	@ (8004a30 <lcd_setPixel+0x70>)
 80049ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80049ee:	79bb      	ldrb	r3, [r7, #6]
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f303 	lsl.w	r3, r1, r3
 80049f6:	4619      	mov	r1, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	490c      	ldr	r1, [pc, #48]	@ (8004a30 <lcd_setPixel+0x70>)
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 8004a02:	e00e      	b.n	8004a22 <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <lcd_setPixel+0x70>)
 8004a08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a0c:	79bb      	ldrb	r3, [r7, #6]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	fa01 f303 	lsl.w	r3, r1, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	4619      	mov	r1, r3
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	4904      	ldr	r1, [pc, #16]	@ (8004a30 <lcd_setPixel+0x70>)
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000338 	.word	0x20000338

08004a34 <lcd_clear>:

void lcd_clear(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	71fb      	strb	r3, [r7, #7]
 8004a3e:	e007      	b.n	8004a50 <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <lcd_clear+0x34>)
 8004a44:	2100      	movs	r1, #0
 8004a46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	71fb      	strb	r3, [r7, #7]
 8004a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	daf3      	bge.n	8004a40 <lcd_clear+0xc>
    }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000338 	.word	0x20000338

08004a6c <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4604      	mov	r4, r0
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	71fb      	strb	r3, [r7, #7]
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71bb      	strb	r3, [r7, #6]
 8004a82:	460b      	mov	r3, r1
 8004a84:	717b      	strb	r3, [r7, #5]
 8004a86:	4613      	mov	r3, r2
 8004a88:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8004a8a:	797b      	ldrb	r3, [r7, #5]
 8004a8c:	3b20      	subs	r3, #32
 8004a8e:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e049      	b.n	8004b2a <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004a96:	2300      	movs	r3, #0
 8004a98:	73bb      	strb	r3, [r7, #14]
 8004a9a:	e03b      	b.n	8004b14 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8004a9c:	797b      	ldrb	r3, [r7, #5]
 8004a9e:	793a      	ldrb	r2, [r7, #4]
 8004aa0:	4928      	ldr	r1, [pc, #160]	@ (8004b44 <lcd_setChar+0xd8>)
 8004aa2:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8004aa6:	fb03 f202 	mul.w	r2, r3, r2
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	4413      	add	r3, r2
 8004aae:	4a26      	ldr	r2, [pc, #152]	@ (8004b48 <lcd_setChar+0xdc>)
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	7bbb      	ldrb	r3, [r7, #14]
 8004ab6:	fa42 f303 	asr.w	r3, r2, r3
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d018      	beq.n	8004af4 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 8004ac2:	79fa      	ldrb	r2, [r7, #7]
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b2d8      	uxtb	r0, r3
 8004aca:	79ba      	ldrb	r2, [r7, #6]
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	4413      	add	r3, r2
 8004ad0:	b2d9      	uxtb	r1, r3
 8004ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f083 0301 	eor.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	f7ff ff67 	bl	80049c0 <lcd_setPixel>
 8004af2:	e00c      	b.n	8004b0e <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 8004af4:	79fa      	ldrb	r2, [r7, #7]
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	4413      	add	r3, r2
 8004afa:	b2d8      	uxtb	r0, r3
 8004afc:	79ba      	ldrb	r2, [r7, #6]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	4413      	add	r3, r2
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f7ff ff59 	bl	80049c0 <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8004b0e:	7bbb      	ldrb	r3, [r7, #14]
 8004b10:	3301      	adds	r3, #1
 8004b12:	73bb      	strb	r3, [r7, #14]
 8004b14:	793b      	ldrb	r3, [r7, #4]
 8004b16:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <lcd_setChar+0xd8>)
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	7bba      	ldrb	r2, [r7, #14]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3bb      	bcc.n	8004a9c <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	3301      	adds	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	793b      	ldrb	r3, [r7, #4]
 8004b2c:	4a05      	ldr	r2, [pc, #20]	@ (8004b44 <lcd_setChar+0xd8>)
 8004b2e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3ae      	bcc.n	8004a96 <lcd_setChar+0x2a>
        }
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd90      	pop	{r4, r7, pc}
 8004b42:	bf00      	nop
 8004b44:	080080ec 	.word	0x080080ec
 8004b48:	08007d6c 	.word	0x08007d6c

08004b4c <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	603a      	str	r2, [r7, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	71bb      	strb	r3, [r7, #6]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 8004b62:	797b      	ldrb	r3, [r7, #5]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11c      	bne.n	8004ba2 <lcd_setString+0x56>
 8004b68:	797b      	ldrb	r3, [r7, #5]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d819      	bhi.n	8004ba2 <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 8004b6e:	e014      	b.n	8004b9a <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	797c      	ldrb	r4, [r7, #5]
 8004b76:	79b9      	ldrb	r1, [r7, #6]
 8004b78:	79f8      	ldrb	r0, [r7, #7]
 8004b7a:	7e3b      	ldrb	r3, [r7, #24]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	4623      	mov	r3, r4
 8004b80:	f7ff ff74 	bl	8004a6c <lcd_setChar>
            xPosition += fontSizes[size].width;
 8004b84:	797b      	ldrb	r3, [r7, #5]
 8004b86:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <lcd_setString+0x60>)
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	4413      	add	r3, r2
 8004b8c:	785a      	ldrb	r2, [r3, #1]
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	4413      	add	r3, r2
 8004b92:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <lcd_setString+0x24>
        }
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd90      	pop	{r4, r7, pc}
 8004baa:	bf00      	nop
 8004bac:	080080ec 	.word	0x080080ec

08004bb0 <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b08b      	sub	sp, #44	@ 0x2c
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	81fb      	strh	r3, [r7, #14]
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	81bb      	strh	r3, [r7, #12]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	817b      	strh	r3, [r7, #10]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 8004bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bda:	edc7 7a08 	vstr	s15, [r7, #32]
 8004bde:	2300      	movs	r3, #0
 8004be0:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 8004be2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bee:	edc7 7a07 	vstr	s15, [r7, #28]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 8004bf6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bfb8      	it	lt
 8004c04:	425b      	neglt	r3, r3
 8004c06:	b21b      	sxth	r3, r3
 8004c08:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 8004c0a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c0e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bfb8      	it	lt
 8004c18:	425b      	neglt	r3, r3
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 8004c1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <lcd_setLine+0x8c>
 8004c26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8004c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <lcd_setLine+0xaa>
 8004c44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8004c5a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	db5f      	blt.n	8004d26 <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8004c66:	2300      	movs	r3, #0
 8004c68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004c6a:	e055      	b.n	8004d18 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004c6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c78:	db20      	blt.n	8004cbc <lcd_setLine+0x10c>
 8004c7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c86:	db19      	blt.n	8004cbc <lcd_setLine+0x10c>
 8004c88:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c90:	edc7 7a01 	vstr	s15, [r7, #4]
 8004c94:	793b      	ldrb	r3, [r7, #4]
 8004c96:	b2d8      	uxtb	r0, r3
 8004c98:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca0:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ca4:	793b      	ldrb	r3, [r7, #4]
 8004ca6:	b2d9      	uxtb	r1, r3
 8004ca8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7ff fe82 	bl	80049c0 <lcd_setPixel>
			xF += x[1];
 8004cbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc8:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd0:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 8004cd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ce0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d00:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d08:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 8004d0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3301      	adds	r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004d1c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004d20:	429a      	cmp	r2, r3
 8004d22:	dba3      	blt.n	8004c6c <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8004d24:	e05e      	b.n	8004de4 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8004d26:	2300      	movs	r3, #0
 8004d28:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d2a:	e055      	b.n	8004dd8 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8004d2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d38:	db20      	blt.n	8004d7c <lcd_setLine+0x1cc>
 8004d3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	db19      	blt.n	8004d7c <lcd_setLine+0x1cc>
 8004d48:	edd7 7a08 	vldr	s15, [r7, #32]
 8004d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d50:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d54:	793b      	ldrb	r3, [r7, #4]
 8004d56:	b2d8      	uxtb	r0, r3
 8004d58:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d60:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d64:	793b      	ldrb	r3, [r7, #4]
 8004d66:	b2d9      	uxtb	r1, r3
 8004d68:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	f7ff fe22 	bl	80049c0 <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8004d7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da8:	ed97 7a08 	vldr	s14, [r7, #32]
 8004dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004db0:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8004db4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dc8:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 8004dcc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004dd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ddc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004de0:	429a      	cmp	r2, r3
 8004de2:	dba3      	blt.n	8004d2c <lcd_setLine+0x17c>
}
 8004de4:	bf00      	nop
 8004de6:	372c      	adds	r7, #44	@ 0x2c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd90      	pop	{r4, r7, pc}

08004dec <lcd_show>:

void lcd_show(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004df2:	2300      	movs	r3, #0
 8004df4:	71fb      	strb	r3, [r7, #7]
 8004df6:	e022      	b.n	8004e3e <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	3b50      	subs	r3, #80	@ 0x50
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fd76 	bl	80048f0 <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 8004e04:	2010      	movs	r0, #16
 8004e06:	f7ff fd73 	bl	80048f0 <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f7ff fd70 	bl	80048f0 <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	71bb      	strb	r3, [r7, #6]
 8004e14:	e00c      	b.n	8004e30 <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 8004e16:	79ba      	ldrb	r2, [r7, #6]
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	490d      	ldr	r1, [pc, #52]	@ (8004e50 <lcd_show+0x64>)
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	440a      	add	r2, r1
 8004e20:	4413      	add	r3, r2
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fd7d 	bl	8004924 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8004e2a:	79bb      	ldrb	r3, [r7, #6]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	71bb      	strb	r3, [r7, #6]
 8004e30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	daee      	bge.n	8004e16 <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	71fb      	strb	r3, [r7, #7]
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d9d9      	bls.n	8004df8 <lcd_show+0xc>
    }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000338 	.word	0x20000338

08004e54 <calcTemp>:

#define THERMO_ADDRESS 0x90
#define TEST_MODE 0 // Macro for enable testing without sensor / Freezer

float calcTemp(uint16_t data)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	80fb      	strh	r3, [r7, #6]
	data = (data>>5);
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	80fb      	strh	r3, [r7, #6]

	if(data & 0x400) 							// Check sign bit (bit 11)
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <calcTemp+0x34>
		return -0.125f*((~data + 1) & 0x3FF); // Two's complement, convert to 10 bit value, scale to °C
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	425b      	negs	r3, r3
 8004e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7e:	eebc 7a00 	vmov.f32	s14, #192	@ 0xbe000000 -0.125
 8004e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e86:	e008      	b.n	8004e9a <calcTemp+0x46>

	return 0.125f * data;						// scale to °C
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e92:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8004e96:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <readTemp>:
	uint16_t tmp = (i2cBuf[0]<<8) + i2cBuf[1]; // assemble 16-bit temp value
	return calcTemp(tmp);
}
#else
float readTemp()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af02      	add	r7, sp, #8
	uint8_t i2cBuf[2];
	if(HAL_I2C_Master_Receive(&hi2c1, THERMO_ADDRESS, (uint8_t*)i2cBuf, 2, HAL_MAX_DELAY)==HAL_OK)
 8004eae:	1d3a      	adds	r2, r7, #4
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	2190      	movs	r1, #144	@ 0x90
 8004eba:	480d      	ldr	r0, [pc, #52]	@ (8004ef0 <readTemp+0x48>)
 8004ebc:	f7fd f934 	bl	8002128 <HAL_I2C_Master_Receive>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10c      	bne.n	8004ee0 <readTemp+0x38>
	{
		uint16_t tmp = (i2cBuf[0]<<8) + i2cBuf[1];   // assemble 16-bit temp value
 8004ec6:	793b      	ldrb	r3, [r7, #4]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	797a      	ldrb	r2, [r7, #5]
 8004ece:	4413      	add	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
		return calcTemp(tmp);
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ffbd 	bl	8004e54 <calcTemp>
 8004eda:	eef0 7a40 	vmov.f32	s15, s0
 8004ede:	e001      	b.n	8004ee4 <readTemp+0x3c>
	}
	return 1500.f; // return something out of range
 8004ee0:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8004ef4 <readTemp+0x4c>

}
 8004ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200001f0 	.word	0x200001f0
 8004ef4:	44bb8000 	.word	0x44bb8000

08004ef8 <__cvt>:
 8004ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	ec57 6b10 	vmov	r6, r7, d0
 8004f00:	2f00      	cmp	r7, #0
 8004f02:	460c      	mov	r4, r1
 8004f04:	4619      	mov	r1, r3
 8004f06:	463b      	mov	r3, r7
 8004f08:	bfbb      	ittet	lt
 8004f0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f0e:	461f      	movlt	r7, r3
 8004f10:	2300      	movge	r3, #0
 8004f12:	232d      	movlt	r3, #45	@ 0x2d
 8004f14:	700b      	strb	r3, [r1, #0]
 8004f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f1c:	4691      	mov	r9, r2
 8004f1e:	f023 0820 	bic.w	r8, r3, #32
 8004f22:	bfbc      	itt	lt
 8004f24:	4632      	movlt	r2, r6
 8004f26:	4616      	movlt	r6, r2
 8004f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f2c:	d005      	beq.n	8004f3a <__cvt+0x42>
 8004f2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f32:	d100      	bne.n	8004f36 <__cvt+0x3e>
 8004f34:	3401      	adds	r4, #1
 8004f36:	2102      	movs	r1, #2
 8004f38:	e000      	b.n	8004f3c <__cvt+0x44>
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	ab03      	add	r3, sp, #12
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	ab02      	add	r3, sp, #8
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	ec47 6b10 	vmov	d0, r6, r7
 8004f48:	4653      	mov	r3, sl
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	f000 ff4c 	bl	8005de8 <_dtoa_r>
 8004f50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f54:	4605      	mov	r5, r0
 8004f56:	d119      	bne.n	8004f8c <__cvt+0x94>
 8004f58:	f019 0f01 	tst.w	r9, #1
 8004f5c:	d00e      	beq.n	8004f7c <__cvt+0x84>
 8004f5e:	eb00 0904 	add.w	r9, r0, r4
 8004f62:	2200      	movs	r2, #0
 8004f64:	2300      	movs	r3, #0
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 8004f6e:	b108      	cbz	r0, 8004f74 <__cvt+0x7c>
 8004f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f74:	2230      	movs	r2, #48	@ 0x30
 8004f76:	9b03      	ldr	r3, [sp, #12]
 8004f78:	454b      	cmp	r3, r9
 8004f7a:	d31e      	bcc.n	8004fba <__cvt+0xc2>
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f80:	1b5b      	subs	r3, r3, r5
 8004f82:	4628      	mov	r0, r5
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f90:	eb00 0904 	add.w	r9, r0, r4
 8004f94:	d1e5      	bne.n	8004f62 <__cvt+0x6a>
 8004f96:	7803      	ldrb	r3, [r0, #0]
 8004f98:	2b30      	cmp	r3, #48	@ 0x30
 8004f9a:	d10a      	bne.n	8004fb2 <__cvt+0xba>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	f7fb fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8004fa8:	b918      	cbnz	r0, 8004fb2 <__cvt+0xba>
 8004faa:	f1c4 0401 	rsb	r4, r4, #1
 8004fae:	f8ca 4000 	str.w	r4, [sl]
 8004fb2:	f8da 3000 	ldr.w	r3, [sl]
 8004fb6:	4499      	add	r9, r3
 8004fb8:	e7d3      	b.n	8004f62 <__cvt+0x6a>
 8004fba:	1c59      	adds	r1, r3, #1
 8004fbc:	9103      	str	r1, [sp, #12]
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e7d9      	b.n	8004f76 <__cvt+0x7e>

08004fc2 <__exponent>:
 8004fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	bfba      	itte	lt
 8004fc8:	4249      	neglt	r1, r1
 8004fca:	232d      	movlt	r3, #45	@ 0x2d
 8004fcc:	232b      	movge	r3, #43	@ 0x2b
 8004fce:	2909      	cmp	r1, #9
 8004fd0:	7002      	strb	r2, [r0, #0]
 8004fd2:	7043      	strb	r3, [r0, #1]
 8004fd4:	dd29      	ble.n	800502a <__exponent+0x68>
 8004fd6:	f10d 0307 	add.w	r3, sp, #7
 8004fda:	461d      	mov	r5, r3
 8004fdc:	270a      	movs	r7, #10
 8004fde:	461a      	mov	r2, r3
 8004fe0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fe4:	fb07 1416 	mls	r4, r7, r6, r1
 8004fe8:	3430      	adds	r4, #48	@ 0x30
 8004fea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004fee:	460c      	mov	r4, r1
 8004ff0:	2c63      	cmp	r4, #99	@ 0x63
 8004ff2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	dcf1      	bgt.n	8004fde <__exponent+0x1c>
 8004ffa:	3130      	adds	r1, #48	@ 0x30
 8004ffc:	1e94      	subs	r4, r2, #2
 8004ffe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005002:	1c41      	adds	r1, r0, #1
 8005004:	4623      	mov	r3, r4
 8005006:	42ab      	cmp	r3, r5
 8005008:	d30a      	bcc.n	8005020 <__exponent+0x5e>
 800500a:	f10d 0309 	add.w	r3, sp, #9
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	42ac      	cmp	r4, r5
 8005012:	bf88      	it	hi
 8005014:	2300      	movhi	r3, #0
 8005016:	3302      	adds	r3, #2
 8005018:	4403      	add	r3, r0
 800501a:	1a18      	subs	r0, r3, r0
 800501c:	b003      	add	sp, #12
 800501e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005020:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005024:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005028:	e7ed      	b.n	8005006 <__exponent+0x44>
 800502a:	2330      	movs	r3, #48	@ 0x30
 800502c:	3130      	adds	r1, #48	@ 0x30
 800502e:	7083      	strb	r3, [r0, #2]
 8005030:	70c1      	strb	r1, [r0, #3]
 8005032:	1d03      	adds	r3, r0, #4
 8005034:	e7f1      	b.n	800501a <__exponent+0x58>
	...

08005038 <_printf_float>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	b08d      	sub	sp, #52	@ 0x34
 800503e:	460c      	mov	r4, r1
 8005040:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005044:	4616      	mov	r6, r2
 8005046:	461f      	mov	r7, r3
 8005048:	4605      	mov	r5, r0
 800504a:	f000 fdcd 	bl	8005be8 <_localeconv_r>
 800504e:	6803      	ldr	r3, [r0, #0]
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb f92c 	bl	80002b0 <strlen>
 8005058:	2300      	movs	r3, #0
 800505a:	930a      	str	r3, [sp, #40]	@ 0x28
 800505c:	f8d8 3000 	ldr.w	r3, [r8]
 8005060:	9005      	str	r0, [sp, #20]
 8005062:	3307      	adds	r3, #7
 8005064:	f023 0307 	bic.w	r3, r3, #7
 8005068:	f103 0208 	add.w	r2, r3, #8
 800506c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005070:	f8d4 b000 	ldr.w	fp, [r4]
 8005074:	f8c8 2000 	str.w	r2, [r8]
 8005078:	e9d3 8900 	ldrd	r8, r9, [r3]
 800507c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005080:	9307      	str	r3, [sp, #28]
 8005082:	f8cd 8018 	str.w	r8, [sp, #24]
 8005086:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800508a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508e:	4b9c      	ldr	r3, [pc, #624]	@ (8005300 <_printf_float+0x2c8>)
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	f7fb fd6a 	bl	8000b6c <__aeabi_dcmpun>
 8005098:	bb70      	cbnz	r0, 80050f8 <_printf_float+0xc0>
 800509a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800509e:	4b98      	ldr	r3, [pc, #608]	@ (8005300 <_printf_float+0x2c8>)
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	f7fb fd44 	bl	8000b30 <__aeabi_dcmple>
 80050a8:	bb30      	cbnz	r0, 80050f8 <_printf_float+0xc0>
 80050aa:	2200      	movs	r2, #0
 80050ac:	2300      	movs	r3, #0
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb fd33 	bl	8000b1c <__aeabi_dcmplt>
 80050b6:	b110      	cbz	r0, 80050be <_printf_float+0x86>
 80050b8:	232d      	movs	r3, #45	@ 0x2d
 80050ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050be:	4a91      	ldr	r2, [pc, #580]	@ (8005304 <_printf_float+0x2cc>)
 80050c0:	4b91      	ldr	r3, [pc, #580]	@ (8005308 <_printf_float+0x2d0>)
 80050c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050c6:	bf94      	ite	ls
 80050c8:	4690      	movls	r8, r2
 80050ca:	4698      	movhi	r8, r3
 80050cc:	2303      	movs	r3, #3
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	f02b 0304 	bic.w	r3, fp, #4
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	f04f 0900 	mov.w	r9, #0
 80050da:	9700      	str	r7, [sp, #0]
 80050dc:	4633      	mov	r3, r6
 80050de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f9d2 	bl	800548c <_printf_common>
 80050e8:	3001      	adds	r0, #1
 80050ea:	f040 808d 	bne.w	8005208 <_printf_float+0x1d0>
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	b00d      	add	sp, #52	@ 0x34
 80050f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb fd34 	bl	8000b6c <__aeabi_dcmpun>
 8005104:	b140      	cbz	r0, 8005118 <_printf_float+0xe0>
 8005106:	464b      	mov	r3, r9
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbc      	itt	lt
 800510c:	232d      	movlt	r3, #45	@ 0x2d
 800510e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005112:	4a7e      	ldr	r2, [pc, #504]	@ (800530c <_printf_float+0x2d4>)
 8005114:	4b7e      	ldr	r3, [pc, #504]	@ (8005310 <_printf_float+0x2d8>)
 8005116:	e7d4      	b.n	80050c2 <_printf_float+0x8a>
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800511e:	9206      	str	r2, [sp, #24]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	d13b      	bne.n	800519c <_printf_float+0x164>
 8005124:	2306      	movs	r3, #6
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800512c:	2300      	movs	r3, #0
 800512e:	6022      	str	r2, [r4, #0]
 8005130:	9303      	str	r3, [sp, #12]
 8005132:	ab0a      	add	r3, sp, #40	@ 0x28
 8005134:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005138:	ab09      	add	r3, sp, #36	@ 0x24
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	6861      	ldr	r1, [r4, #4]
 800513e:	ec49 8b10 	vmov	d0, r8, r9
 8005142:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005146:	4628      	mov	r0, r5
 8005148:	f7ff fed6 	bl	8004ef8 <__cvt>
 800514c:	9b06      	ldr	r3, [sp, #24]
 800514e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005150:	2b47      	cmp	r3, #71	@ 0x47
 8005152:	4680      	mov	r8, r0
 8005154:	d129      	bne.n	80051aa <_printf_float+0x172>
 8005156:	1cc8      	adds	r0, r1, #3
 8005158:	db02      	blt.n	8005160 <_printf_float+0x128>
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	4299      	cmp	r1, r3
 800515e:	dd41      	ble.n	80051e4 <_printf_float+0x1ac>
 8005160:	f1aa 0a02 	sub.w	sl, sl, #2
 8005164:	fa5f fa8a 	uxtb.w	sl, sl
 8005168:	3901      	subs	r1, #1
 800516a:	4652      	mov	r2, sl
 800516c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005170:	9109      	str	r1, [sp, #36]	@ 0x24
 8005172:	f7ff ff26 	bl	8004fc2 <__exponent>
 8005176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005178:	1813      	adds	r3, r2, r0
 800517a:	2a01      	cmp	r2, #1
 800517c:	4681      	mov	r9, r0
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	dc02      	bgt.n	8005188 <_printf_float+0x150>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	07d2      	lsls	r2, r2, #31
 8005186:	d501      	bpl.n	800518c <_printf_float+0x154>
 8005188:	3301      	adds	r3, #1
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0a2      	beq.n	80050da <_printf_float+0xa2>
 8005194:	232d      	movs	r3, #45	@ 0x2d
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800519a:	e79e      	b.n	80050da <_printf_float+0xa2>
 800519c:	9a06      	ldr	r2, [sp, #24]
 800519e:	2a47      	cmp	r2, #71	@ 0x47
 80051a0:	d1c2      	bne.n	8005128 <_printf_float+0xf0>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1c0      	bne.n	8005128 <_printf_float+0xf0>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e7bd      	b.n	8005126 <_printf_float+0xee>
 80051aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051ae:	d9db      	bls.n	8005168 <_printf_float+0x130>
 80051b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051b4:	d118      	bne.n	80051e8 <_printf_float+0x1b0>
 80051b6:	2900      	cmp	r1, #0
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	dd0b      	ble.n	80051d4 <_printf_float+0x19c>
 80051bc:	6121      	str	r1, [r4, #16]
 80051be:	b913      	cbnz	r3, 80051c6 <_printf_float+0x18e>
 80051c0:	6822      	ldr	r2, [r4, #0]
 80051c2:	07d0      	lsls	r0, r2, #31
 80051c4:	d502      	bpl.n	80051cc <_printf_float+0x194>
 80051c6:	3301      	adds	r3, #1
 80051c8:	440b      	add	r3, r1
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051ce:	f04f 0900 	mov.w	r9, #0
 80051d2:	e7db      	b.n	800518c <_printf_float+0x154>
 80051d4:	b913      	cbnz	r3, 80051dc <_printf_float+0x1a4>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	07d2      	lsls	r2, r2, #31
 80051da:	d501      	bpl.n	80051e0 <_printf_float+0x1a8>
 80051dc:	3302      	adds	r3, #2
 80051de:	e7f4      	b.n	80051ca <_printf_float+0x192>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e7f2      	b.n	80051ca <_printf_float+0x192>
 80051e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ea:	4299      	cmp	r1, r3
 80051ec:	db05      	blt.n	80051fa <_printf_float+0x1c2>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	6121      	str	r1, [r4, #16]
 80051f2:	07d8      	lsls	r0, r3, #31
 80051f4:	d5ea      	bpl.n	80051cc <_printf_float+0x194>
 80051f6:	1c4b      	adds	r3, r1, #1
 80051f8:	e7e7      	b.n	80051ca <_printf_float+0x192>
 80051fa:	2900      	cmp	r1, #0
 80051fc:	bfd4      	ite	le
 80051fe:	f1c1 0202 	rsble	r2, r1, #2
 8005202:	2201      	movgt	r2, #1
 8005204:	4413      	add	r3, r2
 8005206:	e7e0      	b.n	80051ca <_printf_float+0x192>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	055a      	lsls	r2, r3, #21
 800520c:	d407      	bmi.n	800521e <_printf_float+0x1e6>
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	4642      	mov	r2, r8
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	d12b      	bne.n	8005274 <_printf_float+0x23c>
 800521c:	e767      	b.n	80050ee <_printf_float+0xb6>
 800521e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005222:	f240 80dd 	bls.w	80053e0 <_printf_float+0x3a8>
 8005226:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	f7fb fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 8005232:	2800      	cmp	r0, #0
 8005234:	d033      	beq.n	800529e <_printf_float+0x266>
 8005236:	4a37      	ldr	r2, [pc, #220]	@ (8005314 <_printf_float+0x2dc>)
 8005238:	2301      	movs	r3, #1
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f af54 	beq.w	80050ee <_printf_float+0xb6>
 8005246:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800524a:	4543      	cmp	r3, r8
 800524c:	db02      	blt.n	8005254 <_printf_float+0x21c>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	07d8      	lsls	r0, r3, #31
 8005252:	d50f      	bpl.n	8005274 <_printf_float+0x23c>
 8005254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005258:	4631      	mov	r1, r6
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f af45 	beq.w	80050ee <_printf_float+0xb6>
 8005264:	f04f 0900 	mov.w	r9, #0
 8005268:	f108 38ff 	add.w	r8, r8, #4294967295
 800526c:	f104 0a1a 	add.w	sl, r4, #26
 8005270:	45c8      	cmp	r8, r9
 8005272:	dc09      	bgt.n	8005288 <_printf_float+0x250>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	079b      	lsls	r3, r3, #30
 8005278:	f100 8103 	bmi.w	8005482 <_printf_float+0x44a>
 800527c:	68e0      	ldr	r0, [r4, #12]
 800527e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005280:	4298      	cmp	r0, r3
 8005282:	bfb8      	it	lt
 8005284:	4618      	movlt	r0, r3
 8005286:	e734      	b.n	80050f2 <_printf_float+0xba>
 8005288:	2301      	movs	r3, #1
 800528a:	4652      	mov	r2, sl
 800528c:	4631      	mov	r1, r6
 800528e:	4628      	mov	r0, r5
 8005290:	47b8      	blx	r7
 8005292:	3001      	adds	r0, #1
 8005294:	f43f af2b 	beq.w	80050ee <_printf_float+0xb6>
 8005298:	f109 0901 	add.w	r9, r9, #1
 800529c:	e7e8      	b.n	8005270 <_printf_float+0x238>
 800529e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc39      	bgt.n	8005318 <_printf_float+0x2e0>
 80052a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005314 <_printf_float+0x2dc>)
 80052a6:	2301      	movs	r3, #1
 80052a8:	4631      	mov	r1, r6
 80052aa:	4628      	mov	r0, r5
 80052ac:	47b8      	blx	r7
 80052ae:	3001      	adds	r0, #1
 80052b0:	f43f af1d 	beq.w	80050ee <_printf_float+0xb6>
 80052b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052b8:	ea59 0303 	orrs.w	r3, r9, r3
 80052bc:	d102      	bne.n	80052c4 <_printf_float+0x28c>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	07d9      	lsls	r1, r3, #31
 80052c2:	d5d7      	bpl.n	8005274 <_printf_float+0x23c>
 80052c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052c8:	4631      	mov	r1, r6
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b8      	blx	r7
 80052ce:	3001      	adds	r0, #1
 80052d0:	f43f af0d 	beq.w	80050ee <_printf_float+0xb6>
 80052d4:	f04f 0a00 	mov.w	sl, #0
 80052d8:	f104 0b1a 	add.w	fp, r4, #26
 80052dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052de:	425b      	negs	r3, r3
 80052e0:	4553      	cmp	r3, sl
 80052e2:	dc01      	bgt.n	80052e8 <_printf_float+0x2b0>
 80052e4:	464b      	mov	r3, r9
 80052e6:	e793      	b.n	8005210 <_printf_float+0x1d8>
 80052e8:	2301      	movs	r3, #1
 80052ea:	465a      	mov	r2, fp
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f aefb 	beq.w	80050ee <_printf_float+0xb6>
 80052f8:	f10a 0a01 	add.w	sl, sl, #1
 80052fc:	e7ee      	b.n	80052dc <_printf_float+0x2a4>
 80052fe:	bf00      	nop
 8005300:	7fefffff 	.word	0x7fefffff
 8005304:	080080f0 	.word	0x080080f0
 8005308:	080080f4 	.word	0x080080f4
 800530c:	080080f8 	.word	0x080080f8
 8005310:	080080fc 	.word	0x080080fc
 8005314:	08008100 	.word	0x08008100
 8005318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800531a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800531e:	4553      	cmp	r3, sl
 8005320:	bfa8      	it	ge
 8005322:	4653      	movge	r3, sl
 8005324:	2b00      	cmp	r3, #0
 8005326:	4699      	mov	r9, r3
 8005328:	dc36      	bgt.n	8005398 <_printf_float+0x360>
 800532a:	f04f 0b00 	mov.w	fp, #0
 800532e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005332:	f104 021a 	add.w	r2, r4, #26
 8005336:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005338:	9306      	str	r3, [sp, #24]
 800533a:	eba3 0309 	sub.w	r3, r3, r9
 800533e:	455b      	cmp	r3, fp
 8005340:	dc31      	bgt.n	80053a6 <_printf_float+0x36e>
 8005342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005344:	459a      	cmp	sl, r3
 8005346:	dc3a      	bgt.n	80053be <_printf_float+0x386>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	07da      	lsls	r2, r3, #31
 800534c:	d437      	bmi.n	80053be <_printf_float+0x386>
 800534e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005350:	ebaa 0903 	sub.w	r9, sl, r3
 8005354:	9b06      	ldr	r3, [sp, #24]
 8005356:	ebaa 0303 	sub.w	r3, sl, r3
 800535a:	4599      	cmp	r9, r3
 800535c:	bfa8      	it	ge
 800535e:	4699      	movge	r9, r3
 8005360:	f1b9 0f00 	cmp.w	r9, #0
 8005364:	dc33      	bgt.n	80053ce <_printf_float+0x396>
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800536e:	f104 0b1a 	add.w	fp, r4, #26
 8005372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005374:	ebaa 0303 	sub.w	r3, sl, r3
 8005378:	eba3 0309 	sub.w	r3, r3, r9
 800537c:	4543      	cmp	r3, r8
 800537e:	f77f af79 	ble.w	8005274 <_printf_float+0x23c>
 8005382:	2301      	movs	r3, #1
 8005384:	465a      	mov	r2, fp
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f aeae 	beq.w	80050ee <_printf_float+0xb6>
 8005392:	f108 0801 	add.w	r8, r8, #1
 8005396:	e7ec      	b.n	8005372 <_printf_float+0x33a>
 8005398:	4642      	mov	r2, r8
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	d1c2      	bne.n	800532a <_printf_float+0x2f2>
 80053a4:	e6a3      	b.n	80050ee <_printf_float+0xb6>
 80053a6:	2301      	movs	r3, #1
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	9206      	str	r2, [sp, #24]
 80053ae:	47b8      	blx	r7
 80053b0:	3001      	adds	r0, #1
 80053b2:	f43f ae9c 	beq.w	80050ee <_printf_float+0xb6>
 80053b6:	9a06      	ldr	r2, [sp, #24]
 80053b8:	f10b 0b01 	add.w	fp, fp, #1
 80053bc:	e7bb      	b.n	8005336 <_printf_float+0x2fe>
 80053be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	d1c0      	bne.n	800534e <_printf_float+0x316>
 80053cc:	e68f      	b.n	80050ee <_printf_float+0xb6>
 80053ce:	9a06      	ldr	r2, [sp, #24]
 80053d0:	464b      	mov	r3, r9
 80053d2:	4442      	add	r2, r8
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	d1c3      	bne.n	8005366 <_printf_float+0x32e>
 80053de:	e686      	b.n	80050ee <_printf_float+0xb6>
 80053e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053e4:	f1ba 0f01 	cmp.w	sl, #1
 80053e8:	dc01      	bgt.n	80053ee <_printf_float+0x3b6>
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	d536      	bpl.n	800545c <_printf_float+0x424>
 80053ee:	2301      	movs	r3, #1
 80053f0:	4642      	mov	r2, r8
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	f43f ae78 	beq.w	80050ee <_printf_float+0xb6>
 80053fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f ae70 	beq.w	80050ee <_printf_float+0xb6>
 800540e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005412:	2200      	movs	r2, #0
 8005414:	2300      	movs	r3, #0
 8005416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800541a:	f7fb fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800541e:	b9c0      	cbnz	r0, 8005452 <_printf_float+0x41a>
 8005420:	4653      	mov	r3, sl
 8005422:	f108 0201 	add.w	r2, r8, #1
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	d10c      	bne.n	800544a <_printf_float+0x412>
 8005430:	e65d      	b.n	80050ee <_printf_float+0xb6>
 8005432:	2301      	movs	r3, #1
 8005434:	465a      	mov	r2, fp
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	f43f ae56 	beq.w	80050ee <_printf_float+0xb6>
 8005442:	f108 0801 	add.w	r8, r8, #1
 8005446:	45d0      	cmp	r8, sl
 8005448:	dbf3      	blt.n	8005432 <_printf_float+0x3fa>
 800544a:	464b      	mov	r3, r9
 800544c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005450:	e6df      	b.n	8005212 <_printf_float+0x1da>
 8005452:	f04f 0800 	mov.w	r8, #0
 8005456:	f104 0b1a 	add.w	fp, r4, #26
 800545a:	e7f4      	b.n	8005446 <_printf_float+0x40e>
 800545c:	2301      	movs	r3, #1
 800545e:	4642      	mov	r2, r8
 8005460:	e7e1      	b.n	8005426 <_printf_float+0x3ee>
 8005462:	2301      	movs	r3, #1
 8005464:	464a      	mov	r2, r9
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f ae3e 	beq.w	80050ee <_printf_float+0xb6>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800547a:	1a5b      	subs	r3, r3, r1
 800547c:	4543      	cmp	r3, r8
 800547e:	dcf0      	bgt.n	8005462 <_printf_float+0x42a>
 8005480:	e6fc      	b.n	800527c <_printf_float+0x244>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 0919 	add.w	r9, r4, #25
 800548a:	e7f4      	b.n	8005476 <_printf_float+0x43e>

0800548c <_printf_common>:
 800548c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	4616      	mov	r6, r2
 8005492:	4698      	mov	r8, r3
 8005494:	688a      	ldr	r2, [r1, #8]
 8005496:	690b      	ldr	r3, [r1, #16]
 8005498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800549c:	4293      	cmp	r3, r2
 800549e:	bfb8      	it	lt
 80054a0:	4613      	movlt	r3, r2
 80054a2:	6033      	str	r3, [r6, #0]
 80054a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a8:	4607      	mov	r7, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	b10a      	cbz	r2, 80054b2 <_printf_common+0x26>
 80054ae:	3301      	adds	r3, #1
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	0699      	lsls	r1, r3, #26
 80054b6:	bf42      	ittt	mi
 80054b8:	6833      	ldrmi	r3, [r6, #0]
 80054ba:	3302      	addmi	r3, #2
 80054bc:	6033      	strmi	r3, [r6, #0]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	f015 0506 	ands.w	r5, r5, #6
 80054c4:	d106      	bne.n	80054d4 <_printf_common+0x48>
 80054c6:	f104 0a19 	add.w	sl, r4, #25
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	6832      	ldr	r2, [r6, #0]
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	42ab      	cmp	r3, r5
 80054d2:	dc26      	bgt.n	8005522 <_printf_common+0x96>
 80054d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	3b00      	subs	r3, #0
 80054dc:	bf18      	it	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	0692      	lsls	r2, r2, #26
 80054e2:	d42b      	bmi.n	800553c <_printf_common+0xb0>
 80054e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e8:	4641      	mov	r1, r8
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c8      	blx	r9
 80054ee:	3001      	adds	r0, #1
 80054f0:	d01e      	beq.n	8005530 <_printf_common+0xa4>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	f003 0306 	and.w	r3, r3, #6
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	bf02      	ittt	eq
 80054fe:	68e5      	ldreq	r5, [r4, #12]
 8005500:	6833      	ldreq	r3, [r6, #0]
 8005502:	1aed      	subeq	r5, r5, r3
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	bf0c      	ite	eq
 8005508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800550c:	2500      	movne	r5, #0
 800550e:	4293      	cmp	r3, r2
 8005510:	bfc4      	itt	gt
 8005512:	1a9b      	subgt	r3, r3, r2
 8005514:	18ed      	addgt	r5, r5, r3
 8005516:	2600      	movs	r6, #0
 8005518:	341a      	adds	r4, #26
 800551a:	42b5      	cmp	r5, r6
 800551c:	d11a      	bne.n	8005554 <_printf_common+0xc8>
 800551e:	2000      	movs	r0, #0
 8005520:	e008      	b.n	8005534 <_printf_common+0xa8>
 8005522:	2301      	movs	r3, #1
 8005524:	4652      	mov	r2, sl
 8005526:	4641      	mov	r1, r8
 8005528:	4638      	mov	r0, r7
 800552a:	47c8      	blx	r9
 800552c:	3001      	adds	r0, #1
 800552e:	d103      	bne.n	8005538 <_printf_common+0xac>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005538:	3501      	adds	r5, #1
 800553a:	e7c6      	b.n	80054ca <_printf_common+0x3e>
 800553c:	18e1      	adds	r1, r4, r3
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	2030      	movs	r0, #48	@ 0x30
 8005542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005546:	4422      	add	r2, r4
 8005548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800554c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005550:	3302      	adds	r3, #2
 8005552:	e7c7      	b.n	80054e4 <_printf_common+0x58>
 8005554:	2301      	movs	r3, #1
 8005556:	4622      	mov	r2, r4
 8005558:	4641      	mov	r1, r8
 800555a:	4638      	mov	r0, r7
 800555c:	47c8      	blx	r9
 800555e:	3001      	adds	r0, #1
 8005560:	d0e6      	beq.n	8005530 <_printf_common+0xa4>
 8005562:	3601      	adds	r6, #1
 8005564:	e7d9      	b.n	800551a <_printf_common+0x8e>
	...

08005568 <_printf_i>:
 8005568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	7e0f      	ldrb	r7, [r1, #24]
 800556e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005570:	2f78      	cmp	r7, #120	@ 0x78
 8005572:	4691      	mov	r9, r2
 8005574:	4680      	mov	r8, r0
 8005576:	460c      	mov	r4, r1
 8005578:	469a      	mov	sl, r3
 800557a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557e:	d807      	bhi.n	8005590 <_printf_i+0x28>
 8005580:	2f62      	cmp	r7, #98	@ 0x62
 8005582:	d80a      	bhi.n	800559a <_printf_i+0x32>
 8005584:	2f00      	cmp	r7, #0
 8005586:	f000 80d2 	beq.w	800572e <_printf_i+0x1c6>
 800558a:	2f58      	cmp	r7, #88	@ 0x58
 800558c:	f000 80b9 	beq.w	8005702 <_printf_i+0x19a>
 8005590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005598:	e03a      	b.n	8005610 <_printf_i+0xa8>
 800559a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559e:	2b15      	cmp	r3, #21
 80055a0:	d8f6      	bhi.n	8005590 <_printf_i+0x28>
 80055a2:	a101      	add	r1, pc, #4	@ (adr r1, 80055a8 <_printf_i+0x40>)
 80055a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a8:	08005601 	.word	0x08005601
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005591 	.word	0x08005591
 80055b4:	08005591 	.word	0x08005591
 80055b8:	08005591 	.word	0x08005591
 80055bc:	08005591 	.word	0x08005591
 80055c0:	08005615 	.word	0x08005615
 80055c4:	08005591 	.word	0x08005591
 80055c8:	08005591 	.word	0x08005591
 80055cc:	08005591 	.word	0x08005591
 80055d0:	08005591 	.word	0x08005591
 80055d4:	08005715 	.word	0x08005715
 80055d8:	0800563f 	.word	0x0800563f
 80055dc:	080056cf 	.word	0x080056cf
 80055e0:	08005591 	.word	0x08005591
 80055e4:	08005591 	.word	0x08005591
 80055e8:	08005737 	.word	0x08005737
 80055ec:	08005591 	.word	0x08005591
 80055f0:	0800563f 	.word	0x0800563f
 80055f4:	08005591 	.word	0x08005591
 80055f8:	08005591 	.word	0x08005591
 80055fc:	080056d7 	.word	0x080056d7
 8005600:	6833      	ldr	r3, [r6, #0]
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6032      	str	r2, [r6, #0]
 8005608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800560c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005610:	2301      	movs	r3, #1
 8005612:	e09d      	b.n	8005750 <_printf_i+0x1e8>
 8005614:	6833      	ldr	r3, [r6, #0]
 8005616:	6820      	ldr	r0, [r4, #0]
 8005618:	1d19      	adds	r1, r3, #4
 800561a:	6031      	str	r1, [r6, #0]
 800561c:	0606      	lsls	r6, r0, #24
 800561e:	d501      	bpl.n	8005624 <_printf_i+0xbc>
 8005620:	681d      	ldr	r5, [r3, #0]
 8005622:	e003      	b.n	800562c <_printf_i+0xc4>
 8005624:	0645      	lsls	r5, r0, #25
 8005626:	d5fb      	bpl.n	8005620 <_printf_i+0xb8>
 8005628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800562c:	2d00      	cmp	r5, #0
 800562e:	da03      	bge.n	8005638 <_printf_i+0xd0>
 8005630:	232d      	movs	r3, #45	@ 0x2d
 8005632:	426d      	negs	r5, r5
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005638:	4859      	ldr	r0, [pc, #356]	@ (80057a0 <_printf_i+0x238>)
 800563a:	230a      	movs	r3, #10
 800563c:	e011      	b.n	8005662 <_printf_i+0xfa>
 800563e:	6821      	ldr	r1, [r4, #0]
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	0608      	lsls	r0, r1, #24
 8005644:	f853 5b04 	ldr.w	r5, [r3], #4
 8005648:	d402      	bmi.n	8005650 <_printf_i+0xe8>
 800564a:	0649      	lsls	r1, r1, #25
 800564c:	bf48      	it	mi
 800564e:	b2ad      	uxthmi	r5, r5
 8005650:	2f6f      	cmp	r7, #111	@ 0x6f
 8005652:	4853      	ldr	r0, [pc, #332]	@ (80057a0 <_printf_i+0x238>)
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	bf14      	ite	ne
 8005658:	230a      	movne	r3, #10
 800565a:	2308      	moveq	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005662:	6866      	ldr	r6, [r4, #4]
 8005664:	60a6      	str	r6, [r4, #8]
 8005666:	2e00      	cmp	r6, #0
 8005668:	bfa2      	ittt	ge
 800566a:	6821      	ldrge	r1, [r4, #0]
 800566c:	f021 0104 	bicge.w	r1, r1, #4
 8005670:	6021      	strge	r1, [r4, #0]
 8005672:	b90d      	cbnz	r5, 8005678 <_printf_i+0x110>
 8005674:	2e00      	cmp	r6, #0
 8005676:	d04b      	beq.n	8005710 <_printf_i+0x1a8>
 8005678:	4616      	mov	r6, r2
 800567a:	fbb5 f1f3 	udiv	r1, r5, r3
 800567e:	fb03 5711 	mls	r7, r3, r1, r5
 8005682:	5dc7      	ldrb	r7, [r0, r7]
 8005684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005688:	462f      	mov	r7, r5
 800568a:	42bb      	cmp	r3, r7
 800568c:	460d      	mov	r5, r1
 800568e:	d9f4      	bls.n	800567a <_printf_i+0x112>
 8005690:	2b08      	cmp	r3, #8
 8005692:	d10b      	bne.n	80056ac <_printf_i+0x144>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	07df      	lsls	r7, r3, #31
 8005698:	d508      	bpl.n	80056ac <_printf_i+0x144>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6861      	ldr	r1, [r4, #4]
 800569e:	4299      	cmp	r1, r3
 80056a0:	bfde      	ittt	le
 80056a2:	2330      	movle	r3, #48	@ 0x30
 80056a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ac:	1b92      	subs	r2, r2, r6
 80056ae:	6122      	str	r2, [r4, #16]
 80056b0:	f8cd a000 	str.w	sl, [sp]
 80056b4:	464b      	mov	r3, r9
 80056b6:	aa03      	add	r2, sp, #12
 80056b8:	4621      	mov	r1, r4
 80056ba:	4640      	mov	r0, r8
 80056bc:	f7ff fee6 	bl	800548c <_printf_common>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d14a      	bne.n	800575a <_printf_i+0x1f2>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b004      	add	sp, #16
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f043 0320 	orr.w	r3, r3, #32
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	4833      	ldr	r0, [pc, #204]	@ (80057a4 <_printf_i+0x23c>)
 80056d8:	2778      	movs	r7, #120	@ 0x78
 80056da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	6831      	ldr	r1, [r6, #0]
 80056e2:	061f      	lsls	r7, r3, #24
 80056e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e8:	d402      	bmi.n	80056f0 <_printf_i+0x188>
 80056ea:	065f      	lsls	r7, r3, #25
 80056ec:	bf48      	it	mi
 80056ee:	b2ad      	uxthmi	r5, r5
 80056f0:	6031      	str	r1, [r6, #0]
 80056f2:	07d9      	lsls	r1, r3, #31
 80056f4:	bf44      	itt	mi
 80056f6:	f043 0320 	orrmi.w	r3, r3, #32
 80056fa:	6023      	strmi	r3, [r4, #0]
 80056fc:	b11d      	cbz	r5, 8005706 <_printf_i+0x19e>
 80056fe:	2310      	movs	r3, #16
 8005700:	e7ac      	b.n	800565c <_printf_i+0xf4>
 8005702:	4827      	ldr	r0, [pc, #156]	@ (80057a0 <_printf_i+0x238>)
 8005704:	e7e9      	b.n	80056da <_printf_i+0x172>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	f023 0320 	bic.w	r3, r3, #32
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	e7f6      	b.n	80056fe <_printf_i+0x196>
 8005710:	4616      	mov	r6, r2
 8005712:	e7bd      	b.n	8005690 <_printf_i+0x128>
 8005714:	6833      	ldr	r3, [r6, #0]
 8005716:	6825      	ldr	r5, [r4, #0]
 8005718:	6961      	ldr	r1, [r4, #20]
 800571a:	1d18      	adds	r0, r3, #4
 800571c:	6030      	str	r0, [r6, #0]
 800571e:	062e      	lsls	r6, r5, #24
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	d501      	bpl.n	8005728 <_printf_i+0x1c0>
 8005724:	6019      	str	r1, [r3, #0]
 8005726:	e002      	b.n	800572e <_printf_i+0x1c6>
 8005728:	0668      	lsls	r0, r5, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0x1bc>
 800572c:	8019      	strh	r1, [r3, #0]
 800572e:	2300      	movs	r3, #0
 8005730:	6123      	str	r3, [r4, #16]
 8005732:	4616      	mov	r6, r2
 8005734:	e7bc      	b.n	80056b0 <_printf_i+0x148>
 8005736:	6833      	ldr	r3, [r6, #0]
 8005738:	1d1a      	adds	r2, r3, #4
 800573a:	6032      	str	r2, [r6, #0]
 800573c:	681e      	ldr	r6, [r3, #0]
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	2100      	movs	r1, #0
 8005742:	4630      	mov	r0, r6
 8005744:	f7fa fd64 	bl	8000210 <memchr>
 8005748:	b108      	cbz	r0, 800574e <_printf_i+0x1e6>
 800574a:	1b80      	subs	r0, r0, r6
 800574c:	6060      	str	r0, [r4, #4]
 800574e:	6863      	ldr	r3, [r4, #4]
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	2300      	movs	r3, #0
 8005754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005758:	e7aa      	b.n	80056b0 <_printf_i+0x148>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	4632      	mov	r2, r6
 800575e:	4649      	mov	r1, r9
 8005760:	4640      	mov	r0, r8
 8005762:	47d0      	blx	sl
 8005764:	3001      	adds	r0, #1
 8005766:	d0ad      	beq.n	80056c4 <_printf_i+0x15c>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	079b      	lsls	r3, r3, #30
 800576c:	d413      	bmi.n	8005796 <_printf_i+0x22e>
 800576e:	68e0      	ldr	r0, [r4, #12]
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	4298      	cmp	r0, r3
 8005774:	bfb8      	it	lt
 8005776:	4618      	movlt	r0, r3
 8005778:	e7a6      	b.n	80056c8 <_printf_i+0x160>
 800577a:	2301      	movs	r3, #1
 800577c:	4632      	mov	r2, r6
 800577e:	4649      	mov	r1, r9
 8005780:	4640      	mov	r0, r8
 8005782:	47d0      	blx	sl
 8005784:	3001      	adds	r0, #1
 8005786:	d09d      	beq.n	80056c4 <_printf_i+0x15c>
 8005788:	3501      	adds	r5, #1
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	9903      	ldr	r1, [sp, #12]
 800578e:	1a5b      	subs	r3, r3, r1
 8005790:	42ab      	cmp	r3, r5
 8005792:	dcf2      	bgt.n	800577a <_printf_i+0x212>
 8005794:	e7eb      	b.n	800576e <_printf_i+0x206>
 8005796:	2500      	movs	r5, #0
 8005798:	f104 0619 	add.w	r6, r4, #25
 800579c:	e7f5      	b.n	800578a <_printf_i+0x222>
 800579e:	bf00      	nop
 80057a0:	08008102 	.word	0x08008102
 80057a4:	08008113 	.word	0x08008113

080057a8 <std>:
 80057a8:	2300      	movs	r3, #0
 80057aa:	b510      	push	{r4, lr}
 80057ac:	4604      	mov	r4, r0
 80057ae:	e9c0 3300 	strd	r3, r3, [r0]
 80057b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057b6:	6083      	str	r3, [r0, #8]
 80057b8:	8181      	strh	r1, [r0, #12]
 80057ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80057bc:	81c2      	strh	r2, [r0, #14]
 80057be:	6183      	str	r3, [r0, #24]
 80057c0:	4619      	mov	r1, r3
 80057c2:	2208      	movs	r2, #8
 80057c4:	305c      	adds	r0, #92	@ 0x5c
 80057c6:	f000 fa07 	bl	8005bd8 <memset>
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <std+0x58>)
 80057cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <std+0x5c>)
 80057d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x60>)
 80057d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x64>)
 80057d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x68>)
 80057dc:	6224      	str	r4, [r4, #32]
 80057de:	429c      	cmp	r4, r3
 80057e0:	d006      	beq.n	80057f0 <std+0x48>
 80057e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057e6:	4294      	cmp	r4, r2
 80057e8:	d002      	beq.n	80057f0 <std+0x48>
 80057ea:	33d0      	adds	r3, #208	@ 0xd0
 80057ec:	429c      	cmp	r4, r3
 80057ee:	d105      	bne.n	80057fc <std+0x54>
 80057f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f8:	f000 ba6a 	b.w	8005cd0 <__retarget_lock_init_recursive>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	08005a29 	.word	0x08005a29
 8005804:	08005a4b 	.word	0x08005a4b
 8005808:	08005a83 	.word	0x08005a83
 800580c:	08005aa7 	.word	0x08005aa7
 8005810:	20000538 	.word	0x20000538

08005814 <stdio_exit_handler>:
 8005814:	4a02      	ldr	r2, [pc, #8]	@ (8005820 <stdio_exit_handler+0xc>)
 8005816:	4903      	ldr	r1, [pc, #12]	@ (8005824 <stdio_exit_handler+0x10>)
 8005818:	4803      	ldr	r0, [pc, #12]	@ (8005828 <stdio_exit_handler+0x14>)
 800581a:	f000 b869 	b.w	80058f0 <_fwalk_sglue>
 800581e:	bf00      	nop
 8005820:	2000000c 	.word	0x2000000c
 8005824:	0800762d 	.word	0x0800762d
 8005828:	2000001c 	.word	0x2000001c

0800582c <cleanup_stdio>:
 800582c:	6841      	ldr	r1, [r0, #4]
 800582e:	4b0c      	ldr	r3, [pc, #48]	@ (8005860 <cleanup_stdio+0x34>)
 8005830:	4299      	cmp	r1, r3
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	d001      	beq.n	800583c <cleanup_stdio+0x10>
 8005838:	f001 fef8 	bl	800762c <_fflush_r>
 800583c:	68a1      	ldr	r1, [r4, #8]
 800583e:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <cleanup_stdio+0x38>)
 8005840:	4299      	cmp	r1, r3
 8005842:	d002      	beq.n	800584a <cleanup_stdio+0x1e>
 8005844:	4620      	mov	r0, r4
 8005846:	f001 fef1 	bl	800762c <_fflush_r>
 800584a:	68e1      	ldr	r1, [r4, #12]
 800584c:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <cleanup_stdio+0x3c>)
 800584e:	4299      	cmp	r1, r3
 8005850:	d004      	beq.n	800585c <cleanup_stdio+0x30>
 8005852:	4620      	mov	r0, r4
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005858:	f001 bee8 	b.w	800762c <_fflush_r>
 800585c:	bd10      	pop	{r4, pc}
 800585e:	bf00      	nop
 8005860:	20000538 	.word	0x20000538
 8005864:	200005a0 	.word	0x200005a0
 8005868:	20000608 	.word	0x20000608

0800586c <global_stdio_init.part.0>:
 800586c:	b510      	push	{r4, lr}
 800586e:	4b0b      	ldr	r3, [pc, #44]	@ (800589c <global_stdio_init.part.0+0x30>)
 8005870:	4c0b      	ldr	r4, [pc, #44]	@ (80058a0 <global_stdio_init.part.0+0x34>)
 8005872:	4a0c      	ldr	r2, [pc, #48]	@ (80058a4 <global_stdio_init.part.0+0x38>)
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	4620      	mov	r0, r4
 8005878:	2200      	movs	r2, #0
 800587a:	2104      	movs	r1, #4
 800587c:	f7ff ff94 	bl	80057a8 <std>
 8005880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005884:	2201      	movs	r2, #1
 8005886:	2109      	movs	r1, #9
 8005888:	f7ff ff8e 	bl	80057a8 <std>
 800588c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005890:	2202      	movs	r2, #2
 8005892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005896:	2112      	movs	r1, #18
 8005898:	f7ff bf86 	b.w	80057a8 <std>
 800589c:	20000670 	.word	0x20000670
 80058a0:	20000538 	.word	0x20000538
 80058a4:	08005815 	.word	0x08005815

080058a8 <__sfp_lock_acquire>:
 80058a8:	4801      	ldr	r0, [pc, #4]	@ (80058b0 <__sfp_lock_acquire+0x8>)
 80058aa:	f000 ba12 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	20000679 	.word	0x20000679

080058b4 <__sfp_lock_release>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__sfp_lock_release+0x8>)
 80058b6:	f000 ba0d 	b.w	8005cd4 <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000679 	.word	0x20000679

080058c0 <__sinit>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	f7ff fff0 	bl	80058a8 <__sfp_lock_acquire>
 80058c8:	6a23      	ldr	r3, [r4, #32]
 80058ca:	b11b      	cbz	r3, 80058d4 <__sinit+0x14>
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f7ff bff0 	b.w	80058b4 <__sfp_lock_release>
 80058d4:	4b04      	ldr	r3, [pc, #16]	@ (80058e8 <__sinit+0x28>)
 80058d6:	6223      	str	r3, [r4, #32]
 80058d8:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <__sinit+0x2c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f5      	bne.n	80058cc <__sinit+0xc>
 80058e0:	f7ff ffc4 	bl	800586c <global_stdio_init.part.0>
 80058e4:	e7f2      	b.n	80058cc <__sinit+0xc>
 80058e6:	bf00      	nop
 80058e8:	0800582d 	.word	0x0800582d
 80058ec:	20000670 	.word	0x20000670

080058f0 <_fwalk_sglue>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	4607      	mov	r7, r0
 80058f6:	4688      	mov	r8, r1
 80058f8:	4614      	mov	r4, r2
 80058fa:	2600      	movs	r6, #0
 80058fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005900:	f1b9 0901 	subs.w	r9, r9, #1
 8005904:	d505      	bpl.n	8005912 <_fwalk_sglue+0x22>
 8005906:	6824      	ldr	r4, [r4, #0]
 8005908:	2c00      	cmp	r4, #0
 800590a:	d1f7      	bne.n	80058fc <_fwalk_sglue+0xc>
 800590c:	4630      	mov	r0, r6
 800590e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d907      	bls.n	8005928 <_fwalk_sglue+0x38>
 8005918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800591c:	3301      	adds	r3, #1
 800591e:	d003      	beq.n	8005928 <_fwalk_sglue+0x38>
 8005920:	4629      	mov	r1, r5
 8005922:	4638      	mov	r0, r7
 8005924:	47c0      	blx	r8
 8005926:	4306      	orrs	r6, r0
 8005928:	3568      	adds	r5, #104	@ 0x68
 800592a:	e7e9      	b.n	8005900 <_fwalk_sglue+0x10>

0800592c <_puts_r>:
 800592c:	6a03      	ldr	r3, [r0, #32]
 800592e:	b570      	push	{r4, r5, r6, lr}
 8005930:	6884      	ldr	r4, [r0, #8]
 8005932:	4605      	mov	r5, r0
 8005934:	460e      	mov	r6, r1
 8005936:	b90b      	cbnz	r3, 800593c <_puts_r+0x10>
 8005938:	f7ff ffc2 	bl	80058c0 <__sinit>
 800593c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800593e:	07db      	lsls	r3, r3, #31
 8005940:	d405      	bmi.n	800594e <_puts_r+0x22>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	0598      	lsls	r0, r3, #22
 8005946:	d402      	bmi.n	800594e <_puts_r+0x22>
 8005948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800594a:	f000 f9c2 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	0719      	lsls	r1, r3, #28
 8005952:	d502      	bpl.n	800595a <_puts_r+0x2e>
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d135      	bne.n	80059c6 <_puts_r+0x9a>
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f8e5 	bl	8005b2c <__swsetup_r>
 8005962:	b380      	cbz	r0, 80059c6 <_puts_r+0x9a>
 8005964:	f04f 35ff 	mov.w	r5, #4294967295
 8005968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800596a:	07da      	lsls	r2, r3, #31
 800596c:	d405      	bmi.n	800597a <_puts_r+0x4e>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	059b      	lsls	r3, r3, #22
 8005972:	d402      	bmi.n	800597a <_puts_r+0x4e>
 8005974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005976:	f000 f9ad 	bl	8005cd4 <__retarget_lock_release_recursive>
 800597a:	4628      	mov	r0, r5
 800597c:	bd70      	pop	{r4, r5, r6, pc}
 800597e:	2b00      	cmp	r3, #0
 8005980:	da04      	bge.n	800598c <_puts_r+0x60>
 8005982:	69a2      	ldr	r2, [r4, #24]
 8005984:	429a      	cmp	r2, r3
 8005986:	dc17      	bgt.n	80059b8 <_puts_r+0x8c>
 8005988:	290a      	cmp	r1, #10
 800598a:	d015      	beq.n	80059b8 <_puts_r+0x8c>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	7019      	strb	r1, [r3, #0]
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800599a:	3b01      	subs	r3, #1
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	2900      	cmp	r1, #0
 80059a0:	d1ed      	bne.n	800597e <_puts_r+0x52>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da11      	bge.n	80059ca <_puts_r+0x9e>
 80059a6:	4622      	mov	r2, r4
 80059a8:	210a      	movs	r1, #10
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f87f 	bl	8005aae <__swbuf_r>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d0d7      	beq.n	8005964 <_puts_r+0x38>
 80059b4:	250a      	movs	r5, #10
 80059b6:	e7d7      	b.n	8005968 <_puts_r+0x3c>
 80059b8:	4622      	mov	r2, r4
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f877 	bl	8005aae <__swbuf_r>
 80059c0:	3001      	adds	r0, #1
 80059c2:	d1e7      	bne.n	8005994 <_puts_r+0x68>
 80059c4:	e7ce      	b.n	8005964 <_puts_r+0x38>
 80059c6:	3e01      	subs	r6, #1
 80059c8:	e7e4      	b.n	8005994 <_puts_r+0x68>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	220a      	movs	r2, #10
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e7ee      	b.n	80059b4 <_puts_r+0x88>
	...

080059d8 <puts>:
 80059d8:	4b02      	ldr	r3, [pc, #8]	@ (80059e4 <puts+0xc>)
 80059da:	4601      	mov	r1, r0
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	f7ff bfa5 	b.w	800592c <_puts_r>
 80059e2:	bf00      	nop
 80059e4:	20000018 	.word	0x20000018

080059e8 <siprintf>:
 80059e8:	b40e      	push	{r1, r2, r3}
 80059ea:	b500      	push	{lr}
 80059ec:	b09c      	sub	sp, #112	@ 0x70
 80059ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80059f0:	9002      	str	r0, [sp, #8]
 80059f2:	9006      	str	r0, [sp, #24]
 80059f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059f8:	4809      	ldr	r0, [pc, #36]	@ (8005a20 <siprintf+0x38>)
 80059fa:	9107      	str	r1, [sp, #28]
 80059fc:	9104      	str	r1, [sp, #16]
 80059fe:	4909      	ldr	r1, [pc, #36]	@ (8005a24 <siprintf+0x3c>)
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	9105      	str	r1, [sp, #20]
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	a902      	add	r1, sp, #8
 8005a0c:	f001 fc8e 	bl	800732c <_svfiprintf_r>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	b01c      	add	sp, #112	@ 0x70
 8005a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a1c:	b003      	add	sp, #12
 8005a1e:	4770      	bx	lr
 8005a20:	20000018 	.word	0x20000018
 8005a24:	ffff0208 	.word	0xffff0208

08005a28 <__sread>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a30:	f000 f900 	bl	8005c34 <_read_r>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	bfab      	itete	ge
 8005a38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a3c:	181b      	addge	r3, r3, r0
 8005a3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a42:	bfac      	ite	ge
 8005a44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a46:	81a3      	strhlt	r3, [r4, #12]
 8005a48:	bd10      	pop	{r4, pc}

08005a4a <__swrite>:
 8005a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4e:	461f      	mov	r7, r3
 8005a50:	898b      	ldrh	r3, [r1, #12]
 8005a52:	05db      	lsls	r3, r3, #23
 8005a54:	4605      	mov	r5, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	4616      	mov	r6, r2
 8005a5a:	d505      	bpl.n	8005a68 <__swrite+0x1e>
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	2302      	movs	r3, #2
 8005a62:	2200      	movs	r2, #0
 8005a64:	f000 f8d4 	bl	8005c10 <_lseek_r>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a72:	81a3      	strh	r3, [r4, #12]
 8005a74:	4632      	mov	r2, r6
 8005a76:	463b      	mov	r3, r7
 8005a78:	4628      	mov	r0, r5
 8005a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	f000 b8eb 	b.w	8005c58 <_write_r>

08005a82 <__sseek>:
 8005a82:	b510      	push	{r4, lr}
 8005a84:	460c      	mov	r4, r1
 8005a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8a:	f000 f8c1 	bl	8005c10 <_lseek_r>
 8005a8e:	1c43      	adds	r3, r0, #1
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	bf15      	itete	ne
 8005a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a9e:	81a3      	strheq	r3, [r4, #12]
 8005aa0:	bf18      	it	ne
 8005aa2:	81a3      	strhne	r3, [r4, #12]
 8005aa4:	bd10      	pop	{r4, pc}

08005aa6 <__sclose>:
 8005aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aaa:	f000 b8a1 	b.w	8005bf0 <_close_r>

08005aae <__swbuf_r>:
 8005aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab0:	460e      	mov	r6, r1
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	b118      	cbz	r0, 8005ac0 <__swbuf_r+0x12>
 8005ab8:	6a03      	ldr	r3, [r0, #32]
 8005aba:	b90b      	cbnz	r3, 8005ac0 <__swbuf_r+0x12>
 8005abc:	f7ff ff00 	bl	80058c0 <__sinit>
 8005ac0:	69a3      	ldr	r3, [r4, #24]
 8005ac2:	60a3      	str	r3, [r4, #8]
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	071a      	lsls	r2, r3, #28
 8005ac8:	d501      	bpl.n	8005ace <__swbuf_r+0x20>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	b943      	cbnz	r3, 8005ae0 <__swbuf_r+0x32>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f82b 	bl	8005b2c <__swsetup_r>
 8005ad6:	b118      	cbz	r0, 8005ae0 <__swbuf_r+0x32>
 8005ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8005adc:	4638      	mov	r0, r7
 8005ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	6922      	ldr	r2, [r4, #16]
 8005ae4:	1a98      	subs	r0, r3, r2
 8005ae6:	6963      	ldr	r3, [r4, #20]
 8005ae8:	b2f6      	uxtb	r6, r6
 8005aea:	4283      	cmp	r3, r0
 8005aec:	4637      	mov	r7, r6
 8005aee:	dc05      	bgt.n	8005afc <__swbuf_r+0x4e>
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f001 fd9a 	bl	800762c <_fflush_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1ed      	bne.n	8005ad8 <__swbuf_r+0x2a>
 8005afc:	68a3      	ldr	r3, [r4, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60a3      	str	r3, [r4, #8]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	701e      	strb	r6, [r3, #0]
 8005b0a:	6962      	ldr	r2, [r4, #20]
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d004      	beq.n	8005b1c <__swbuf_r+0x6e>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	07db      	lsls	r3, r3, #31
 8005b16:	d5e1      	bpl.n	8005adc <__swbuf_r+0x2e>
 8005b18:	2e0a      	cmp	r6, #10
 8005b1a:	d1df      	bne.n	8005adc <__swbuf_r+0x2e>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f001 fd84 	bl	800762c <_fflush_r>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d0d9      	beq.n	8005adc <__swbuf_r+0x2e>
 8005b28:	e7d6      	b.n	8005ad8 <__swbuf_r+0x2a>
	...

08005b2c <__swsetup_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <__swsetup_r+0xa8>)
 8005b30:	4605      	mov	r5, r0
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	460c      	mov	r4, r1
 8005b36:	b118      	cbz	r0, 8005b40 <__swsetup_r+0x14>
 8005b38:	6a03      	ldr	r3, [r0, #32]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <__swsetup_r+0x14>
 8005b3c:	f7ff fec0 	bl	80058c0 <__sinit>
 8005b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d422      	bmi.n	8005b8e <__swsetup_r+0x62>
 8005b48:	06da      	lsls	r2, r3, #27
 8005b4a:	d407      	bmi.n	8005b5c <__swsetup_r+0x30>
 8005b4c:	2209      	movs	r2, #9
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5a:	e033      	b.n	8005bc4 <__swsetup_r+0x98>
 8005b5c:	0758      	lsls	r0, r3, #29
 8005b5e:	d512      	bpl.n	8005b86 <__swsetup_r+0x5a>
 8005b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b62:	b141      	cbz	r1, 8005b76 <__swsetup_r+0x4a>
 8005b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	d002      	beq.n	8005b72 <__swsetup_r+0x46>
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f000 feff 	bl	8006970 <_free_r>
 8005b72:	2300      	movs	r3, #0
 8005b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	b94b      	cbnz	r3, 8005ba6 <__swsetup_r+0x7a>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9c:	d003      	beq.n	8005ba6 <__swsetup_r+0x7a>
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f001 fd91 	bl	80076c8 <__smakebuf_r>
 8005ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005baa:	f013 0201 	ands.w	r2, r3, #1
 8005bae:	d00a      	beq.n	8005bc6 <__swsetup_r+0x9a>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	60a2      	str	r2, [r4, #8]
 8005bb4:	6962      	ldr	r2, [r4, #20]
 8005bb6:	4252      	negs	r2, r2
 8005bb8:	61a2      	str	r2, [r4, #24]
 8005bba:	6922      	ldr	r2, [r4, #16]
 8005bbc:	b942      	cbnz	r2, 8005bd0 <__swsetup_r+0xa4>
 8005bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bc2:	d1c5      	bne.n	8005b50 <__swsetup_r+0x24>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	0799      	lsls	r1, r3, #30
 8005bc8:	bf58      	it	pl
 8005bca:	6962      	ldrpl	r2, [r4, #20]
 8005bcc:	60a2      	str	r2, [r4, #8]
 8005bce:	e7f4      	b.n	8005bba <__swsetup_r+0x8e>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e7f7      	b.n	8005bc4 <__swsetup_r+0x98>
 8005bd4:	20000018 	.word	0x20000018

08005bd8 <memset>:
 8005bd8:	4402      	add	r2, r0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d100      	bne.n	8005be2 <memset+0xa>
 8005be0:	4770      	bx	lr
 8005be2:	f803 1b01 	strb.w	r1, [r3], #1
 8005be6:	e7f9      	b.n	8005bdc <memset+0x4>

08005be8 <_localeconv_r>:
 8005be8:	4800      	ldr	r0, [pc, #0]	@ (8005bec <_localeconv_r+0x4>)
 8005bea:	4770      	bx	lr
 8005bec:	20000158 	.word	0x20000158

08005bf0 <_close_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d06      	ldr	r5, [pc, #24]	@ (8005c0c <_close_r+0x1c>)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	602b      	str	r3, [r5, #0]
 8005bfc:	f7fb fc84 	bl	8001508 <_close>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_close_r+0x1a>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_close_r+0x1a>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	20000674 	.word	0x20000674

08005c10 <_lseek_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_lseek_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fc99 	bl	8001556 <_lseek>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_lseek_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_lseek_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	20000674 	.word	0x20000674

08005c34 <_read_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_read_r+0x20>)
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fb fc43 	bl	80014ce <_read>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_read_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_read_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20000674 	.word	0x20000674

08005c58 <_write_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_write_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fb fadc 	bl	8001224 <_write>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_write_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_write_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	20000674 	.word	0x20000674

08005c7c <__errno>:
 8005c7c:	4b01      	ldr	r3, [pc, #4]	@ (8005c84 <__errno+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000018 	.word	0x20000018

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cc0 <__libc_init_array+0x38>)
 8005c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cc4 <__libc_init_array+0x3c>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	2600      	movs	r6, #0
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	4d0b      	ldr	r5, [pc, #44]	@ (8005cc8 <__libc_init_array+0x40>)
 8005c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005ccc <__libc_init_array+0x44>)
 8005c9c:	f001 ffd0 	bl	8007c40 <_init>
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	08008468 	.word	0x08008468
 8005cc4:	08008468 	.word	0x08008468
 8005cc8:	08008468 	.word	0x08008468
 8005ccc:	0800846c 	.word	0x0800846c

08005cd0 <__retarget_lock_init_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_acquire_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <__retarget_lock_release_recursive>:
 8005cd4:	4770      	bx	lr

08005cd6 <quorem>:
 8005cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cda:	6903      	ldr	r3, [r0, #16]
 8005cdc:	690c      	ldr	r4, [r1, #16]
 8005cde:	42a3      	cmp	r3, r4
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	db7e      	blt.n	8005de2 <quorem+0x10c>
 8005ce4:	3c01      	subs	r4, #1
 8005ce6:	f101 0814 	add.w	r8, r1, #20
 8005cea:	00a3      	lsls	r3, r4, #2
 8005cec:	f100 0514 	add.w	r5, r0, #20
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d00:	3301      	adds	r3, #1
 8005d02:	429a      	cmp	r2, r3
 8005d04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d08:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d0c:	d32e      	bcc.n	8005d6c <quorem+0x96>
 8005d0e:	f04f 0a00 	mov.w	sl, #0
 8005d12:	46c4      	mov	ip, r8
 8005d14:	46ae      	mov	lr, r5
 8005d16:	46d3      	mov	fp, sl
 8005d18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d1c:	b298      	uxth	r0, r3
 8005d1e:	fb06 a000 	mla	r0, r6, r0, sl
 8005d22:	0c02      	lsrs	r2, r0, #16
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	fb06 2303 	mla	r3, r6, r3, r2
 8005d2a:	f8de 2000 	ldr.w	r2, [lr]
 8005d2e:	b280      	uxth	r0, r0
 8005d30:	b292      	uxth	r2, r2
 8005d32:	1a12      	subs	r2, r2, r0
 8005d34:	445a      	add	r2, fp
 8005d36:	f8de 0000 	ldr.w	r0, [lr]
 8005d3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d4e:	45e1      	cmp	r9, ip
 8005d50:	f84e 2b04 	str.w	r2, [lr], #4
 8005d54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d58:	d2de      	bcs.n	8005d18 <quorem+0x42>
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	58eb      	ldr	r3, [r5, r3]
 8005d5e:	b92b      	cbnz	r3, 8005d6c <quorem+0x96>
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	429d      	cmp	r5, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	d32f      	bcc.n	8005dca <quorem+0xf4>
 8005d6a:	613c      	str	r4, [r7, #16]
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f001 f979 	bl	8007064 <__mcmp>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	db25      	blt.n	8005dc2 <quorem+0xec>
 8005d76:	4629      	mov	r1, r5
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d7e:	f8d1 c000 	ldr.w	ip, [r1]
 8005d82:	fa1f fe82 	uxth.w	lr, r2
 8005d86:	fa1f f38c 	uxth.w	r3, ip
 8005d8a:	eba3 030e 	sub.w	r3, r3, lr
 8005d8e:	4403      	add	r3, r0
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005da0:	45c1      	cmp	r9, r8
 8005da2:	f841 3b04 	str.w	r3, [r1], #4
 8005da6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005daa:	d2e6      	bcs.n	8005d7a <quorem+0xa4>
 8005dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005db4:	b922      	cbnz	r2, 8005dc0 <quorem+0xea>
 8005db6:	3b04      	subs	r3, #4
 8005db8:	429d      	cmp	r5, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	d30b      	bcc.n	8005dd6 <quorem+0x100>
 8005dbe:	613c      	str	r4, [r7, #16]
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	b003      	add	sp, #12
 8005dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	3b04      	subs	r3, #4
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d1cb      	bne.n	8005d6a <quorem+0x94>
 8005dd2:	3c01      	subs	r4, #1
 8005dd4:	e7c6      	b.n	8005d64 <quorem+0x8e>
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d1ef      	bne.n	8005dbe <quorem+0xe8>
 8005dde:	3c01      	subs	r4, #1
 8005de0:	e7ea      	b.n	8005db8 <quorem+0xe2>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e7ee      	b.n	8005dc4 <quorem+0xee>
	...

08005de8 <_dtoa_r>:
 8005de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dec:	69c7      	ldr	r7, [r0, #28]
 8005dee:	b099      	sub	sp, #100	@ 0x64
 8005df0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005df4:	ec55 4b10 	vmov	r4, r5, d0
 8005df8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005dfa:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dfc:	4683      	mov	fp, r0
 8005dfe:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e02:	b97f      	cbnz	r7, 8005e24 <_dtoa_r+0x3c>
 8005e04:	2010      	movs	r0, #16
 8005e06:	f000 fdfd 	bl	8006a04 <malloc>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e10:	b920      	cbnz	r0, 8005e1c <_dtoa_r+0x34>
 8005e12:	4ba7      	ldr	r3, [pc, #668]	@ (80060b0 <_dtoa_r+0x2c8>)
 8005e14:	21ef      	movs	r1, #239	@ 0xef
 8005e16:	48a7      	ldr	r0, [pc, #668]	@ (80060b4 <_dtoa_r+0x2cc>)
 8005e18:	f001 fcec 	bl	80077f4 <__assert_func>
 8005e1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e20:	6007      	str	r7, [r0, #0]
 8005e22:	60c7      	str	r7, [r0, #12]
 8005e24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	b159      	cbz	r1, 8005e44 <_dtoa_r+0x5c>
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	604a      	str	r2, [r1, #4]
 8005e30:	2301      	movs	r3, #1
 8005e32:	4093      	lsls	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
 8005e36:	4658      	mov	r0, fp
 8005e38:	f000 feda 	bl	8006bf0 <_Bfree>
 8005e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	1e2b      	subs	r3, r5, #0
 8005e46:	bfb9      	ittee	lt
 8005e48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e4c:	9303      	strlt	r3, [sp, #12]
 8005e4e:	2300      	movge	r3, #0
 8005e50:	6033      	strge	r3, [r6, #0]
 8005e52:	9f03      	ldr	r7, [sp, #12]
 8005e54:	4b98      	ldr	r3, [pc, #608]	@ (80060b8 <_dtoa_r+0x2d0>)
 8005e56:	bfbc      	itt	lt
 8005e58:	2201      	movlt	r2, #1
 8005e5a:	6032      	strlt	r2, [r6, #0]
 8005e5c:	43bb      	bics	r3, r7
 8005e5e:	d112      	bne.n	8005e86 <_dtoa_r+0x9e>
 8005e60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e6c:	4323      	orrs	r3, r4
 8005e6e:	f000 854d 	beq.w	800690c <_dtoa_r+0xb24>
 8005e72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80060cc <_dtoa_r+0x2e4>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 854f 	beq.w	800691c <_dtoa_r+0xb34>
 8005e7e:	f10a 0303 	add.w	r3, sl, #3
 8005e82:	f000 bd49 	b.w	8006918 <_dtoa_r+0xb30>
 8005e86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	ec51 0b17 	vmov	r0, r1, d7
 8005e90:	2300      	movs	r3, #0
 8005e92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e96:	f7fa fe37 	bl	8000b08 <__aeabi_dcmpeq>
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	b158      	cbz	r0, 8005eb6 <_dtoa_r+0xce>
 8005e9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ea6:	b113      	cbz	r3, 8005eae <_dtoa_r+0xc6>
 8005ea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005eaa:	4b84      	ldr	r3, [pc, #528]	@ (80060bc <_dtoa_r+0x2d4>)
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80060d0 <_dtoa_r+0x2e8>
 8005eb2:	f000 bd33 	b.w	800691c <_dtoa_r+0xb34>
 8005eb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005eba:	aa16      	add	r2, sp, #88	@ 0x58
 8005ebc:	a917      	add	r1, sp, #92	@ 0x5c
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	f001 f980 	bl	80071c4 <__d2b>
 8005ec4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ec8:	4681      	mov	r9, r0
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d077      	beq.n	8005fbe <_dtoa_r+0x1d6>
 8005ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005edc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ee0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ee4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2200      	movs	r2, #0
 8005eec:	4b74      	ldr	r3, [pc, #464]	@ (80060c0 <_dtoa_r+0x2d8>)
 8005eee:	f7fa f9eb 	bl	80002c8 <__aeabi_dsub>
 8005ef2:	a369      	add	r3, pc, #420	@ (adr r3, 8006098 <_dtoa_r+0x2b0>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb9e 	bl	8000638 <__aeabi_dmul>
 8005efc:	a368      	add	r3, pc, #416	@ (adr r3, 80060a0 <_dtoa_r+0x2b8>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f9e3 	bl	80002cc <__adddf3>
 8005f06:	4604      	mov	r4, r0
 8005f08:	4630      	mov	r0, r6
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	f7fa fb2a 	bl	8000564 <__aeabi_i2d>
 8005f10:	a365      	add	r3, pc, #404	@ (adr r3, 80060a8 <_dtoa_r+0x2c0>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fb8f 	bl	8000638 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7fa f9d3 	bl	80002cc <__adddf3>
 8005f26:	4604      	mov	r4, r0
 8005f28:	460d      	mov	r5, r1
 8005f2a:	f7fa fe35 	bl	8000b98 <__aeabi_d2iz>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	4607      	mov	r7, r0
 8005f32:	2300      	movs	r3, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa fdf0 	bl	8000b1c <__aeabi_dcmplt>
 8005f3c:	b140      	cbz	r0, 8005f50 <_dtoa_r+0x168>
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f7fa fb10 	bl	8000564 <__aeabi_i2d>
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	f7fa fdde 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4c:	b900      	cbnz	r0, 8005f50 <_dtoa_r+0x168>
 8005f4e:	3f01      	subs	r7, #1
 8005f50:	2f16      	cmp	r7, #22
 8005f52:	d851      	bhi.n	8005ff8 <_dtoa_r+0x210>
 8005f54:	4b5b      	ldr	r3, [pc, #364]	@ (80060c4 <_dtoa_r+0x2dc>)
 8005f56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f62:	f7fa fddb 	bl	8000b1c <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d048      	beq.n	8005ffc <_dtoa_r+0x214>
 8005f6a:	3f01      	subs	r7, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f72:	1b9b      	subs	r3, r3, r6
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	bf44      	itt	mi
 8005f78:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f7c:	2300      	movmi	r3, #0
 8005f7e:	9208      	str	r2, [sp, #32]
 8005f80:	bf54      	ite	pl
 8005f82:	f04f 0800 	movpl.w	r8, #0
 8005f86:	9308      	strmi	r3, [sp, #32]
 8005f88:	2f00      	cmp	r7, #0
 8005f8a:	db39      	blt.n	8006000 <_dtoa_r+0x218>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f90:	443b      	add	r3, r7
 8005f92:	9308      	str	r3, [sp, #32]
 8005f94:	2300      	movs	r3, #0
 8005f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9a:	2b09      	cmp	r3, #9
 8005f9c:	d864      	bhi.n	8006068 <_dtoa_r+0x280>
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	bfc4      	itt	gt
 8005fa2:	3b04      	subgt	r3, #4
 8005fa4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa8:	f1a3 0302 	sub.w	r3, r3, #2
 8005fac:	bfcc      	ite	gt
 8005fae:	2400      	movgt	r4, #0
 8005fb0:	2401      	movle	r4, #1
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d863      	bhi.n	800607e <_dtoa_r+0x296>
 8005fb6:	e8df f003 	tbb	[pc, r3]
 8005fba:	372a      	.short	0x372a
 8005fbc:	5535      	.short	0x5535
 8005fbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005fc2:	441e      	add	r6, r3
 8005fc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	bfc1      	itttt	gt
 8005fcc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fd0:	409f      	lslgt	r7, r3
 8005fd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fda:	bfd6      	itet	le
 8005fdc:	f1c3 0320 	rsble	r3, r3, #32
 8005fe0:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fe4:	fa04 f003 	lslle.w	r0, r4, r3
 8005fe8:	f7fa faac 	bl	8000544 <__aeabi_ui2d>
 8005fec:	2201      	movs	r2, #1
 8005fee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005ff2:	3e01      	subs	r6, #1
 8005ff4:	9214      	str	r2, [sp, #80]	@ 0x50
 8005ff6:	e777      	b.n	8005ee8 <_dtoa_r+0x100>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e7b8      	b.n	8005f6e <_dtoa_r+0x186>
 8005ffc:	9012      	str	r0, [sp, #72]	@ 0x48
 8005ffe:	e7b7      	b.n	8005f70 <_dtoa_r+0x188>
 8006000:	427b      	negs	r3, r7
 8006002:	930a      	str	r3, [sp, #40]	@ 0x28
 8006004:	2300      	movs	r3, #0
 8006006:	eba8 0807 	sub.w	r8, r8, r7
 800600a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800600c:	e7c4      	b.n	8005f98 <_dtoa_r+0x1b0>
 800600e:	2300      	movs	r3, #0
 8006010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	dc35      	bgt.n	8006084 <_dtoa_r+0x29c>
 8006018:	2301      	movs	r3, #1
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	9307      	str	r3, [sp, #28]
 800601e:	461a      	mov	r2, r3
 8006020:	920e      	str	r2, [sp, #56]	@ 0x38
 8006022:	e00b      	b.n	800603c <_dtoa_r+0x254>
 8006024:	2301      	movs	r3, #1
 8006026:	e7f3      	b.n	8006010 <_dtoa_r+0x228>
 8006028:	2300      	movs	r3, #0
 800602a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800602c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	9307      	str	r3, [sp, #28]
 8006038:	bfb8      	it	lt
 800603a:	2301      	movlt	r3, #1
 800603c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006040:	2100      	movs	r1, #0
 8006042:	2204      	movs	r2, #4
 8006044:	f102 0514 	add.w	r5, r2, #20
 8006048:	429d      	cmp	r5, r3
 800604a:	d91f      	bls.n	800608c <_dtoa_r+0x2a4>
 800604c:	6041      	str	r1, [r0, #4]
 800604e:	4658      	mov	r0, fp
 8006050:	f000 fd8e 	bl	8006b70 <_Balloc>
 8006054:	4682      	mov	sl, r0
 8006056:	2800      	cmp	r0, #0
 8006058:	d13c      	bne.n	80060d4 <_dtoa_r+0x2ec>
 800605a:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <_dtoa_r+0x2e0>)
 800605c:	4602      	mov	r2, r0
 800605e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006062:	e6d8      	b.n	8005e16 <_dtoa_r+0x2e>
 8006064:	2301      	movs	r3, #1
 8006066:	e7e0      	b.n	800602a <_dtoa_r+0x242>
 8006068:	2401      	movs	r4, #1
 800606a:	2300      	movs	r3, #0
 800606c:	9309      	str	r3, [sp, #36]	@ 0x24
 800606e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	9307      	str	r3, [sp, #28]
 8006078:	2200      	movs	r2, #0
 800607a:	2312      	movs	r3, #18
 800607c:	e7d0      	b.n	8006020 <_dtoa_r+0x238>
 800607e:	2301      	movs	r3, #1
 8006080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006082:	e7f5      	b.n	8006070 <_dtoa_r+0x288>
 8006084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	9307      	str	r3, [sp, #28]
 800608a:	e7d7      	b.n	800603c <_dtoa_r+0x254>
 800608c:	3101      	adds	r1, #1
 800608e:	0052      	lsls	r2, r2, #1
 8006090:	e7d8      	b.n	8006044 <_dtoa_r+0x25c>
 8006092:	bf00      	nop
 8006094:	f3af 8000 	nop.w
 8006098:	636f4361 	.word	0x636f4361
 800609c:	3fd287a7 	.word	0x3fd287a7
 80060a0:	8b60c8b3 	.word	0x8b60c8b3
 80060a4:	3fc68a28 	.word	0x3fc68a28
 80060a8:	509f79fb 	.word	0x509f79fb
 80060ac:	3fd34413 	.word	0x3fd34413
 80060b0:	08008131 	.word	0x08008131
 80060b4:	08008148 	.word	0x08008148
 80060b8:	7ff00000 	.word	0x7ff00000
 80060bc:	08008101 	.word	0x08008101
 80060c0:	3ff80000 	.word	0x3ff80000
 80060c4:	08008240 	.word	0x08008240
 80060c8:	080081a0 	.word	0x080081a0
 80060cc:	0800812d 	.word	0x0800812d
 80060d0:	08008100 	.word	0x08008100
 80060d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060d8:	6018      	str	r0, [r3, #0]
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	2b0e      	cmp	r3, #14
 80060de:	f200 80a4 	bhi.w	800622a <_dtoa_r+0x442>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	f000 80a1 	beq.w	800622a <_dtoa_r+0x442>
 80060e8:	2f00      	cmp	r7, #0
 80060ea:	dd33      	ble.n	8006154 <_dtoa_r+0x36c>
 80060ec:	4bad      	ldr	r3, [pc, #692]	@ (80063a4 <_dtoa_r+0x5bc>)
 80060ee:	f007 020f 	and.w	r2, r7, #15
 80060f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f6:	ed93 7b00 	vldr	d7, [r3]
 80060fa:	05f8      	lsls	r0, r7, #23
 80060fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006100:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006104:	d516      	bpl.n	8006134 <_dtoa_r+0x34c>
 8006106:	4ba8      	ldr	r3, [pc, #672]	@ (80063a8 <_dtoa_r+0x5c0>)
 8006108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800610c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006110:	f7fa fbbc 	bl	800088c <__aeabi_ddiv>
 8006114:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006118:	f004 040f 	and.w	r4, r4, #15
 800611c:	2603      	movs	r6, #3
 800611e:	4da2      	ldr	r5, [pc, #648]	@ (80063a8 <_dtoa_r+0x5c0>)
 8006120:	b954      	cbnz	r4, 8006138 <_dtoa_r+0x350>
 8006122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612a:	f7fa fbaf 	bl	800088c <__aeabi_ddiv>
 800612e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006132:	e028      	b.n	8006186 <_dtoa_r+0x39e>
 8006134:	2602      	movs	r6, #2
 8006136:	e7f2      	b.n	800611e <_dtoa_r+0x336>
 8006138:	07e1      	lsls	r1, r4, #31
 800613a:	d508      	bpl.n	800614e <_dtoa_r+0x366>
 800613c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006140:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006144:	f7fa fa78 	bl	8000638 <__aeabi_dmul>
 8006148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800614c:	3601      	adds	r6, #1
 800614e:	1064      	asrs	r4, r4, #1
 8006150:	3508      	adds	r5, #8
 8006152:	e7e5      	b.n	8006120 <_dtoa_r+0x338>
 8006154:	f000 80d2 	beq.w	80062fc <_dtoa_r+0x514>
 8006158:	427c      	negs	r4, r7
 800615a:	4b92      	ldr	r3, [pc, #584]	@ (80063a4 <_dtoa_r+0x5bc>)
 800615c:	4d92      	ldr	r5, [pc, #584]	@ (80063a8 <_dtoa_r+0x5c0>)
 800615e:	f004 020f 	and.w	r2, r4, #15
 8006162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800616e:	f7fa fa63 	bl	8000638 <__aeabi_dmul>
 8006172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006176:	1124      	asrs	r4, r4, #4
 8006178:	2300      	movs	r3, #0
 800617a:	2602      	movs	r6, #2
 800617c:	2c00      	cmp	r4, #0
 800617e:	f040 80b2 	bne.w	80062e6 <_dtoa_r+0x4fe>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1d3      	bne.n	800612e <_dtoa_r+0x346>
 8006186:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006188:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80b7 	beq.w	8006300 <_dtoa_r+0x518>
 8006192:	4b86      	ldr	r3, [pc, #536]	@ (80063ac <_dtoa_r+0x5c4>)
 8006194:	2200      	movs	r2, #0
 8006196:	4620      	mov	r0, r4
 8006198:	4629      	mov	r1, r5
 800619a:	f7fa fcbf 	bl	8000b1c <__aeabi_dcmplt>
 800619e:	2800      	cmp	r0, #0
 80061a0:	f000 80ae 	beq.w	8006300 <_dtoa_r+0x518>
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80aa 	beq.w	8006300 <_dtoa_r+0x518>
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	dd37      	ble.n	8006222 <_dtoa_r+0x43a>
 80061b2:	1e7b      	subs	r3, r7, #1
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	4620      	mov	r0, r4
 80061b8:	4b7d      	ldr	r3, [pc, #500]	@ (80063b0 <_dtoa_r+0x5c8>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	4629      	mov	r1, r5
 80061be:	f7fa fa3b 	bl	8000638 <__aeabi_dmul>
 80061c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c6:	9c00      	ldr	r4, [sp, #0]
 80061c8:	3601      	adds	r6, #1
 80061ca:	4630      	mov	r0, r6
 80061cc:	f7fa f9ca 	bl	8000564 <__aeabi_i2d>
 80061d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d4:	f7fa fa30 	bl	8000638 <__aeabi_dmul>
 80061d8:	4b76      	ldr	r3, [pc, #472]	@ (80063b4 <_dtoa_r+0x5cc>)
 80061da:	2200      	movs	r2, #0
 80061dc:	f7fa f876 	bl	80002cc <__adddf3>
 80061e0:	4605      	mov	r5, r0
 80061e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061e6:	2c00      	cmp	r4, #0
 80061e8:	f040 808d 	bne.w	8006306 <_dtoa_r+0x51e>
 80061ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f0:	4b71      	ldr	r3, [pc, #452]	@ (80063b8 <_dtoa_r+0x5d0>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	f7fa f868 	bl	80002c8 <__aeabi_dsub>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006200:	462a      	mov	r2, r5
 8006202:	4633      	mov	r3, r6
 8006204:	f7fa fca8 	bl	8000b58 <__aeabi_dcmpgt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 828b 	bne.w	8006724 <_dtoa_r+0x93c>
 800620e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006212:	462a      	mov	r2, r5
 8006214:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006218:	f7fa fc80 	bl	8000b1c <__aeabi_dcmplt>
 800621c:	2800      	cmp	r0, #0
 800621e:	f040 8128 	bne.w	8006472 <_dtoa_r+0x68a>
 8006222:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006226:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800622a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800622c:	2b00      	cmp	r3, #0
 800622e:	f2c0 815a 	blt.w	80064e6 <_dtoa_r+0x6fe>
 8006232:	2f0e      	cmp	r7, #14
 8006234:	f300 8157 	bgt.w	80064e6 <_dtoa_r+0x6fe>
 8006238:	4b5a      	ldr	r3, [pc, #360]	@ (80063a4 <_dtoa_r+0x5bc>)
 800623a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800623e:	ed93 7b00 	vldr	d7, [r3]
 8006242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	ed8d 7b00 	vstr	d7, [sp]
 800624a:	da03      	bge.n	8006254 <_dtoa_r+0x46c>
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f340 8101 	ble.w	8006456 <_dtoa_r+0x66e>
 8006254:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006258:	4656      	mov	r6, sl
 800625a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625e:	4620      	mov	r0, r4
 8006260:	4629      	mov	r1, r5
 8006262:	f7fa fb13 	bl	800088c <__aeabi_ddiv>
 8006266:	f7fa fc97 	bl	8000b98 <__aeabi_d2iz>
 800626a:	4680      	mov	r8, r0
 800626c:	f7fa f97a 	bl	8000564 <__aeabi_i2d>
 8006270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006274:	f7fa f9e0 	bl	8000638 <__aeabi_dmul>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4620      	mov	r0, r4
 800627e:	4629      	mov	r1, r5
 8006280:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006284:	f7fa f820 	bl	80002c8 <__aeabi_dsub>
 8006288:	f806 4b01 	strb.w	r4, [r6], #1
 800628c:	9d07      	ldr	r5, [sp, #28]
 800628e:	eba6 040a 	sub.w	r4, r6, sl
 8006292:	42a5      	cmp	r5, r4
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	f040 8117 	bne.w	80064ca <_dtoa_r+0x6e2>
 800629c:	f7fa f816 	bl	80002cc <__adddf3>
 80062a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	f7fa fc56 	bl	8000b58 <__aeabi_dcmpgt>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	f040 80f9 	bne.w	80064a4 <_dtoa_r+0x6bc>
 80062b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fc25 	bl	8000b08 <__aeabi_dcmpeq>
 80062be:	b118      	cbz	r0, 80062c8 <_dtoa_r+0x4e0>
 80062c0:	f018 0f01 	tst.w	r8, #1
 80062c4:	f040 80ee 	bne.w	80064a4 <_dtoa_r+0x6bc>
 80062c8:	4649      	mov	r1, r9
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fc90 	bl	8006bf0 <_Bfree>
 80062d0:	2300      	movs	r3, #0
 80062d2:	7033      	strb	r3, [r6, #0]
 80062d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80062d6:	3701      	adds	r7, #1
 80062d8:	601f      	str	r7, [r3, #0]
 80062da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 831d 	beq.w	800691c <_dtoa_r+0xb34>
 80062e2:	601e      	str	r6, [r3, #0]
 80062e4:	e31a      	b.n	800691c <_dtoa_r+0xb34>
 80062e6:	07e2      	lsls	r2, r4, #31
 80062e8:	d505      	bpl.n	80062f6 <_dtoa_r+0x50e>
 80062ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062ee:	f7fa f9a3 	bl	8000638 <__aeabi_dmul>
 80062f2:	3601      	adds	r6, #1
 80062f4:	2301      	movs	r3, #1
 80062f6:	1064      	asrs	r4, r4, #1
 80062f8:	3508      	adds	r5, #8
 80062fa:	e73f      	b.n	800617c <_dtoa_r+0x394>
 80062fc:	2602      	movs	r6, #2
 80062fe:	e742      	b.n	8006186 <_dtoa_r+0x39e>
 8006300:	9c07      	ldr	r4, [sp, #28]
 8006302:	9704      	str	r7, [sp, #16]
 8006304:	e761      	b.n	80061ca <_dtoa_r+0x3e2>
 8006306:	4b27      	ldr	r3, [pc, #156]	@ (80063a4 <_dtoa_r+0x5bc>)
 8006308:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800630a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800630e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006312:	4454      	add	r4, sl
 8006314:	2900      	cmp	r1, #0
 8006316:	d053      	beq.n	80063c0 <_dtoa_r+0x5d8>
 8006318:	4928      	ldr	r1, [pc, #160]	@ (80063bc <_dtoa_r+0x5d4>)
 800631a:	2000      	movs	r0, #0
 800631c:	f7fa fab6 	bl	800088c <__aeabi_ddiv>
 8006320:	4633      	mov	r3, r6
 8006322:	462a      	mov	r2, r5
 8006324:	f7f9 ffd0 	bl	80002c8 <__aeabi_dsub>
 8006328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800632c:	4656      	mov	r6, sl
 800632e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006332:	f7fa fc31 	bl	8000b98 <__aeabi_d2iz>
 8006336:	4605      	mov	r5, r0
 8006338:	f7fa f914 	bl	8000564 <__aeabi_i2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006344:	f7f9 ffc0 	bl	80002c8 <__aeabi_dsub>
 8006348:	3530      	adds	r5, #48	@ 0x30
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006352:	f806 5b01 	strb.w	r5, [r6], #1
 8006356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800635a:	f7fa fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	d171      	bne.n	8006446 <_dtoa_r+0x65e>
 8006362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006366:	4911      	ldr	r1, [pc, #68]	@ (80063ac <_dtoa_r+0x5c4>)
 8006368:	2000      	movs	r0, #0
 800636a:	f7f9 ffad 	bl	80002c8 <__aeabi_dsub>
 800636e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006372:	f7fa fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8006376:	2800      	cmp	r0, #0
 8006378:	f040 8095 	bne.w	80064a6 <_dtoa_r+0x6be>
 800637c:	42a6      	cmp	r6, r4
 800637e:	f43f af50 	beq.w	8006222 <_dtoa_r+0x43a>
 8006382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006386:	4b0a      	ldr	r3, [pc, #40]	@ (80063b0 <_dtoa_r+0x5c8>)
 8006388:	2200      	movs	r2, #0
 800638a:	f7fa f955 	bl	8000638 <__aeabi_dmul>
 800638e:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <_dtoa_r+0x5c8>)
 8006390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006394:	2200      	movs	r2, #0
 8006396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639a:	f7fa f94d 	bl	8000638 <__aeabi_dmul>
 800639e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a2:	e7c4      	b.n	800632e <_dtoa_r+0x546>
 80063a4:	08008240 	.word	0x08008240
 80063a8:	08008218 	.word	0x08008218
 80063ac:	3ff00000 	.word	0x3ff00000
 80063b0:	40240000 	.word	0x40240000
 80063b4:	401c0000 	.word	0x401c0000
 80063b8:	40140000 	.word	0x40140000
 80063bc:	3fe00000 	.word	0x3fe00000
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	f7fa f938 	bl	8000638 <__aeabi_dmul>
 80063c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80063ce:	4656      	mov	r6, sl
 80063d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d4:	f7fa fbe0 	bl	8000b98 <__aeabi_d2iz>
 80063d8:	4605      	mov	r5, r0
 80063da:	f7fa f8c3 	bl	8000564 <__aeabi_i2d>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e6:	f7f9 ff6f 	bl	80002c8 <__aeabi_dsub>
 80063ea:	3530      	adds	r5, #48	@ 0x30
 80063ec:	f806 5b01 	strb.w	r5, [r6], #1
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	d124      	bne.n	800644a <_dtoa_r+0x662>
 8006400:	4bac      	ldr	r3, [pc, #688]	@ (80066b4 <_dtoa_r+0x8cc>)
 8006402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006406:	f7f9 ff61 	bl	80002cc <__adddf3>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006412:	f7fa fba1 	bl	8000b58 <__aeabi_dcmpgt>
 8006416:	2800      	cmp	r0, #0
 8006418:	d145      	bne.n	80064a6 <_dtoa_r+0x6be>
 800641a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800641e:	49a5      	ldr	r1, [pc, #660]	@ (80066b4 <_dtoa_r+0x8cc>)
 8006420:	2000      	movs	r0, #0
 8006422:	f7f9 ff51 	bl	80002c8 <__aeabi_dsub>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642e:	f7fa fb75 	bl	8000b1c <__aeabi_dcmplt>
 8006432:	2800      	cmp	r0, #0
 8006434:	f43f aef5 	beq.w	8006222 <_dtoa_r+0x43a>
 8006438:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800643a:	1e73      	subs	r3, r6, #1
 800643c:	9315      	str	r3, [sp, #84]	@ 0x54
 800643e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006442:	2b30      	cmp	r3, #48	@ 0x30
 8006444:	d0f8      	beq.n	8006438 <_dtoa_r+0x650>
 8006446:	9f04      	ldr	r7, [sp, #16]
 8006448:	e73e      	b.n	80062c8 <_dtoa_r+0x4e0>
 800644a:	4b9b      	ldr	r3, [pc, #620]	@ (80066b8 <_dtoa_r+0x8d0>)
 800644c:	f7fa f8f4 	bl	8000638 <__aeabi_dmul>
 8006450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006454:	e7bc      	b.n	80063d0 <_dtoa_r+0x5e8>
 8006456:	d10c      	bne.n	8006472 <_dtoa_r+0x68a>
 8006458:	4b98      	ldr	r3, [pc, #608]	@ (80066bc <_dtoa_r+0x8d4>)
 800645a:	2200      	movs	r2, #0
 800645c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006460:	f7fa f8ea 	bl	8000638 <__aeabi_dmul>
 8006464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006468:	f7fa fb6c 	bl	8000b44 <__aeabi_dcmpge>
 800646c:	2800      	cmp	r0, #0
 800646e:	f000 8157 	beq.w	8006720 <_dtoa_r+0x938>
 8006472:	2400      	movs	r4, #0
 8006474:	4625      	mov	r5, r4
 8006476:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006478:	43db      	mvns	r3, r3
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	4656      	mov	r6, sl
 800647e:	2700      	movs	r7, #0
 8006480:	4621      	mov	r1, r4
 8006482:	4658      	mov	r0, fp
 8006484:	f000 fbb4 	bl	8006bf0 <_Bfree>
 8006488:	2d00      	cmp	r5, #0
 800648a:	d0dc      	beq.n	8006446 <_dtoa_r+0x65e>
 800648c:	b12f      	cbz	r7, 800649a <_dtoa_r+0x6b2>
 800648e:	42af      	cmp	r7, r5
 8006490:	d003      	beq.n	800649a <_dtoa_r+0x6b2>
 8006492:	4639      	mov	r1, r7
 8006494:	4658      	mov	r0, fp
 8006496:	f000 fbab 	bl	8006bf0 <_Bfree>
 800649a:	4629      	mov	r1, r5
 800649c:	4658      	mov	r0, fp
 800649e:	f000 fba7 	bl	8006bf0 <_Bfree>
 80064a2:	e7d0      	b.n	8006446 <_dtoa_r+0x65e>
 80064a4:	9704      	str	r7, [sp, #16]
 80064a6:	4633      	mov	r3, r6
 80064a8:	461e      	mov	r6, r3
 80064aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064ae:	2a39      	cmp	r2, #57	@ 0x39
 80064b0:	d107      	bne.n	80064c2 <_dtoa_r+0x6da>
 80064b2:	459a      	cmp	sl, r3
 80064b4:	d1f8      	bne.n	80064a8 <_dtoa_r+0x6c0>
 80064b6:	9a04      	ldr	r2, [sp, #16]
 80064b8:	3201      	adds	r2, #1
 80064ba:	9204      	str	r2, [sp, #16]
 80064bc:	2230      	movs	r2, #48	@ 0x30
 80064be:	f88a 2000 	strb.w	r2, [sl]
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	3201      	adds	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e7bd      	b.n	8006446 <_dtoa_r+0x65e>
 80064ca:	4b7b      	ldr	r3, [pc, #492]	@ (80066b8 <_dtoa_r+0x8d0>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	f7fa f8b3 	bl	8000638 <__aeabi_dmul>
 80064d2:	2200      	movs	r2, #0
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	460d      	mov	r5, r1
 80064da:	f7fa fb15 	bl	8000b08 <__aeabi_dcmpeq>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f aebb 	beq.w	800625a <_dtoa_r+0x472>
 80064e4:	e6f0      	b.n	80062c8 <_dtoa_r+0x4e0>
 80064e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	f000 80db 	beq.w	80066a4 <_dtoa_r+0x8bc>
 80064ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	f300 80bf 	bgt.w	8006674 <_dtoa_r+0x88c>
 80064f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064f8:	2a00      	cmp	r2, #0
 80064fa:	f000 80b7 	beq.w	800666c <_dtoa_r+0x884>
 80064fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006502:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006504:	4646      	mov	r6, r8
 8006506:	9a08      	ldr	r2, [sp, #32]
 8006508:	2101      	movs	r1, #1
 800650a:	441a      	add	r2, r3
 800650c:	4658      	mov	r0, fp
 800650e:	4498      	add	r8, r3
 8006510:	9208      	str	r2, [sp, #32]
 8006512:	f000 fc21 	bl	8006d58 <__i2b>
 8006516:	4605      	mov	r5, r0
 8006518:	b15e      	cbz	r6, 8006532 <_dtoa_r+0x74a>
 800651a:	9b08      	ldr	r3, [sp, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	dd08      	ble.n	8006532 <_dtoa_r+0x74a>
 8006520:	42b3      	cmp	r3, r6
 8006522:	9a08      	ldr	r2, [sp, #32]
 8006524:	bfa8      	it	ge
 8006526:	4633      	movge	r3, r6
 8006528:	eba8 0803 	sub.w	r8, r8, r3
 800652c:	1af6      	subs	r6, r6, r3
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006534:	b1f3      	cbz	r3, 8006574 <_dtoa_r+0x78c>
 8006536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80b7 	beq.w	80066ac <_dtoa_r+0x8c4>
 800653e:	b18c      	cbz	r4, 8006564 <_dtoa_r+0x77c>
 8006540:	4629      	mov	r1, r5
 8006542:	4622      	mov	r2, r4
 8006544:	4658      	mov	r0, fp
 8006546:	f000 fcc7 	bl	8006ed8 <__pow5mult>
 800654a:	464a      	mov	r2, r9
 800654c:	4601      	mov	r1, r0
 800654e:	4605      	mov	r5, r0
 8006550:	4658      	mov	r0, fp
 8006552:	f000 fc17 	bl	8006d84 <__multiply>
 8006556:	4649      	mov	r1, r9
 8006558:	9004      	str	r0, [sp, #16]
 800655a:	4658      	mov	r0, fp
 800655c:	f000 fb48 	bl	8006bf0 <_Bfree>
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	4699      	mov	r9, r3
 8006564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006566:	1b1a      	subs	r2, r3, r4
 8006568:	d004      	beq.n	8006574 <_dtoa_r+0x78c>
 800656a:	4649      	mov	r1, r9
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fcb3 	bl	8006ed8 <__pow5mult>
 8006572:	4681      	mov	r9, r0
 8006574:	2101      	movs	r1, #1
 8006576:	4658      	mov	r0, fp
 8006578:	f000 fbee 	bl	8006d58 <__i2b>
 800657c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657e:	4604      	mov	r4, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 81cf 	beq.w	8006924 <_dtoa_r+0xb3c>
 8006586:	461a      	mov	r2, r3
 8006588:	4601      	mov	r1, r0
 800658a:	4658      	mov	r0, fp
 800658c:	f000 fca4 	bl	8006ed8 <__pow5mult>
 8006590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006592:	2b01      	cmp	r3, #1
 8006594:	4604      	mov	r4, r0
 8006596:	f300 8095 	bgt.w	80066c4 <_dtoa_r+0x8dc>
 800659a:	9b02      	ldr	r3, [sp, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 8087 	bne.w	80066b0 <_dtoa_r+0x8c8>
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 8089 	bne.w	80066c0 <_dtoa_r+0x8d8>
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065b4:	0d1b      	lsrs	r3, r3, #20
 80065b6:	051b      	lsls	r3, r3, #20
 80065b8:	b12b      	cbz	r3, 80065c6 <_dtoa_r+0x7de>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	3301      	adds	r3, #1
 80065be:	9308      	str	r3, [sp, #32]
 80065c0:	f108 0801 	add.w	r8, r8, #1
 80065c4:	2301      	movs	r3, #1
 80065c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 81b0 	beq.w	8006930 <_dtoa_r+0xb48>
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d6:	6918      	ldr	r0, [r3, #16]
 80065d8:	f000 fb72 	bl	8006cc0 <__hi0bits>
 80065dc:	f1c0 0020 	rsb	r0, r0, #32
 80065e0:	9b08      	ldr	r3, [sp, #32]
 80065e2:	4418      	add	r0, r3
 80065e4:	f010 001f 	ands.w	r0, r0, #31
 80065e8:	d077      	beq.n	80066da <_dtoa_r+0x8f2>
 80065ea:	f1c0 0320 	rsb	r3, r0, #32
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	dd6b      	ble.n	80066ca <_dtoa_r+0x8e2>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	f1c0 001c 	rsb	r0, r0, #28
 80065f8:	4403      	add	r3, r0
 80065fa:	4480      	add	r8, r0
 80065fc:	4406      	add	r6, r0
 80065fe:	9308      	str	r3, [sp, #32]
 8006600:	f1b8 0f00 	cmp.w	r8, #0
 8006604:	dd05      	ble.n	8006612 <_dtoa_r+0x82a>
 8006606:	4649      	mov	r1, r9
 8006608:	4642      	mov	r2, r8
 800660a:	4658      	mov	r0, fp
 800660c:	f000 fcbe 	bl	8006f8c <__lshift>
 8006610:	4681      	mov	r9, r0
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd05      	ble.n	8006624 <_dtoa_r+0x83c>
 8006618:	4621      	mov	r1, r4
 800661a:	461a      	mov	r2, r3
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fcb5 	bl	8006f8c <__lshift>
 8006622:	4604      	mov	r4, r0
 8006624:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006626:	2b00      	cmp	r3, #0
 8006628:	d059      	beq.n	80066de <_dtoa_r+0x8f6>
 800662a:	4621      	mov	r1, r4
 800662c:	4648      	mov	r0, r9
 800662e:	f000 fd19 	bl	8007064 <__mcmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	da53      	bge.n	80066de <_dtoa_r+0x8f6>
 8006636:	1e7b      	subs	r3, r7, #1
 8006638:	9304      	str	r3, [sp, #16]
 800663a:	4649      	mov	r1, r9
 800663c:	2300      	movs	r3, #0
 800663e:	220a      	movs	r2, #10
 8006640:	4658      	mov	r0, fp
 8006642:	f000 faf7 	bl	8006c34 <__multadd>
 8006646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006648:	4681      	mov	r9, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8172 	beq.w	8006934 <_dtoa_r+0xb4c>
 8006650:	2300      	movs	r3, #0
 8006652:	4629      	mov	r1, r5
 8006654:	220a      	movs	r2, #10
 8006656:	4658      	mov	r0, fp
 8006658:	f000 faec 	bl	8006c34 <__multadd>
 800665c:	9b00      	ldr	r3, [sp, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	4605      	mov	r5, r0
 8006662:	dc67      	bgt.n	8006734 <_dtoa_r+0x94c>
 8006664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006666:	2b02      	cmp	r3, #2
 8006668:	dc41      	bgt.n	80066ee <_dtoa_r+0x906>
 800666a:	e063      	b.n	8006734 <_dtoa_r+0x94c>
 800666c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800666e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006672:	e746      	b.n	8006502 <_dtoa_r+0x71a>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	1e5c      	subs	r4, r3, #1
 8006678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667a:	42a3      	cmp	r3, r4
 800667c:	bfbf      	itttt	lt
 800667e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006680:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006682:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006684:	1ae3      	sublt	r3, r4, r3
 8006686:	bfb4      	ite	lt
 8006688:	18d2      	addlt	r2, r2, r3
 800668a:	1b1c      	subge	r4, r3, r4
 800668c:	9b07      	ldr	r3, [sp, #28]
 800668e:	bfbc      	itt	lt
 8006690:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006692:	2400      	movlt	r4, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfb5      	itete	lt
 8006698:	eba8 0603 	sublt.w	r6, r8, r3
 800669c:	9b07      	ldrge	r3, [sp, #28]
 800669e:	2300      	movlt	r3, #0
 80066a0:	4646      	movge	r6, r8
 80066a2:	e730      	b.n	8006506 <_dtoa_r+0x71e>
 80066a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066a8:	4646      	mov	r6, r8
 80066aa:	e735      	b.n	8006518 <_dtoa_r+0x730>
 80066ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066ae:	e75c      	b.n	800656a <_dtoa_r+0x782>
 80066b0:	2300      	movs	r3, #0
 80066b2:	e788      	b.n	80065c6 <_dtoa_r+0x7de>
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	40240000 	.word	0x40240000
 80066bc:	40140000 	.word	0x40140000
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	e780      	b.n	80065c6 <_dtoa_r+0x7de>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c8:	e782      	b.n	80065d0 <_dtoa_r+0x7e8>
 80066ca:	d099      	beq.n	8006600 <_dtoa_r+0x818>
 80066cc:	9a08      	ldr	r2, [sp, #32]
 80066ce:	331c      	adds	r3, #28
 80066d0:	441a      	add	r2, r3
 80066d2:	4498      	add	r8, r3
 80066d4:	441e      	add	r6, r3
 80066d6:	9208      	str	r2, [sp, #32]
 80066d8:	e792      	b.n	8006600 <_dtoa_r+0x818>
 80066da:	4603      	mov	r3, r0
 80066dc:	e7f6      	b.n	80066cc <_dtoa_r+0x8e4>
 80066de:	9b07      	ldr	r3, [sp, #28]
 80066e0:	9704      	str	r7, [sp, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dc20      	bgt.n	8006728 <_dtoa_r+0x940>
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	dd1e      	ble.n	800672c <_dtoa_r+0x944>
 80066ee:	9b00      	ldr	r3, [sp, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f47f aec0 	bne.w	8006476 <_dtoa_r+0x68e>
 80066f6:	4621      	mov	r1, r4
 80066f8:	2205      	movs	r2, #5
 80066fa:	4658      	mov	r0, fp
 80066fc:	f000 fa9a 	bl	8006c34 <__multadd>
 8006700:	4601      	mov	r1, r0
 8006702:	4604      	mov	r4, r0
 8006704:	4648      	mov	r0, r9
 8006706:	f000 fcad 	bl	8007064 <__mcmp>
 800670a:	2800      	cmp	r0, #0
 800670c:	f77f aeb3 	ble.w	8006476 <_dtoa_r+0x68e>
 8006710:	4656      	mov	r6, sl
 8006712:	2331      	movs	r3, #49	@ 0x31
 8006714:	f806 3b01 	strb.w	r3, [r6], #1
 8006718:	9b04      	ldr	r3, [sp, #16]
 800671a:	3301      	adds	r3, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	e6ae      	b.n	800647e <_dtoa_r+0x696>
 8006720:	9c07      	ldr	r4, [sp, #28]
 8006722:	9704      	str	r7, [sp, #16]
 8006724:	4625      	mov	r5, r4
 8006726:	e7f3      	b.n	8006710 <_dtoa_r+0x928>
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8104 	beq.w	800693c <_dtoa_r+0xb54>
 8006734:	2e00      	cmp	r6, #0
 8006736:	dd05      	ble.n	8006744 <_dtoa_r+0x95c>
 8006738:	4629      	mov	r1, r5
 800673a:	4632      	mov	r2, r6
 800673c:	4658      	mov	r0, fp
 800673e:	f000 fc25 	bl	8006f8c <__lshift>
 8006742:	4605      	mov	r5, r0
 8006744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d05a      	beq.n	8006800 <_dtoa_r+0xa18>
 800674a:	6869      	ldr	r1, [r5, #4]
 800674c:	4658      	mov	r0, fp
 800674e:	f000 fa0f 	bl	8006b70 <_Balloc>
 8006752:	4606      	mov	r6, r0
 8006754:	b928      	cbnz	r0, 8006762 <_dtoa_r+0x97a>
 8006756:	4b84      	ldr	r3, [pc, #528]	@ (8006968 <_dtoa_r+0xb80>)
 8006758:	4602      	mov	r2, r0
 800675a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800675e:	f7ff bb5a 	b.w	8005e16 <_dtoa_r+0x2e>
 8006762:	692a      	ldr	r2, [r5, #16]
 8006764:	3202      	adds	r2, #2
 8006766:	0092      	lsls	r2, r2, #2
 8006768:	f105 010c 	add.w	r1, r5, #12
 800676c:	300c      	adds	r0, #12
 800676e:	f001 f833 	bl	80077d8 <memcpy>
 8006772:	2201      	movs	r2, #1
 8006774:	4631      	mov	r1, r6
 8006776:	4658      	mov	r0, fp
 8006778:	f000 fc08 	bl	8006f8c <__lshift>
 800677c:	f10a 0301 	add.w	r3, sl, #1
 8006780:	9307      	str	r3, [sp, #28]
 8006782:	9b00      	ldr	r3, [sp, #0]
 8006784:	4453      	add	r3, sl
 8006786:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006788:	9b02      	ldr	r3, [sp, #8]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	462f      	mov	r7, r5
 8006790:	930a      	str	r3, [sp, #40]	@ 0x28
 8006792:	4605      	mov	r5, r0
 8006794:	9b07      	ldr	r3, [sp, #28]
 8006796:	4621      	mov	r1, r4
 8006798:	3b01      	subs	r3, #1
 800679a:	4648      	mov	r0, r9
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	f7ff fa9a 	bl	8005cd6 <quorem>
 80067a2:	4639      	mov	r1, r7
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067aa:	4648      	mov	r0, r9
 80067ac:	f000 fc5a 	bl	8007064 <__mcmp>
 80067b0:	462a      	mov	r2, r5
 80067b2:	9008      	str	r0, [sp, #32]
 80067b4:	4621      	mov	r1, r4
 80067b6:	4658      	mov	r0, fp
 80067b8:	f000 fc70 	bl	800709c <__mdiff>
 80067bc:	68c2      	ldr	r2, [r0, #12]
 80067be:	4606      	mov	r6, r0
 80067c0:	bb02      	cbnz	r2, 8006804 <_dtoa_r+0xa1c>
 80067c2:	4601      	mov	r1, r0
 80067c4:	4648      	mov	r0, r9
 80067c6:	f000 fc4d 	bl	8007064 <__mcmp>
 80067ca:	4602      	mov	r2, r0
 80067cc:	4631      	mov	r1, r6
 80067ce:	4658      	mov	r0, fp
 80067d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80067d2:	f000 fa0d 	bl	8006bf0 <_Bfree>
 80067d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067da:	9e07      	ldr	r6, [sp, #28]
 80067dc:	ea43 0102 	orr.w	r1, r3, r2
 80067e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e2:	4319      	orrs	r1, r3
 80067e4:	d110      	bne.n	8006808 <_dtoa_r+0xa20>
 80067e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067ea:	d029      	beq.n	8006840 <_dtoa_r+0xa58>
 80067ec:	9b08      	ldr	r3, [sp, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd02      	ble.n	80067f8 <_dtoa_r+0xa10>
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	f883 8000 	strb.w	r8, [r3]
 80067fe:	e63f      	b.n	8006480 <_dtoa_r+0x698>
 8006800:	4628      	mov	r0, r5
 8006802:	e7bb      	b.n	800677c <_dtoa_r+0x994>
 8006804:	2201      	movs	r2, #1
 8006806:	e7e1      	b.n	80067cc <_dtoa_r+0x9e4>
 8006808:	9b08      	ldr	r3, [sp, #32]
 800680a:	2b00      	cmp	r3, #0
 800680c:	db04      	blt.n	8006818 <_dtoa_r+0xa30>
 800680e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006810:	430b      	orrs	r3, r1
 8006812:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006814:	430b      	orrs	r3, r1
 8006816:	d120      	bne.n	800685a <_dtoa_r+0xa72>
 8006818:	2a00      	cmp	r2, #0
 800681a:	dded      	ble.n	80067f8 <_dtoa_r+0xa10>
 800681c:	4649      	mov	r1, r9
 800681e:	2201      	movs	r2, #1
 8006820:	4658      	mov	r0, fp
 8006822:	f000 fbb3 	bl	8006f8c <__lshift>
 8006826:	4621      	mov	r1, r4
 8006828:	4681      	mov	r9, r0
 800682a:	f000 fc1b 	bl	8007064 <__mcmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	dc03      	bgt.n	800683a <_dtoa_r+0xa52>
 8006832:	d1e1      	bne.n	80067f8 <_dtoa_r+0xa10>
 8006834:	f018 0f01 	tst.w	r8, #1
 8006838:	d0de      	beq.n	80067f8 <_dtoa_r+0xa10>
 800683a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800683e:	d1d8      	bne.n	80067f2 <_dtoa_r+0xa0a>
 8006840:	9a00      	ldr	r2, [sp, #0]
 8006842:	2339      	movs	r3, #57	@ 0x39
 8006844:	7013      	strb	r3, [r2, #0]
 8006846:	4633      	mov	r3, r6
 8006848:	461e      	mov	r6, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006850:	2a39      	cmp	r2, #57	@ 0x39
 8006852:	d052      	beq.n	80068fa <_dtoa_r+0xb12>
 8006854:	3201      	adds	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e612      	b.n	8006480 <_dtoa_r+0x698>
 800685a:	2a00      	cmp	r2, #0
 800685c:	dd07      	ble.n	800686e <_dtoa_r+0xa86>
 800685e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006862:	d0ed      	beq.n	8006840 <_dtoa_r+0xa58>
 8006864:	9a00      	ldr	r2, [sp, #0]
 8006866:	f108 0301 	add.w	r3, r8, #1
 800686a:	7013      	strb	r3, [r2, #0]
 800686c:	e608      	b.n	8006480 <_dtoa_r+0x698>
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	9a07      	ldr	r2, [sp, #28]
 8006872:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006878:	4293      	cmp	r3, r2
 800687a:	d028      	beq.n	80068ce <_dtoa_r+0xae6>
 800687c:	4649      	mov	r1, r9
 800687e:	2300      	movs	r3, #0
 8006880:	220a      	movs	r2, #10
 8006882:	4658      	mov	r0, fp
 8006884:	f000 f9d6 	bl	8006c34 <__multadd>
 8006888:	42af      	cmp	r7, r5
 800688a:	4681      	mov	r9, r0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	f04f 020a 	mov.w	r2, #10
 8006894:	4639      	mov	r1, r7
 8006896:	4658      	mov	r0, fp
 8006898:	d107      	bne.n	80068aa <_dtoa_r+0xac2>
 800689a:	f000 f9cb 	bl	8006c34 <__multadd>
 800689e:	4607      	mov	r7, r0
 80068a0:	4605      	mov	r5, r0
 80068a2:	9b07      	ldr	r3, [sp, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	e774      	b.n	8006794 <_dtoa_r+0x9ac>
 80068aa:	f000 f9c3 	bl	8006c34 <__multadd>
 80068ae:	4629      	mov	r1, r5
 80068b0:	4607      	mov	r7, r0
 80068b2:	2300      	movs	r3, #0
 80068b4:	220a      	movs	r2, #10
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 f9bc 	bl	8006c34 <__multadd>
 80068bc:	4605      	mov	r5, r0
 80068be:	e7f0      	b.n	80068a2 <_dtoa_r+0xaba>
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bfcc      	ite	gt
 80068c6:	461e      	movgt	r6, r3
 80068c8:	2601      	movle	r6, #1
 80068ca:	4456      	add	r6, sl
 80068cc:	2700      	movs	r7, #0
 80068ce:	4649      	mov	r1, r9
 80068d0:	2201      	movs	r2, #1
 80068d2:	4658      	mov	r0, fp
 80068d4:	f000 fb5a 	bl	8006f8c <__lshift>
 80068d8:	4621      	mov	r1, r4
 80068da:	4681      	mov	r9, r0
 80068dc:	f000 fbc2 	bl	8007064 <__mcmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	dcb0      	bgt.n	8006846 <_dtoa_r+0xa5e>
 80068e4:	d102      	bne.n	80068ec <_dtoa_r+0xb04>
 80068e6:	f018 0f01 	tst.w	r8, #1
 80068ea:	d1ac      	bne.n	8006846 <_dtoa_r+0xa5e>
 80068ec:	4633      	mov	r3, r6
 80068ee:	461e      	mov	r6, r3
 80068f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068f4:	2a30      	cmp	r2, #48	@ 0x30
 80068f6:	d0fa      	beq.n	80068ee <_dtoa_r+0xb06>
 80068f8:	e5c2      	b.n	8006480 <_dtoa_r+0x698>
 80068fa:	459a      	cmp	sl, r3
 80068fc:	d1a4      	bne.n	8006848 <_dtoa_r+0xa60>
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	3301      	adds	r3, #1
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	2331      	movs	r3, #49	@ 0x31
 8006906:	f88a 3000 	strb.w	r3, [sl]
 800690a:	e5b9      	b.n	8006480 <_dtoa_r+0x698>
 800690c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800690e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800696c <_dtoa_r+0xb84>
 8006912:	b11b      	cbz	r3, 800691c <_dtoa_r+0xb34>
 8006914:	f10a 0308 	add.w	r3, sl, #8
 8006918:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	4650      	mov	r0, sl
 800691e:	b019      	add	sp, #100	@ 0x64
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006926:	2b01      	cmp	r3, #1
 8006928:	f77f ae37 	ble.w	800659a <_dtoa_r+0x7b2>
 800692c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800692e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006930:	2001      	movs	r0, #1
 8006932:	e655      	b.n	80065e0 <_dtoa_r+0x7f8>
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f77f aed6 	ble.w	80066e8 <_dtoa_r+0x900>
 800693c:	4656      	mov	r6, sl
 800693e:	4621      	mov	r1, r4
 8006940:	4648      	mov	r0, r9
 8006942:	f7ff f9c8 	bl	8005cd6 <quorem>
 8006946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800694a:	f806 8b01 	strb.w	r8, [r6], #1
 800694e:	9b00      	ldr	r3, [sp, #0]
 8006950:	eba6 020a 	sub.w	r2, r6, sl
 8006954:	4293      	cmp	r3, r2
 8006956:	ddb3      	ble.n	80068c0 <_dtoa_r+0xad8>
 8006958:	4649      	mov	r1, r9
 800695a:	2300      	movs	r3, #0
 800695c:	220a      	movs	r2, #10
 800695e:	4658      	mov	r0, fp
 8006960:	f000 f968 	bl	8006c34 <__multadd>
 8006964:	4681      	mov	r9, r0
 8006966:	e7ea      	b.n	800693e <_dtoa_r+0xb56>
 8006968:	080081a0 	.word	0x080081a0
 800696c:	08008124 	.word	0x08008124

08006970 <_free_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	d041      	beq.n	80069fc <_free_r+0x8c>
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f0c      	subs	r4, r1, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	18e4      	addlt	r4, r4, r3
 8006984:	f000 f8e8 	bl	8006b58 <__malloc_lock>
 8006988:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <_free_r+0x90>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	b933      	cbnz	r3, 800699c <_free_r+0x2c>
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	6014      	str	r4, [r2, #0]
 8006992:	4628      	mov	r0, r5
 8006994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006998:	f000 b8e4 	b.w	8006b64 <__malloc_unlock>
 800699c:	42a3      	cmp	r3, r4
 800699e:	d908      	bls.n	80069b2 <_free_r+0x42>
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	1821      	adds	r1, r4, r0
 80069a4:	428b      	cmp	r3, r1
 80069a6:	bf01      	itttt	eq
 80069a8:	6819      	ldreq	r1, [r3, #0]
 80069aa:	685b      	ldreq	r3, [r3, #4]
 80069ac:	1809      	addeq	r1, r1, r0
 80069ae:	6021      	streq	r1, [r4, #0]
 80069b0:	e7ed      	b.n	800698e <_free_r+0x1e>
 80069b2:	461a      	mov	r2, r3
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	b10b      	cbz	r3, 80069bc <_free_r+0x4c>
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	d9fa      	bls.n	80069b2 <_free_r+0x42>
 80069bc:	6811      	ldr	r1, [r2, #0]
 80069be:	1850      	adds	r0, r2, r1
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d10b      	bne.n	80069dc <_free_r+0x6c>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	4401      	add	r1, r0
 80069c8:	1850      	adds	r0, r2, r1
 80069ca:	4283      	cmp	r3, r0
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	d1e0      	bne.n	8006992 <_free_r+0x22>
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	6053      	str	r3, [r2, #4]
 80069d6:	4408      	add	r0, r1
 80069d8:	6010      	str	r0, [r2, #0]
 80069da:	e7da      	b.n	8006992 <_free_r+0x22>
 80069dc:	d902      	bls.n	80069e4 <_free_r+0x74>
 80069de:	230c      	movs	r3, #12
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	e7d6      	b.n	8006992 <_free_r+0x22>
 80069e4:	6820      	ldr	r0, [r4, #0]
 80069e6:	1821      	adds	r1, r4, r0
 80069e8:	428b      	cmp	r3, r1
 80069ea:	bf04      	itt	eq
 80069ec:	6819      	ldreq	r1, [r3, #0]
 80069ee:	685b      	ldreq	r3, [r3, #4]
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	bf04      	itt	eq
 80069f4:	1809      	addeq	r1, r1, r0
 80069f6:	6021      	streq	r1, [r4, #0]
 80069f8:	6054      	str	r4, [r2, #4]
 80069fa:	e7ca      	b.n	8006992 <_free_r+0x22>
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	20000680 	.word	0x20000680

08006a04 <malloc>:
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <malloc+0xc>)
 8006a06:	4601      	mov	r1, r0
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f000 b825 	b.w	8006a58 <_malloc_r>
 8006a0e:	bf00      	nop
 8006a10:	20000018 	.word	0x20000018

08006a14 <sbrk_aligned>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4e0f      	ldr	r6, [pc, #60]	@ (8006a54 <sbrk_aligned+0x40>)
 8006a18:	460c      	mov	r4, r1
 8006a1a:	6831      	ldr	r1, [r6, #0]
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	b911      	cbnz	r1, 8006a26 <sbrk_aligned+0x12>
 8006a20:	f000 feca 	bl	80077b8 <_sbrk_r>
 8006a24:	6030      	str	r0, [r6, #0]
 8006a26:	4621      	mov	r1, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 fec5 	bl	80077b8 <_sbrk_r>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d103      	bne.n	8006a3a <sbrk_aligned+0x26>
 8006a32:	f04f 34ff 	mov.w	r4, #4294967295
 8006a36:	4620      	mov	r0, r4
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
 8006a3a:	1cc4      	adds	r4, r0, #3
 8006a3c:	f024 0403 	bic.w	r4, r4, #3
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d0f8      	beq.n	8006a36 <sbrk_aligned+0x22>
 8006a44:	1a21      	subs	r1, r4, r0
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 feb6 	bl	80077b8 <_sbrk_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1f2      	bne.n	8006a36 <sbrk_aligned+0x22>
 8006a50:	e7ef      	b.n	8006a32 <sbrk_aligned+0x1e>
 8006a52:	bf00      	nop
 8006a54:	2000067c 	.word	0x2000067c

08006a58 <_malloc_r>:
 8006a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a5c:	1ccd      	adds	r5, r1, #3
 8006a5e:	f025 0503 	bic.w	r5, r5, #3
 8006a62:	3508      	adds	r5, #8
 8006a64:	2d0c      	cmp	r5, #12
 8006a66:	bf38      	it	cc
 8006a68:	250c      	movcc	r5, #12
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	db01      	blt.n	8006a74 <_malloc_r+0x1c>
 8006a70:	42a9      	cmp	r1, r5
 8006a72:	d904      	bls.n	8006a7e <_malloc_r+0x26>
 8006a74:	230c      	movs	r3, #12
 8006a76:	6033      	str	r3, [r6, #0]
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b54 <_malloc_r+0xfc>
 8006a82:	f000 f869 	bl	8006b58 <__malloc_lock>
 8006a86:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8a:	461c      	mov	r4, r3
 8006a8c:	bb44      	cbnz	r4, 8006ae0 <_malloc_r+0x88>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff ffbf 	bl	8006a14 <sbrk_aligned>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	4604      	mov	r4, r0
 8006a9a:	d158      	bne.n	8006b4e <_malloc_r+0xf6>
 8006a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006aa0:	4627      	mov	r7, r4
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	d143      	bne.n	8006b2e <_malloc_r+0xd6>
 8006aa6:	2c00      	cmp	r4, #0
 8006aa8:	d04b      	beq.n	8006b42 <_malloc_r+0xea>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4639      	mov	r1, r7
 8006aae:	4630      	mov	r0, r6
 8006ab0:	eb04 0903 	add.w	r9, r4, r3
 8006ab4:	f000 fe80 	bl	80077b8 <_sbrk_r>
 8006ab8:	4581      	cmp	r9, r0
 8006aba:	d142      	bne.n	8006b42 <_malloc_r+0xea>
 8006abc:	6821      	ldr	r1, [r4, #0]
 8006abe:	1a6d      	subs	r5, r5, r1
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7ff ffa6 	bl	8006a14 <sbrk_aligned>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d03a      	beq.n	8006b42 <_malloc_r+0xea>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	442b      	add	r3, r5
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	bb62      	cbnz	r2, 8006b34 <_malloc_r+0xdc>
 8006ada:	f8c8 7000 	str.w	r7, [r8]
 8006ade:	e00f      	b.n	8006b00 <_malloc_r+0xa8>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	1b52      	subs	r2, r2, r5
 8006ae4:	d420      	bmi.n	8006b28 <_malloc_r+0xd0>
 8006ae6:	2a0b      	cmp	r2, #11
 8006ae8:	d917      	bls.n	8006b1a <_malloc_r+0xc2>
 8006aea:	1961      	adds	r1, r4, r5
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	6025      	str	r5, [r4, #0]
 8006af0:	bf18      	it	ne
 8006af2:	6059      	strne	r1, [r3, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	bf08      	it	eq
 8006af8:	f8c8 1000 	streq.w	r1, [r8]
 8006afc:	5162      	str	r2, [r4, r5]
 8006afe:	604b      	str	r3, [r1, #4]
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f82f 	bl	8006b64 <__malloc_unlock>
 8006b06:	f104 000b 	add.w	r0, r4, #11
 8006b0a:	1d23      	adds	r3, r4, #4
 8006b0c:	f020 0007 	bic.w	r0, r0, #7
 8006b10:	1ac2      	subs	r2, r0, r3
 8006b12:	bf1c      	itt	ne
 8006b14:	1a1b      	subne	r3, r3, r0
 8006b16:	50a3      	strne	r3, [r4, r2]
 8006b18:	e7af      	b.n	8006a7a <_malloc_r+0x22>
 8006b1a:	6862      	ldr	r2, [r4, #4]
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	bf0c      	ite	eq
 8006b20:	f8c8 2000 	streq.w	r2, [r8]
 8006b24:	605a      	strne	r2, [r3, #4]
 8006b26:	e7eb      	b.n	8006b00 <_malloc_r+0xa8>
 8006b28:	4623      	mov	r3, r4
 8006b2a:	6864      	ldr	r4, [r4, #4]
 8006b2c:	e7ae      	b.n	8006a8c <_malloc_r+0x34>
 8006b2e:	463c      	mov	r4, r7
 8006b30:	687f      	ldr	r7, [r7, #4]
 8006b32:	e7b6      	b.n	8006aa2 <_malloc_r+0x4a>
 8006b34:	461a      	mov	r2, r3
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d1fb      	bne.n	8006b34 <_malloc_r+0xdc>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	6053      	str	r3, [r2, #4]
 8006b40:	e7de      	b.n	8006b00 <_malloc_r+0xa8>
 8006b42:	230c      	movs	r3, #12
 8006b44:	6033      	str	r3, [r6, #0]
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 f80c 	bl	8006b64 <__malloc_unlock>
 8006b4c:	e794      	b.n	8006a78 <_malloc_r+0x20>
 8006b4e:	6005      	str	r5, [r0, #0]
 8006b50:	e7d6      	b.n	8006b00 <_malloc_r+0xa8>
 8006b52:	bf00      	nop
 8006b54:	20000680 	.word	0x20000680

08006b58 <__malloc_lock>:
 8006b58:	4801      	ldr	r0, [pc, #4]	@ (8006b60 <__malloc_lock+0x8>)
 8006b5a:	f7ff b8ba 	b.w	8005cd2 <__retarget_lock_acquire_recursive>
 8006b5e:	bf00      	nop
 8006b60:	20000678 	.word	0x20000678

08006b64 <__malloc_unlock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	@ (8006b6c <__malloc_unlock+0x8>)
 8006b66:	f7ff b8b5 	b.w	8005cd4 <__retarget_lock_release_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	20000678 	.word	0x20000678

08006b70 <_Balloc>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	69c6      	ldr	r6, [r0, #28]
 8006b74:	4604      	mov	r4, r0
 8006b76:	460d      	mov	r5, r1
 8006b78:	b976      	cbnz	r6, 8006b98 <_Balloc+0x28>
 8006b7a:	2010      	movs	r0, #16
 8006b7c:	f7ff ff42 	bl	8006a04 <malloc>
 8006b80:	4602      	mov	r2, r0
 8006b82:	61e0      	str	r0, [r4, #28]
 8006b84:	b920      	cbnz	r0, 8006b90 <_Balloc+0x20>
 8006b86:	4b18      	ldr	r3, [pc, #96]	@ (8006be8 <_Balloc+0x78>)
 8006b88:	4818      	ldr	r0, [pc, #96]	@ (8006bec <_Balloc+0x7c>)
 8006b8a:	216b      	movs	r1, #107	@ 0x6b
 8006b8c:	f000 fe32 	bl	80077f4 <__assert_func>
 8006b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b94:	6006      	str	r6, [r0, #0]
 8006b96:	60c6      	str	r6, [r0, #12]
 8006b98:	69e6      	ldr	r6, [r4, #28]
 8006b9a:	68f3      	ldr	r3, [r6, #12]
 8006b9c:	b183      	cbz	r3, 8006bc0 <_Balloc+0x50>
 8006b9e:	69e3      	ldr	r3, [r4, #28]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ba6:	b9b8      	cbnz	r0, 8006bd8 <_Balloc+0x68>
 8006ba8:	2101      	movs	r1, #1
 8006baa:	fa01 f605 	lsl.w	r6, r1, r5
 8006bae:	1d72      	adds	r2, r6, #5
 8006bb0:	0092      	lsls	r2, r2, #2
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 fe3c 	bl	8007830 <_calloc_r>
 8006bb8:	b160      	cbz	r0, 8006bd4 <_Balloc+0x64>
 8006bba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bbe:	e00e      	b.n	8006bde <_Balloc+0x6e>
 8006bc0:	2221      	movs	r2, #33	@ 0x21
 8006bc2:	2104      	movs	r1, #4
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fe33 	bl	8007830 <_calloc_r>
 8006bca:	69e3      	ldr	r3, [r4, #28]
 8006bcc:	60f0      	str	r0, [r6, #12]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e4      	bne.n	8006b9e <_Balloc+0x2e>
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	6802      	ldr	r2, [r0, #0]
 8006bda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bde:	2300      	movs	r3, #0
 8006be0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006be4:	e7f7      	b.n	8006bd6 <_Balloc+0x66>
 8006be6:	bf00      	nop
 8006be8:	08008131 	.word	0x08008131
 8006bec:	080081b1 	.word	0x080081b1

08006bf0 <_Bfree>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	69c6      	ldr	r6, [r0, #28]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b976      	cbnz	r6, 8006c18 <_Bfree+0x28>
 8006bfa:	2010      	movs	r0, #16
 8006bfc:	f7ff ff02 	bl	8006a04 <malloc>
 8006c00:	4602      	mov	r2, r0
 8006c02:	61e8      	str	r0, [r5, #28]
 8006c04:	b920      	cbnz	r0, 8006c10 <_Bfree+0x20>
 8006c06:	4b09      	ldr	r3, [pc, #36]	@ (8006c2c <_Bfree+0x3c>)
 8006c08:	4809      	ldr	r0, [pc, #36]	@ (8006c30 <_Bfree+0x40>)
 8006c0a:	218f      	movs	r1, #143	@ 0x8f
 8006c0c:	f000 fdf2 	bl	80077f4 <__assert_func>
 8006c10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c14:	6006      	str	r6, [r0, #0]
 8006c16:	60c6      	str	r6, [r0, #12]
 8006c18:	b13c      	cbz	r4, 8006c2a <_Bfree+0x3a>
 8006c1a:	69eb      	ldr	r3, [r5, #28]
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c24:	6021      	str	r1, [r4, #0]
 8006c26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	08008131 	.word	0x08008131
 8006c30:	080081b1 	.word	0x080081b1

08006c34 <__multadd>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	690d      	ldr	r5, [r1, #16]
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	461e      	mov	r6, r3
 8006c40:	f101 0c14 	add.w	ip, r1, #20
 8006c44:	2000      	movs	r0, #0
 8006c46:	f8dc 3000 	ldr.w	r3, [ip]
 8006c4a:	b299      	uxth	r1, r3
 8006c4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006c50:	0c1e      	lsrs	r6, r3, #16
 8006c52:	0c0b      	lsrs	r3, r1, #16
 8006c54:	fb02 3306 	mla	r3, r2, r6, r3
 8006c58:	b289      	uxth	r1, r1
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c60:	4285      	cmp	r5, r0
 8006c62:	f84c 1b04 	str.w	r1, [ip], #4
 8006c66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c6a:	dcec      	bgt.n	8006c46 <__multadd+0x12>
 8006c6c:	b30e      	cbz	r6, 8006cb2 <__multadd+0x7e>
 8006c6e:	68a3      	ldr	r3, [r4, #8]
 8006c70:	42ab      	cmp	r3, r5
 8006c72:	dc19      	bgt.n	8006ca8 <__multadd+0x74>
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	4638      	mov	r0, r7
 8006c78:	3101      	adds	r1, #1
 8006c7a:	f7ff ff79 	bl	8006b70 <_Balloc>
 8006c7e:	4680      	mov	r8, r0
 8006c80:	b928      	cbnz	r0, 8006c8e <__multadd+0x5a>
 8006c82:	4602      	mov	r2, r0
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <__multadd+0x84>)
 8006c86:	480d      	ldr	r0, [pc, #52]	@ (8006cbc <__multadd+0x88>)
 8006c88:	21ba      	movs	r1, #186	@ 0xba
 8006c8a:	f000 fdb3 	bl	80077f4 <__assert_func>
 8006c8e:	6922      	ldr	r2, [r4, #16]
 8006c90:	3202      	adds	r2, #2
 8006c92:	f104 010c 	add.w	r1, r4, #12
 8006c96:	0092      	lsls	r2, r2, #2
 8006c98:	300c      	adds	r0, #12
 8006c9a:	f000 fd9d 	bl	80077d8 <memcpy>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff ffa5 	bl	8006bf0 <_Bfree>
 8006ca6:	4644      	mov	r4, r8
 8006ca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cac:	3501      	adds	r5, #1
 8006cae:	615e      	str	r6, [r3, #20]
 8006cb0:	6125      	str	r5, [r4, #16]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb8:	080081a0 	.word	0x080081a0
 8006cbc:	080081b1 	.word	0x080081b1

08006cc0 <__hi0bits>:
 8006cc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	bf36      	itet	cc
 8006cc8:	0403      	lslcc	r3, r0, #16
 8006cca:	2000      	movcs	r0, #0
 8006ccc:	2010      	movcc	r0, #16
 8006cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cd2:	bf3c      	itt	cc
 8006cd4:	021b      	lslcc	r3, r3, #8
 8006cd6:	3008      	addcc	r0, #8
 8006cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cdc:	bf3c      	itt	cc
 8006cde:	011b      	lslcc	r3, r3, #4
 8006ce0:	3004      	addcc	r0, #4
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce6:	bf3c      	itt	cc
 8006ce8:	009b      	lslcc	r3, r3, #2
 8006cea:	3002      	addcc	r0, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db05      	blt.n	8006cfc <__hi0bits+0x3c>
 8006cf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cf4:	f100 0001 	add.w	r0, r0, #1
 8006cf8:	bf08      	it	eq
 8006cfa:	2020      	moveq	r0, #32
 8006cfc:	4770      	bx	lr

08006cfe <__lo0bits>:
 8006cfe:	6803      	ldr	r3, [r0, #0]
 8006d00:	4602      	mov	r2, r0
 8006d02:	f013 0007 	ands.w	r0, r3, #7
 8006d06:	d00b      	beq.n	8006d20 <__lo0bits+0x22>
 8006d08:	07d9      	lsls	r1, r3, #31
 8006d0a:	d421      	bmi.n	8006d50 <__lo0bits+0x52>
 8006d0c:	0798      	lsls	r0, r3, #30
 8006d0e:	bf49      	itett	mi
 8006d10:	085b      	lsrmi	r3, r3, #1
 8006d12:	089b      	lsrpl	r3, r3, #2
 8006d14:	2001      	movmi	r0, #1
 8006d16:	6013      	strmi	r3, [r2, #0]
 8006d18:	bf5c      	itt	pl
 8006d1a:	6013      	strpl	r3, [r2, #0]
 8006d1c:	2002      	movpl	r0, #2
 8006d1e:	4770      	bx	lr
 8006d20:	b299      	uxth	r1, r3
 8006d22:	b909      	cbnz	r1, 8006d28 <__lo0bits+0x2a>
 8006d24:	0c1b      	lsrs	r3, r3, #16
 8006d26:	2010      	movs	r0, #16
 8006d28:	b2d9      	uxtb	r1, r3
 8006d2a:	b909      	cbnz	r1, 8006d30 <__lo0bits+0x32>
 8006d2c:	3008      	adds	r0, #8
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	bf04      	itt	eq
 8006d34:	091b      	lsreq	r3, r3, #4
 8006d36:	3004      	addeq	r0, #4
 8006d38:	0799      	lsls	r1, r3, #30
 8006d3a:	bf04      	itt	eq
 8006d3c:	089b      	lsreq	r3, r3, #2
 8006d3e:	3002      	addeq	r0, #2
 8006d40:	07d9      	lsls	r1, r3, #31
 8006d42:	d403      	bmi.n	8006d4c <__lo0bits+0x4e>
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	f100 0001 	add.w	r0, r0, #1
 8006d4a:	d003      	beq.n	8006d54 <__lo0bits+0x56>
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	4770      	bx	lr
 8006d50:	2000      	movs	r0, #0
 8006d52:	4770      	bx	lr
 8006d54:	2020      	movs	r0, #32
 8006d56:	4770      	bx	lr

08006d58 <__i2b>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	f7ff ff07 	bl	8006b70 <_Balloc>
 8006d62:	4602      	mov	r2, r0
 8006d64:	b928      	cbnz	r0, 8006d72 <__i2b+0x1a>
 8006d66:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <__i2b+0x24>)
 8006d68:	4805      	ldr	r0, [pc, #20]	@ (8006d80 <__i2b+0x28>)
 8006d6a:	f240 1145 	movw	r1, #325	@ 0x145
 8006d6e:	f000 fd41 	bl	80077f4 <__assert_func>
 8006d72:	2301      	movs	r3, #1
 8006d74:	6144      	str	r4, [r0, #20]
 8006d76:	6103      	str	r3, [r0, #16]
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	080081a0 	.word	0x080081a0
 8006d80:	080081b1 	.word	0x080081b1

08006d84 <__multiply>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	4614      	mov	r4, r2
 8006d8a:	690a      	ldr	r2, [r1, #16]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	bfa8      	it	ge
 8006d92:	4623      	movge	r3, r4
 8006d94:	460f      	mov	r7, r1
 8006d96:	bfa4      	itt	ge
 8006d98:	460c      	movge	r4, r1
 8006d9a:	461f      	movge	r7, r3
 8006d9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006da0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	6861      	ldr	r1, [r4, #4]
 8006da8:	eb0a 0609 	add.w	r6, sl, r9
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	b085      	sub	sp, #20
 8006db0:	bfb8      	it	lt
 8006db2:	3101      	addlt	r1, #1
 8006db4:	f7ff fedc 	bl	8006b70 <_Balloc>
 8006db8:	b930      	cbnz	r0, 8006dc8 <__multiply+0x44>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b44      	ldr	r3, [pc, #272]	@ (8006ed0 <__multiply+0x14c>)
 8006dbe:	4845      	ldr	r0, [pc, #276]	@ (8006ed4 <__multiply+0x150>)
 8006dc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dc4:	f000 fd16 	bl	80077f4 <__assert_func>
 8006dc8:	f100 0514 	add.w	r5, r0, #20
 8006dcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dd0:	462b      	mov	r3, r5
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4543      	cmp	r3, r8
 8006dd6:	d321      	bcc.n	8006e1c <__multiply+0x98>
 8006dd8:	f107 0114 	add.w	r1, r7, #20
 8006ddc:	f104 0214 	add.w	r2, r4, #20
 8006de0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006de4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006de8:	9302      	str	r3, [sp, #8]
 8006dea:	1b13      	subs	r3, r2, r4
 8006dec:	3b15      	subs	r3, #21
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	3304      	adds	r3, #4
 8006df4:	f104 0715 	add.w	r7, r4, #21
 8006df8:	42ba      	cmp	r2, r7
 8006dfa:	bf38      	it	cc
 8006dfc:	2304      	movcc	r3, #4
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	9103      	str	r1, [sp, #12]
 8006e04:	428b      	cmp	r3, r1
 8006e06:	d80c      	bhi.n	8006e22 <__multiply+0x9e>
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	dd03      	ble.n	8006e14 <__multiply+0x90>
 8006e0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d05b      	beq.n	8006ecc <__multiply+0x148>
 8006e14:	6106      	str	r6, [r0, #16]
 8006e16:	b005      	add	sp, #20
 8006e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1c:	f843 2b04 	str.w	r2, [r3], #4
 8006e20:	e7d8      	b.n	8006dd4 <__multiply+0x50>
 8006e22:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e26:	f1ba 0f00 	cmp.w	sl, #0
 8006e2a:	d024      	beq.n	8006e76 <__multiply+0xf2>
 8006e2c:	f104 0e14 	add.w	lr, r4, #20
 8006e30:	46a9      	mov	r9, r5
 8006e32:	f04f 0c00 	mov.w	ip, #0
 8006e36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e3a:	f8d9 3000 	ldr.w	r3, [r9]
 8006e3e:	fa1f fb87 	uxth.w	fp, r7
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e4c:	f8d9 7000 	ldr.w	r7, [r9]
 8006e50:	4463      	add	r3, ip
 8006e52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e56:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e64:	4572      	cmp	r2, lr
 8006e66:	f849 3b04 	str.w	r3, [r9], #4
 8006e6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e6e:	d8e2      	bhi.n	8006e36 <__multiply+0xb2>
 8006e70:	9b01      	ldr	r3, [sp, #4]
 8006e72:	f845 c003 	str.w	ip, [r5, r3]
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e7c:	3104      	adds	r1, #4
 8006e7e:	f1b9 0f00 	cmp.w	r9, #0
 8006e82:	d021      	beq.n	8006ec8 <__multiply+0x144>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	f104 0c14 	add.w	ip, r4, #20
 8006e8a:	46ae      	mov	lr, r5
 8006e8c:	f04f 0a00 	mov.w	sl, #0
 8006e90:	f8bc b000 	ldrh.w	fp, [ip]
 8006e94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e98:	fb09 770b 	mla	r7, r9, fp, r7
 8006e9c:	4457      	add	r7, sl
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ea4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ea8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eb0:	f8be 3000 	ldrh.w	r3, [lr]
 8006eb4:	fb09 330a 	mla	r3, r9, sl, r3
 8006eb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ebc:	4562      	cmp	r2, ip
 8006ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ec2:	d8e5      	bhi.n	8006e90 <__multiply+0x10c>
 8006ec4:	9f01      	ldr	r7, [sp, #4]
 8006ec6:	51eb      	str	r3, [r5, r7]
 8006ec8:	3504      	adds	r5, #4
 8006eca:	e799      	b.n	8006e00 <__multiply+0x7c>
 8006ecc:	3e01      	subs	r6, #1
 8006ece:	e79b      	b.n	8006e08 <__multiply+0x84>
 8006ed0:	080081a0 	.word	0x080081a0
 8006ed4:	080081b1 	.word	0x080081b1

08006ed8 <__pow5mult>:
 8006ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	4615      	mov	r5, r2
 8006ede:	f012 0203 	ands.w	r2, r2, #3
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	460e      	mov	r6, r1
 8006ee6:	d007      	beq.n	8006ef8 <__pow5mult+0x20>
 8006ee8:	4c25      	ldr	r4, [pc, #148]	@ (8006f80 <__pow5mult+0xa8>)
 8006eea:	3a01      	subs	r2, #1
 8006eec:	2300      	movs	r3, #0
 8006eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ef2:	f7ff fe9f 	bl	8006c34 <__multadd>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	10ad      	asrs	r5, r5, #2
 8006efa:	d03d      	beq.n	8006f78 <__pow5mult+0xa0>
 8006efc:	69fc      	ldr	r4, [r7, #28]
 8006efe:	b97c      	cbnz	r4, 8006f20 <__pow5mult+0x48>
 8006f00:	2010      	movs	r0, #16
 8006f02:	f7ff fd7f 	bl	8006a04 <malloc>
 8006f06:	4602      	mov	r2, r0
 8006f08:	61f8      	str	r0, [r7, #28]
 8006f0a:	b928      	cbnz	r0, 8006f18 <__pow5mult+0x40>
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f84 <__pow5mult+0xac>)
 8006f0e:	481e      	ldr	r0, [pc, #120]	@ (8006f88 <__pow5mult+0xb0>)
 8006f10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f14:	f000 fc6e 	bl	80077f4 <__assert_func>
 8006f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f1c:	6004      	str	r4, [r0, #0]
 8006f1e:	60c4      	str	r4, [r0, #12]
 8006f20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f28:	b94c      	cbnz	r4, 8006f3e <__pow5mult+0x66>
 8006f2a:	f240 2171 	movw	r1, #625	@ 0x271
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f7ff ff12 	bl	8006d58 <__i2b>
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	6003      	str	r3, [r0, #0]
 8006f3e:	f04f 0900 	mov.w	r9, #0
 8006f42:	07eb      	lsls	r3, r5, #31
 8006f44:	d50a      	bpl.n	8006f5c <__pow5mult+0x84>
 8006f46:	4631      	mov	r1, r6
 8006f48:	4622      	mov	r2, r4
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f7ff ff1a 	bl	8006d84 <__multiply>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4680      	mov	r8, r0
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff fe4b 	bl	8006bf0 <_Bfree>
 8006f5a:	4646      	mov	r6, r8
 8006f5c:	106d      	asrs	r5, r5, #1
 8006f5e:	d00b      	beq.n	8006f78 <__pow5mult+0xa0>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	b938      	cbnz	r0, 8006f74 <__pow5mult+0x9c>
 8006f64:	4622      	mov	r2, r4
 8006f66:	4621      	mov	r1, r4
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff ff0b 	bl	8006d84 <__multiply>
 8006f6e:	6020      	str	r0, [r4, #0]
 8006f70:	f8c0 9000 	str.w	r9, [r0]
 8006f74:	4604      	mov	r4, r0
 8006f76:	e7e4      	b.n	8006f42 <__pow5mult+0x6a>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7e:	bf00      	nop
 8006f80:	0800820c 	.word	0x0800820c
 8006f84:	08008131 	.word	0x08008131
 8006f88:	080081b1 	.word	0x080081b1

08006f8c <__lshift>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	460c      	mov	r4, r1
 8006f92:	6849      	ldr	r1, [r1, #4]
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	4691      	mov	r9, r2
 8006fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fa4:	f108 0601 	add.w	r6, r8, #1
 8006fa8:	42b3      	cmp	r3, r6
 8006faa:	db0b      	blt.n	8006fc4 <__lshift+0x38>
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff fddf 	bl	8006b70 <_Balloc>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b948      	cbnz	r0, 8006fca <__lshift+0x3e>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4b28      	ldr	r3, [pc, #160]	@ (800705c <__lshift+0xd0>)
 8006fba:	4829      	ldr	r0, [pc, #164]	@ (8007060 <__lshift+0xd4>)
 8006fbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fc0:	f000 fc18 	bl	80077f4 <__assert_func>
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__lshift+0x1c>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f100 0114 	add.w	r1, r0, #20
 8006fd0:	f100 0210 	add.w	r2, r0, #16
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	4553      	cmp	r3, sl
 8006fd8:	db33      	blt.n	8007042 <__lshift+0xb6>
 8006fda:	6920      	ldr	r0, [r4, #16]
 8006fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fe0:	f104 0314 	add.w	r3, r4, #20
 8006fe4:	f019 091f 	ands.w	r9, r9, #31
 8006fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ff0:	d02b      	beq.n	800704a <__lshift+0xbe>
 8006ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ff6:	468a      	mov	sl, r1
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	fa00 f009 	lsl.w	r0, r0, r9
 8007000:	4310      	orrs	r0, r2
 8007002:	f84a 0b04 	str.w	r0, [sl], #4
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	459c      	cmp	ip, r3
 800700c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007010:	d8f3      	bhi.n	8006ffa <__lshift+0x6e>
 8007012:	ebac 0304 	sub.w	r3, ip, r4
 8007016:	3b15      	subs	r3, #21
 8007018:	f023 0303 	bic.w	r3, r3, #3
 800701c:	3304      	adds	r3, #4
 800701e:	f104 0015 	add.w	r0, r4, #21
 8007022:	4584      	cmp	ip, r0
 8007024:	bf38      	it	cc
 8007026:	2304      	movcc	r3, #4
 8007028:	50ca      	str	r2, [r1, r3]
 800702a:	b10a      	cbz	r2, 8007030 <__lshift+0xa4>
 800702c:	f108 0602 	add.w	r6, r8, #2
 8007030:	3e01      	subs	r6, #1
 8007032:	4638      	mov	r0, r7
 8007034:	612e      	str	r6, [r5, #16]
 8007036:	4621      	mov	r1, r4
 8007038:	f7ff fdda 	bl	8006bf0 <_Bfree>
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007042:	f842 0f04 	str.w	r0, [r2, #4]!
 8007046:	3301      	adds	r3, #1
 8007048:	e7c5      	b.n	8006fd6 <__lshift+0x4a>
 800704a:	3904      	subs	r1, #4
 800704c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007050:	f841 2f04 	str.w	r2, [r1, #4]!
 8007054:	459c      	cmp	ip, r3
 8007056:	d8f9      	bhi.n	800704c <__lshift+0xc0>
 8007058:	e7ea      	b.n	8007030 <__lshift+0xa4>
 800705a:	bf00      	nop
 800705c:	080081a0 	.word	0x080081a0
 8007060:	080081b1 	.word	0x080081b1

08007064 <__mcmp>:
 8007064:	690a      	ldr	r2, [r1, #16]
 8007066:	4603      	mov	r3, r0
 8007068:	6900      	ldr	r0, [r0, #16]
 800706a:	1a80      	subs	r0, r0, r2
 800706c:	b530      	push	{r4, r5, lr}
 800706e:	d10e      	bne.n	800708e <__mcmp+0x2a>
 8007070:	3314      	adds	r3, #20
 8007072:	3114      	adds	r1, #20
 8007074:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007078:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800707c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007084:	4295      	cmp	r5, r2
 8007086:	d003      	beq.n	8007090 <__mcmp+0x2c>
 8007088:	d205      	bcs.n	8007096 <__mcmp+0x32>
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	bd30      	pop	{r4, r5, pc}
 8007090:	42a3      	cmp	r3, r4
 8007092:	d3f3      	bcc.n	800707c <__mcmp+0x18>
 8007094:	e7fb      	b.n	800708e <__mcmp+0x2a>
 8007096:	2001      	movs	r0, #1
 8007098:	e7f9      	b.n	800708e <__mcmp+0x2a>
	...

0800709c <__mdiff>:
 800709c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	4689      	mov	r9, r1
 80070a2:	4606      	mov	r6, r0
 80070a4:	4611      	mov	r1, r2
 80070a6:	4648      	mov	r0, r9
 80070a8:	4614      	mov	r4, r2
 80070aa:	f7ff ffdb 	bl	8007064 <__mcmp>
 80070ae:	1e05      	subs	r5, r0, #0
 80070b0:	d112      	bne.n	80070d8 <__mdiff+0x3c>
 80070b2:	4629      	mov	r1, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff fd5b 	bl	8006b70 <_Balloc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	b928      	cbnz	r0, 80070ca <__mdiff+0x2e>
 80070be:	4b3f      	ldr	r3, [pc, #252]	@ (80071bc <__mdiff+0x120>)
 80070c0:	f240 2137 	movw	r1, #567	@ 0x237
 80070c4:	483e      	ldr	r0, [pc, #248]	@ (80071c0 <__mdiff+0x124>)
 80070c6:	f000 fb95 	bl	80077f4 <__assert_func>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070d0:	4610      	mov	r0, r2
 80070d2:	b003      	add	sp, #12
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	bfbc      	itt	lt
 80070da:	464b      	movlt	r3, r9
 80070dc:	46a1      	movlt	r9, r4
 80070de:	4630      	mov	r0, r6
 80070e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070e4:	bfba      	itte	lt
 80070e6:	461c      	movlt	r4, r3
 80070e8:	2501      	movlt	r5, #1
 80070ea:	2500      	movge	r5, #0
 80070ec:	f7ff fd40 	bl	8006b70 <_Balloc>
 80070f0:	4602      	mov	r2, r0
 80070f2:	b918      	cbnz	r0, 80070fc <__mdiff+0x60>
 80070f4:	4b31      	ldr	r3, [pc, #196]	@ (80071bc <__mdiff+0x120>)
 80070f6:	f240 2145 	movw	r1, #581	@ 0x245
 80070fa:	e7e3      	b.n	80070c4 <__mdiff+0x28>
 80070fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007100:	6926      	ldr	r6, [r4, #16]
 8007102:	60c5      	str	r5, [r0, #12]
 8007104:	f109 0310 	add.w	r3, r9, #16
 8007108:	f109 0514 	add.w	r5, r9, #20
 800710c:	f104 0e14 	add.w	lr, r4, #20
 8007110:	f100 0b14 	add.w	fp, r0, #20
 8007114:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007118:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	46d9      	mov	r9, fp
 8007120:	f04f 0c00 	mov.w	ip, #0
 8007124:	9b01      	ldr	r3, [sp, #4]
 8007126:	f85e 0b04 	ldr.w	r0, [lr], #4
 800712a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	fa1f f38a 	uxth.w	r3, sl
 8007134:	4619      	mov	r1, r3
 8007136:	b283      	uxth	r3, r0
 8007138:	1acb      	subs	r3, r1, r3
 800713a:	0c00      	lsrs	r0, r0, #16
 800713c:	4463      	add	r3, ip
 800713e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007142:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800714c:	4576      	cmp	r6, lr
 800714e:	f849 3b04 	str.w	r3, [r9], #4
 8007152:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007156:	d8e5      	bhi.n	8007124 <__mdiff+0x88>
 8007158:	1b33      	subs	r3, r6, r4
 800715a:	3b15      	subs	r3, #21
 800715c:	f023 0303 	bic.w	r3, r3, #3
 8007160:	3415      	adds	r4, #21
 8007162:	3304      	adds	r3, #4
 8007164:	42a6      	cmp	r6, r4
 8007166:	bf38      	it	cc
 8007168:	2304      	movcc	r3, #4
 800716a:	441d      	add	r5, r3
 800716c:	445b      	add	r3, fp
 800716e:	461e      	mov	r6, r3
 8007170:	462c      	mov	r4, r5
 8007172:	4544      	cmp	r4, r8
 8007174:	d30e      	bcc.n	8007194 <__mdiff+0xf8>
 8007176:	f108 0103 	add.w	r1, r8, #3
 800717a:	1b49      	subs	r1, r1, r5
 800717c:	f021 0103 	bic.w	r1, r1, #3
 8007180:	3d03      	subs	r5, #3
 8007182:	45a8      	cmp	r8, r5
 8007184:	bf38      	it	cc
 8007186:	2100      	movcc	r1, #0
 8007188:	440b      	add	r3, r1
 800718a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800718e:	b191      	cbz	r1, 80071b6 <__mdiff+0x11a>
 8007190:	6117      	str	r7, [r2, #16]
 8007192:	e79d      	b.n	80070d0 <__mdiff+0x34>
 8007194:	f854 1b04 	ldr.w	r1, [r4], #4
 8007198:	46e6      	mov	lr, ip
 800719a:	0c08      	lsrs	r0, r1, #16
 800719c:	fa1c fc81 	uxtah	ip, ip, r1
 80071a0:	4471      	add	r1, lr
 80071a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071a6:	b289      	uxth	r1, r1
 80071a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071ac:	f846 1b04 	str.w	r1, [r6], #4
 80071b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071b4:	e7dd      	b.n	8007172 <__mdiff+0xd6>
 80071b6:	3f01      	subs	r7, #1
 80071b8:	e7e7      	b.n	800718a <__mdiff+0xee>
 80071ba:	bf00      	nop
 80071bc:	080081a0 	.word	0x080081a0
 80071c0:	080081b1 	.word	0x080081b1

080071c4 <__d2b>:
 80071c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	460f      	mov	r7, r1
 80071ca:	2101      	movs	r1, #1
 80071cc:	ec59 8b10 	vmov	r8, r9, d0
 80071d0:	4616      	mov	r6, r2
 80071d2:	f7ff fccd 	bl	8006b70 <_Balloc>
 80071d6:	4604      	mov	r4, r0
 80071d8:	b930      	cbnz	r0, 80071e8 <__d2b+0x24>
 80071da:	4602      	mov	r2, r0
 80071dc:	4b23      	ldr	r3, [pc, #140]	@ (800726c <__d2b+0xa8>)
 80071de:	4824      	ldr	r0, [pc, #144]	@ (8007270 <__d2b+0xac>)
 80071e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80071e4:	f000 fb06 	bl	80077f4 <__assert_func>
 80071e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071f0:	b10d      	cbz	r5, 80071f6 <__d2b+0x32>
 80071f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	f1b8 0300 	subs.w	r3, r8, #0
 80071fc:	d023      	beq.n	8007246 <__d2b+0x82>
 80071fe:	4668      	mov	r0, sp
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	f7ff fd7c 	bl	8006cfe <__lo0bits>
 8007206:	e9dd 1200 	ldrd	r1, r2, [sp]
 800720a:	b1d0      	cbz	r0, 8007242 <__d2b+0x7e>
 800720c:	f1c0 0320 	rsb	r3, r0, #32
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	430b      	orrs	r3, r1
 8007216:	40c2      	lsrs	r2, r0
 8007218:	6163      	str	r3, [r4, #20]
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	61a3      	str	r3, [r4, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	bf0c      	ite	eq
 8007224:	2201      	moveq	r2, #1
 8007226:	2202      	movne	r2, #2
 8007228:	6122      	str	r2, [r4, #16]
 800722a:	b1a5      	cbz	r5, 8007256 <__d2b+0x92>
 800722c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007230:	4405      	add	r5, r0
 8007232:	603d      	str	r5, [r7, #0]
 8007234:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007238:	6030      	str	r0, [r6, #0]
 800723a:	4620      	mov	r0, r4
 800723c:	b003      	add	sp, #12
 800723e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007242:	6161      	str	r1, [r4, #20]
 8007244:	e7ea      	b.n	800721c <__d2b+0x58>
 8007246:	a801      	add	r0, sp, #4
 8007248:	f7ff fd59 	bl	8006cfe <__lo0bits>
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	6163      	str	r3, [r4, #20]
 8007250:	3020      	adds	r0, #32
 8007252:	2201      	movs	r2, #1
 8007254:	e7e8      	b.n	8007228 <__d2b+0x64>
 8007256:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800725a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800725e:	6038      	str	r0, [r7, #0]
 8007260:	6918      	ldr	r0, [r3, #16]
 8007262:	f7ff fd2d 	bl	8006cc0 <__hi0bits>
 8007266:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800726a:	e7e5      	b.n	8007238 <__d2b+0x74>
 800726c:	080081a0 	.word	0x080081a0
 8007270:	080081b1 	.word	0x080081b1

08007274 <__ssputs_r>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	688e      	ldr	r6, [r1, #8]
 800727a:	461f      	mov	r7, r3
 800727c:	42be      	cmp	r6, r7
 800727e:	680b      	ldr	r3, [r1, #0]
 8007280:	4682      	mov	sl, r0
 8007282:	460c      	mov	r4, r1
 8007284:	4690      	mov	r8, r2
 8007286:	d82d      	bhi.n	80072e4 <__ssputs_r+0x70>
 8007288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800728c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007290:	d026      	beq.n	80072e0 <__ssputs_r+0x6c>
 8007292:	6965      	ldr	r5, [r4, #20]
 8007294:	6909      	ldr	r1, [r1, #16]
 8007296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800729a:	eba3 0901 	sub.w	r9, r3, r1
 800729e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072a2:	1c7b      	adds	r3, r7, #1
 80072a4:	444b      	add	r3, r9
 80072a6:	106d      	asrs	r5, r5, #1
 80072a8:	429d      	cmp	r5, r3
 80072aa:	bf38      	it	cc
 80072ac:	461d      	movcc	r5, r3
 80072ae:	0553      	lsls	r3, r2, #21
 80072b0:	d527      	bpl.n	8007302 <__ssputs_r+0x8e>
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7ff fbd0 	bl	8006a58 <_malloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	b360      	cbz	r0, 8007316 <__ssputs_r+0xa2>
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	464a      	mov	r2, r9
 80072c0:	f000 fa8a 	bl	80077d8 <memcpy>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	6126      	str	r6, [r4, #16]
 80072d2:	6165      	str	r5, [r4, #20]
 80072d4:	444e      	add	r6, r9
 80072d6:	eba5 0509 	sub.w	r5, r5, r9
 80072da:	6026      	str	r6, [r4, #0]
 80072dc:	60a5      	str	r5, [r4, #8]
 80072de:	463e      	mov	r6, r7
 80072e0:	42be      	cmp	r6, r7
 80072e2:	d900      	bls.n	80072e6 <__ssputs_r+0x72>
 80072e4:	463e      	mov	r6, r7
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	4632      	mov	r2, r6
 80072ea:	4641      	mov	r1, r8
 80072ec:	f000 fa28 	bl	8007740 <memmove>
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	1b9b      	subs	r3, r3, r6
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	4433      	add	r3, r6
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	2000      	movs	r0, #0
 80072fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007302:	462a      	mov	r2, r5
 8007304:	f000 faba 	bl	800787c <_realloc_r>
 8007308:	4606      	mov	r6, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d1e0      	bne.n	80072d0 <__ssputs_r+0x5c>
 800730e:	6921      	ldr	r1, [r4, #16]
 8007310:	4650      	mov	r0, sl
 8007312:	f7ff fb2d 	bl	8006970 <_free_r>
 8007316:	230c      	movs	r3, #12
 8007318:	f8ca 3000 	str.w	r3, [sl]
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	e7e9      	b.n	80072fe <__ssputs_r+0x8a>
	...

0800732c <_svfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4698      	mov	r8, r3
 8007332:	898b      	ldrh	r3, [r1, #12]
 8007334:	061b      	lsls	r3, r3, #24
 8007336:	b09d      	sub	sp, #116	@ 0x74
 8007338:	4607      	mov	r7, r0
 800733a:	460d      	mov	r5, r1
 800733c:	4614      	mov	r4, r2
 800733e:	d510      	bpl.n	8007362 <_svfiprintf_r+0x36>
 8007340:	690b      	ldr	r3, [r1, #16]
 8007342:	b973      	cbnz	r3, 8007362 <_svfiprintf_r+0x36>
 8007344:	2140      	movs	r1, #64	@ 0x40
 8007346:	f7ff fb87 	bl	8006a58 <_malloc_r>
 800734a:	6028      	str	r0, [r5, #0]
 800734c:	6128      	str	r0, [r5, #16]
 800734e:	b930      	cbnz	r0, 800735e <_svfiprintf_r+0x32>
 8007350:	230c      	movs	r3, #12
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	b01d      	add	sp, #116	@ 0x74
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	2340      	movs	r3, #64	@ 0x40
 8007360:	616b      	str	r3, [r5, #20]
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	@ 0x24
 8007366:	2320      	movs	r3, #32
 8007368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800736c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007370:	2330      	movs	r3, #48	@ 0x30
 8007372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007510 <_svfiprintf_r+0x1e4>
 8007376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800737a:	f04f 0901 	mov.w	r9, #1
 800737e:	4623      	mov	r3, r4
 8007380:	469a      	mov	sl, r3
 8007382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007386:	b10a      	cbz	r2, 800738c <_svfiprintf_r+0x60>
 8007388:	2a25      	cmp	r2, #37	@ 0x25
 800738a:	d1f9      	bne.n	8007380 <_svfiprintf_r+0x54>
 800738c:	ebba 0b04 	subs.w	fp, sl, r4
 8007390:	d00b      	beq.n	80073aa <_svfiprintf_r+0x7e>
 8007392:	465b      	mov	r3, fp
 8007394:	4622      	mov	r2, r4
 8007396:	4629      	mov	r1, r5
 8007398:	4638      	mov	r0, r7
 800739a:	f7ff ff6b 	bl	8007274 <__ssputs_r>
 800739e:	3001      	adds	r0, #1
 80073a0:	f000 80a7 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a6:	445a      	add	r2, fp
 80073a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 809f 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073b4:	2300      	movs	r3, #0
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073be:	f10a 0a01 	add.w	sl, sl, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80073cc:	4654      	mov	r4, sl
 80073ce:	2205      	movs	r2, #5
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	484e      	ldr	r0, [pc, #312]	@ (8007510 <_svfiprintf_r+0x1e4>)
 80073d6:	f7f8 ff1b 	bl	8000210 <memchr>
 80073da:	9a04      	ldr	r2, [sp, #16]
 80073dc:	b9d8      	cbnz	r0, 8007416 <_svfiprintf_r+0xea>
 80073de:	06d0      	lsls	r0, r2, #27
 80073e0:	bf44      	itt	mi
 80073e2:	2320      	movmi	r3, #32
 80073e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e8:	0711      	lsls	r1, r2, #28
 80073ea:	bf44      	itt	mi
 80073ec:	232b      	movmi	r3, #43	@ 0x2b
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f8:	d015      	beq.n	8007426 <_svfiprintf_r+0xfa>
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4654      	mov	r4, sl
 80073fe:	2000      	movs	r0, #0
 8007400:	f04f 0c0a 	mov.w	ip, #10
 8007404:	4621      	mov	r1, r4
 8007406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800740a:	3b30      	subs	r3, #48	@ 0x30
 800740c:	2b09      	cmp	r3, #9
 800740e:	d94b      	bls.n	80074a8 <_svfiprintf_r+0x17c>
 8007410:	b1b0      	cbz	r0, 8007440 <_svfiprintf_r+0x114>
 8007412:	9207      	str	r2, [sp, #28]
 8007414:	e014      	b.n	8007440 <_svfiprintf_r+0x114>
 8007416:	eba0 0308 	sub.w	r3, r0, r8
 800741a:	fa09 f303 	lsl.w	r3, r9, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	46a2      	mov	sl, r4
 8007424:	e7d2      	b.n	80073cc <_svfiprintf_r+0xa0>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	9103      	str	r1, [sp, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfbb      	ittet	lt
 8007432:	425b      	neglt	r3, r3
 8007434:	f042 0202 	orrlt.w	r2, r2, #2
 8007438:	9307      	strge	r3, [sp, #28]
 800743a:	9307      	strlt	r3, [sp, #28]
 800743c:	bfb8      	it	lt
 800743e:	9204      	strlt	r2, [sp, #16]
 8007440:	7823      	ldrb	r3, [r4, #0]
 8007442:	2b2e      	cmp	r3, #46	@ 0x2e
 8007444:	d10a      	bne.n	800745c <_svfiprintf_r+0x130>
 8007446:	7863      	ldrb	r3, [r4, #1]
 8007448:	2b2a      	cmp	r3, #42	@ 0x2a
 800744a:	d132      	bne.n	80074b2 <_svfiprintf_r+0x186>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9203      	str	r2, [sp, #12]
 8007454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007458:	3402      	adds	r4, #2
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007520 <_svfiprintf_r+0x1f4>
 8007460:	7821      	ldrb	r1, [r4, #0]
 8007462:	2203      	movs	r2, #3
 8007464:	4650      	mov	r0, sl
 8007466:	f7f8 fed3 	bl	8000210 <memchr>
 800746a:	b138      	cbz	r0, 800747c <_svfiprintf_r+0x150>
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	eba0 000a 	sub.w	r0, r0, sl
 8007472:	2240      	movs	r2, #64	@ 0x40
 8007474:	4082      	lsls	r2, r0
 8007476:	4313      	orrs	r3, r2
 8007478:	3401      	adds	r4, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	4824      	ldr	r0, [pc, #144]	@ (8007514 <_svfiprintf_r+0x1e8>)
 8007482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007486:	2206      	movs	r2, #6
 8007488:	f7f8 fec2 	bl	8000210 <memchr>
 800748c:	2800      	cmp	r0, #0
 800748e:	d036      	beq.n	80074fe <_svfiprintf_r+0x1d2>
 8007490:	4b21      	ldr	r3, [pc, #132]	@ (8007518 <_svfiprintf_r+0x1ec>)
 8007492:	bb1b      	cbnz	r3, 80074dc <_svfiprintf_r+0x1b0>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	3307      	adds	r3, #7
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	3308      	adds	r3, #8
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a2:	4433      	add	r3, r6
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	e76a      	b.n	800737e <_svfiprintf_r+0x52>
 80074a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ac:	460c      	mov	r4, r1
 80074ae:	2001      	movs	r0, #1
 80074b0:	e7a8      	b.n	8007404 <_svfiprintf_r+0xd8>
 80074b2:	2300      	movs	r3, #0
 80074b4:	3401      	adds	r4, #1
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4620      	mov	r0, r4
 80074c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c4:	3a30      	subs	r2, #48	@ 0x30
 80074c6:	2a09      	cmp	r2, #9
 80074c8:	d903      	bls.n	80074d2 <_svfiprintf_r+0x1a6>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c6      	beq.n	800745c <_svfiprintf_r+0x130>
 80074ce:	9105      	str	r1, [sp, #20]
 80074d0:	e7c4      	b.n	800745c <_svfiprintf_r+0x130>
 80074d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d6:	4604      	mov	r4, r0
 80074d8:	2301      	movs	r3, #1
 80074da:	e7f0      	b.n	80074be <_svfiprintf_r+0x192>
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <_svfiprintf_r+0x1f0>)
 80074e4:	a904      	add	r1, sp, #16
 80074e6:	4638      	mov	r0, r7
 80074e8:	f7fd fda6 	bl	8005038 <_printf_float>
 80074ec:	1c42      	adds	r2, r0, #1
 80074ee:	4606      	mov	r6, r0
 80074f0:	d1d6      	bne.n	80074a0 <_svfiprintf_r+0x174>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	065b      	lsls	r3, r3, #25
 80074f6:	f53f af2d 	bmi.w	8007354 <_svfiprintf_r+0x28>
 80074fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074fc:	e72c      	b.n	8007358 <_svfiprintf_r+0x2c>
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	462a      	mov	r2, r5
 8007504:	4b05      	ldr	r3, [pc, #20]	@ (800751c <_svfiprintf_r+0x1f0>)
 8007506:	a904      	add	r1, sp, #16
 8007508:	4638      	mov	r0, r7
 800750a:	f7fe f82d 	bl	8005568 <_printf_i>
 800750e:	e7ed      	b.n	80074ec <_svfiprintf_r+0x1c0>
 8007510:	08008308 	.word	0x08008308
 8007514:	08008312 	.word	0x08008312
 8007518:	08005039 	.word	0x08005039
 800751c:	08007275 	.word	0x08007275
 8007520:	0800830e 	.word	0x0800830e

08007524 <__sflush_r>:
 8007524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	0716      	lsls	r6, r2, #28
 800752e:	4605      	mov	r5, r0
 8007530:	460c      	mov	r4, r1
 8007532:	d454      	bmi.n	80075de <__sflush_r+0xba>
 8007534:	684b      	ldr	r3, [r1, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dc02      	bgt.n	8007540 <__sflush_r+0x1c>
 800753a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd48      	ble.n	80075d2 <__sflush_r+0xae>
 8007540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007542:	2e00      	cmp	r6, #0
 8007544:	d045      	beq.n	80075d2 <__sflush_r+0xae>
 8007546:	2300      	movs	r3, #0
 8007548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800754c:	682f      	ldr	r7, [r5, #0]
 800754e:	6a21      	ldr	r1, [r4, #32]
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	d030      	beq.n	80075b6 <__sflush_r+0x92>
 8007554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	0759      	lsls	r1, r3, #29
 800755a:	d505      	bpl.n	8007568 <__sflush_r+0x44>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007562:	b10b      	cbz	r3, 8007568 <__sflush_r+0x44>
 8007564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800756c:	6a21      	ldr	r1, [r4, #32]
 800756e:	4628      	mov	r0, r5
 8007570:	47b0      	blx	r6
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	d106      	bne.n	8007586 <__sflush_r+0x62>
 8007578:	6829      	ldr	r1, [r5, #0]
 800757a:	291d      	cmp	r1, #29
 800757c:	d82b      	bhi.n	80075d6 <__sflush_r+0xb2>
 800757e:	4a2a      	ldr	r2, [pc, #168]	@ (8007628 <__sflush_r+0x104>)
 8007580:	410a      	asrs	r2, r1
 8007582:	07d6      	lsls	r6, r2, #31
 8007584:	d427      	bmi.n	80075d6 <__sflush_r+0xb2>
 8007586:	2200      	movs	r2, #0
 8007588:	6062      	str	r2, [r4, #4]
 800758a:	04d9      	lsls	r1, r3, #19
 800758c:	6922      	ldr	r2, [r4, #16]
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	d504      	bpl.n	800759c <__sflush_r+0x78>
 8007592:	1c42      	adds	r2, r0, #1
 8007594:	d101      	bne.n	800759a <__sflush_r+0x76>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	b903      	cbnz	r3, 800759c <__sflush_r+0x78>
 800759a:	6560      	str	r0, [r4, #84]	@ 0x54
 800759c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800759e:	602f      	str	r7, [r5, #0]
 80075a0:	b1b9      	cbz	r1, 80075d2 <__sflush_r+0xae>
 80075a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d002      	beq.n	80075b0 <__sflush_r+0x8c>
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7ff f9e0 	bl	8006970 <_free_r>
 80075b0:	2300      	movs	r3, #0
 80075b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80075b4:	e00d      	b.n	80075d2 <__sflush_r+0xae>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b0      	blx	r6
 80075bc:	4602      	mov	r2, r0
 80075be:	1c50      	adds	r0, r2, #1
 80075c0:	d1c9      	bne.n	8007556 <__sflush_r+0x32>
 80075c2:	682b      	ldr	r3, [r5, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c6      	beq.n	8007556 <__sflush_r+0x32>
 80075c8:	2b1d      	cmp	r3, #29
 80075ca:	d001      	beq.n	80075d0 <__sflush_r+0xac>
 80075cc:	2b16      	cmp	r3, #22
 80075ce:	d11e      	bne.n	800760e <__sflush_r+0xea>
 80075d0:	602f      	str	r7, [r5, #0]
 80075d2:	2000      	movs	r0, #0
 80075d4:	e022      	b.n	800761c <__sflush_r+0xf8>
 80075d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075da:	b21b      	sxth	r3, r3
 80075dc:	e01b      	b.n	8007616 <__sflush_r+0xf2>
 80075de:	690f      	ldr	r7, [r1, #16]
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	d0f6      	beq.n	80075d2 <__sflush_r+0xae>
 80075e4:	0793      	lsls	r3, r2, #30
 80075e6:	680e      	ldr	r6, [r1, #0]
 80075e8:	bf08      	it	eq
 80075ea:	694b      	ldreq	r3, [r1, #20]
 80075ec:	600f      	str	r7, [r1, #0]
 80075ee:	bf18      	it	ne
 80075f0:	2300      	movne	r3, #0
 80075f2:	eba6 0807 	sub.w	r8, r6, r7
 80075f6:	608b      	str	r3, [r1, #8]
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	dde9      	ble.n	80075d2 <__sflush_r+0xae>
 80075fe:	6a21      	ldr	r1, [r4, #32]
 8007600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007602:	4643      	mov	r3, r8
 8007604:	463a      	mov	r2, r7
 8007606:	4628      	mov	r0, r5
 8007608:	47b0      	blx	r6
 800760a:	2800      	cmp	r0, #0
 800760c:	dc08      	bgt.n	8007620 <__sflush_r+0xfc>
 800760e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	4407      	add	r7, r0
 8007622:	eba8 0800 	sub.w	r8, r8, r0
 8007626:	e7e7      	b.n	80075f8 <__sflush_r+0xd4>
 8007628:	dfbffffe 	.word	0xdfbffffe

0800762c <_fflush_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	4605      	mov	r5, r0
 8007632:	460c      	mov	r4, r1
 8007634:	b913      	cbnz	r3, 800763c <_fflush_r+0x10>
 8007636:	2500      	movs	r5, #0
 8007638:	4628      	mov	r0, r5
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	b118      	cbz	r0, 8007646 <_fflush_r+0x1a>
 800763e:	6a03      	ldr	r3, [r0, #32]
 8007640:	b90b      	cbnz	r3, 8007646 <_fflush_r+0x1a>
 8007642:	f7fe f93d 	bl	80058c0 <__sinit>
 8007646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f3      	beq.n	8007636 <_fflush_r+0xa>
 800764e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007650:	07d0      	lsls	r0, r2, #31
 8007652:	d404      	bmi.n	800765e <_fflush_r+0x32>
 8007654:	0599      	lsls	r1, r3, #22
 8007656:	d402      	bmi.n	800765e <_fflush_r+0x32>
 8007658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765a:	f7fe fb3a 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 800765e:	4628      	mov	r0, r5
 8007660:	4621      	mov	r1, r4
 8007662:	f7ff ff5f 	bl	8007524 <__sflush_r>
 8007666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007668:	07da      	lsls	r2, r3, #31
 800766a:	4605      	mov	r5, r0
 800766c:	d4e4      	bmi.n	8007638 <_fflush_r+0xc>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	d4e1      	bmi.n	8007638 <_fflush_r+0xc>
 8007674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007676:	f7fe fb2d 	bl	8005cd4 <__retarget_lock_release_recursive>
 800767a:	e7dd      	b.n	8007638 <_fflush_r+0xc>

0800767c <__swhatbuf_r>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	2900      	cmp	r1, #0
 8007686:	b096      	sub	sp, #88	@ 0x58
 8007688:	4615      	mov	r5, r2
 800768a:	461e      	mov	r6, r3
 800768c:	da0d      	bge.n	80076aa <__swhatbuf_r+0x2e>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	bf14      	ite	ne
 800769a:	2340      	movne	r3, #64	@ 0x40
 800769c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076a0:	2000      	movs	r0, #0
 80076a2:	6031      	str	r1, [r6, #0]
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	b016      	add	sp, #88	@ 0x58
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	466a      	mov	r2, sp
 80076ac:	f000 f862 	bl	8007774 <_fstat_r>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dbec      	blt.n	800768e <__swhatbuf_r+0x12>
 80076b4:	9901      	ldr	r1, [sp, #4]
 80076b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076be:	4259      	negs	r1, r3
 80076c0:	4159      	adcs	r1, r3
 80076c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076c6:	e7eb      	b.n	80076a0 <__swhatbuf_r+0x24>

080076c8 <__smakebuf_r>:
 80076c8:	898b      	ldrh	r3, [r1, #12]
 80076ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076cc:	079d      	lsls	r5, r3, #30
 80076ce:	4606      	mov	r6, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	d507      	bpl.n	80076e4 <__smakebuf_r+0x1c>
 80076d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	2301      	movs	r3, #1
 80076de:	6163      	str	r3, [r4, #20]
 80076e0:	b003      	add	sp, #12
 80076e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e4:	ab01      	add	r3, sp, #4
 80076e6:	466a      	mov	r2, sp
 80076e8:	f7ff ffc8 	bl	800767c <__swhatbuf_r>
 80076ec:	9f00      	ldr	r7, [sp, #0]
 80076ee:	4605      	mov	r5, r0
 80076f0:	4639      	mov	r1, r7
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff f9b0 	bl	8006a58 <_malloc_r>
 80076f8:	b948      	cbnz	r0, 800770e <__smakebuf_r+0x46>
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	059a      	lsls	r2, r3, #22
 8007700:	d4ee      	bmi.n	80076e0 <__smakebuf_r+0x18>
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	e7e2      	b.n	80076d4 <__smakebuf_r+0xc>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	6020      	str	r0, [r4, #0]
 8007712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800771e:	b15b      	cbz	r3, 8007738 <__smakebuf_r+0x70>
 8007720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007724:	4630      	mov	r0, r6
 8007726:	f000 f837 	bl	8007798 <_isatty_r>
 800772a:	b128      	cbz	r0, 8007738 <__smakebuf_r+0x70>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	431d      	orrs	r5, r3
 800773c:	81a5      	strh	r5, [r4, #12]
 800773e:	e7cf      	b.n	80076e0 <__smakebuf_r+0x18>

08007740 <memmove>:
 8007740:	4288      	cmp	r0, r1
 8007742:	b510      	push	{r4, lr}
 8007744:	eb01 0402 	add.w	r4, r1, r2
 8007748:	d902      	bls.n	8007750 <memmove+0x10>
 800774a:	4284      	cmp	r4, r0
 800774c:	4623      	mov	r3, r4
 800774e:	d807      	bhi.n	8007760 <memmove+0x20>
 8007750:	1e43      	subs	r3, r0, #1
 8007752:	42a1      	cmp	r1, r4
 8007754:	d008      	beq.n	8007768 <memmove+0x28>
 8007756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800775e:	e7f8      	b.n	8007752 <memmove+0x12>
 8007760:	4402      	add	r2, r0
 8007762:	4601      	mov	r1, r0
 8007764:	428a      	cmp	r2, r1
 8007766:	d100      	bne.n	800776a <memmove+0x2a>
 8007768:	bd10      	pop	{r4, pc}
 800776a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800776e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007772:	e7f7      	b.n	8007764 <memmove+0x24>

08007774 <_fstat_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	@ (8007794 <_fstat_r+0x20>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	4611      	mov	r1, r2
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	f7f9 fecd 	bl	8001520 <_fstat>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d102      	bne.n	8007790 <_fstat_r+0x1c>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	b103      	cbz	r3, 8007790 <_fstat_r+0x1c>
 800778e:	6023      	str	r3, [r4, #0]
 8007790:	bd38      	pop	{r3, r4, r5, pc}
 8007792:	bf00      	nop
 8007794:	20000674 	.word	0x20000674

08007798 <_isatty_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d06      	ldr	r5, [pc, #24]	@ (80077b4 <_isatty_r+0x1c>)
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	f7f9 fecc 	bl	8001540 <_isatty>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_isatty_r+0x1a>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_isatty_r+0x1a>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	20000674 	.word	0x20000674

080077b8 <_sbrk_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d06      	ldr	r5, [pc, #24]	@ (80077d4 <_sbrk_r+0x1c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7f9 fed4 	bl	8001570 <_sbrk>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_sbrk_r+0x1a>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_sbrk_r+0x1a>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	20000674 	.word	0x20000674

080077d8 <memcpy>:
 80077d8:	440a      	add	r2, r1
 80077da:	4291      	cmp	r1, r2
 80077dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e0:	d100      	bne.n	80077e4 <memcpy+0xc>
 80077e2:	4770      	bx	lr
 80077e4:	b510      	push	{r4, lr}
 80077e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ee:	4291      	cmp	r1, r2
 80077f0:	d1f9      	bne.n	80077e6 <memcpy+0xe>
 80077f2:	bd10      	pop	{r4, pc}

080077f4 <__assert_func>:
 80077f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077f6:	4614      	mov	r4, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <__assert_func+0x2c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4605      	mov	r5, r0
 8007800:	68d8      	ldr	r0, [r3, #12]
 8007802:	b954      	cbnz	r4, 800781a <__assert_func+0x26>
 8007804:	4b07      	ldr	r3, [pc, #28]	@ (8007824 <__assert_func+0x30>)
 8007806:	461c      	mov	r4, r3
 8007808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800780c:	9100      	str	r1, [sp, #0]
 800780e:	462b      	mov	r3, r5
 8007810:	4905      	ldr	r1, [pc, #20]	@ (8007828 <__assert_func+0x34>)
 8007812:	f000 f86f 	bl	80078f4 <fiprintf>
 8007816:	f000 f87f 	bl	8007918 <abort>
 800781a:	4b04      	ldr	r3, [pc, #16]	@ (800782c <__assert_func+0x38>)
 800781c:	e7f4      	b.n	8007808 <__assert_func+0x14>
 800781e:	bf00      	nop
 8007820:	20000018 	.word	0x20000018
 8007824:	0800835e 	.word	0x0800835e
 8007828:	08008330 	.word	0x08008330
 800782c:	08008323 	.word	0x08008323

08007830 <_calloc_r>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	fba1 5402 	umull	r5, r4, r1, r2
 8007836:	b93c      	cbnz	r4, 8007848 <_calloc_r+0x18>
 8007838:	4629      	mov	r1, r5
 800783a:	f7ff f90d 	bl	8006a58 <_malloc_r>
 800783e:	4606      	mov	r6, r0
 8007840:	b928      	cbnz	r0, 800784e <_calloc_r+0x1e>
 8007842:	2600      	movs	r6, #0
 8007844:	4630      	mov	r0, r6
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	220c      	movs	r2, #12
 800784a:	6002      	str	r2, [r0, #0]
 800784c:	e7f9      	b.n	8007842 <_calloc_r+0x12>
 800784e:	462a      	mov	r2, r5
 8007850:	4621      	mov	r1, r4
 8007852:	f7fe f9c1 	bl	8005bd8 <memset>
 8007856:	e7f5      	b.n	8007844 <_calloc_r+0x14>

08007858 <__ascii_mbtowc>:
 8007858:	b082      	sub	sp, #8
 800785a:	b901      	cbnz	r1, 800785e <__ascii_mbtowc+0x6>
 800785c:	a901      	add	r1, sp, #4
 800785e:	b142      	cbz	r2, 8007872 <__ascii_mbtowc+0x1a>
 8007860:	b14b      	cbz	r3, 8007876 <__ascii_mbtowc+0x1e>
 8007862:	7813      	ldrb	r3, [r2, #0]
 8007864:	600b      	str	r3, [r1, #0]
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	1e10      	subs	r0, r2, #0
 800786a:	bf18      	it	ne
 800786c:	2001      	movne	r0, #1
 800786e:	b002      	add	sp, #8
 8007870:	4770      	bx	lr
 8007872:	4610      	mov	r0, r2
 8007874:	e7fb      	b.n	800786e <__ascii_mbtowc+0x16>
 8007876:	f06f 0001 	mvn.w	r0, #1
 800787a:	e7f8      	b.n	800786e <__ascii_mbtowc+0x16>

0800787c <_realloc_r>:
 800787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007880:	4680      	mov	r8, r0
 8007882:	4615      	mov	r5, r2
 8007884:	460c      	mov	r4, r1
 8007886:	b921      	cbnz	r1, 8007892 <_realloc_r+0x16>
 8007888:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788c:	4611      	mov	r1, r2
 800788e:	f7ff b8e3 	b.w	8006a58 <_malloc_r>
 8007892:	b92a      	cbnz	r2, 80078a0 <_realloc_r+0x24>
 8007894:	f7ff f86c 	bl	8006970 <_free_r>
 8007898:	2400      	movs	r4, #0
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	f000 f841 	bl	8007926 <_malloc_usable_size_r>
 80078a4:	4285      	cmp	r5, r0
 80078a6:	4606      	mov	r6, r0
 80078a8:	d802      	bhi.n	80078b0 <_realloc_r+0x34>
 80078aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80078ae:	d8f4      	bhi.n	800789a <_realloc_r+0x1e>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4640      	mov	r0, r8
 80078b4:	f7ff f8d0 	bl	8006a58 <_malloc_r>
 80078b8:	4607      	mov	r7, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0ec      	beq.n	8007898 <_realloc_r+0x1c>
 80078be:	42b5      	cmp	r5, r6
 80078c0:	462a      	mov	r2, r5
 80078c2:	4621      	mov	r1, r4
 80078c4:	bf28      	it	cs
 80078c6:	4632      	movcs	r2, r6
 80078c8:	f7ff ff86 	bl	80077d8 <memcpy>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4640      	mov	r0, r8
 80078d0:	f7ff f84e 	bl	8006970 <_free_r>
 80078d4:	463c      	mov	r4, r7
 80078d6:	e7e0      	b.n	800789a <_realloc_r+0x1e>

080078d8 <__ascii_wctomb>:
 80078d8:	4603      	mov	r3, r0
 80078da:	4608      	mov	r0, r1
 80078dc:	b141      	cbz	r1, 80078f0 <__ascii_wctomb+0x18>
 80078de:	2aff      	cmp	r2, #255	@ 0xff
 80078e0:	d904      	bls.n	80078ec <__ascii_wctomb+0x14>
 80078e2:	228a      	movs	r2, #138	@ 0x8a
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	4770      	bx	lr
 80078ec:	700a      	strb	r2, [r1, #0]
 80078ee:	2001      	movs	r0, #1
 80078f0:	4770      	bx	lr
	...

080078f4 <fiprintf>:
 80078f4:	b40e      	push	{r1, r2, r3}
 80078f6:	b503      	push	{r0, r1, lr}
 80078f8:	4601      	mov	r1, r0
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	4805      	ldr	r0, [pc, #20]	@ (8007914 <fiprintf+0x20>)
 80078fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	f000 f83f 	bl	8007988 <_vfiprintf_r>
 800790a:	b002      	add	sp, #8
 800790c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007910:	b003      	add	sp, #12
 8007912:	4770      	bx	lr
 8007914:	20000018 	.word	0x20000018

08007918 <abort>:
 8007918:	b508      	push	{r3, lr}
 800791a:	2006      	movs	r0, #6
 800791c:	f000 f974 	bl	8007c08 <raise>
 8007920:	2001      	movs	r0, #1
 8007922:	f7f9 fdc9 	bl	80014b8 <_exit>

08007926 <_malloc_usable_size_r>:
 8007926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792a:	1f18      	subs	r0, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfbc      	itt	lt
 8007930:	580b      	ldrlt	r3, [r1, r0]
 8007932:	18c0      	addlt	r0, r0, r3
 8007934:	4770      	bx	lr

08007936 <__sfputc_r>:
 8007936:	6893      	ldr	r3, [r2, #8]
 8007938:	3b01      	subs	r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	b410      	push	{r4}
 800793e:	6093      	str	r3, [r2, #8]
 8007940:	da08      	bge.n	8007954 <__sfputc_r+0x1e>
 8007942:	6994      	ldr	r4, [r2, #24]
 8007944:	42a3      	cmp	r3, r4
 8007946:	db01      	blt.n	800794c <__sfputc_r+0x16>
 8007948:	290a      	cmp	r1, #10
 800794a:	d103      	bne.n	8007954 <__sfputc_r+0x1e>
 800794c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007950:	f7fe b8ad 	b.w	8005aae <__swbuf_r>
 8007954:	6813      	ldr	r3, [r2, #0]
 8007956:	1c58      	adds	r0, r3, #1
 8007958:	6010      	str	r0, [r2, #0]
 800795a:	7019      	strb	r1, [r3, #0]
 800795c:	4608      	mov	r0, r1
 800795e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007962:	4770      	bx	lr

08007964 <__sfputs_r>:
 8007964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007966:	4606      	mov	r6, r0
 8007968:	460f      	mov	r7, r1
 800796a:	4614      	mov	r4, r2
 800796c:	18d5      	adds	r5, r2, r3
 800796e:	42ac      	cmp	r4, r5
 8007970:	d101      	bne.n	8007976 <__sfputs_r+0x12>
 8007972:	2000      	movs	r0, #0
 8007974:	e007      	b.n	8007986 <__sfputs_r+0x22>
 8007976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797a:	463a      	mov	r2, r7
 800797c:	4630      	mov	r0, r6
 800797e:	f7ff ffda 	bl	8007936 <__sfputc_r>
 8007982:	1c43      	adds	r3, r0, #1
 8007984:	d1f3      	bne.n	800796e <__sfputs_r+0xa>
 8007986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007988 <_vfiprintf_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	460d      	mov	r5, r1
 800798e:	b09d      	sub	sp, #116	@ 0x74
 8007990:	4614      	mov	r4, r2
 8007992:	4698      	mov	r8, r3
 8007994:	4606      	mov	r6, r0
 8007996:	b118      	cbz	r0, 80079a0 <_vfiprintf_r+0x18>
 8007998:	6a03      	ldr	r3, [r0, #32]
 800799a:	b90b      	cbnz	r3, 80079a0 <_vfiprintf_r+0x18>
 800799c:	f7fd ff90 	bl	80058c0 <__sinit>
 80079a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	d405      	bmi.n	80079b2 <_vfiprintf_r+0x2a>
 80079a6:	89ab      	ldrh	r3, [r5, #12]
 80079a8:	059a      	lsls	r2, r3, #22
 80079aa:	d402      	bmi.n	80079b2 <_vfiprintf_r+0x2a>
 80079ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ae:	f7fe f990 	bl	8005cd2 <__retarget_lock_acquire_recursive>
 80079b2:	89ab      	ldrh	r3, [r5, #12]
 80079b4:	071b      	lsls	r3, r3, #28
 80079b6:	d501      	bpl.n	80079bc <_vfiprintf_r+0x34>
 80079b8:	692b      	ldr	r3, [r5, #16]
 80079ba:	b99b      	cbnz	r3, 80079e4 <_vfiprintf_r+0x5c>
 80079bc:	4629      	mov	r1, r5
 80079be:	4630      	mov	r0, r6
 80079c0:	f7fe f8b4 	bl	8005b2c <__swsetup_r>
 80079c4:	b170      	cbz	r0, 80079e4 <_vfiprintf_r+0x5c>
 80079c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079c8:	07dc      	lsls	r4, r3, #31
 80079ca:	d504      	bpl.n	80079d6 <_vfiprintf_r+0x4e>
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	b01d      	add	sp, #116	@ 0x74
 80079d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d6:	89ab      	ldrh	r3, [r5, #12]
 80079d8:	0598      	lsls	r0, r3, #22
 80079da:	d4f7      	bmi.n	80079cc <_vfiprintf_r+0x44>
 80079dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079de:	f7fe f979 	bl	8005cd4 <__retarget_lock_release_recursive>
 80079e2:	e7f3      	b.n	80079cc <_vfiprintf_r+0x44>
 80079e4:	2300      	movs	r3, #0
 80079e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e8:	2320      	movs	r3, #32
 80079ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80079f2:	2330      	movs	r3, #48	@ 0x30
 80079f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ba4 <_vfiprintf_r+0x21c>
 80079f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079fc:	f04f 0901 	mov.w	r9, #1
 8007a00:	4623      	mov	r3, r4
 8007a02:	469a      	mov	sl, r3
 8007a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a08:	b10a      	cbz	r2, 8007a0e <_vfiprintf_r+0x86>
 8007a0a:	2a25      	cmp	r2, #37	@ 0x25
 8007a0c:	d1f9      	bne.n	8007a02 <_vfiprintf_r+0x7a>
 8007a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a12:	d00b      	beq.n	8007a2c <_vfiprintf_r+0xa4>
 8007a14:	465b      	mov	r3, fp
 8007a16:	4622      	mov	r2, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ffa2 	bl	8007964 <__sfputs_r>
 8007a20:	3001      	adds	r0, #1
 8007a22:	f000 80a7 	beq.w	8007b74 <_vfiprintf_r+0x1ec>
 8007a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a28:	445a      	add	r2, fp
 8007a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 809f 	beq.w	8007b74 <_vfiprintf_r+0x1ec>
 8007a36:	2300      	movs	r3, #0
 8007a38:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a40:	f10a 0a01 	add.w	sl, sl, #1
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	9307      	str	r3, [sp, #28]
 8007a48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a4e:	4654      	mov	r4, sl
 8007a50:	2205      	movs	r2, #5
 8007a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a56:	4853      	ldr	r0, [pc, #332]	@ (8007ba4 <_vfiprintf_r+0x21c>)
 8007a58:	f7f8 fbda 	bl	8000210 <memchr>
 8007a5c:	9a04      	ldr	r2, [sp, #16]
 8007a5e:	b9d8      	cbnz	r0, 8007a98 <_vfiprintf_r+0x110>
 8007a60:	06d1      	lsls	r1, r2, #27
 8007a62:	bf44      	itt	mi
 8007a64:	2320      	movmi	r3, #32
 8007a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a6a:	0713      	lsls	r3, r2, #28
 8007a6c:	bf44      	itt	mi
 8007a6e:	232b      	movmi	r3, #43	@ 0x2b
 8007a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a74:	f89a 3000 	ldrb.w	r3, [sl]
 8007a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a7a:	d015      	beq.n	8007aa8 <_vfiprintf_r+0x120>
 8007a7c:	9a07      	ldr	r2, [sp, #28]
 8007a7e:	4654      	mov	r4, sl
 8007a80:	2000      	movs	r0, #0
 8007a82:	f04f 0c0a 	mov.w	ip, #10
 8007a86:	4621      	mov	r1, r4
 8007a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a8c:	3b30      	subs	r3, #48	@ 0x30
 8007a8e:	2b09      	cmp	r3, #9
 8007a90:	d94b      	bls.n	8007b2a <_vfiprintf_r+0x1a2>
 8007a92:	b1b0      	cbz	r0, 8007ac2 <_vfiprintf_r+0x13a>
 8007a94:	9207      	str	r2, [sp, #28]
 8007a96:	e014      	b.n	8007ac2 <_vfiprintf_r+0x13a>
 8007a98:	eba0 0308 	sub.w	r3, r0, r8
 8007a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	46a2      	mov	sl, r4
 8007aa6:	e7d2      	b.n	8007a4e <_vfiprintf_r+0xc6>
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	1d19      	adds	r1, r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	9103      	str	r1, [sp, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfbb      	ittet	lt
 8007ab4:	425b      	neglt	r3, r3
 8007ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8007aba:	9307      	strge	r3, [sp, #28]
 8007abc:	9307      	strlt	r3, [sp, #28]
 8007abe:	bfb8      	it	lt
 8007ac0:	9204      	strlt	r2, [sp, #16]
 8007ac2:	7823      	ldrb	r3, [r4, #0]
 8007ac4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac6:	d10a      	bne.n	8007ade <_vfiprintf_r+0x156>
 8007ac8:	7863      	ldrb	r3, [r4, #1]
 8007aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8007acc:	d132      	bne.n	8007b34 <_vfiprintf_r+0x1ac>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	1d1a      	adds	r2, r3, #4
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9203      	str	r2, [sp, #12]
 8007ad6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ada:	3402      	adds	r4, #2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bb4 <_vfiprintf_r+0x22c>
 8007ae2:	7821      	ldrb	r1, [r4, #0]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7f8 fb92 	bl	8000210 <memchr>
 8007aec:	b138      	cbz	r0, 8007afe <_vfiprintf_r+0x176>
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	eba0 000a 	sub.w	r0, r0, sl
 8007af4:	2240      	movs	r2, #64	@ 0x40
 8007af6:	4082      	lsls	r2, r0
 8007af8:	4313      	orrs	r3, r2
 8007afa:	3401      	adds	r4, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	4829      	ldr	r0, [pc, #164]	@ (8007ba8 <_vfiprintf_r+0x220>)
 8007b04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b08:	2206      	movs	r2, #6
 8007b0a:	f7f8 fb81 	bl	8000210 <memchr>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d03f      	beq.n	8007b92 <_vfiprintf_r+0x20a>
 8007b12:	4b26      	ldr	r3, [pc, #152]	@ (8007bac <_vfiprintf_r+0x224>)
 8007b14:	bb1b      	cbnz	r3, 8007b5e <_vfiprintf_r+0x1d6>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	3308      	adds	r3, #8
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b24:	443b      	add	r3, r7
 8007b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b28:	e76a      	b.n	8007a00 <_vfiprintf_r+0x78>
 8007b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2001      	movs	r0, #1
 8007b32:	e7a8      	b.n	8007a86 <_vfiprintf_r+0xfe>
 8007b34:	2300      	movs	r3, #0
 8007b36:	3401      	adds	r4, #1
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	f04f 0c0a 	mov.w	ip, #10
 8007b40:	4620      	mov	r0, r4
 8007b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b46:	3a30      	subs	r2, #48	@ 0x30
 8007b48:	2a09      	cmp	r2, #9
 8007b4a:	d903      	bls.n	8007b54 <_vfiprintf_r+0x1cc>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c6      	beq.n	8007ade <_vfiprintf_r+0x156>
 8007b50:	9105      	str	r1, [sp, #20]
 8007b52:	e7c4      	b.n	8007ade <_vfiprintf_r+0x156>
 8007b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b58:	4604      	mov	r4, r0
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7f0      	b.n	8007b40 <_vfiprintf_r+0x1b8>
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4b12      	ldr	r3, [pc, #72]	@ (8007bb0 <_vfiprintf_r+0x228>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7fd fa65 	bl	8005038 <_printf_float>
 8007b6e:	4607      	mov	r7, r0
 8007b70:	1c78      	adds	r0, r7, #1
 8007b72:	d1d6      	bne.n	8007b22 <_vfiprintf_r+0x19a>
 8007b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b76:	07d9      	lsls	r1, r3, #31
 8007b78:	d405      	bmi.n	8007b86 <_vfiprintf_r+0x1fe>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	059a      	lsls	r2, r3, #22
 8007b7e:	d402      	bmi.n	8007b86 <_vfiprintf_r+0x1fe>
 8007b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b82:	f7fe f8a7 	bl	8005cd4 <__retarget_lock_release_recursive>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	065b      	lsls	r3, r3, #25
 8007b8a:	f53f af1f 	bmi.w	80079cc <_vfiprintf_r+0x44>
 8007b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b90:	e71e      	b.n	80079d0 <_vfiprintf_r+0x48>
 8007b92:	ab03      	add	r3, sp, #12
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	462a      	mov	r2, r5
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <_vfiprintf_r+0x228>)
 8007b9a:	a904      	add	r1, sp, #16
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7fd fce3 	bl	8005568 <_printf_i>
 8007ba2:	e7e4      	b.n	8007b6e <_vfiprintf_r+0x1e6>
 8007ba4:	08008308 	.word	0x08008308
 8007ba8:	08008312 	.word	0x08008312
 8007bac:	08005039 	.word	0x08005039
 8007bb0:	08007965 	.word	0x08007965
 8007bb4:	0800830e 	.word	0x0800830e

08007bb8 <_raise_r>:
 8007bb8:	291f      	cmp	r1, #31
 8007bba:	b538      	push	{r3, r4, r5, lr}
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	d904      	bls.n	8007bcc <_raise_r+0x14>
 8007bc2:	2316      	movs	r3, #22
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bce:	b112      	cbz	r2, 8007bd6 <_raise_r+0x1e>
 8007bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bd4:	b94b      	cbnz	r3, 8007bea <_raise_r+0x32>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 f830 	bl	8007c3c <_getpid_r>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4601      	mov	r1, r0
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be6:	f000 b817 	b.w	8007c18 <_kill_r>
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d00a      	beq.n	8007c04 <_raise_r+0x4c>
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	d103      	bne.n	8007bfa <_raise_r+0x42>
 8007bf2:	2316      	movs	r3, #22
 8007bf4:	6003      	str	r3, [r0, #0]
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7e7      	b.n	8007bca <_raise_r+0x12>
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c00:	4620      	mov	r0, r4
 8007c02:	4798      	blx	r3
 8007c04:	2000      	movs	r0, #0
 8007c06:	e7e0      	b.n	8007bca <_raise_r+0x12>

08007c08 <raise>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	@ (8007c14 <raise+0xc>)
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	f7ff bfd3 	b.w	8007bb8 <_raise_r>
 8007c12:	bf00      	nop
 8007c14:	20000018 	.word	0x20000018

08007c18 <_kill_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	@ (8007c38 <_kill_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7f9 fc37 	bl	8001498 <_kill>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_kill_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_kill_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	20000674 	.word	0x20000674

08007c3c <_getpid_r>:
 8007c3c:	f7f9 bc24 	b.w	8001488 <_getpid>

08007c40 <_init>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr

08007c4c <_fini>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr
