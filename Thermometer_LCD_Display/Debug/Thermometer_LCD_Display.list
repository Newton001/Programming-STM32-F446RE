
Thermometer_LCD_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  0800a180  0800a180  0000b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa58  0800aa58  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa58  0800aa58  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa60  0800aa60  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa60  0800aa60  0000ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa64  0800aa64  0000ba64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800aa68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001e0  0800ac48  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800ac48  0000c690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e6b  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325e  00000000  00000000  0002107b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  000242e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f26  00000000  00000000  00025640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002469d  00000000  00000000  00026566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c03  00000000  00000000  0004ac03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d76b6  00000000  00000000  00064806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000668c  00000000  00000000  0013bf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a164 	.word	0x0800a164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a164 	.word	0x0800a164

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_GPIO_Init+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_GPIO_Init+0xa8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_GPIO_Init+0xa8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_A0_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001078:	4815      	ldr	r0, [pc, #84]	@ (80010d0 <MX_GPIO_Init+0xac>)
 800107a:	f001 f86f 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	@ 0x40
 8001082:	4814      	ldr	r0, [pc, #80]	@ (80010d4 <MX_GPIO_Init+0xb0>)
 8001084:	f001 f86a 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_A0_Pin;
 8001088:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	480b      	ldr	r0, [pc, #44]	@ (80010d0 <MX_GPIO_Init+0xac>)
 80010a2:	f000 fec7 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_N_Pin;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_N_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <MX_GPIO_Init+0xb0>)
 80010be:	f000 feb9 	bl	8001e34 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400

080010d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <MX_I2C1_Init+0x54>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010e4:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x58>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_I2C1_Init+0x50>)
 8001116:	f001 f83b 	bl	8002190 <HAL_I2C_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001120:	f000 f99e 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001fc 	.word	0x200001fc
 800112c:	40005400 	.word	0x40005400
 8001130:	000186a0 	.word	0x000186a0

08001134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <HAL_I2C_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12c      	bne.n	80011b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001172:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001178:	2312      	movs	r3, #18
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001184:	2304      	movs	r3, #4
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <HAL_I2C_MspInit+0x8c>)
 8001190:	f000 fe50 	bl	8001e34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 800119e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_I2C_MspInit+0x88>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40005400 	.word	0x40005400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400

080011c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011ca:	f000 fbf9 	bl	80019c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011ce:	f000 f89d 	bl	800130c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d2:	f7ff ff27 	bl	8001024 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80011d6:	f000 fb4f 	bl	8001878 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80011da:	f7ff ff7d 	bl	80010d8 <MX_I2C1_Init>
	MX_SPI1_Init();
 80011de:	f000 f945 	bl	800146c <MX_SPI1_Init>
	MX_TIM7_Init();
 80011e2:	f000 faeb 	bl	80017bc <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	displayWelcome();
 80011e6:	f000 f90d 	bl	8001404 <displayWelcome>

	// Initialize LCD
	lcd_init();
 80011ea:	f004 f936 	bl	800545a <lcd_init>
	lcd_clear();
 80011ee:	f004 f98f 	bl	8005510 <lcd_clear>

	// Set it to some line
	lcd_setLine(127,0,127,31,1);
 80011f2:	2301      	movs	r3, #1
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	231f      	movs	r3, #31
 80011f8:	227f      	movs	r2, #127	@ 0x7f
 80011fa:	2100      	movs	r1, #0
 80011fc:	207f      	movs	r0, #127	@ 0x7f
 80011fe:	f004 fa45 	bl	800568c <lcd_setLine>
	lcd_setLine(0,0,0,31,1);
 8001202:	2301      	movs	r3, #1
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	231f      	movs	r3, #31
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	2000      	movs	r0, #0
 800120e:	f004 fa3d 	bl	800568c <lcd_setLine>
	lcd_setString(4,3,"All Ladies say", LCD_FONT_8,false);
 8001212:	2300      	movs	r3, #0
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	4a32      	ldr	r2, [pc, #200]	@ (80012e4 <main+0x120>)
 800121a:	2103      	movs	r1, #3
 800121c:	2004      	movs	r0, #4
 800121e:	f004 fa03 	bl	8005628 <lcd_setString>
	lcd_setString(4,15,"'WE LOVE ❤️ ' ",LCD_FONT_8,false);
 8001222:	2300      	movs	r3, #0
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	4a2f      	ldr	r2, [pc, #188]	@ (80012e8 <main+0x124>)
 800122a:	210f      	movs	r1, #15
 800122c:	2004      	movs	r0, #4
 800122e:	f004 f9fb 	bl	8005628 <lcd_setString>
	lcd_setString(4,25,"  K - man!  ",LCD_FONT_8,false);
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <main+0x128>)
 800123a:	2119      	movs	r1, #25
 800123c:	2004      	movs	r0, #4
 800123e:	f004 f9f3 	bl	8005628 <lcd_setString>
	lcd_show();
 8001242:	f004 fb41 	bl	80058c8 <lcd_show>
	HAL_Delay(2500);
 8001246:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800124a:	f000 fc2b 	bl	8001aa4 <HAL_Delay>
	lcd_clear();
 800124e:	f004 f95f 	bl	8005510 <lcd_clear>

	// Start the Timer
	HAL_TIM_Base_Start_IT(&htim7); // We wanna read the temp every 200ms
 8001252:	4827      	ldr	r0, [pc, #156]	@ (80012f0 <main+0x12c>)
 8001254:	f002 fdb4 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
//			lcd_show();
//			puts(msgBuf); // Uart message
//			puts("\r");
//		}

		if (doUpdate) {
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <main+0x130>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0fb      	beq.n	8001258 <main+0x94>
		        doUpdate = 0;               // reset update flag
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <main+0x130>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
		        float tmp = readTemp();     // read actual temperature
 8001266:	f004 fb8d 	bl	8005984 <readTemp>
 800126a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		        sprintf(msgBuf, "Temperature: %2.2f %cC", tmp, 0x80); // fill message buffer
 800126e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001270:	f7ff f98a 	bl	8000588 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	1d38      	adds	r0, r7, #4
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	491e      	ldr	r1, [pc, #120]	@ (80012f8 <main+0x134>)
 8001280:	f005 fb38 	bl	80068f4 <siprintf>
		        lcd_clear();
 8001284:	f004 f944 	bl	8005510 <lcd_clear>

		        // Display temperature at current y-position
		        lcd_setString(xPosition, yPosition, msgBuf, LCD_FONT_8, false);
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <main+0x138>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <main+0x13c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	1d3a      	adds	r2, r7, #4
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	f004 f9c4 	bl	8005628 <lcd_setString>
		        lcd_show();
 80012a0:	f004 fb12 	bl	80058c8 <lcd_show>
		        puts(msgBuf);               // Uart message
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fb1c 	bl	80068e4 <puts>
		        puts("\r");
 80012ac:	4815      	ldr	r0, [pc, #84]	@ (8001304 <main+0x140>)
 80012ae:	f005 fb19 	bl	80068e4 <puts>

		        // Adjust y-position for smooth gliding effect
		        yPosition += direction;     // move position up or down
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <main+0x13c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <main+0x144>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <main+0x13c>)
 80012be:	6013      	str	r3, [r2, #0]

		        // Reverse direction if boundaries are reached
		        if (yPosition >= 16 || yPosition <= 4) {
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <main+0x13c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	dc03      	bgt.n	80012d0 <main+0x10c>
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <main+0x13c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	dc04      	bgt.n	80012da <main+0x116>
		            direction *= -1;        // change direction
 80012d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <main+0x144>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	425b      	negs	r3, r3
 80012d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <main+0x144>)
 80012d8:	6013      	str	r3, [r2, #0]
		        }

		        HAL_Delay(50); // delay to control glide speed
 80012da:	2032      	movs	r0, #50	@ 0x32
 80012dc:	f000 fbe2 	bl	8001aa4 <HAL_Delay>
		if (doUpdate) {
 80012e0:	e7ba      	b.n	8001258 <main+0x94>
 80012e2:	bf00      	nop
 80012e4:	0800a180 	.word	0x0800a180
 80012e8:	0800a190 	.word	0x0800a190
 80012ec:	0800a1a4 	.word	0x0800a1a4
 80012f0:	200002b0 	.word	0x200002b0
 80012f4:	20000250 	.word	0x20000250
 80012f8:	0800a1b4 	.word	0x0800a1b4
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000000 	.word	0x20000000
 8001304:	0800a1cc 	.word	0x0800a1cc
 8001308:	20000008 	.word	0x20000008

0800130c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	@ 0x50
 8001310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2234      	movs	r2, #52	@ 0x34
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fbe2 	bl	8006ae4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <SystemClock_Config+0xb8>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a22      	ldr	r2, [pc, #136]	@ (80013c4 <SystemClock_Config+0xb8>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <SystemClock_Config+0xb8>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <SystemClock_Config+0xbc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001358:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <SystemClock_Config+0xbc>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <SystemClock_Config+0xbc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001374:	2310      	movs	r3, #16
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4618      	mov	r0, r3
 8001382:	f001 ff85 	bl	8003290 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x84>
	{
		Error_Handler();
 800138c:	f000 f868 	bl	8001460 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fcac 	bl	8002d08 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xae>
	{
		Error_Handler();
 80013b6:	f000 f853 	bl	8001460 <Error_Handler>
	}
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY)== HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4807      	ldr	r0, [pc, #28]	@ (8001400 <_write+0x34>)
 80013e4:	f003 f800 	bl	80043e8 <HAL_UART_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <_write+0x26>
		return len;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e001      	b.n	80013f6 <_write+0x2a>
	else
		return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f8 	.word	0x200002f8

08001404 <displayWelcome>:

void displayWelcome()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	puts("******** LETS PRACTICE ******** \r\n");
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <displayWelcome+0x28>)
 800140a:	f005 fa6b 	bl	80068e4 <puts>
	puts("- Uart connection ... Done\r\n");
 800140e:	4808      	ldr	r0, [pc, #32]	@ (8001430 <displayWelcome+0x2c>)
 8001410:	f005 fa68 	bl	80068e4 <puts>
	puts("- printf retargeting to uart ... Done\r\n");
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <displayWelcome+0x30>)
 8001416:	f005 fa65 	bl	80068e4 <puts>
	puts("- Temperature Sensor connection ... Done\r\n");
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <displayWelcome+0x34>)
 800141c:	f005 fa62 	bl	80068e4 <puts>
	puts("***************************** \r\n");
 8001420:	4806      	ldr	r0, [pc, #24]	@ (800143c <displayWelcome+0x38>)
 8001422:	f005 fa5f 	bl	80068e4 <puts>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800a1d0 	.word	0x0800a1d0
 8001430:	0800a1f4 	.word	0x0800a1f4
 8001434:	0800a214 	.word	0x0800a214
 8001438:	0800a23c 	.word	0x0800a23c
 800143c:	0800a268 	.word	0x0800a268

08001440 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	doUpdate = 1;
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000250 	.word	0x20000250

08001460 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <Error_Handler+0x8>

0800146c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <MX_SPI1_Init+0x68>)
 8001472:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <MX_SPI1_Init+0x6c>)
 8001474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_SPI1_Init+0x68>)
 8001478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800147c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <MX_SPI1_Init+0x68>)
 8001480:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001484:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <MX_SPI1_Init+0x68>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_SPI1_Init+0x68>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <MX_SPI1_Init+0x68>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_SPI1_Init+0x68>)
 800149a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014ba:	220a      	movs	r2, #10
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_SPI1_Init+0x68>)
 80014c0:	f002 f984 	bl	80037cc <HAL_SPI_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80014ca:	f7ff ffc9 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000254 	.word	0x20000254
 80014d8:	40013000 	.word	0x40013000

080014dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_SPI_MspInit+0x84>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12b      	bne.n	8001556 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 8001508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_SPI_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001536:	23a0      	movs	r3, #160	@ 0xa0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001546:	2305      	movs	r3, #5
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_SPI_MspInit+0x8c>)
 8001552:	f000 fc6f 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40013000 	.word	0x40013000
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_MspInit+0x4c>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	@ 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_MspInit+0x4c>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 fa27 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <USART2_IRQHandler+0x10>)
 8001622:	f002 ff6d 	bl	8004500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200002f8 	.word	0x200002f8

08001630 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <TIM7_IRQHandler+0x10>)
 8001636:	f002 fc33 	bl	8003ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002b0 	.word	0x200002b0

08001644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return 1;
 8001648:	2301      	movs	r3, #1
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_kill>:

int _kill(int pid, int sig)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165e:	f005 fa93 	bl	8006b88 <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2216      	movs	r2, #22
 8001666:	601a      	str	r2, [r3, #0]
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe7 	bl	8001654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001686:	bf00      	nop
 8001688:	e7fd      	b.n	8001686 <_exit+0x12>

0800168a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00a      	b.n	80016b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169c:	f3af 8000 	nop.w
 80016a0:	4601      	mov	r1, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbf0      	blt.n	800169c <_read+0x12>
  }

  return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ec:	605a      	str	r2, [r3, #4]
  return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_isatty>:

int _isatty(int file)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f005 fa14 	bl	8006b88 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	200002ac 	.word	0x200002ac
 8001794:	20000690 	.word	0x20000690

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	463b      	mov	r3, r7
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017cc:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <MX_TIM7_Init+0x68>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017d2:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80017d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 200;
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017e0:	22c8      	movs	r2, #200	@ 0xc8
 80017e2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_TIM7_Init+0x64>)
 80017ec:	f002 fa98 	bl	8003d20 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80017f6:	f7ff fe33 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM7_Init+0x64>)
 8001808:	f002 fd0e 	bl	8004228 <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001812:	f7ff fe25 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002b0 	.word	0x200002b0
 8001824:	40001400 	.word	0x40001400

08001828 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_TIM_Base_MspInit+0x48>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d115      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a0c      	ldr	r2, [pc, #48]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_TIM_Base_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2037      	movs	r0, #55	@ 0x37
 800185c:	f000 fa21 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001860:	2037      	movs	r0, #55	@ 0x37
 8001862:	f000 fa3a 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40001400 	.word	0x40001400
 8001874:	40023800 	.word	0x40023800

08001878 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <MX_USART2_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_USART2_UART_Init+0x4c>)
 80018b0:	f002 fd4a 	bl	8004348 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ba:	f7ff fdd1 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002f8 	.word	0x200002f8
 80018c8:	40004400 	.word	0x40004400

080018cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <HAL_UART_MspInit+0x94>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d133      	bne.n	8001956 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <HAL_UART_MspInit+0x98>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <HAL_UART_MspInit+0x98>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_UART_MspInit+0x98>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_UART_MspInit+0x98>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001926:	230c      	movs	r3, #12
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001936:	2307      	movs	r3, #7
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4809      	ldr	r0, [pc, #36]	@ (8001968 <HAL_UART_MspInit+0x9c>)
 8001942:	f000 fa77 	bl	8001e34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2026      	movs	r0, #38	@ 0x26
 800194c:	f000 f9a9 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001950:	2026      	movs	r0, #38	@ 0x26
 8001952:	f000 f9c2 	bl	8001cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40004400 	.word	0x40004400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001970:	f7ff ff12 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	@ (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	@ (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800199a:	f005 f8fb 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7ff fc11 	bl	80011c4 <main>
  bx  lr    
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019b0:	0800aa68 	.word	0x0800aa68
  ldr r2, =_sbss
 80019b4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019b8:	20000690 	.word	0x20000690

080019bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <HAL_Init+0x40>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_Init+0x40>)
 80019d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <HAL_Init+0x40>)
 80019e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 f94f 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ee:	200f      	movs	r0, #15
 80019f0:	f000 f808 	bl	8001a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fdba 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_InitTick+0x54>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_InitTick+0x58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f967 	bl	8001cf6 <HAL_SYSTICK_Config>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00e      	b.n	8001a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d80a      	bhi.n	8001a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f000 f92f 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a44:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <HAL_InitTick+0x5c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	20000014 	.word	0x20000014
 8001a60:	20000010 	.word	0x20000010

08001a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000014 	.word	0x20000014
 8001a88:	20000340 	.word	0x20000340

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000340 	.word	0x20000340

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000014 	.word	0x20000014

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff3e 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff31 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffa2 	bl	8001c48 <SysTick_Config>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff feb6 	bl	8001a8c <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d008      	beq.n	8001d40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e052      	b.n	8001de6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0216 	bic.w	r2, r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <HAL_DMA_Abort+0x62>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0208 	bic.w	r2, r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d90:	e013      	b.n	8001dba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d92:	f7ff fe7b 	bl	8001a8c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d90c      	bls.n	8001dba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e015      	b.n	8001de6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e4      	bne.n	8001d92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	223f      	movs	r2, #63	@ 0x3f
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d004      	beq.n	8001e0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00c      	b.n	8001e26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2205      	movs	r2, #5
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e165      	b.n	800211c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8154 	bne.w	8002116 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80ae 	beq.w	8002116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002134 <HAL_GPIO_Init+0x300>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8002134 <HAL_GPIO_Init+0x300>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fca:	4b5a      	ldr	r3, [pc, #360]	@ (8002134 <HAL_GPIO_Init+0x300>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <HAL_GPIO_Init+0x304>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	@ (800213c <HAL_GPIO_Init+0x308>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4e      	ldr	r2, [pc, #312]	@ (8002140 <HAL_GPIO_Init+0x30c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4d      	ldr	r2, [pc, #308]	@ (8002144 <HAL_GPIO_Init+0x310>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4c      	ldr	r2, [pc, #304]	@ (8002148 <HAL_GPIO_Init+0x314>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x20e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_GPIO_Init+0x318>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x20a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_GPIO_Init+0x31c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x206>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a49      	ldr	r2, [pc, #292]	@ (8002154 <HAL_GPIO_Init+0x320>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x202>
 8002032:	2306      	movs	r3, #6
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002036:	2307      	movs	r3, #7
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x21c>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	@ (8002138 <HAL_GPIO_Init+0x304>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a31      	ldr	r2, [pc, #196]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_GPIO_Init+0x324>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_GPIO_Init+0x324>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_GPIO_Init+0x324>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <HAL_GPIO_Init+0x324>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <HAL_GPIO_Init+0x324>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <HAL_GPIO_Init+0x324>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae96 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e12b      	b.n	80023fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe ffbc 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	@ 0x24
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f4:	f000 fe7a 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 80021f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a81      	ldr	r2, [pc, #516]	@ (8002404 <HAL_I2C_Init+0x274>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d807      	bhi.n	8002214 <HAL_I2C_Init+0x84>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a80      	ldr	r2, [pc, #512]	@ (8002408 <HAL_I2C_Init+0x278>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e006      	b.n	8002222 <HAL_I2C_Init+0x92>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a7d      	ldr	r2, [pc, #500]	@ (800240c <HAL_I2C_Init+0x27c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0e7      	b.n	80023fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a78      	ldr	r2, [pc, #480]	@ (8002410 <HAL_I2C_Init+0x280>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0c9b      	lsrs	r3, r3, #18
 8002234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a6a      	ldr	r2, [pc, #424]	@ (8002404 <HAL_I2C_Init+0x274>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d802      	bhi.n	8002264 <HAL_I2C_Init+0xd4>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3301      	adds	r3, #1
 8002262:	e009      	b.n	8002278 <HAL_I2C_Init+0xe8>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	4a69      	ldr	r2, [pc, #420]	@ (8002414 <HAL_I2C_Init+0x284>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	3301      	adds	r3, #1
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	430b      	orrs	r3, r1
 800227e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800228a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	495c      	ldr	r1, [pc, #368]	@ (8002404 <HAL_I2C_Init+0x274>)
 8002294:	428b      	cmp	r3, r1
 8002296:	d819      	bhi.n	80022cc <HAL_I2C_Init+0x13c>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1e59      	subs	r1, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a6:	1c59      	adds	r1, r3, #1
 80022a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022ac:	400b      	ands	r3, r1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_I2C_Init+0x138>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e59      	subs	r1, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c6:	e051      	b.n	800236c <HAL_I2C_Init+0x1dc>
 80022c8:	2304      	movs	r3, #4
 80022ca:	e04f      	b.n	800236c <HAL_I2C_Init+0x1dc>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d111      	bne.n	80022f8 <HAL_I2C_Init+0x168>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	440b      	add	r3, r1
 80022e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e012      	b.n	800231e <HAL_I2C_Init+0x18e>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Init+0x196>
 8002322:	2301      	movs	r3, #1
 8002324:	e022      	b.n	800236c <HAL_I2C_Init+0x1dc>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10e      	bne.n	800234c <HAL_I2C_Init+0x1bc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e58      	subs	r0, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	440b      	add	r3, r1
 800233c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234a:	e00f      	b.n	800236c <HAL_I2C_Init+0x1dc>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	0099      	lsls	r1, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	6809      	ldr	r1, [r1, #0]
 8002370:	4313      	orrs	r3, r2
 8002372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800239a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6911      	ldr	r1, [r2, #16]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	000186a0 	.word	0x000186a0
 8002408:	001e847f 	.word	0x001e847f
 800240c:	003d08ff 	.word	0x003d08ff
 8002410:	431bde83 	.word	0x431bde83
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	@ 0x30
 800241c:	af02      	add	r7, sp, #8
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	461a      	mov	r2, r3
 8002424:	460b      	mov	r3, r1
 8002426:	817b      	strh	r3, [r7, #10]
 8002428:	4613      	mov	r3, r2
 800242a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff fb2e 	bl	8001a8c <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	f040 8217 	bne.w	800286e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2319      	movs	r3, #25
 8002446:	2201      	movs	r2, #1
 8002448:	497c      	ldr	r1, [pc, #496]	@ (800263c <HAL_I2C_Master_Receive+0x224>)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fae4 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	e20a      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_I2C_Master_Receive+0x50>
 8002464:	2302      	movs	r3, #2
 8002466:	e203      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d007      	beq.n	800248e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2222      	movs	r2, #34	@ 0x22
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2210      	movs	r2, #16
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	893a      	ldrh	r2, [r7, #8]
 80024be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a5c      	ldr	r2, [pc, #368]	@ (8002640 <HAL_I2C_Master_Receive+0x228>)
 80024ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d0:	8979      	ldrh	r1, [r7, #10]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f9d0 	bl	800287c <I2C_MasterRequestRead>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e1c4      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d113      	bne.n	8002516 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e198      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	2b01      	cmp	r3, #1
 800251c:	d11b      	bne.n	8002556 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e178      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	2b02      	cmp	r3, #2
 800255c:	d11b      	bne.n	8002596 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800257c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	e158      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025bc:	e144      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	f200 80f1 	bhi.w	80027aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d123      	bne.n	8002618 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fb39 	bl	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e145      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002616:	e117      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	2b02      	cmp	r3, #2
 800261e:	d14e      	bne.n	80026be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	2200      	movs	r2, #0
 8002628:	4906      	ldr	r1, [pc, #24]	@ (8002644 <HAL_I2C_Master_Receive+0x22c>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f9f4 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e11a      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
 800263a:	bf00      	nop
 800263c:	00100002 	.word	0x00100002
 8002640:	ffff0000 	.word	0xffff0000
 8002644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026bc:	e0c4      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	2200      	movs	r2, #0
 80026c6:	496c      	ldr	r1, [pc, #432]	@ (8002878 <HAL_I2C_Master_Receive+0x460>)
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f9a5 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0cb      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	2200      	movs	r2, #0
 8002722:	4955      	ldr	r1, [pc, #340]	@ (8002878 <HAL_I2C_Master_Receive+0x460>)
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f977 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e09d      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a8:	e04e      	b.n	8002848 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fa4c 	bl	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e058      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d124      	bne.n	8002848 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002814:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f aeb6 	bne.w	80025be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
  }
}
 8002870:	4618      	mov	r0, r3
 8002872:	3728      	adds	r7, #40	@ 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	00010004 	.word	0x00010004

0800287c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d006      	beq.n	80028b6 <I2C_MasterRequestRead+0x3a>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d003      	beq.n	80028b6 <I2C_MasterRequestRead+0x3a>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028b4:	d108      	bne.n	80028c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00b      	b.n	80028e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	2b11      	cmp	r3, #17
 80028ce:	d107      	bne.n	80028e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f893 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002906:	d103      	bne.n	8002910 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e079      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800291c:	d108      	bne.n	8002930 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	e05f      	b.n	80029f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	11db      	asrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f063 030f 	orn	r3, r3, #15
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4930      	ldr	r1, [pc, #192]	@ (8002a10 <I2C_MasterRequestRead+0x194>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f8dc 	bl	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e054      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4929      	ldr	r1, [pc, #164]	@ (8002a14 <I2C_MasterRequestRead+0x198>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f8cc 	bl	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e044      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f831 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ca:	d103      	bne.n	80029d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e017      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029d8:	897b      	ldrh	r3, [r7, #10]
 80029da:	11db      	asrs	r3, r3, #7
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f003 0306 	and.w	r3, r3, #6
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f063 030e 	orn	r3, r3, #14
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4907      	ldr	r1, [pc, #28]	@ (8002a14 <I2C_MasterRequestRead+0x198>)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f888 	bl	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	00010008 	.word	0x00010008
 8002a14:	00010002 	.word	0x00010002

08002a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a28:	e048      	b.n	8002abc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d044      	beq.n	8002abc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7ff f82b 	bl	8001a8c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d139      	bne.n	8002abc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10d      	bne.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	e00c      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d116      	bne.n	8002abc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e023      	b.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	0c1b      	lsrs	r3, r3, #16
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d10d      	bne.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	e00c      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d093      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b1a:	e071      	b.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2a:	d123      	bne.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e067      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d041      	beq.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7c:	f7fe ff86 	bl	8001a8c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d302      	bcc.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d136      	bne.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10c      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e00b      	b.n	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e021      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10c      	bne.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e00b      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f af6d 	bne.w	8002b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	e049      	b.n	8002cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d119      	bne.n	8002c9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0210 	mvn.w	r2, #16
 8002c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e030      	b.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7fe fef6 	bl	8001a8c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d302      	bcc.n	8002cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d11d      	bne.n	8002cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d016      	beq.n	8002cee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f043 0220 	orr.w	r2, r3, #32
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e007      	b.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b40      	cmp	r3, #64	@ 0x40
 8002cfa:	d1ae      	bne.n	8002c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b68      	ldr	r3, [pc, #416]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90c      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a58      	ldr	r2, [pc, #352]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a52      	ldr	r2, [pc, #328]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e067      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4934      	ldr	r1, [pc, #208]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fe48 	bl	8001a8c <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe fe44 	bl	8001a8c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d20c      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f855 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490a      	ldr	r1, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fda8 	bl	8001a04 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	0800a28c 	.word	0x0800a28c
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	20000010 	.word	0x20000010

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	@ (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	2000000c 	.word	0x2000000c

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	@ (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	0800a29c 	.word	0x0800a29c

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	0800a29c 	.word	0x0800a29c

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b0a6      	sub	sp, #152	@ 0x98
 8002f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f62:	4bc8      	ldr	r3, [pc, #800]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	f200 817e 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x330>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	0800326d 	.word	0x0800326d
 8002f80:	0800326d 	.word	0x0800326d
 8002f84:	0800326d 	.word	0x0800326d
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	0800326d 	.word	0x0800326d
 8002f90:	0800326d 	.word	0x0800326d
 8002f94:	0800326d 	.word	0x0800326d
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	0800326d 	.word	0x0800326d
 8002fa0:	0800326d 	.word	0x0800326d
 8002fa4:	0800326d 	.word	0x0800326d
 8002fa8:	08003127 	.word	0x08003127
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4bb6      	ldr	r3, [pc, #728]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fb2:	e15f      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb4:	4bb5      	ldr	r3, [pc, #724]	@ (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8002fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fba:	e15b      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fbc:	4bb1      	ldr	r3, [pc, #708]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc8:	4bae      	ldr	r3, [pc, #696]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd4:	4bab      	ldr	r3, [pc, #684]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fe8:	2300      	movs	r3, #0
 8002fea:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fec:	4ba7      	ldr	r3, [pc, #668]	@ (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8002fee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	fb03 f202 	mul.w	r2, r3, r2
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	4aa2      	ldr	r2, [pc, #648]	@ (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003004:	4621      	mov	r1, r4
 8003006:	fba1 1202 	umull	r1, r2, r1, r2
 800300a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800300c:	460a      	mov	r2, r1
 800300e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003010:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003012:	4413      	add	r3, r2
 8003014:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800301a:	2200      	movs	r2, #0
 800301c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800301e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003024:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003028:	f7fd fe4e 	bl	8000cc8 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003036:	e064      	b.n	8003102 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003038:	4b92      	ldr	r3, [pc, #584]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	2200      	movs	r2, #0
 8003040:	653b      	str	r3, [r7, #80]	@ 0x50
 8003042:	657a      	str	r2, [r7, #84]	@ 0x54
 8003044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304c:	2300      	movs	r3, #0
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003050:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003054:	4622      	mov	r2, r4
 8003056:	462b      	mov	r3, r5
 8003058:	f04f 0000 	mov.w	r0, #0
 800305c:	f04f 0100 	mov.w	r1, #0
 8003060:	0159      	lsls	r1, r3, #5
 8003062:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003066:	0150      	lsls	r0, r2, #5
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4621      	mov	r1, r4
 800306e:	1a51      	subs	r1, r2, r1
 8003070:	6139      	str	r1, [r7, #16]
 8003072:	4629      	mov	r1, r5
 8003074:	eb63 0301 	sbc.w	r3, r3, r1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003086:	4659      	mov	r1, fp
 8003088:	018b      	lsls	r3, r1, #6
 800308a:	4651      	mov	r1, sl
 800308c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003090:	4651      	mov	r1, sl
 8003092:	018a      	lsls	r2, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ebb2 0801 	subs.w	r8, r2, r1
 800309a:	4659      	mov	r1, fp
 800309c:	eb63 0901 	sbc.w	r9, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b4:	4690      	mov	r8, r2
 80030b6:	4699      	mov	r9, r3
 80030b8:	4623      	mov	r3, r4
 80030ba:	eb18 0303 	adds.w	r3, r8, r3
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	462b      	mov	r3, r5
 80030c2:	eb49 0303 	adc.w	r3, r9, r3
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030d4:	4629      	mov	r1, r5
 80030d6:	028b      	lsls	r3, r1, #10
 80030d8:	4621      	mov	r1, r4
 80030da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030de:	4621      	mov	r1, r4
 80030e0:	028a      	lsls	r2, r1, #10
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ea:	2200      	movs	r2, #0
 80030ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80030f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030f4:	f7fd fde8 	bl	8000cc8 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003102:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	3301      	adds	r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003114:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003118:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003124:	e0a6      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003126:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003132:	4b54      	ldr	r3, [pc, #336]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02a      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313e:	4b51      	ldr	r3, [pc, #324]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	099b      	lsrs	r3, r3, #6
 8003144:	2200      	movs	r2, #0
 8003146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003150:	2100      	movs	r1, #0
 8003152:	4b4e      	ldr	r3, [pc, #312]	@ (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003154:	fb03 f201 	mul.w	r2, r3, r1
 8003158:	2300      	movs	r3, #0
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	4413      	add	r3, r2
 8003160:	4a4a      	ldr	r2, [pc, #296]	@ (800328c <HAL_RCC_GetSysClockFreq+0x350>)
 8003162:	fba0 1202 	umull	r1, r2, r0, r2
 8003166:	677a      	str	r2, [r7, #116]	@ 0x74
 8003168:	460a      	mov	r2, r1
 800316a:	673a      	str	r2, [r7, #112]	@ 0x70
 800316c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800316e:	4413      	add	r3, r2
 8003170:	677b      	str	r3, [r7, #116]	@ 0x74
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003176:	2200      	movs	r2, #0
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
 800317a:	637a      	str	r2, [r7, #52]	@ 0x34
 800317c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003180:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003184:	f7fd fda0 	bl	8000cc8 <__aeabi_uldivmod>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4613      	mov	r3, r2
 800318e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003192:	e05b      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003194:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	099b      	lsrs	r3, r3, #6
 800319a:	2200      	movs	r2, #0
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003234:	2200      	movs	r2, #0
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323e:	f7fd fd43 	bl	8000cc8 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4613      	mov	r3, r2
 8003248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800324c:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x348>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800325a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800325e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800326a:	e003      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x34c>)
 800326e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003272:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003274:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003278:	4618      	mov	r0, r3
 800327a:	3798      	adds	r7, #152	@ 0x98
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	017d7840 	.word	0x017d7840

08003290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e28d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8083 	beq.w	80033b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80032b0:	4b94      	ldr	r3, [pc, #592]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d019      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032bc:	4b91      	ldr	r3, [pc, #580]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d4:	d00c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d112      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	4b84      	ldr	r3, [pc, #528]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05b      	beq.n	80033b4 <HAL_RCC_OscConfig+0x124>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d157      	bne.n	80033b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e25a      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x90>
 8003312:	4b7c      	ldr	r3, [pc, #496]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7b      	ldr	r2, [pc, #492]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	e01d      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0xb4>
 800332a:	4b76      	ldr	r3, [pc, #472]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a75      	ldr	r2, [pc, #468]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b73      	ldr	r3, [pc, #460]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a72      	ldr	r2, [pc, #456]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e00b      	b.n	800335c <HAL_RCC_OscConfig+0xcc>
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b6c      	ldr	r3, [pc, #432]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fb92 	bl	8001a8c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fb8e 	bl	8001a8c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e21f      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b61      	ldr	r3, [pc, #388]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0xdc>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fb7e 	bl	8001a8c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fb7a 	bl	8001a8c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	@ 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e20b      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	4b57      	ldr	r3, [pc, #348]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x104>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d06f      	beq.n	80034a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033c2:	4b50      	ldr	r3, [pc, #320]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d105      	bne.n	80033e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033da:	4b4a      	ldr	r3, [pc, #296]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b47      	ldr	r3, [pc, #284]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b44      	ldr	r3, [pc, #272]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1d3      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x278>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe fb27 	bl	8001a8c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe fb23 	bl	8001a8c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1b4      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4925      	ldr	r1, [pc, #148]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCC_OscConfig+0x278>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe fb06 	bl	8001a8c <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe fb02 	bl	8001a8c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e193      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d036      	beq.n	800351c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034bc:	f7fe fae6 	bl	8001a8c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe fae2 	bl	8001a8c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e173      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_OscConfig+0x274>)
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x234>
 80034e2:	e01b      	b.n	800351c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_OscConfig+0x27c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe facf 	bl	8001a8c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f0:	e00e      	b.n	8003510 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f2:	f7fe facb 	bl	8001a8c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d907      	bls.n	8003510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e15c      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 8003504:	40023800 	.word	0x40023800
 8003508:	42470000 	.word	0x42470000
 800350c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b8a      	ldr	r3, [pc, #552]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ea      	bne.n	80034f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8097 	beq.w	8003658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b83      	ldr	r3, [pc, #524]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b7f      	ldr	r3, [pc, #508]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	4a7e      	ldr	r2, [pc, #504]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	@ 0x40
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fa8b 	bl	8001a8c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fa87 	bl	8001a8c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	@ (8003740 <HAL_RCC_OscConfig+0x4b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x31e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a4:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x340>
 80035b6:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	f043 0304 	orr.w	r3, r3, #4
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c2:	4b5e      	ldr	r3, [pc, #376]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c6:	4a5d      	ldr	r2, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0x358>
 80035d0:	4b5a      	ldr	r3, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a59      	ldr	r2, [pc, #356]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	@ 0x70
 80035dc:	4b57      	ldr	r3, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe fa4c 	bl	8001a8c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fa48 	bl	8001a8c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e0d7      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RCC_OscConfig+0x368>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fa36 	bl	8001a8c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fe fa32 	bl	8001a8c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e0c1      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	4b40      	ldr	r3, [pc, #256]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1ee      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80ad 	beq.w	80037bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003662:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b08      	cmp	r3, #8
 800366c:	d060      	beq.n	8003730 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d145      	bne.n	8003702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fa06 	bl	8001a8c <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fa02 	bl	8001a8c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e093      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	491b      	ldr	r1, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f9d7 	bl	8001a8c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe f9d3 	bl	8001a8c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e064      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x452>
 8003700:	e05c      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_RCC_OscConfig+0x4b4>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe f9c0 	bl	8001a8c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f9bc 	bl	8001a8c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04d      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_OscConfig+0x4ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x480>
 800372e:	e045      	b.n	80037bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
 8003744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <HAL_RCC_OscConfig+0x538>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d030      	beq.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d129      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d122      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d119      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d10f      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07b      	b.n	80038d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d108      	bne.n	80037f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ee:	d009      	beq.n	8003804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
 80037f6:	e005      	b.n	8003804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd fe5c 	bl	80014dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	ea42 0103 	orr.w	r1, r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0104 	and.w	r1, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f003 0210 	and.w	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b088      	sub	sp, #32
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ee:	f7fe f8cd 	bl	8001a8c <HAL_GetTick>
 80038f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
 8003906:	e12a      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_SPI_Transmit+0x36>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e122      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_SPI_Transmit+0x48>
 8003922:	2302      	movs	r3, #2
 8003924:	e11b      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2203      	movs	r2, #3
 8003932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	88fa      	ldrh	r2, [r7, #6]
 800394c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003974:	d10f      	bne.n	8003996 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039bc:	d152      	bne.n	8003a64 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Transmit+0xee>
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d145      	bne.n	8003a58 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f0:	e032      	b.n	8003a58 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d112      	bne.n	8003a26 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a24:	e018      	b.n	8003a58 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a26:	f7fe f831 	bl	8001a8c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d803      	bhi.n	8003a3e <HAL_SPI_Transmit+0x160>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Transmit+0x166>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e082      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1c7      	bne.n	80039f2 <HAL_SPI_Transmit+0x114>
 8003a62:	e053      	b.n	8003b0c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x194>
 8003a6c:	8b7b      	ldrh	r3, [r7, #26]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d147      	bne.n	8003b02 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a98:	e033      	b.n	8003b02 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d113      	bne.n	8003ad0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ace:	e018      	b.n	8003b02 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad0:	f7fd ffdc 	bl	8001a8c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_Transmit+0x20a>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Transmit+0x210>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e02d      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1c6      	bne.n	8003a9a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8b1 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b78:	f7fd ff88 	bl	8001a8c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b88:	f7fd ff80 	bl	8001a8c <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	@ (8003c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	015b      	lsls	r3, r3, #5
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	e054      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d050      	beq.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba8:	f7fd ff70 	bl	8001a8c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bd6:	d111      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be0:	d004      	beq.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bea:	d107      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c04:	d10f      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e017      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d19b      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	2000000c 	.word	0x2000000c

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff6a 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e032      	b.n	8003d10 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003caa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <SPI_EndRxTxTransaction+0xa0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1b      	ldr	r2, [pc, #108]	@ (8003d1c <SPI_EndRxTxTransaction+0xa4>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0d5b      	lsrs	r3, r3, #21
 8003cb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc8:	d112      	bne.n	8003cf0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	@ 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff47 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e00f      	b.n	8003d10 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d0f2      	beq.n	8003cf0 <SPI_EndRxTxTransaction+0x78>
 8003d0a:	e000      	b.n	8003d0e <SPI_EndRxTxTransaction+0x96>
        break;
 8003d0c:	bf00      	nop
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000000c 	.word	0x2000000c
 8003d1c:	165e9f81 	.word	0x165e9f81

08003d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd fd6e 	bl	8001828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 f9b6 	bl	80040d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04e      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d01d      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	@ (8003e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d111      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d010      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e007      	b.n	8003e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40001800 	.word	0x40001800

08003ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0202 	mvn.w	r2, #2
 8003ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8d2 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8c4 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8d5 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0204 	mvn.w	r2, #4
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f8ac 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f89e 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8af 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0208 	mvn.w	r2, #8
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f886 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f878 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f889 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0210 	mvn.w	r2, #16
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f860 	bl	8004094 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f852 	bl	8004080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f863 	bl	80040a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0201 	mvn.w	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fa1a 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f982 	bl	8004334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f834 	bl	80040bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0220 	mvn.w	r2, #32
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f954 	bl	8004320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a46      	ldr	r2, [pc, #280]	@ (80041fc <TIM_Base_SetConfig+0x12c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ee:	d00f      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a43      	ldr	r2, [pc, #268]	@ (8004200 <TIM_Base_SetConfig+0x130>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00b      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a42      	ldr	r2, [pc, #264]	@ (8004204 <TIM_Base_SetConfig+0x134>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a41      	ldr	r2, [pc, #260]	@ (8004208 <TIM_Base_SetConfig+0x138>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0x40>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a40      	ldr	r2, [pc, #256]	@ (800420c <TIM_Base_SetConfig+0x13c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a35      	ldr	r2, [pc, #212]	@ (80041fc <TIM_Base_SetConfig+0x12c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004130:	d027      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a32      	ldr	r2, [pc, #200]	@ (8004200 <TIM_Base_SetConfig+0x130>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d023      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a31      	ldr	r2, [pc, #196]	@ (8004204 <TIM_Base_SetConfig+0x134>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01f      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a30      	ldr	r2, [pc, #192]	@ (8004208 <TIM_Base_SetConfig+0x138>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2f      	ldr	r2, [pc, #188]	@ (800420c <TIM_Base_SetConfig+0x13c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d017      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a2e      	ldr	r2, [pc, #184]	@ (8004210 <TIM_Base_SetConfig+0x140>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2d      	ldr	r2, [pc, #180]	@ (8004214 <TIM_Base_SetConfig+0x144>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00f      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <TIM_Base_SetConfig+0x148>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2b      	ldr	r2, [pc, #172]	@ (800421c <TIM_Base_SetConfig+0x14c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2a      	ldr	r2, [pc, #168]	@ (8004220 <TIM_Base_SetConfig+0x150>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a29      	ldr	r2, [pc, #164]	@ (8004224 <TIM_Base_SetConfig+0x154>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a10      	ldr	r2, [pc, #64]	@ (80041fc <TIM_Base_SetConfig+0x12c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0xf8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a12      	ldr	r2, [pc, #72]	@ (800420c <TIM_Base_SetConfig+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d103      	bne.n	80041d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d105      	bne.n	80041ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	611a      	str	r2, [r3, #16]
  }
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800
 800421c:	40001800 	.word	0x40001800
 8004220:	40001c00 	.word	0x40001c00
 8004224:	40002000 	.word	0x40002000

08004228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800423c:	2302      	movs	r3, #2
 800423e:	e05a      	b.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d022      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428c:	d01d      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1d      	ldr	r2, [pc, #116]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d018      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1b      	ldr	r2, [pc, #108]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a18      	ldr	r2, [pc, #96]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10c      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40010400 	.word	0x40010400
 8004318:	40014000 	.word	0x40014000
 800431c:	40001800 	.word	0x40001800

08004320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e042      	b.n	80043e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd faac 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd69 	bl	8004e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	d175      	bne.n	80044f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_UART_Transmit+0x2c>
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e06e      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	@ 0x21
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004426:	f7fd fb31 	bl	8001a8c <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800445c:	e02e      	b.n	80044bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	2180      	movs	r1, #128	@ 0x80
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fb05 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e03a      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cb      	bne.n	800445e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	@ 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fad1 	bl	8004a78 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e000      	b.n	80044f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
  }
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0ba      	sub	sp, #232	@ 0xe8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800453e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_UART_IRQHandler+0x66>
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fbc2 	bl	8004ce8 <UART_Receive_IT>
      return;
 8004564:	e25b      	b.n	8004a1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80de 	beq.w	800472c <HAL_UART_IRQHandler+0x22c>
 8004570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004580:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80d1 	beq.w	800472c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_UART_IRQHandler+0xae>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <HAL_UART_IRQHandler+0xd2>
 80045ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0202 	orr.w	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_UART_IRQHandler+0xf6>
 80045de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d011      	beq.n	8004626 <HAL_UART_IRQHandler+0x126>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f043 0208 	orr.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 81f2 	beq.w	8004a14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_UART_IRQHandler+0x14e>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb4d 	bl	8004ce8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_UART_IRQHandler+0x17a>
 8004672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d04f      	beq.n	800471a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa55 	bl	8004b2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468a:	2b40      	cmp	r3, #64	@ 0x40
 800468c:	d141      	bne.n	8004712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3314      	adds	r3, #20
 80046b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1d9      	bne.n	800468e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	4a7e      	ldr	r2, [pc, #504]	@ (80048e0 <HAL_UART_IRQHandler+0x3e0>)
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd fb7d 	bl	8001dee <HAL_DMA_Abort_IT>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004704:	4610      	mov	r0, r2
 8004706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e00e      	b.n	8004728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f99e 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e00a      	b.n	8004728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f99a 	bl	8004a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e006      	b.n	8004728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f996 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004726:	e175      	b.n	8004a14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	bf00      	nop
    return;
 800472a:	e173      	b.n	8004a14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 814f 	bne.w	80049d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8148 	beq.w	80049d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8141 	beq.w	80049d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b40      	cmp	r3, #64	@ 0x40
 8004774:	f040 80b6 	bne.w	80048e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8145 	beq.w	8004a18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004796:	429a      	cmp	r2, r3
 8004798:	f080 813e 	bcs.w	8004a18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	f000 8088 	beq.w	80048c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1d9      	bne.n	80047b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800480e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004822:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004826:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800482a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e1      	bne.n	80047fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800484a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800484c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800485e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004860:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004864:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800486c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e3      	bne.n	800483a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	f023 0310 	bic.w	r3, r3, #16
 8004896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e3      	bne.n	8004880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd fa26 	bl	8001d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8c1 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048de:	e09b      	b.n	8004a18 <HAL_UART_IRQHandler+0x518>
 80048e0:	08004bf1 	.word	0x08004bf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 808e 	beq.w	8004a1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8089 	beq.w	8004a1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800491a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800492e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800493c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e3      	bne.n	800490a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	623b      	str	r3, [r7, #32]
   return(result);
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004966:	633a      	str	r2, [r7, #48]	@ 0x30
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e3      	bne.n	8004942 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	60fb      	str	r3, [r7, #12]
   return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0310 	bic.w	r3, r3, #16
 800499e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049ac:	61fa      	str	r2, [r7, #28]
 80049ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e3      	bne.n	8004988 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f847 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049d2:	e023      	b.n	8004a1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d009      	beq.n	80049f4 <HAL_UART_IRQHandler+0x4f4>
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f913 	bl	8004c18 <UART_Transmit_IT>
    return;
 80049f2:	e014      	b.n	8004a1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <HAL_UART_IRQHandler+0x51e>
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f953 	bl	8004cb8 <UART_EndTransmit_IT>
    return;
 8004a12:	e004      	b.n	8004a1e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a14:	bf00      	nop
 8004a16:	e002      	b.n	8004a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a1c:	bf00      	nop
  }
}
 8004a1e:	37e8      	adds	r7, #232	@ 0xe8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	e03b      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d037      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a92:	f7fc fffb 	bl	8001a8c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	6a3a      	ldr	r2, [r7, #32]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d302      	bcc.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e03a      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d023      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b80      	cmp	r3, #128	@ 0x80
 8004abe:	d020      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b40      	cmp	r3, #64	@ 0x40
 8004ac4:	d01d      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d116      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f81d 	bl	8004b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2208      	movs	r2, #8
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00f      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d0b4      	beq.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b095      	sub	sp, #84	@ 0x54
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b52:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d119      	bne.n	8004bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc2:	61ba      	str	r2, [r7, #24]
 8004bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004be4:	bf00      	nop
 8004be6:	3754      	adds	r7, #84	@ 0x54
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff ff1e 	bl	8004a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b21      	cmp	r3, #33	@ 0x21
 8004c2a:	d13e      	bne.n	8004caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c34:	d114      	bne.n	8004c60 <UART_Transmit_IT+0x48>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d110      	bne.n	8004c60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	1c9a      	adds	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]
 8004c5e:	e008      	b.n	8004c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6211      	str	r1, [r2, #32]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
  }
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fea3 	bl	8004a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	@ 0x30
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b22      	cmp	r3, #34	@ 0x22
 8004cfa:	f040 80ae 	bne.w	8004e5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d117      	bne.n	8004d38 <UART_Receive_IT+0x50>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d113      	bne.n	8004d38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d36:	e026      	b.n	8004d86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d4a:	d007      	beq.n	8004d5c <UART_Receive_IT+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <UART_Receive_IT+0x82>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e008      	b.n	8004d7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4619      	mov	r1, r3
 8004d94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d15d      	bne.n	8004e56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0220 	bic.w	r2, r2, #32
 8004da8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d135      	bne.n	8004e4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f023 0310 	bic.w	r3, r3, #16
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e06:	623a      	str	r2, [r7, #32]
 8004e08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	69f9      	ldr	r1, [r7, #28]
 8004e0c:	6a3a      	ldr	r2, [r7, #32]
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e5      	bne.n	8004de6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d10a      	bne.n	8004e3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fe0b 	bl	8004a60 <HAL_UARTEx_RxEventCallback>
 8004e4a:	e002      	b.n	8004e52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fdf3 	bl	8004a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e002      	b.n	8004e5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3730      	adds	r7, #48	@ 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b0c0      	sub	sp, #256	@ 0x100
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	ea40 0301 	orr.w	r3, r0, r1
 8004e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ebc:	f021 010c 	bic.w	r1, r1, #12
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ede:	6999      	ldr	r1, [r3, #24]
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	ea40 0301 	orr.w	r3, r0, r1
 8004eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8005130 <UART_SetConfig+0x2cc>)
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d005      	beq.n	8004f04 <UART_SetConfig+0xa0>
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b8d      	ldr	r3, [pc, #564]	@ (8005134 <UART_SetConfig+0x2d0>)
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d104      	bne.n	8004f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f04:	f7fe f806 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f0c:	e003      	b.n	8004f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f0e:	f7fd ffed 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f20:	f040 810c 	bne.w	800513c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	1891      	adds	r1, r2, r2
 8004f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f3e:	415b      	adcs	r3, r3
 8004f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f46:	4621      	mov	r1, r4
 8004f48:	eb12 0801 	adds.w	r8, r2, r1
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	eb43 0901 	adc.w	r9, r3, r1
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f66:	4690      	mov	r8, r2
 8004f68:	4699      	mov	r9, r3
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	eb18 0303 	adds.w	r3, r8, r3
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f74:	462b      	mov	r3, r5
 8004f76:	eb49 0303 	adc.w	r3, r9, r3
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f92:	460b      	mov	r3, r1
 8004f94:	18db      	adds	r3, r3, r3
 8004f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f98:	4613      	mov	r3, r2
 8004f9a:	eb42 0303 	adc.w	r3, r2, r3
 8004f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fa8:	f7fb fe8e 	bl	8000cc8 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4b61      	ldr	r3, [pc, #388]	@ (8005138 <UART_SetConfig+0x2d4>)
 8004fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	011c      	lsls	r4, r3, #4
 8004fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fcc:	4642      	mov	r2, r8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fdc:	4641      	mov	r1, r8
 8004fde:	eb12 0a01 	adds.w	sl, r2, r1
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ffc:	4692      	mov	sl, r2
 8004ffe:	469b      	mov	fp, r3
 8005000:	4643      	mov	r3, r8
 8005002:	eb1a 0303 	adds.w	r3, sl, r3
 8005006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800500a:	464b      	mov	r3, r9
 800500c:	eb4b 0303 	adc.w	r3, fp, r3
 8005010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005028:	460b      	mov	r3, r1
 800502a:	18db      	adds	r3, r3, r3
 800502c:	643b      	str	r3, [r7, #64]	@ 0x40
 800502e:	4613      	mov	r3, r2
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	647b      	str	r3, [r7, #68]	@ 0x44
 8005036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800503a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800503e:	f7fb fe43 	bl	8000cc8 <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4611      	mov	r1, r2
 8005048:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <UART_SetConfig+0x2d4>)
 800504a:	fba3 2301 	umull	r2, r3, r3, r1
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2264      	movs	r2, #100	@ 0x64
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	1acb      	subs	r3, r1, r3
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800505e:	4b36      	ldr	r3, [pc, #216]	@ (8005138 <UART_SetConfig+0x2d4>)
 8005060:	fba3 2302 	umull	r2, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800506c:	441c      	add	r4, r3
 800506e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005072:	2200      	movs	r2, #0
 8005074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800507c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	1891      	adds	r1, r2, r2
 8005086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005088:	415b      	adcs	r3, r3
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800508c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005090:	4641      	mov	r1, r8
 8005092:	1851      	adds	r1, r2, r1
 8005094:	6339      	str	r1, [r7, #48]	@ 0x30
 8005096:	4649      	mov	r1, r9
 8005098:	414b      	adcs	r3, r1
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050a8:	4659      	mov	r1, fp
 80050aa:	00cb      	lsls	r3, r1, #3
 80050ac:	4651      	mov	r1, sl
 80050ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b2:	4651      	mov	r1, sl
 80050b4:	00ca      	lsls	r2, r1, #3
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	4642      	mov	r2, r8
 80050be:	189b      	adds	r3, r3, r2
 80050c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050c4:	464b      	mov	r3, r9
 80050c6:	460a      	mov	r2, r1
 80050c8:	eb42 0303 	adc.w	r3, r2, r3
 80050cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050e4:	460b      	mov	r3, r1
 80050e6:	18db      	adds	r3, r3, r3
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ea:	4613      	mov	r3, r2
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050fa:	f7fb fde5 	bl	8000cc8 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4b0d      	ldr	r3, [pc, #52]	@ (8005138 <UART_SetConfig+0x2d4>)
 8005104:	fba3 1302 	umull	r1, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2164      	movs	r1, #100	@ 0x64
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	3332      	adds	r3, #50	@ 0x32
 8005116:	4a08      	ldr	r2, [pc, #32]	@ (8005138 <UART_SetConfig+0x2d4>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 0207 	and.w	r2, r3, #7
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4422      	add	r2, r4
 800512a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800512c:	e106      	b.n	800533c <UART_SetConfig+0x4d8>
 800512e:	bf00      	nop
 8005130:	40011000 	.word	0x40011000
 8005134:	40011400 	.word	0x40011400
 8005138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800513c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005140:	2200      	movs	r2, #0
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800514a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800514e:	4642      	mov	r2, r8
 8005150:	464b      	mov	r3, r9
 8005152:	1891      	adds	r1, r2, r2
 8005154:	6239      	str	r1, [r7, #32]
 8005156:	415b      	adcs	r3, r3
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
 800515a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515e:	4641      	mov	r1, r8
 8005160:	1854      	adds	r4, r2, r1
 8005162:	4649      	mov	r1, r9
 8005164:	eb43 0501 	adc.w	r5, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	00eb      	lsls	r3, r5, #3
 8005172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005176:	00e2      	lsls	r2, r4, #3
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	4643      	mov	r3, r8
 800517e:	18e3      	adds	r3, r4, r3
 8005180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005184:	464b      	mov	r3, r9
 8005186:	eb45 0303 	adc.w	r3, r5, r3
 800518a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800519a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051aa:	4629      	mov	r1, r5
 80051ac:	008b      	lsls	r3, r1, #2
 80051ae:	4621      	mov	r1, r4
 80051b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b4:	4621      	mov	r1, r4
 80051b6:	008a      	lsls	r2, r1, #2
 80051b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051bc:	f7fb fd84 	bl	8000cc8 <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4b60      	ldr	r3, [pc, #384]	@ (8005348 <UART_SetConfig+0x4e4>)
 80051c6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	011c      	lsls	r4, r3, #4
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	1891      	adds	r1, r2, r2
 80051e6:	61b9      	str	r1, [r7, #24]
 80051e8:	415b      	adcs	r3, r3
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f0:	4641      	mov	r1, r8
 80051f2:	1851      	adds	r1, r2, r1
 80051f4:	6139      	str	r1, [r7, #16]
 80051f6:	4649      	mov	r1, r9
 80051f8:	414b      	adcs	r3, r1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005208:	4659      	mov	r1, fp
 800520a:	00cb      	lsls	r3, r1, #3
 800520c:	4651      	mov	r1, sl
 800520e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005212:	4651      	mov	r1, sl
 8005214:	00ca      	lsls	r2, r1, #3
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	4603      	mov	r3, r0
 800521c:	4642      	mov	r2, r8
 800521e:	189b      	adds	r3, r3, r2
 8005220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005224:	464b      	mov	r3, r9
 8005226:	460a      	mov	r2, r1
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800523a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005248:	4649      	mov	r1, r9
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	4641      	mov	r1, r8
 800524e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005252:	4641      	mov	r1, r8
 8005254:	008a      	lsls	r2, r1, #2
 8005256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800525a:	f7fb fd35 	bl	8000cc8 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4611      	mov	r1, r2
 8005264:	4b38      	ldr	r3, [pc, #224]	@ (8005348 <UART_SetConfig+0x4e4>)
 8005266:	fba3 2301 	umull	r2, r3, r3, r1
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2264      	movs	r2, #100	@ 0x64
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	1acb      	subs	r3, r1, r3
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	3332      	adds	r3, #50	@ 0x32
 8005278:	4a33      	ldr	r2, [pc, #204]	@ (8005348 <UART_SetConfig+0x4e4>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005284:	441c      	add	r4, r3
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	673b      	str	r3, [r7, #112]	@ 0x70
 800528e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	1891      	adds	r1, r2, r2
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	415b      	adcs	r3, r3
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052a4:	4641      	mov	r1, r8
 80052a6:	1851      	adds	r1, r2, r1
 80052a8:	6039      	str	r1, [r7, #0]
 80052aa:	4649      	mov	r1, r9
 80052ac:	414b      	adcs	r3, r1
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052bc:	4659      	mov	r1, fp
 80052be:	00cb      	lsls	r3, r1, #3
 80052c0:	4651      	mov	r1, sl
 80052c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052c6:	4651      	mov	r1, sl
 80052c8:	00ca      	lsls	r2, r1, #3
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	4642      	mov	r2, r8
 80052d2:	189b      	adds	r3, r3, r2
 80052d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052d6:	464b      	mov	r3, r9
 80052d8:	460a      	mov	r2, r1
 80052da:	eb42 0303 	adc.w	r3, r2, r3
 80052de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80052ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052f8:	4649      	mov	r1, r9
 80052fa:	008b      	lsls	r3, r1, #2
 80052fc:	4641      	mov	r1, r8
 80052fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005302:	4641      	mov	r1, r8
 8005304:	008a      	lsls	r2, r1, #2
 8005306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800530a:	f7fb fcdd 	bl	8000cc8 <__aeabi_uldivmod>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <UART_SetConfig+0x4e4>)
 8005314:	fba3 1302 	umull	r1, r3, r3, r2
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	2164      	movs	r1, #100	@ 0x64
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	3332      	adds	r3, #50	@ 0x32
 8005326:	4a08      	ldr	r2, [pc, #32]	@ (8005348 <UART_SetConfig+0x4e4>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4422      	add	r2, r4
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005348:	51eb851f 	.word	0x51eb851f

0800534c <chipSelect>:
static ColumnBuffer displayBuffer[NUMBER_OF_ROWS];



static void chipSelect(bool isSelected)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_CS_N_GPIO_Port, LCD_CS_N_Pin, (GPIO_PinState) !isSelected); /* low active */
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	f083 0301 	eor.w	r3, r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	2140      	movs	r1, #64	@ 0x40
 8005362:	4803      	ldr	r0, [pc, #12]	@ (8005370 <chipSelect+0x24>)
 8005364:	f7fc fefa 	bl	800215c <HAL_GPIO_WritePin>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40020400 	.word	0x40020400

08005374 <registerSelect>:

static void registerSelect(lcdRegister selectedRegister)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, (GPIO_PinState) selectedRegister);
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	461a      	mov	r2, r3
 8005382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005386:	4803      	ldr	r0, [pc, #12]	@ (8005394 <registerSelect+0x20>)
 8005388:	f7fc fee8 	bl	800215c <HAL_GPIO_WritePin>
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40020000 	.word	0x40020000

08005398 <displayReset>:

static void displayReset(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
    chipSelect(INSTRUCTION_REGISTER);
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff ffd5 	bl	800534c <chipSelect>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2140      	movs	r1, #64	@ 0x40
 80053a6:	4808      	ldr	r0, [pc, #32]	@ (80053c8 <displayReset+0x30>)
 80053a8:	f7fc fed8 	bl	800215c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fc fb79 	bl	8001aa4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 80053b2:	2201      	movs	r2, #1
 80053b4:	2140      	movs	r1, #64	@ 0x40
 80053b6:	4804      	ldr	r0, [pc, #16]	@ (80053c8 <displayReset+0x30>)
 80053b8:	f7fc fed0 	bl	800215c <HAL_GPIO_WritePin>
    chipSelect(DATA_REGISTER);
 80053bc:	2001      	movs	r0, #1
 80053be:	f7ff ffc5 	bl	800534c <chipSelect>
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40020000 	.word	0x40020000

080053cc <sendInstruction>:

static void sendInstruction(instruction command)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
    registerSelect(INSTRUCTION_REGISTER);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f7ff ffcc 	bl	8005374 <registerSelect>
    chipSelect(true);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7ff ffb5 	bl	800534c <chipSelect>
	  //$dnd (uint8_t) added
    HAL_SPI_Transmit(&hspi1, (uint8_t *) &command, 1, 1);
 80053e2:	1df9      	adds	r1, r7, #7
 80053e4:	2301      	movs	r3, #1
 80053e6:	2201      	movs	r2, #1
 80053e8:	4804      	ldr	r0, [pc, #16]	@ (80053fc <sendInstruction+0x30>)
 80053ea:	f7fe fa78 	bl	80038de <HAL_SPI_Transmit>
    chipSelect(false);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7ff ffac 	bl	800534c <chipSelect>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000254 	.word	0x20000254

08005400 <sendData>:


/*static*/ void sendData(uint8_t data)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
    registerSelect(DATA_REGISTER);
 800540a:	2001      	movs	r0, #1
 800540c:	f7ff ffb2 	bl	8005374 <registerSelect>
    chipSelect(true);
 8005410:	2001      	movs	r0, #1
 8005412:	f7ff ff9b 	bl	800534c <chipSelect>
    HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8005416:	1df9      	adds	r1, r7, #7
 8005418:	2301      	movs	r3, #1
 800541a:	2201      	movs	r2, #1
 800541c:	4804      	ldr	r0, [pc, #16]	@ (8005430 <sendData+0x30>)
 800541e:	f7fe fa5e 	bl	80038de <HAL_SPI_Transmit>
    chipSelect(false);
 8005422:	2000      	movs	r0, #0
 8005424:	f7ff ff92 	bl	800534c <chipSelect>
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000254 	.word	0x20000254

08005434 <lcd_setContrast>:

void lcd_setContrast(uint8_t electronicVolume)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
#define ELECTRONIC_VOLUME_MAXIMUM_RAITING ((uint8_t) 63)

    if (electronicVolume <= ELECTRONIC_VOLUME_MAXIMUM_RAITING) {
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	2b3f      	cmp	r3, #63	@ 0x3f
 8005442:	d806      	bhi.n	8005452 <lcd_setContrast+0x1e>
        sendInstruction(ELECTRONIC_VOLUME_MODE_SET);
 8005444:	2081      	movs	r0, #129	@ 0x81
 8005446:	f7ff ffc1 	bl	80053cc <sendInstruction>
			//$dnd1 added (instruction)
        sendInstruction((instruction) electronicVolume);
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff ffbd 	bl	80053cc <sendInstruction>
    }
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <lcd_init>:

void lcd_init(void)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	af00      	add	r7, sp, #0
    lcd_clear();
 800545e:	f000 f857 	bl	8005510 <lcd_clear>
    displayReset();
 8005462:	f7ff ff99 	bl	8005398 <displayReset>

    sendInstruction(ADC_NORMAL);
 8005466:	20a0      	movs	r0, #160	@ 0xa0
 8005468:	f7ff ffb0 	bl	80053cc <sendInstruction>
    sendInstruction(DISPLAY_OFF);
 800546c:	20ae      	movs	r0, #174	@ 0xae
 800546e:	f7ff ffad 	bl	80053cc <sendInstruction>
    sendInstruction(COMMON_OUTPUT_MODE_REVERSE);
 8005472:	20c8      	movs	r0, #200	@ 0xc8
 8005474:	f7ff ffaa 	bl	80053cc <sendInstruction>
    sendInstruction(BIAS_ONE_NINTH);
 8005478:	20a2      	movs	r0, #162	@ 0xa2
 800547a:	f7ff ffa7 	bl	80053cc <sendInstruction>
    sendInstruction(POWER_CONTROL_SET_7);
 800547e:	202f      	movs	r0, #47	@ 0x2f
 8005480:	f7ff ffa4 	bl	80053cc <sendInstruction>
    sendInstruction(INTERNAL_RESISTOR_RATIO_1);
 8005484:	2021      	movs	r0, #33	@ 0x21
 8005486:	f7ff ffa1 	bl	80053cc <sendInstruction>
    lcd_setContrast(40);
 800548a:	2028      	movs	r0, #40	@ 0x28
 800548c:	f7ff ffd2 	bl	8005434 <lcd_setContrast>
    sendInstruction(DISPLAY_ON);
 8005490:	20af      	movs	r0, #175	@ 0xaf
 8005492:	f7ff ff9b 	bl	80053cc <sendInstruction>
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <lcd_setPixel>:

void lcd_setPixel(uint8_t xPosition, uint8_t yPosition, bool pixelIsSet)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
 80054a6:	460b      	mov	r3, r1
 80054a8:	71bb      	strb	r3, [r7, #6]
 80054aa:	4613      	mov	r3, r2
 80054ac:	717b      	strb	r3, [r7, #5]
    if ((xPosition < NUMBER_OF_ROWS) && (yPosition < NUMBER_OF_COLUMNS)) {
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db23      	blt.n	80054fe <lcd_setPixel+0x62>
 80054b6:	79bb      	ldrb	r3, [r7, #6]
 80054b8:	2b1f      	cmp	r3, #31
 80054ba:	d820      	bhi.n	80054fe <lcd_setPixel+0x62>
        if (pixelIsSet)
 80054bc:	797b      	ldrb	r3, [r7, #5]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <lcd_setPixel+0x44>
            displayBuffer[xPosition].rawData |= (1 << yPosition);
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	4a11      	ldr	r2, [pc, #68]	@ (800550c <lcd_setPixel+0x70>)
 80054c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054ca:	79bb      	ldrb	r3, [r7, #6]
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	490c      	ldr	r1, [pc, #48]	@ (800550c <lcd_setPixel+0x70>)
 80054da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        else
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
    }
}
 80054de:	e00e      	b.n	80054fe <lcd_setPixel+0x62>
            displayBuffer[xPosition].rawData &= ~(1 << yPosition);
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a0a      	ldr	r2, [pc, #40]	@ (800550c <lcd_setPixel+0x70>)
 80054e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054e8:	79bb      	ldrb	r3, [r7, #6]
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	4619      	mov	r1, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	400a      	ands	r2, r1
 80054f8:	4904      	ldr	r1, [pc, #16]	@ (800550c <lcd_setPixel+0x70>)
 80054fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000344 	.word	0x20000344

08005510 <lcd_clear>:

void lcd_clear(void)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8005516:	2300      	movs	r3, #0
 8005518:	71fb      	strb	r3, [r7, #7]
 800551a:	e007      	b.n	800552c <lcd_clear+0x1c>
        displayBuffer[rowIndex].rawData = false;
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <lcd_clear+0x34>)
 8005520:	2100      	movs	r1, #0
 8005522:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++) {
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	3301      	adds	r3, #1
 800552a:	71fb      	strb	r3, [r7, #7]
 800552c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005530:	2b00      	cmp	r3, #0
 8005532:	daf3      	bge.n	800551c <lcd_clear+0xc>
    }
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000344 	.word	0x20000344

08005548 <lcd_setChar>:


void lcd_setChar(uint8_t xPosition, uint8_t yPosition, unsigned char charToSet, lcd_fontSize size, bool contrastIsInverted)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4623      	mov	r3, r4
 8005558:	71fb      	strb	r3, [r7, #7]
 800555a:	4603      	mov	r3, r0
 800555c:	71bb      	strb	r3, [r7, #6]
 800555e:	460b      	mov	r3, r1
 8005560:	717b      	strb	r3, [r7, #5]
 8005562:	4613      	mov	r3, r2
 8005564:	713b      	strb	r3, [r7, #4]
#define ASCII_TABLE_OFFSET ((uint8_t) 32)

    charToSet -= ASCII_TABLE_OFFSET;
 8005566:	797b      	ldrb	r3, [r7, #5]
 8005568:	3b20      	subs	r3, #32
 800556a:	717b      	strb	r3, [r7, #5]

    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e049      	b.n	8005606 <lcd_setChar+0xbe>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 8005572:	2300      	movs	r3, #0
 8005574:	73bb      	strb	r3, [r7, #14]
 8005576:	e03b      	b.n	80055f0 <lcd_setChar+0xa8>
            if (Font_6x8_h[charToSet * fontSizes[size].height + columnCounter] & (1 << rowCounter))
 8005578:	797b      	ldrb	r3, [r7, #5]
 800557a:	793a      	ldrb	r2, [r7, #4]
 800557c:	4928      	ldr	r1, [pc, #160]	@ (8005620 <lcd_setChar+0xd8>)
 800557e:	f811 2012 	ldrb.w	r2, [r1, r2, lsl #1]
 8005582:	fb03 f202 	mul.w	r2, r3, r2
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	4413      	add	r3, r2
 800558a:	4a26      	ldr	r2, [pc, #152]	@ (8005624 <lcd_setChar+0xdc>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	461a      	mov	r2, r3
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	fa42 f303 	asr.w	r3, r2, r3
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <lcd_setChar+0x88>
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, !contrastIsInverted);
 800559e:	79fa      	ldrb	r2, [r7, #7]
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	4413      	add	r3, r2
 80055a4:	b2d8      	uxtb	r0, r3
 80055a6:	79ba      	ldrb	r2, [r7, #6]
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	4413      	add	r3, r2
 80055ac:	b2d9      	uxtb	r1, r3
 80055ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	f7ff ff67 	bl	800549c <lcd_setPixel>
 80055ce:	e00c      	b.n	80055ea <lcd_setChar+0xa2>
            else
                lcd_setPixel(xPosition + rowCounter, yPosition + columnCounter, contrastIsInverted);
 80055d0:	79fa      	ldrb	r2, [r7, #7]
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	4413      	add	r3, r2
 80055d6:	b2d8      	uxtb	r0, r3
 80055d8:	79ba      	ldrb	r2, [r7, #6]
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	4413      	add	r3, r2
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f7ff ff59 	bl	800549c <lcd_setPixel>
        for (uint8_t rowCounter = 0; rowCounter < fontSizes[size].width; rowCounter++){
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	3301      	adds	r3, #1
 80055ee:	73bb      	strb	r3, [r7, #14]
 80055f0:	793b      	ldrb	r3, [r7, #4]
 80055f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005620 <lcd_setChar+0xd8>)
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	4413      	add	r3, r2
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	7bba      	ldrb	r2, [r7, #14]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3bb      	bcc.n	8005578 <lcd_setChar+0x30>
    for (uint8_t columnCounter = 0; columnCounter < fontSizes[size].height; columnCounter++)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	3301      	adds	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	793b      	ldrb	r3, [r7, #4]
 8005608:	4a05      	ldr	r2, [pc, #20]	@ (8005620 <lcd_setChar+0xd8>)
 800560a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800560e:	7bfa      	ldrb	r2, [r7, #15]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3ae      	bcc.n	8005572 <lcd_setChar+0x2a>
        }
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bd90      	pop	{r4, r7, pc}
 800561e:	bf00      	nop
 8005620:	0800a624 	.word	0x0800a624
 8005624:	0800a2a4 	.word	0x0800a2a4

08005628 <lcd_setString>:




void lcd_setString(uint8_t xPosition, uint8_t yPosition, char const * string, lcd_fontSize size, bool contrastIsInverted )
{
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b085      	sub	sp, #20
 800562c:	af02      	add	r7, sp, #8
 800562e:	603a      	str	r2, [r7, #0]
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	71fb      	strb	r3, [r7, #7]
 8005636:	460b      	mov	r3, r1
 8005638:	71bb      	strb	r3, [r7, #6]
 800563a:	4613      	mov	r3, r2
 800563c:	717b      	strb	r3, [r7, #5]
 if ((size <= LCD_FONT_8) && (size < LCD_NUMBER_OF_FONTS))
 800563e:	797b      	ldrb	r3, [r7, #5]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11c      	bne.n	800567e <lcd_setString+0x56>
 8005644:	797b      	ldrb	r3, [r7, #5]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d819      	bhi.n	800567e <lcd_setString+0x56>
 //$dnd1 bug this works only for font enum = 0. No large fonts!
        for(; *string != '\0'; string++){
 800564a:	e014      	b.n	8005676 <lcd_setString+0x4e>
            lcd_setChar(xPosition, yPosition, *string, size, contrastIsInverted);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	797c      	ldrb	r4, [r7, #5]
 8005652:	79b9      	ldrb	r1, [r7, #6]
 8005654:	79f8      	ldrb	r0, [r7, #7]
 8005656:	7e3b      	ldrb	r3, [r7, #24]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4623      	mov	r3, r4
 800565c:	f7ff ff74 	bl	8005548 <lcd_setChar>
            xPosition += fontSizes[size].width;
 8005660:	797b      	ldrb	r3, [r7, #5]
 8005662:	4a09      	ldr	r2, [pc, #36]	@ (8005688 <lcd_setString+0x60>)
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	785a      	ldrb	r2, [r3, #1]
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	4413      	add	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
        for(; *string != '\0'; string++){
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e6      	bne.n	800564c <lcd_setString+0x24>
        }
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	bf00      	nop
 8005688:	0800a624 	.word	0x0800a624

0800568c <lcd_setLine>:

// V0.4;dnd1;add;drawLine() function

void lcd_setLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t state)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b08b      	sub	sp, #44	@ 0x2c
 8005690:	af00      	add	r7, sp, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4623      	mov	r3, r4
 800569c:	81fb      	strh	r3, [r7, #14]
 800569e:	4603      	mov	r3, r0
 80056a0:	81bb      	strh	r3, [r7, #12]
 80056a2:	460b      	mov	r3, r1
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	4613      	mov	r3, r2
 80056a8:	813b      	strh	r3, [r7, #8]
	int16_t i, x[2], y[2];
	float xF, yF;

	xF = x1, x[1] = 0;
 80056aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056ae:	ee07 3a90 	vmov	s15, r3
 80056b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b6:	edc7 7a08 	vstr	s15, [r7, #32]
 80056ba:	2300      	movs	r3, #0
 80056bc:	837b      	strh	r3, [r7, #26]
	yF = y1, y[1] = 0;
 80056be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ca:	edc7 7a07 	vstr	s15, [r7, #28]
 80056ce:	2300      	movs	r3, #0
 80056d0:	82fb      	strh	r3, [r7, #22]

	x[0] = abs(x2-x1);
 80056d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80056d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bfb8      	it	lt
 80056e0:	425b      	neglt	r3, r3
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	833b      	strh	r3, [r7, #24]
	y[0] = abs(y2-y1);
 80056e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80056ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bfb8      	it	lt
 80056f4:	425b      	neglt	r3, r3
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	82bb      	strh	r3, [r7, #20]

	if(x[0]) x[1] = (x2-x1)/x[0];
 80056fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <lcd_setLine+0x8c>
 8005702:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005706:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005710:	fb93 f3f2 	sdiv	r3, r3, r2
 8005714:	b21b      	sxth	r3, r3
 8005716:	837b      	strh	r3, [r7, #26]
	if(y[0]) y[1] = (y2-y1)/y[0];
 8005718:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <lcd_setLine+0xaa>
 8005720:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005724:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800572e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005732:	b21b      	sxth	r3, r3
 8005734:	82fb      	strh	r3, [r7, #22]

	if(x[0] >= y[0]) {
 8005736:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800573a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	db5f      	blt.n	8005802 <lcd_setLine+0x176>
		for(i = 0; i<x[0]; i++) {
 8005742:	2300      	movs	r3, #0
 8005744:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005746:	e055      	b.n	80057f4 <lcd_setLine+0x168>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8005748:	edd7 7a08 	vldr	s15, [r7, #32]
 800574c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	db20      	blt.n	8005798 <lcd_setLine+0x10c>
 8005756:	edd7 7a07 	vldr	s15, [r7, #28]
 800575a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800575e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005762:	db19      	blt.n	8005798 <lcd_setLine+0x10c>
 8005764:	edd7 7a08 	vldr	s15, [r7, #32]
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005770:	793b      	ldrb	r3, [r7, #4]
 8005772:	b2d8      	uxtb	r0, r3
 8005774:	edd7 7a07 	vldr	s15, [r7, #28]
 8005778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005780:	793b      	ldrb	r3, [r7, #4]
 8005782:	b2d9      	uxtb	r1, r3
 8005784:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	f7ff fe82 	bl	800549c <lcd_setPixel>
			xF += x[1];
 8005798:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80057a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ac:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += ((float)y[0]/x[0])*y[1];
 80057b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057b4:	ee07 3a90 	vmov	s15, r3
 80057b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80057c0:	ee07 3a90 	vmov	s15, r3
 80057c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80057e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e4:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<x[0]; i++) {
 80057e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3301      	adds	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80057f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80057f8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80057fc:	429a      	cmp	r2, r3
 80057fe:	dba3      	blt.n	8005748 <lcd_setLine+0xbc>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
			xF += ((float)x[0]/y[0])*x[1];
			yF += y[1];
		}
	}
}
 8005800:	e05e      	b.n	80058c0 <lcd_setLine+0x234>
		for(i = 0; i<y[0]; i++) {
 8005802:	2300      	movs	r3, #0
 8005804:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005806:	e055      	b.n	80058b4 <lcd_setLine+0x228>
			if( xF >= 0 && yF >= 0) lcd_setPixel(xF, yF, state);
 8005808:	edd7 7a08 	vldr	s15, [r7, #32]
 800580c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005814:	db20      	blt.n	8005858 <lcd_setLine+0x1cc>
 8005816:	edd7 7a07 	vldr	s15, [r7, #28]
 800581a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005822:	db19      	blt.n	8005858 <lcd_setLine+0x1cc>
 8005824:	edd7 7a08 	vldr	s15, [r7, #32]
 8005828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800582c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005830:	793b      	ldrb	r3, [r7, #4]
 8005832:	b2d8      	uxtb	r0, r3
 8005834:	edd7 7a07 	vldr	s15, [r7, #28]
 8005838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800583c:	edc7 7a01 	vstr	s15, [r7, #4]
 8005840:	793b      	ldrb	r3, [r7, #4]
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	f7ff fe22 	bl	800549c <lcd_setPixel>
			xF += ((float)x[0]/y[0])*x[1];
 8005858:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005864:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005874:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005884:	ed97 7a08 	vldr	s14, [r7, #32]
 8005888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800588c:	edc7 7a08 	vstr	s15, [r7, #32]
			yF += y[1];
 8005890:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800589c:	ed97 7a07 	vldr	s14, [r7, #28]
 80058a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a4:	edc7 7a07 	vstr	s15, [r7, #28]
		for(i = 0; i<y[0]; i++) {
 80058a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3301      	adds	r3, #1
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80058b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058b8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80058bc:	429a      	cmp	r2, r3
 80058be:	dba3      	blt.n	8005808 <lcd_setLine+0x17c>
}
 80058c0:	bf00      	nop
 80058c2:	372c      	adds	r7, #44	@ 0x2c
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd90      	pop	{r4, r7, pc}

080058c8 <lcd_show>:

void lcd_show(void){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 80058ce:	2300      	movs	r3, #0
 80058d0:	71fb      	strb	r3, [r7, #7]
 80058d2:	e022      	b.n	800591a <lcd_show+0x52>
			  //$dnd added (instruction)
        sendInstruction((instruction) (PAGE_ADDRESS_SET_0 + pageIndex));
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	3b50      	subs	r3, #80	@ 0x50
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fd76 	bl	80053cc <sendInstruction>
        sendInstruction(COLUMN_ADDRESS_SET_BIT);
 80058e0:	2010      	movs	r0, #16
 80058e2:	f7ff fd73 	bl	80053cc <sendInstruction>
        sendInstruction(BOOSTER_RATIO_SET);
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7ff fd70 	bl	80053cc <sendInstruction>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	71bb      	strb	r3, [r7, #6]
 80058f0:	e00c      	b.n	800590c <lcd_show+0x44>
            sendData(displayBuffer[rowIndex].pageSet[pageIndex]);
 80058f2:	79ba      	ldrb	r2, [r7, #6]
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	490d      	ldr	r1, [pc, #52]	@ (800592c <lcd_show+0x64>)
 80058f8:	0092      	lsls	r2, r2, #2
 80058fa:	440a      	add	r2, r1
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fd7d 	bl	8005400 <sendData>
        for (uint8_t rowIndex = 0; rowIndex < NUMBER_OF_ROWS; rowIndex++)
 8005906:	79bb      	ldrb	r3, [r7, #6]
 8005908:	3301      	adds	r3, #1
 800590a:	71bb      	strb	r3, [r7, #6]
 800590c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	daee      	bge.n	80058f2 <lcd_show+0x2a>
    for (pages pageIndex = PAGE_0; pageIndex < NUMBER_OF_PAGES; pageIndex++){
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	3301      	adds	r3, #1
 8005918:	71fb      	strb	r3, [r7, #7]
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d9d9      	bls.n	80058d4 <lcd_show+0xc>
    }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000344 	.word	0x20000344

08005930 <calcTemp>:

uint8_t DevAddress = 0x48 << 1;
uint8_t rBuf[2];

float calcTemp(uint16_t data)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
	data = (data>>5);
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	80fb      	strh	r3, [r7, #6]

	if(data & 0x400) 							// Check sign bit (bit 11)
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <calcTemp+0x34>
		return -0.125f*((~data + 1) & 0x3FF); // Two's complement, convert to 10 bit value, scale to °C
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	425b      	negs	r3, r3
 800594e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800595a:	eebc 7a00 	vmov.f32	s14, #192	@ 0xbe000000 -0.125
 800595e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005962:	e008      	b.n	8005976 <calcTemp+0x46>

	return 0.125f * data;						// scale to °C
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800596e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8005972:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005976:	eeb0 0a67 	vmov.f32	s0, s15
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <readTemp>:

float readTemp()
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af02      	add	r7, sp, #8
	uint8_t i2cBuf[2];
	if(HAL_I2C_Master_Receive(&hi2c1, DevAddress, (uint8_t*)i2cBuf, 2, HAL_MAX_DELAY)==HAL_OK)
 800598a:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <readTemp+0x4c>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	1d3a      	adds	r2, r7, #4
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	2302      	movs	r3, #2
 800599a:	480e      	ldr	r0, [pc, #56]	@ (80059d4 <readTemp+0x50>)
 800599c:	f7fc fd3c 	bl	8002418 <HAL_I2C_Master_Receive>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10c      	bne.n	80059c0 <readTemp+0x3c>
	{
		uint16_t tmp = (i2cBuf[0]<<8) + i2cBuf[1];   // assemble 16-bit temp value
 80059a6:	793b      	ldrb	r3, [r7, #4]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	797a      	ldrb	r2, [r7, #5]
 80059ae:	4413      	add	r3, r2
 80059b0:	80fb      	strh	r3, [r7, #6]
		return calcTemp(tmp);
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff ffbb 	bl	8005930 <calcTemp>
 80059ba:	eef0 7a40 	vmov.f32	s15, s0
 80059be:	e001      	b.n	80059c4 <readTemp+0x40>
	}
	return 1500.f; // return something out of range
 80059c0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80059d8 <readTemp+0x54>

}
 80059c4:	eeb0 0a67 	vmov.f32	s0, s15
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000015 	.word	0x20000015
 80059d4:	200001fc 	.word	0x200001fc
 80059d8:	44bb8000 	.word	0x44bb8000

080059dc <__cvt>:
 80059dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	ec57 6b10 	vmov	r6, r7, d0
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4619      	mov	r1, r3
 80059ea:	463b      	mov	r3, r7
 80059ec:	bfbb      	ittet	lt
 80059ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80059f2:	461f      	movlt	r7, r3
 80059f4:	2300      	movge	r3, #0
 80059f6:	232d      	movlt	r3, #45	@ 0x2d
 80059f8:	700b      	strb	r3, [r1, #0]
 80059fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a00:	4691      	mov	r9, r2
 8005a02:	f023 0820 	bic.w	r8, r3, #32
 8005a06:	bfbc      	itt	lt
 8005a08:	4632      	movlt	r2, r6
 8005a0a:	4616      	movlt	r6, r2
 8005a0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a10:	d005      	beq.n	8005a1e <__cvt+0x42>
 8005a12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a16:	d100      	bne.n	8005a1a <__cvt+0x3e>
 8005a18:	3401      	adds	r4, #1
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	e000      	b.n	8005a20 <__cvt+0x44>
 8005a1e:	2103      	movs	r1, #3
 8005a20:	ab03      	add	r3, sp, #12
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	ab02      	add	r3, sp, #8
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	ec47 6b10 	vmov	d0, r6, r7
 8005a2c:	4653      	mov	r3, sl
 8005a2e:	4622      	mov	r2, r4
 8005a30:	f001 f966 	bl	8006d00 <_dtoa_r>
 8005a34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a38:	4605      	mov	r5, r0
 8005a3a:	d119      	bne.n	8005a70 <__cvt+0x94>
 8005a3c:	f019 0f01 	tst.w	r9, #1
 8005a40:	d00e      	beq.n	8005a60 <__cvt+0x84>
 8005a42:	eb00 0904 	add.w	r9, r0, r4
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fb f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8005a52:	b108      	cbz	r0, 8005a58 <__cvt+0x7c>
 8005a54:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a58:	2230      	movs	r2, #48	@ 0x30
 8005a5a:	9b03      	ldr	r3, [sp, #12]
 8005a5c:	454b      	cmp	r3, r9
 8005a5e:	d31e      	bcc.n	8005a9e <__cvt+0xc2>
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a64:	1b5b      	subs	r3, r3, r5
 8005a66:	4628      	mov	r0, r5
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	b004      	add	sp, #16
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a74:	eb00 0904 	add.w	r9, r0, r4
 8005a78:	d1e5      	bne.n	8005a46 <__cvt+0x6a>
 8005a7a:	7803      	ldrb	r3, [r0, #0]
 8005a7c:	2b30      	cmp	r3, #48	@ 0x30
 8005a7e:	d10a      	bne.n	8005a96 <__cvt+0xba>
 8005a80:	2200      	movs	r2, #0
 8005a82:	2300      	movs	r3, #0
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fb f83e 	bl	8000b08 <__aeabi_dcmpeq>
 8005a8c:	b918      	cbnz	r0, 8005a96 <__cvt+0xba>
 8005a8e:	f1c4 0401 	rsb	r4, r4, #1
 8005a92:	f8ca 4000 	str.w	r4, [sl]
 8005a96:	f8da 3000 	ldr.w	r3, [sl]
 8005a9a:	4499      	add	r9, r3
 8005a9c:	e7d3      	b.n	8005a46 <__cvt+0x6a>
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	9103      	str	r1, [sp, #12]
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e7d9      	b.n	8005a5a <__cvt+0x7e>

08005aa6 <__exponent>:
 8005aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	bfba      	itte	lt
 8005aac:	4249      	neglt	r1, r1
 8005aae:	232d      	movlt	r3, #45	@ 0x2d
 8005ab0:	232b      	movge	r3, #43	@ 0x2b
 8005ab2:	2909      	cmp	r1, #9
 8005ab4:	7002      	strb	r2, [r0, #0]
 8005ab6:	7043      	strb	r3, [r0, #1]
 8005ab8:	dd29      	ble.n	8005b0e <__exponent+0x68>
 8005aba:	f10d 0307 	add.w	r3, sp, #7
 8005abe:	461d      	mov	r5, r3
 8005ac0:	270a      	movs	r7, #10
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ac8:	fb07 1416 	mls	r4, r7, r6, r1
 8005acc:	3430      	adds	r4, #48	@ 0x30
 8005ace:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	2c63      	cmp	r4, #99	@ 0x63
 8005ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ada:	4631      	mov	r1, r6
 8005adc:	dcf1      	bgt.n	8005ac2 <__exponent+0x1c>
 8005ade:	3130      	adds	r1, #48	@ 0x30
 8005ae0:	1e94      	subs	r4, r2, #2
 8005ae2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ae6:	1c41      	adds	r1, r0, #1
 8005ae8:	4623      	mov	r3, r4
 8005aea:	42ab      	cmp	r3, r5
 8005aec:	d30a      	bcc.n	8005b04 <__exponent+0x5e>
 8005aee:	f10d 0309 	add.w	r3, sp, #9
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ac      	cmp	r4, r5
 8005af6:	bf88      	it	hi
 8005af8:	2300      	movhi	r3, #0
 8005afa:	3302      	adds	r3, #2
 8005afc:	4403      	add	r3, r0
 8005afe:	1a18      	subs	r0, r3, r0
 8005b00:	b003      	add	sp, #12
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b04:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b08:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b0c:	e7ed      	b.n	8005aea <__exponent+0x44>
 8005b0e:	2330      	movs	r3, #48	@ 0x30
 8005b10:	3130      	adds	r1, #48	@ 0x30
 8005b12:	7083      	strb	r3, [r0, #2]
 8005b14:	70c1      	strb	r1, [r0, #3]
 8005b16:	1d03      	adds	r3, r0, #4
 8005b18:	e7f1      	b.n	8005afe <__exponent+0x58>
	...

08005b1c <_printf_float>:
 8005b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b20:	b08d      	sub	sp, #52	@ 0x34
 8005b22:	460c      	mov	r4, r1
 8005b24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b28:	4616      	mov	r6, r2
 8005b2a:	461f      	mov	r7, r3
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	f000 ffe1 	bl	8006af4 <_localeconv_r>
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fa fbba 	bl	80002b0 <strlen>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b40:	f8d8 3000 	ldr.w	r3, [r8]
 8005b44:	9005      	str	r0, [sp, #20]
 8005b46:	3307      	adds	r3, #7
 8005b48:	f023 0307 	bic.w	r3, r3, #7
 8005b4c:	f103 0208 	add.w	r2, r3, #8
 8005b50:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b54:	f8d4 b000 	ldr.w	fp, [r4]
 8005b58:	f8c8 2000 	str.w	r2, [r8]
 8005b5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005b64:	9307      	str	r3, [sp, #28]
 8005b66:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b72:	4b9c      	ldr	r3, [pc, #624]	@ (8005de4 <_printf_float+0x2c8>)
 8005b74:	f04f 32ff 	mov.w	r2, #4294967295
 8005b78:	f7fa fff8 	bl	8000b6c <__aeabi_dcmpun>
 8005b7c:	bb70      	cbnz	r0, 8005bdc <_printf_float+0xc0>
 8005b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b82:	4b98      	ldr	r3, [pc, #608]	@ (8005de4 <_printf_float+0x2c8>)
 8005b84:	f04f 32ff 	mov.w	r2, #4294967295
 8005b88:	f7fa ffd2 	bl	8000b30 <__aeabi_dcmple>
 8005b8c:	bb30      	cbnz	r0, 8005bdc <_printf_float+0xc0>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2300      	movs	r3, #0
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	f7fa ffc1 	bl	8000b1c <__aeabi_dcmplt>
 8005b9a:	b110      	cbz	r0, 8005ba2 <_printf_float+0x86>
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba2:	4a91      	ldr	r2, [pc, #580]	@ (8005de8 <_printf_float+0x2cc>)
 8005ba4:	4b91      	ldr	r3, [pc, #580]	@ (8005dec <_printf_float+0x2d0>)
 8005ba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005baa:	bf94      	ite	ls
 8005bac:	4690      	movls	r8, r2
 8005bae:	4698      	movhi	r8, r3
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	f02b 0304 	bic.w	r3, fp, #4
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	f04f 0900 	mov.w	r9, #0
 8005bbe:	9700      	str	r7, [sp, #0]
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f9d2 	bl	8005f70 <_printf_common>
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f040 808d 	bne.w	8005cec <_printf_float+0x1d0>
 8005bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd6:	b00d      	add	sp, #52	@ 0x34
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ffc2 	bl	8000b6c <__aeabi_dcmpun>
 8005be8:	b140      	cbz	r0, 8005bfc <_printf_float+0xe0>
 8005bea:	464b      	mov	r3, r9
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfbc      	itt	lt
 8005bf0:	232d      	movlt	r3, #45	@ 0x2d
 8005bf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005df0 <_printf_float+0x2d4>)
 8005bf8:	4b7e      	ldr	r3, [pc, #504]	@ (8005df4 <_printf_float+0x2d8>)
 8005bfa:	e7d4      	b.n	8005ba6 <_printf_float+0x8a>
 8005bfc:	6863      	ldr	r3, [r4, #4]
 8005bfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c02:	9206      	str	r2, [sp, #24]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	d13b      	bne.n	8005c80 <_printf_float+0x164>
 8005c08:	2306      	movs	r3, #6
 8005c0a:	6063      	str	r3, [r4, #4]
 8005c0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c10:	2300      	movs	r3, #0
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c1c:	ab09      	add	r3, sp, #36	@ 0x24
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	6861      	ldr	r1, [r4, #4]
 8005c22:	ec49 8b10 	vmov	d0, r8, r9
 8005c26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f7ff fed6 	bl	80059dc <__cvt>
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c34:	2b47      	cmp	r3, #71	@ 0x47
 8005c36:	4680      	mov	r8, r0
 8005c38:	d129      	bne.n	8005c8e <_printf_float+0x172>
 8005c3a:	1cc8      	adds	r0, r1, #3
 8005c3c:	db02      	blt.n	8005c44 <_printf_float+0x128>
 8005c3e:	6863      	ldr	r3, [r4, #4]
 8005c40:	4299      	cmp	r1, r3
 8005c42:	dd41      	ble.n	8005cc8 <_printf_float+0x1ac>
 8005c44:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c48:	fa5f fa8a 	uxtb.w	sl, sl
 8005c4c:	3901      	subs	r1, #1
 8005c4e:	4652      	mov	r2, sl
 8005c50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c54:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c56:	f7ff ff26 	bl	8005aa6 <__exponent>
 8005c5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c5c:	1813      	adds	r3, r2, r0
 8005c5e:	2a01      	cmp	r2, #1
 8005c60:	4681      	mov	r9, r0
 8005c62:	6123      	str	r3, [r4, #16]
 8005c64:	dc02      	bgt.n	8005c6c <_printf_float+0x150>
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	07d2      	lsls	r2, r2, #31
 8005c6a:	d501      	bpl.n	8005c70 <_printf_float+0x154>
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0a2      	beq.n	8005bbe <_printf_float+0xa2>
 8005c78:	232d      	movs	r3, #45	@ 0x2d
 8005c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c7e:	e79e      	b.n	8005bbe <_printf_float+0xa2>
 8005c80:	9a06      	ldr	r2, [sp, #24]
 8005c82:	2a47      	cmp	r2, #71	@ 0x47
 8005c84:	d1c2      	bne.n	8005c0c <_printf_float+0xf0>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1c0      	bne.n	8005c0c <_printf_float+0xf0>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e7bd      	b.n	8005c0a <_printf_float+0xee>
 8005c8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c92:	d9db      	bls.n	8005c4c <_printf_float+0x130>
 8005c94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c98:	d118      	bne.n	8005ccc <_printf_float+0x1b0>
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	dd0b      	ble.n	8005cb8 <_printf_float+0x19c>
 8005ca0:	6121      	str	r1, [r4, #16]
 8005ca2:	b913      	cbnz	r3, 8005caa <_printf_float+0x18e>
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	07d0      	lsls	r0, r2, #31
 8005ca8:	d502      	bpl.n	8005cb0 <_printf_float+0x194>
 8005caa:	3301      	adds	r3, #1
 8005cac:	440b      	add	r3, r1
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cb2:	f04f 0900 	mov.w	r9, #0
 8005cb6:	e7db      	b.n	8005c70 <_printf_float+0x154>
 8005cb8:	b913      	cbnz	r3, 8005cc0 <_printf_float+0x1a4>
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	07d2      	lsls	r2, r2, #31
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_float+0x1a8>
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	e7f4      	b.n	8005cae <_printf_float+0x192>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e7f2      	b.n	8005cae <_printf_float+0x192>
 8005cc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	db05      	blt.n	8005cde <_printf_float+0x1c2>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	6121      	str	r1, [r4, #16]
 8005cd6:	07d8      	lsls	r0, r3, #31
 8005cd8:	d5ea      	bpl.n	8005cb0 <_printf_float+0x194>
 8005cda:	1c4b      	adds	r3, r1, #1
 8005cdc:	e7e7      	b.n	8005cae <_printf_float+0x192>
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	bfd4      	ite	le
 8005ce2:	f1c1 0202 	rsble	r2, r1, #2
 8005ce6:	2201      	movgt	r2, #1
 8005ce8:	4413      	add	r3, r2
 8005cea:	e7e0      	b.n	8005cae <_printf_float+0x192>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	055a      	lsls	r2, r3, #21
 8005cf0:	d407      	bmi.n	8005d02 <_printf_float+0x1e6>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d12b      	bne.n	8005d58 <_printf_float+0x23c>
 8005d00:	e767      	b.n	8005bd2 <_printf_float+0xb6>
 8005d02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d06:	f240 80dd 	bls.w	8005ec4 <_printf_float+0x3a8>
 8005d0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f7fa fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d033      	beq.n	8005d82 <_printf_float+0x266>
 8005d1a:	4a37      	ldr	r2, [pc, #220]	@ (8005df8 <_printf_float+0x2dc>)
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	47b8      	blx	r7
 8005d24:	3001      	adds	r0, #1
 8005d26:	f43f af54 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d2e:	4543      	cmp	r3, r8
 8005d30:	db02      	blt.n	8005d38 <_printf_float+0x21c>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	07d8      	lsls	r0, r3, #31
 8005d36:	d50f      	bpl.n	8005d58 <_printf_float+0x23c>
 8005d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f af45 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d48:	f04f 0900 	mov.w	r9, #0
 8005d4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d50:	f104 0a1a 	add.w	sl, r4, #26
 8005d54:	45c8      	cmp	r8, r9
 8005d56:	dc09      	bgt.n	8005d6c <_printf_float+0x250>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	079b      	lsls	r3, r3, #30
 8005d5c:	f100 8103 	bmi.w	8005f66 <_printf_float+0x44a>
 8005d60:	68e0      	ldr	r0, [r4, #12]
 8005d62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d64:	4298      	cmp	r0, r3
 8005d66:	bfb8      	it	lt
 8005d68:	4618      	movlt	r0, r3
 8005d6a:	e734      	b.n	8005bd6 <_printf_float+0xba>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af2b 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d7c:	f109 0901 	add.w	r9, r9, #1
 8005d80:	e7e8      	b.n	8005d54 <_printf_float+0x238>
 8005d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dc39      	bgt.n	8005dfc <_printf_float+0x2e0>
 8005d88:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <_printf_float+0x2dc>)
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4628      	mov	r0, r5
 8005d90:	47b8      	blx	r7
 8005d92:	3001      	adds	r0, #1
 8005d94:	f43f af1d 	beq.w	8005bd2 <_printf_float+0xb6>
 8005d98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005d9c:	ea59 0303 	orrs.w	r3, r9, r3
 8005da0:	d102      	bne.n	8005da8 <_printf_float+0x28c>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	07d9      	lsls	r1, r3, #31
 8005da6:	d5d7      	bpl.n	8005d58 <_printf_float+0x23c>
 8005da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dac:	4631      	mov	r1, r6
 8005dae:	4628      	mov	r0, r5
 8005db0:	47b8      	blx	r7
 8005db2:	3001      	adds	r0, #1
 8005db4:	f43f af0d 	beq.w	8005bd2 <_printf_float+0xb6>
 8005db8:	f04f 0a00 	mov.w	sl, #0
 8005dbc:	f104 0b1a 	add.w	fp, r4, #26
 8005dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc2:	425b      	negs	r3, r3
 8005dc4:	4553      	cmp	r3, sl
 8005dc6:	dc01      	bgt.n	8005dcc <_printf_float+0x2b0>
 8005dc8:	464b      	mov	r3, r9
 8005dca:	e793      	b.n	8005cf4 <_printf_float+0x1d8>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	465a      	mov	r2, fp
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f aefb 	beq.w	8005bd2 <_printf_float+0xb6>
 8005ddc:	f10a 0a01 	add.w	sl, sl, #1
 8005de0:	e7ee      	b.n	8005dc0 <_printf_float+0x2a4>
 8005de2:	bf00      	nop
 8005de4:	7fefffff 	.word	0x7fefffff
 8005de8:	0800a628 	.word	0x0800a628
 8005dec:	0800a62c 	.word	0x0800a62c
 8005df0:	0800a630 	.word	0x0800a630
 8005df4:	0800a634 	.word	0x0800a634
 8005df8:	0800a638 	.word	0x0800a638
 8005dfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005dfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e02:	4553      	cmp	r3, sl
 8005e04:	bfa8      	it	ge
 8005e06:	4653      	movge	r3, sl
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	4699      	mov	r9, r3
 8005e0c:	dc36      	bgt.n	8005e7c <_printf_float+0x360>
 8005e0e:	f04f 0b00 	mov.w	fp, #0
 8005e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e16:	f104 021a 	add.w	r2, r4, #26
 8005e1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e1c:	9306      	str	r3, [sp, #24]
 8005e1e:	eba3 0309 	sub.w	r3, r3, r9
 8005e22:	455b      	cmp	r3, fp
 8005e24:	dc31      	bgt.n	8005e8a <_printf_float+0x36e>
 8005e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e28:	459a      	cmp	sl, r3
 8005e2a:	dc3a      	bgt.n	8005ea2 <_printf_float+0x386>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	07da      	lsls	r2, r3, #31
 8005e30:	d437      	bmi.n	8005ea2 <_printf_float+0x386>
 8005e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e34:	ebaa 0903 	sub.w	r9, sl, r3
 8005e38:	9b06      	ldr	r3, [sp, #24]
 8005e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e3e:	4599      	cmp	r9, r3
 8005e40:	bfa8      	it	ge
 8005e42:	4699      	movge	r9, r3
 8005e44:	f1b9 0f00 	cmp.w	r9, #0
 8005e48:	dc33      	bgt.n	8005eb2 <_printf_float+0x396>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e52:	f104 0b1a 	add.w	fp, r4, #26
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	ebaa 0303 	sub.w	r3, sl, r3
 8005e5c:	eba3 0309 	sub.w	r3, r3, r9
 8005e60:	4543      	cmp	r3, r8
 8005e62:	f77f af79 	ble.w	8005d58 <_printf_float+0x23c>
 8005e66:	2301      	movs	r3, #1
 8005e68:	465a      	mov	r2, fp
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f aeae 	beq.w	8005bd2 <_printf_float+0xb6>
 8005e76:	f108 0801 	add.w	r8, r8, #1
 8005e7a:	e7ec      	b.n	8005e56 <_printf_float+0x33a>
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	d1c2      	bne.n	8005e0e <_printf_float+0x2f2>
 8005e88:	e6a3      	b.n	8005bd2 <_printf_float+0xb6>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	9206      	str	r2, [sp, #24]
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f ae9c 	beq.w	8005bd2 <_printf_float+0xb6>
 8005e9a:	9a06      	ldr	r2, [sp, #24]
 8005e9c:	f10b 0b01 	add.w	fp, fp, #1
 8005ea0:	e7bb      	b.n	8005e1a <_printf_float+0x2fe>
 8005ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	d1c0      	bne.n	8005e32 <_printf_float+0x316>
 8005eb0:	e68f      	b.n	8005bd2 <_printf_float+0xb6>
 8005eb2:	9a06      	ldr	r2, [sp, #24]
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	4442      	add	r2, r8
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d1c3      	bne.n	8005e4a <_printf_float+0x32e>
 8005ec2:	e686      	b.n	8005bd2 <_printf_float+0xb6>
 8005ec4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ec8:	f1ba 0f01 	cmp.w	sl, #1
 8005ecc:	dc01      	bgt.n	8005ed2 <_printf_float+0x3b6>
 8005ece:	07db      	lsls	r3, r3, #31
 8005ed0:	d536      	bpl.n	8005f40 <_printf_float+0x424>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f ae78 	beq.w	8005bd2 <_printf_float+0xb6>
 8005ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f ae70 	beq.w	8005bd2 <_printf_float+0xb6>
 8005ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005efe:	f7fa fe03 	bl	8000b08 <__aeabi_dcmpeq>
 8005f02:	b9c0      	cbnz	r0, 8005f36 <_printf_float+0x41a>
 8005f04:	4653      	mov	r3, sl
 8005f06:	f108 0201 	add.w	r2, r8, #1
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	d10c      	bne.n	8005f2e <_printf_float+0x412>
 8005f14:	e65d      	b.n	8005bd2 <_printf_float+0xb6>
 8005f16:	2301      	movs	r3, #1
 8005f18:	465a      	mov	r2, fp
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f ae56 	beq.w	8005bd2 <_printf_float+0xb6>
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	45d0      	cmp	r8, sl
 8005f2c:	dbf3      	blt.n	8005f16 <_printf_float+0x3fa>
 8005f2e:	464b      	mov	r3, r9
 8005f30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f34:	e6df      	b.n	8005cf6 <_printf_float+0x1da>
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	f104 0b1a 	add.w	fp, r4, #26
 8005f3e:	e7f4      	b.n	8005f2a <_printf_float+0x40e>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4642      	mov	r2, r8
 8005f44:	e7e1      	b.n	8005f0a <_printf_float+0x3ee>
 8005f46:	2301      	movs	r3, #1
 8005f48:	464a      	mov	r2, r9
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f ae3e 	beq.w	8005bd2 <_printf_float+0xb6>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	68e3      	ldr	r3, [r4, #12]
 8005f5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f5e:	1a5b      	subs	r3, r3, r1
 8005f60:	4543      	cmp	r3, r8
 8005f62:	dcf0      	bgt.n	8005f46 <_printf_float+0x42a>
 8005f64:	e6fc      	b.n	8005d60 <_printf_float+0x244>
 8005f66:	f04f 0800 	mov.w	r8, #0
 8005f6a:	f104 0919 	add.w	r9, r4, #25
 8005f6e:	e7f4      	b.n	8005f5a <_printf_float+0x43e>

08005f70 <_printf_common>:
 8005f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	4616      	mov	r6, r2
 8005f76:	4698      	mov	r8, r3
 8005f78:	688a      	ldr	r2, [r1, #8]
 8005f7a:	690b      	ldr	r3, [r1, #16]
 8005f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bfb8      	it	lt
 8005f84:	4613      	movlt	r3, r2
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	b10a      	cbz	r2, 8005f96 <_printf_common+0x26>
 8005f92:	3301      	adds	r3, #1
 8005f94:	6033      	str	r3, [r6, #0]
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	0699      	lsls	r1, r3, #26
 8005f9a:	bf42      	ittt	mi
 8005f9c:	6833      	ldrmi	r3, [r6, #0]
 8005f9e:	3302      	addmi	r3, #2
 8005fa0:	6033      	strmi	r3, [r6, #0]
 8005fa2:	6825      	ldr	r5, [r4, #0]
 8005fa4:	f015 0506 	ands.w	r5, r5, #6
 8005fa8:	d106      	bne.n	8005fb8 <_printf_common+0x48>
 8005faa:	f104 0a19 	add.w	sl, r4, #25
 8005fae:	68e3      	ldr	r3, [r4, #12]
 8005fb0:	6832      	ldr	r2, [r6, #0]
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	42ab      	cmp	r3, r5
 8005fb6:	dc26      	bgt.n	8006006 <_printf_common+0x96>
 8005fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	3b00      	subs	r3, #0
 8005fc0:	bf18      	it	ne
 8005fc2:	2301      	movne	r3, #1
 8005fc4:	0692      	lsls	r2, r2, #26
 8005fc6:	d42b      	bmi.n	8006020 <_printf_common+0xb0>
 8005fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c8      	blx	r9
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d01e      	beq.n	8006014 <_printf_common+0xa4>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	6922      	ldr	r2, [r4, #16]
 8005fda:	f003 0306 	and.w	r3, r3, #6
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	bf02      	ittt	eq
 8005fe2:	68e5      	ldreq	r5, [r4, #12]
 8005fe4:	6833      	ldreq	r3, [r6, #0]
 8005fe6:	1aed      	subeq	r5, r5, r3
 8005fe8:	68a3      	ldr	r3, [r4, #8]
 8005fea:	bf0c      	ite	eq
 8005fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ff0:	2500      	movne	r5, #0
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	bfc4      	itt	gt
 8005ff6:	1a9b      	subgt	r3, r3, r2
 8005ff8:	18ed      	addgt	r5, r5, r3
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	341a      	adds	r4, #26
 8005ffe:	42b5      	cmp	r5, r6
 8006000:	d11a      	bne.n	8006038 <_printf_common+0xc8>
 8006002:	2000      	movs	r0, #0
 8006004:	e008      	b.n	8006018 <_printf_common+0xa8>
 8006006:	2301      	movs	r3, #1
 8006008:	4652      	mov	r2, sl
 800600a:	4641      	mov	r1, r8
 800600c:	4638      	mov	r0, r7
 800600e:	47c8      	blx	r9
 8006010:	3001      	adds	r0, #1
 8006012:	d103      	bne.n	800601c <_printf_common+0xac>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	3501      	adds	r5, #1
 800601e:	e7c6      	b.n	8005fae <_printf_common+0x3e>
 8006020:	18e1      	adds	r1, r4, r3
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	2030      	movs	r0, #48	@ 0x30
 8006026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800602a:	4422      	add	r2, r4
 800602c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006034:	3302      	adds	r3, #2
 8006036:	e7c7      	b.n	8005fc8 <_printf_common+0x58>
 8006038:	2301      	movs	r3, #1
 800603a:	4622      	mov	r2, r4
 800603c:	4641      	mov	r1, r8
 800603e:	4638      	mov	r0, r7
 8006040:	47c8      	blx	r9
 8006042:	3001      	adds	r0, #1
 8006044:	d0e6      	beq.n	8006014 <_printf_common+0xa4>
 8006046:	3601      	adds	r6, #1
 8006048:	e7d9      	b.n	8005ffe <_printf_common+0x8e>
	...

0800604c <_printf_i>:
 800604c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006050:	7e0f      	ldrb	r7, [r1, #24]
 8006052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006054:	2f78      	cmp	r7, #120	@ 0x78
 8006056:	4691      	mov	r9, r2
 8006058:	4680      	mov	r8, r0
 800605a:	460c      	mov	r4, r1
 800605c:	469a      	mov	sl, r3
 800605e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006062:	d807      	bhi.n	8006074 <_printf_i+0x28>
 8006064:	2f62      	cmp	r7, #98	@ 0x62
 8006066:	d80a      	bhi.n	800607e <_printf_i+0x32>
 8006068:	2f00      	cmp	r7, #0
 800606a:	f000 80d2 	beq.w	8006212 <_printf_i+0x1c6>
 800606e:	2f58      	cmp	r7, #88	@ 0x58
 8006070:	f000 80b9 	beq.w	80061e6 <_printf_i+0x19a>
 8006074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800607c:	e03a      	b.n	80060f4 <_printf_i+0xa8>
 800607e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006082:	2b15      	cmp	r3, #21
 8006084:	d8f6      	bhi.n	8006074 <_printf_i+0x28>
 8006086:	a101      	add	r1, pc, #4	@ (adr r1, 800608c <_printf_i+0x40>)
 8006088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800608c:	080060e5 	.word	0x080060e5
 8006090:	080060f9 	.word	0x080060f9
 8006094:	08006075 	.word	0x08006075
 8006098:	08006075 	.word	0x08006075
 800609c:	08006075 	.word	0x08006075
 80060a0:	08006075 	.word	0x08006075
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	08006075 	.word	0x08006075
 80060ac:	08006075 	.word	0x08006075
 80060b0:	08006075 	.word	0x08006075
 80060b4:	08006075 	.word	0x08006075
 80060b8:	080061f9 	.word	0x080061f9
 80060bc:	08006123 	.word	0x08006123
 80060c0:	080061b3 	.word	0x080061b3
 80060c4:	08006075 	.word	0x08006075
 80060c8:	08006075 	.word	0x08006075
 80060cc:	0800621b 	.word	0x0800621b
 80060d0:	08006075 	.word	0x08006075
 80060d4:	08006123 	.word	0x08006123
 80060d8:	08006075 	.word	0x08006075
 80060dc:	08006075 	.word	0x08006075
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6032      	str	r2, [r6, #0]
 80060ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060f4:	2301      	movs	r3, #1
 80060f6:	e09d      	b.n	8006234 <_printf_i+0x1e8>
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	6820      	ldr	r0, [r4, #0]
 80060fc:	1d19      	adds	r1, r3, #4
 80060fe:	6031      	str	r1, [r6, #0]
 8006100:	0606      	lsls	r6, r0, #24
 8006102:	d501      	bpl.n	8006108 <_printf_i+0xbc>
 8006104:	681d      	ldr	r5, [r3, #0]
 8006106:	e003      	b.n	8006110 <_printf_i+0xc4>
 8006108:	0645      	lsls	r5, r0, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0xb8>
 800610c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006110:	2d00      	cmp	r5, #0
 8006112:	da03      	bge.n	800611c <_printf_i+0xd0>
 8006114:	232d      	movs	r3, #45	@ 0x2d
 8006116:	426d      	negs	r5, r5
 8006118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800611c:	4859      	ldr	r0, [pc, #356]	@ (8006284 <_printf_i+0x238>)
 800611e:	230a      	movs	r3, #10
 8006120:	e011      	b.n	8006146 <_printf_i+0xfa>
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	0608      	lsls	r0, r1, #24
 8006128:	f853 5b04 	ldr.w	r5, [r3], #4
 800612c:	d402      	bmi.n	8006134 <_printf_i+0xe8>
 800612e:	0649      	lsls	r1, r1, #25
 8006130:	bf48      	it	mi
 8006132:	b2ad      	uxthmi	r5, r5
 8006134:	2f6f      	cmp	r7, #111	@ 0x6f
 8006136:	4853      	ldr	r0, [pc, #332]	@ (8006284 <_printf_i+0x238>)
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	bf14      	ite	ne
 800613c:	230a      	movne	r3, #10
 800613e:	2308      	moveq	r3, #8
 8006140:	2100      	movs	r1, #0
 8006142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006146:	6866      	ldr	r6, [r4, #4]
 8006148:	60a6      	str	r6, [r4, #8]
 800614a:	2e00      	cmp	r6, #0
 800614c:	bfa2      	ittt	ge
 800614e:	6821      	ldrge	r1, [r4, #0]
 8006150:	f021 0104 	bicge.w	r1, r1, #4
 8006154:	6021      	strge	r1, [r4, #0]
 8006156:	b90d      	cbnz	r5, 800615c <_printf_i+0x110>
 8006158:	2e00      	cmp	r6, #0
 800615a:	d04b      	beq.n	80061f4 <_printf_i+0x1a8>
 800615c:	4616      	mov	r6, r2
 800615e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006162:	fb03 5711 	mls	r7, r3, r1, r5
 8006166:	5dc7      	ldrb	r7, [r0, r7]
 8006168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800616c:	462f      	mov	r7, r5
 800616e:	42bb      	cmp	r3, r7
 8006170:	460d      	mov	r5, r1
 8006172:	d9f4      	bls.n	800615e <_printf_i+0x112>
 8006174:	2b08      	cmp	r3, #8
 8006176:	d10b      	bne.n	8006190 <_printf_i+0x144>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07df      	lsls	r7, r3, #31
 800617c:	d508      	bpl.n	8006190 <_printf_i+0x144>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	4299      	cmp	r1, r3
 8006184:	bfde      	ittt	le
 8006186:	2330      	movle	r3, #48	@ 0x30
 8006188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800618c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006190:	1b92      	subs	r2, r2, r6
 8006192:	6122      	str	r2, [r4, #16]
 8006194:	f8cd a000 	str.w	sl, [sp]
 8006198:	464b      	mov	r3, r9
 800619a:	aa03      	add	r2, sp, #12
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff fee6 	bl	8005f70 <_printf_common>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d14a      	bne.n	800623e <_printf_i+0x1f2>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	b004      	add	sp, #16
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	4833      	ldr	r0, [pc, #204]	@ (8006288 <_printf_i+0x23c>)
 80061bc:	2778      	movs	r7, #120	@ 0x78
 80061be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	6831      	ldr	r1, [r6, #0]
 80061c6:	061f      	lsls	r7, r3, #24
 80061c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80061cc:	d402      	bmi.n	80061d4 <_printf_i+0x188>
 80061ce:	065f      	lsls	r7, r3, #25
 80061d0:	bf48      	it	mi
 80061d2:	b2ad      	uxthmi	r5, r5
 80061d4:	6031      	str	r1, [r6, #0]
 80061d6:	07d9      	lsls	r1, r3, #31
 80061d8:	bf44      	itt	mi
 80061da:	f043 0320 	orrmi.w	r3, r3, #32
 80061de:	6023      	strmi	r3, [r4, #0]
 80061e0:	b11d      	cbz	r5, 80061ea <_printf_i+0x19e>
 80061e2:	2310      	movs	r3, #16
 80061e4:	e7ac      	b.n	8006140 <_printf_i+0xf4>
 80061e6:	4827      	ldr	r0, [pc, #156]	@ (8006284 <_printf_i+0x238>)
 80061e8:	e7e9      	b.n	80061be <_printf_i+0x172>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	f023 0320 	bic.w	r3, r3, #32
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	e7f6      	b.n	80061e2 <_printf_i+0x196>
 80061f4:	4616      	mov	r6, r2
 80061f6:	e7bd      	b.n	8006174 <_printf_i+0x128>
 80061f8:	6833      	ldr	r3, [r6, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	6961      	ldr	r1, [r4, #20]
 80061fe:	1d18      	adds	r0, r3, #4
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	062e      	lsls	r6, r5, #24
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	d501      	bpl.n	800620c <_printf_i+0x1c0>
 8006208:	6019      	str	r1, [r3, #0]
 800620a:	e002      	b.n	8006212 <_printf_i+0x1c6>
 800620c:	0668      	lsls	r0, r5, #25
 800620e:	d5fb      	bpl.n	8006208 <_printf_i+0x1bc>
 8006210:	8019      	strh	r1, [r3, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	4616      	mov	r6, r2
 8006218:	e7bc      	b.n	8006194 <_printf_i+0x148>
 800621a:	6833      	ldr	r3, [r6, #0]
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	6032      	str	r2, [r6, #0]
 8006220:	681e      	ldr	r6, [r3, #0]
 8006222:	6862      	ldr	r2, [r4, #4]
 8006224:	2100      	movs	r1, #0
 8006226:	4630      	mov	r0, r6
 8006228:	f7f9 fff2 	bl	8000210 <memchr>
 800622c:	b108      	cbz	r0, 8006232 <_printf_i+0x1e6>
 800622e:	1b80      	subs	r0, r0, r6
 8006230:	6060      	str	r0, [r4, #4]
 8006232:	6863      	ldr	r3, [r4, #4]
 8006234:	6123      	str	r3, [r4, #16]
 8006236:	2300      	movs	r3, #0
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800623c:	e7aa      	b.n	8006194 <_printf_i+0x148>
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	4632      	mov	r2, r6
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d0ad      	beq.n	80061a8 <_printf_i+0x15c>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	079b      	lsls	r3, r3, #30
 8006250:	d413      	bmi.n	800627a <_printf_i+0x22e>
 8006252:	68e0      	ldr	r0, [r4, #12]
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	4298      	cmp	r0, r3
 8006258:	bfb8      	it	lt
 800625a:	4618      	movlt	r0, r3
 800625c:	e7a6      	b.n	80061ac <_printf_i+0x160>
 800625e:	2301      	movs	r3, #1
 8006260:	4632      	mov	r2, r6
 8006262:	4649      	mov	r1, r9
 8006264:	4640      	mov	r0, r8
 8006266:	47d0      	blx	sl
 8006268:	3001      	adds	r0, #1
 800626a:	d09d      	beq.n	80061a8 <_printf_i+0x15c>
 800626c:	3501      	adds	r5, #1
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	9903      	ldr	r1, [sp, #12]
 8006272:	1a5b      	subs	r3, r3, r1
 8006274:	42ab      	cmp	r3, r5
 8006276:	dcf2      	bgt.n	800625e <_printf_i+0x212>
 8006278:	e7eb      	b.n	8006252 <_printf_i+0x206>
 800627a:	2500      	movs	r5, #0
 800627c:	f104 0619 	add.w	r6, r4, #25
 8006280:	e7f5      	b.n	800626e <_printf_i+0x222>
 8006282:	bf00      	nop
 8006284:	0800a63a 	.word	0x0800a63a
 8006288:	0800a64b 	.word	0x0800a64b

0800628c <_scanf_float>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	b087      	sub	sp, #28
 8006292:	4617      	mov	r7, r2
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	688b      	ldr	r3, [r1, #8]
 8006298:	1e5a      	subs	r2, r3, #1
 800629a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800629e:	bf81      	itttt	hi
 80062a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80062a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80062a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80062ac:	608b      	strhi	r3, [r1, #8]
 80062ae:	680b      	ldr	r3, [r1, #0]
 80062b0:	460a      	mov	r2, r1
 80062b2:	f04f 0500 	mov.w	r5, #0
 80062b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80062ba:	f842 3b1c 	str.w	r3, [r2], #28
 80062be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80062c2:	4680      	mov	r8, r0
 80062c4:	460c      	mov	r4, r1
 80062c6:	bf98      	it	ls
 80062c8:	f04f 0b00 	movls.w	fp, #0
 80062cc:	9201      	str	r2, [sp, #4]
 80062ce:	4616      	mov	r6, r2
 80062d0:	46aa      	mov	sl, r5
 80062d2:	46a9      	mov	r9, r5
 80062d4:	9502      	str	r5, [sp, #8]
 80062d6:	68a2      	ldr	r2, [r4, #8]
 80062d8:	b152      	cbz	r2, 80062f0 <_scanf_float+0x64>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b4e      	cmp	r3, #78	@ 0x4e
 80062e0:	d864      	bhi.n	80063ac <_scanf_float+0x120>
 80062e2:	2b40      	cmp	r3, #64	@ 0x40
 80062e4:	d83c      	bhi.n	8006360 <_scanf_float+0xd4>
 80062e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80062ea:	b2c8      	uxtb	r0, r1
 80062ec:	280e      	cmp	r0, #14
 80062ee:	d93a      	bls.n	8006366 <_scanf_float+0xda>
 80062f0:	f1b9 0f00 	cmp.w	r9, #0
 80062f4:	d003      	beq.n	80062fe <_scanf_float+0x72>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006302:	f1ba 0f01 	cmp.w	sl, #1
 8006306:	f200 8117 	bhi.w	8006538 <_scanf_float+0x2ac>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	429e      	cmp	r6, r3
 800630e:	f200 8108 	bhi.w	8006522 <_scanf_float+0x296>
 8006312:	2001      	movs	r0, #1
 8006314:	b007      	add	sp, #28
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800631e:	2a0d      	cmp	r2, #13
 8006320:	d8e6      	bhi.n	80062f0 <_scanf_float+0x64>
 8006322:	a101      	add	r1, pc, #4	@ (adr r1, 8006328 <_scanf_float+0x9c>)
 8006324:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006328:	0800646f 	.word	0x0800646f
 800632c:	080062f1 	.word	0x080062f1
 8006330:	080062f1 	.word	0x080062f1
 8006334:	080062f1 	.word	0x080062f1
 8006338:	080064cf 	.word	0x080064cf
 800633c:	080064a7 	.word	0x080064a7
 8006340:	080062f1 	.word	0x080062f1
 8006344:	080062f1 	.word	0x080062f1
 8006348:	0800647d 	.word	0x0800647d
 800634c:	080062f1 	.word	0x080062f1
 8006350:	080062f1 	.word	0x080062f1
 8006354:	080062f1 	.word	0x080062f1
 8006358:	080062f1 	.word	0x080062f1
 800635c:	08006435 	.word	0x08006435
 8006360:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006364:	e7db      	b.n	800631e <_scanf_float+0x92>
 8006366:	290e      	cmp	r1, #14
 8006368:	d8c2      	bhi.n	80062f0 <_scanf_float+0x64>
 800636a:	a001      	add	r0, pc, #4	@ (adr r0, 8006370 <_scanf_float+0xe4>)
 800636c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006370:	08006425 	.word	0x08006425
 8006374:	080062f1 	.word	0x080062f1
 8006378:	08006425 	.word	0x08006425
 800637c:	080064bb 	.word	0x080064bb
 8006380:	080062f1 	.word	0x080062f1
 8006384:	080063cd 	.word	0x080063cd
 8006388:	0800640b 	.word	0x0800640b
 800638c:	0800640b 	.word	0x0800640b
 8006390:	0800640b 	.word	0x0800640b
 8006394:	0800640b 	.word	0x0800640b
 8006398:	0800640b 	.word	0x0800640b
 800639c:	0800640b 	.word	0x0800640b
 80063a0:	0800640b 	.word	0x0800640b
 80063a4:	0800640b 	.word	0x0800640b
 80063a8:	0800640b 	.word	0x0800640b
 80063ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80063ae:	d809      	bhi.n	80063c4 <_scanf_float+0x138>
 80063b0:	2b60      	cmp	r3, #96	@ 0x60
 80063b2:	d8b2      	bhi.n	800631a <_scanf_float+0x8e>
 80063b4:	2b54      	cmp	r3, #84	@ 0x54
 80063b6:	d07b      	beq.n	80064b0 <_scanf_float+0x224>
 80063b8:	2b59      	cmp	r3, #89	@ 0x59
 80063ba:	d199      	bne.n	80062f0 <_scanf_float+0x64>
 80063bc:	2d07      	cmp	r5, #7
 80063be:	d197      	bne.n	80062f0 <_scanf_float+0x64>
 80063c0:	2508      	movs	r5, #8
 80063c2:	e02c      	b.n	800641e <_scanf_float+0x192>
 80063c4:	2b74      	cmp	r3, #116	@ 0x74
 80063c6:	d073      	beq.n	80064b0 <_scanf_float+0x224>
 80063c8:	2b79      	cmp	r3, #121	@ 0x79
 80063ca:	e7f6      	b.n	80063ba <_scanf_float+0x12e>
 80063cc:	6821      	ldr	r1, [r4, #0]
 80063ce:	05c8      	lsls	r0, r1, #23
 80063d0:	d51b      	bpl.n	800640a <_scanf_float+0x17e>
 80063d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80063d6:	6021      	str	r1, [r4, #0]
 80063d8:	f109 0901 	add.w	r9, r9, #1
 80063dc:	f1bb 0f00 	cmp.w	fp, #0
 80063e0:	d003      	beq.n	80063ea <_scanf_float+0x15e>
 80063e2:	3201      	adds	r2, #1
 80063e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063e8:	60a2      	str	r2, [r4, #8]
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	60a3      	str	r3, [r4, #8]
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	3301      	adds	r3, #1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	f340 8087 	ble.w	8006510 <_scanf_float+0x284>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	e765      	b.n	80062d6 <_scanf_float+0x4a>
 800640a:	eb1a 0105 	adds.w	r1, sl, r5
 800640e:	f47f af6f 	bne.w	80062f0 <_scanf_float+0x64>
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	460d      	mov	r5, r1
 800641c:	468a      	mov	sl, r1
 800641e:	f806 3b01 	strb.w	r3, [r6], #1
 8006422:	e7e2      	b.n	80063ea <_scanf_float+0x15e>
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	0610      	lsls	r0, r2, #24
 8006428:	f57f af62 	bpl.w	80062f0 <_scanf_float+0x64>
 800642c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006430:	6022      	str	r2, [r4, #0]
 8006432:	e7f4      	b.n	800641e <_scanf_float+0x192>
 8006434:	f1ba 0f00 	cmp.w	sl, #0
 8006438:	d10e      	bne.n	8006458 <_scanf_float+0x1cc>
 800643a:	f1b9 0f00 	cmp.w	r9, #0
 800643e:	d10e      	bne.n	800645e <_scanf_float+0x1d2>
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006446:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800644a:	d108      	bne.n	800645e <_scanf_float+0x1d2>
 800644c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	f04f 0a01 	mov.w	sl, #1
 8006456:	e7e2      	b.n	800641e <_scanf_float+0x192>
 8006458:	f1ba 0f02 	cmp.w	sl, #2
 800645c:	d055      	beq.n	800650a <_scanf_float+0x27e>
 800645e:	2d01      	cmp	r5, #1
 8006460:	d002      	beq.n	8006468 <_scanf_float+0x1dc>
 8006462:	2d04      	cmp	r5, #4
 8006464:	f47f af44 	bne.w	80062f0 <_scanf_float+0x64>
 8006468:	3501      	adds	r5, #1
 800646a:	b2ed      	uxtb	r5, r5
 800646c:	e7d7      	b.n	800641e <_scanf_float+0x192>
 800646e:	f1ba 0f01 	cmp.w	sl, #1
 8006472:	f47f af3d 	bne.w	80062f0 <_scanf_float+0x64>
 8006476:	f04f 0a02 	mov.w	sl, #2
 800647a:	e7d0      	b.n	800641e <_scanf_float+0x192>
 800647c:	b97d      	cbnz	r5, 800649e <_scanf_float+0x212>
 800647e:	f1b9 0f00 	cmp.w	r9, #0
 8006482:	f47f af38 	bne.w	80062f6 <_scanf_float+0x6a>
 8006486:	6822      	ldr	r2, [r4, #0]
 8006488:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800648c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006490:	f040 8108 	bne.w	80066a4 <_scanf_float+0x418>
 8006494:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006498:	6022      	str	r2, [r4, #0]
 800649a:	2501      	movs	r5, #1
 800649c:	e7bf      	b.n	800641e <_scanf_float+0x192>
 800649e:	2d03      	cmp	r5, #3
 80064a0:	d0e2      	beq.n	8006468 <_scanf_float+0x1dc>
 80064a2:	2d05      	cmp	r5, #5
 80064a4:	e7de      	b.n	8006464 <_scanf_float+0x1d8>
 80064a6:	2d02      	cmp	r5, #2
 80064a8:	f47f af22 	bne.w	80062f0 <_scanf_float+0x64>
 80064ac:	2503      	movs	r5, #3
 80064ae:	e7b6      	b.n	800641e <_scanf_float+0x192>
 80064b0:	2d06      	cmp	r5, #6
 80064b2:	f47f af1d 	bne.w	80062f0 <_scanf_float+0x64>
 80064b6:	2507      	movs	r5, #7
 80064b8:	e7b1      	b.n	800641e <_scanf_float+0x192>
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	0591      	lsls	r1, r2, #22
 80064be:	f57f af17 	bpl.w	80062f0 <_scanf_float+0x64>
 80064c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80064cc:	e7a7      	b.n	800641e <_scanf_float+0x192>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80064d4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80064d8:	d006      	beq.n	80064e8 <_scanf_float+0x25c>
 80064da:	0550      	lsls	r0, r2, #21
 80064dc:	f57f af08 	bpl.w	80062f0 <_scanf_float+0x64>
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	f000 80de 	beq.w	80066a4 <_scanf_float+0x418>
 80064e8:	0591      	lsls	r1, r2, #22
 80064ea:	bf58      	it	pl
 80064ec:	9902      	ldrpl	r1, [sp, #8]
 80064ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064f2:	bf58      	it	pl
 80064f4:	eba9 0101 	subpl.w	r1, r9, r1
 80064f8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80064fc:	bf58      	it	pl
 80064fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	f04f 0900 	mov.w	r9, #0
 8006508:	e789      	b.n	800641e <_scanf_float+0x192>
 800650a:	f04f 0a03 	mov.w	sl, #3
 800650e:	e786      	b.n	800641e <_scanf_float+0x192>
 8006510:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006514:	4639      	mov	r1, r7
 8006516:	4640      	mov	r0, r8
 8006518:	4798      	blx	r3
 800651a:	2800      	cmp	r0, #0
 800651c:	f43f aedb 	beq.w	80062d6 <_scanf_float+0x4a>
 8006520:	e6e6      	b.n	80062f0 <_scanf_float+0x64>
 8006522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800652a:	463a      	mov	r2, r7
 800652c:	4640      	mov	r0, r8
 800652e:	4798      	blx	r3
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	3b01      	subs	r3, #1
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	e6e8      	b.n	800630a <_scanf_float+0x7e>
 8006538:	1e6b      	subs	r3, r5, #1
 800653a:	2b06      	cmp	r3, #6
 800653c:	d824      	bhi.n	8006588 <_scanf_float+0x2fc>
 800653e:	2d02      	cmp	r5, #2
 8006540:	d836      	bhi.n	80065b0 <_scanf_float+0x324>
 8006542:	9b01      	ldr	r3, [sp, #4]
 8006544:	429e      	cmp	r6, r3
 8006546:	f67f aee4 	bls.w	8006312 <_scanf_float+0x86>
 800654a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800654e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006552:	463a      	mov	r2, r7
 8006554:	4640      	mov	r0, r8
 8006556:	4798      	blx	r3
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	3b01      	subs	r3, #1
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	e7f0      	b.n	8006542 <_scanf_float+0x2b6>
 8006560:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006564:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006568:	463a      	mov	r2, r7
 800656a:	4640      	mov	r0, r8
 800656c:	4798      	blx	r3
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	3b01      	subs	r3, #1
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006578:	fa5f fa8a 	uxtb.w	sl, sl
 800657c:	f1ba 0f02 	cmp.w	sl, #2
 8006580:	d1ee      	bne.n	8006560 <_scanf_float+0x2d4>
 8006582:	3d03      	subs	r5, #3
 8006584:	b2ed      	uxtb	r5, r5
 8006586:	1b76      	subs	r6, r6, r5
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	05da      	lsls	r2, r3, #23
 800658c:	d530      	bpl.n	80065f0 <_scanf_float+0x364>
 800658e:	055b      	lsls	r3, r3, #21
 8006590:	d511      	bpl.n	80065b6 <_scanf_float+0x32a>
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	429e      	cmp	r6, r3
 8006596:	f67f aebc 	bls.w	8006312 <_scanf_float+0x86>
 800659a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800659e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065a2:	463a      	mov	r2, r7
 80065a4:	4640      	mov	r0, r8
 80065a6:	4798      	blx	r3
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	e7f0      	b.n	8006592 <_scanf_float+0x306>
 80065b0:	46aa      	mov	sl, r5
 80065b2:	46b3      	mov	fp, r6
 80065b4:	e7de      	b.n	8006574 <_scanf_float+0x2e8>
 80065b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80065ba:	6923      	ldr	r3, [r4, #16]
 80065bc:	2965      	cmp	r1, #101	@ 0x65
 80065be:	f103 33ff 	add.w	r3, r3, #4294967295
 80065c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80065c6:	6123      	str	r3, [r4, #16]
 80065c8:	d00c      	beq.n	80065e4 <_scanf_float+0x358>
 80065ca:	2945      	cmp	r1, #69	@ 0x45
 80065cc:	d00a      	beq.n	80065e4 <_scanf_float+0x358>
 80065ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065d2:	463a      	mov	r2, r7
 80065d4:	4640      	mov	r0, r8
 80065d6:	4798      	blx	r3
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80065de:	3b01      	subs	r3, #1
 80065e0:	1eb5      	subs	r5, r6, #2
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065e8:	463a      	mov	r2, r7
 80065ea:	4640      	mov	r0, r8
 80065ec:	4798      	blx	r3
 80065ee:	462e      	mov	r6, r5
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	f012 0210 	ands.w	r2, r2, #16
 80065f6:	d001      	beq.n	80065fc <_scanf_float+0x370>
 80065f8:	2000      	movs	r0, #0
 80065fa:	e68b      	b.n	8006314 <_scanf_float+0x88>
 80065fc:	7032      	strb	r2, [r6, #0]
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006608:	d11c      	bne.n	8006644 <_scanf_float+0x3b8>
 800660a:	9b02      	ldr	r3, [sp, #8]
 800660c:	454b      	cmp	r3, r9
 800660e:	eba3 0209 	sub.w	r2, r3, r9
 8006612:	d123      	bne.n	800665c <_scanf_float+0x3d0>
 8006614:	9901      	ldr	r1, [sp, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	4640      	mov	r0, r8
 800661a:	f002 fce9 	bl	8008ff0 <_strtod_r>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	6821      	ldr	r1, [r4, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f011 0f02 	tst.w	r1, #2
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	f103 0204 	add.w	r2, r3, #4
 8006630:	d01f      	beq.n	8006672 <_scanf_float+0x3e6>
 8006632:	9903      	ldr	r1, [sp, #12]
 8006634:	600a      	str	r2, [r1, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	e9c3 6700 	strd	r6, r7, [r3]
 800663c:	68e3      	ldr	r3, [r4, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60e3      	str	r3, [r4, #12]
 8006642:	e7d9      	b.n	80065f8 <_scanf_float+0x36c>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0e4      	beq.n	8006614 <_scanf_float+0x388>
 800664a:	9905      	ldr	r1, [sp, #20]
 800664c:	230a      	movs	r3, #10
 800664e:	3101      	adds	r1, #1
 8006650:	4640      	mov	r0, r8
 8006652:	f002 fd4d 	bl	80090f0 <_strtol_r>
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	9e05      	ldr	r6, [sp, #20]
 800665a:	1ac2      	subs	r2, r0, r3
 800665c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006660:	429e      	cmp	r6, r3
 8006662:	bf28      	it	cs
 8006664:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006668:	4910      	ldr	r1, [pc, #64]	@ (80066ac <_scanf_float+0x420>)
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f942 	bl	80068f4 <siprintf>
 8006670:	e7d0      	b.n	8006614 <_scanf_float+0x388>
 8006672:	f011 0f04 	tst.w	r1, #4
 8006676:	9903      	ldr	r1, [sp, #12]
 8006678:	600a      	str	r2, [r1, #0]
 800667a:	d1dc      	bne.n	8006636 <_scanf_float+0x3aa>
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	4632      	mov	r2, r6
 8006680:	463b      	mov	r3, r7
 8006682:	4630      	mov	r0, r6
 8006684:	4639      	mov	r1, r7
 8006686:	f7fa fa71 	bl	8000b6c <__aeabi_dcmpun>
 800668a:	b128      	cbz	r0, 8006698 <_scanf_float+0x40c>
 800668c:	4808      	ldr	r0, [pc, #32]	@ (80066b0 <_scanf_float+0x424>)
 800668e:	f000 faa9 	bl	8006be4 <nanf>
 8006692:	ed85 0a00 	vstr	s0, [r5]
 8006696:	e7d1      	b.n	800663c <_scanf_float+0x3b0>
 8006698:	4630      	mov	r0, r6
 800669a:	4639      	mov	r1, r7
 800669c:	f7fa fac4 	bl	8000c28 <__aeabi_d2f>
 80066a0:	6028      	str	r0, [r5, #0]
 80066a2:	e7cb      	b.n	800663c <_scanf_float+0x3b0>
 80066a4:	f04f 0900 	mov.w	r9, #0
 80066a8:	e629      	b.n	80062fe <_scanf_float+0x72>
 80066aa:	bf00      	nop
 80066ac:	0800a65c 	.word	0x0800a65c
 80066b0:	0800a9f5 	.word	0x0800a9f5

080066b4 <std>:
 80066b4:	2300      	movs	r3, #0
 80066b6:	b510      	push	{r4, lr}
 80066b8:	4604      	mov	r4, r0
 80066ba:	e9c0 3300 	strd	r3, r3, [r0]
 80066be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066c2:	6083      	str	r3, [r0, #8]
 80066c4:	8181      	strh	r1, [r0, #12]
 80066c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066c8:	81c2      	strh	r2, [r0, #14]
 80066ca:	6183      	str	r3, [r0, #24]
 80066cc:	4619      	mov	r1, r3
 80066ce:	2208      	movs	r2, #8
 80066d0:	305c      	adds	r0, #92	@ 0x5c
 80066d2:	f000 fa07 	bl	8006ae4 <memset>
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x58>)
 80066d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x5c>)
 80066dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <std+0x60>)
 80066e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006718 <std+0x64>)
 80066e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <std+0x68>)
 80066e8:	6224      	str	r4, [r4, #32]
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d006      	beq.n	80066fc <std+0x48>
 80066ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066f2:	4294      	cmp	r4, r2
 80066f4:	d002      	beq.n	80066fc <std+0x48>
 80066f6:	33d0      	adds	r3, #208	@ 0xd0
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d105      	bne.n	8006708 <std+0x54>
 80066fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	f000 ba6a 	b.w	8006bdc <__retarget_lock_init_recursive>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	bf00      	nop
 800670c:	08006935 	.word	0x08006935
 8006710:	08006957 	.word	0x08006957
 8006714:	0800698f 	.word	0x0800698f
 8006718:	080069b3 	.word	0x080069b3
 800671c:	20000544 	.word	0x20000544

08006720 <stdio_exit_handler>:
 8006720:	4a02      	ldr	r2, [pc, #8]	@ (800672c <stdio_exit_handler+0xc>)
 8006722:	4903      	ldr	r1, [pc, #12]	@ (8006730 <stdio_exit_handler+0x10>)
 8006724:	4803      	ldr	r0, [pc, #12]	@ (8006734 <stdio_exit_handler+0x14>)
 8006726:	f000 b869 	b.w	80067fc <_fwalk_sglue>
 800672a:	bf00      	nop
 800672c:	20000018 	.word	0x20000018
 8006730:	080094ad 	.word	0x080094ad
 8006734:	20000028 	.word	0x20000028

08006738 <cleanup_stdio>:
 8006738:	6841      	ldr	r1, [r0, #4]
 800673a:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <cleanup_stdio+0x34>)
 800673c:	4299      	cmp	r1, r3
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	d001      	beq.n	8006748 <cleanup_stdio+0x10>
 8006744:	f002 feb2 	bl	80094ac <_fflush_r>
 8006748:	68a1      	ldr	r1, [r4, #8]
 800674a:	4b09      	ldr	r3, [pc, #36]	@ (8006770 <cleanup_stdio+0x38>)
 800674c:	4299      	cmp	r1, r3
 800674e:	d002      	beq.n	8006756 <cleanup_stdio+0x1e>
 8006750:	4620      	mov	r0, r4
 8006752:	f002 feab 	bl	80094ac <_fflush_r>
 8006756:	68e1      	ldr	r1, [r4, #12]
 8006758:	4b06      	ldr	r3, [pc, #24]	@ (8006774 <cleanup_stdio+0x3c>)
 800675a:	4299      	cmp	r1, r3
 800675c:	d004      	beq.n	8006768 <cleanup_stdio+0x30>
 800675e:	4620      	mov	r0, r4
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f002 bea2 	b.w	80094ac <_fflush_r>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	20000544 	.word	0x20000544
 8006770:	200005ac 	.word	0x200005ac
 8006774:	20000614 	.word	0x20000614

08006778 <global_stdio_init.part.0>:
 8006778:	b510      	push	{r4, lr}
 800677a:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <global_stdio_init.part.0+0x30>)
 800677c:	4c0b      	ldr	r4, [pc, #44]	@ (80067ac <global_stdio_init.part.0+0x34>)
 800677e:	4a0c      	ldr	r2, [pc, #48]	@ (80067b0 <global_stdio_init.part.0+0x38>)
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	4620      	mov	r0, r4
 8006784:	2200      	movs	r2, #0
 8006786:	2104      	movs	r1, #4
 8006788:	f7ff ff94 	bl	80066b4 <std>
 800678c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006790:	2201      	movs	r2, #1
 8006792:	2109      	movs	r1, #9
 8006794:	f7ff ff8e 	bl	80066b4 <std>
 8006798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800679c:	2202      	movs	r2, #2
 800679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a2:	2112      	movs	r1, #18
 80067a4:	f7ff bf86 	b.w	80066b4 <std>
 80067a8:	2000067c 	.word	0x2000067c
 80067ac:	20000544 	.word	0x20000544
 80067b0:	08006721 	.word	0x08006721

080067b4 <__sfp_lock_acquire>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_acquire+0x8>)
 80067b6:	f000 ba12 	b.w	8006bde <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	20000685 	.word	0x20000685

080067c0 <__sfp_lock_release>:
 80067c0:	4801      	ldr	r0, [pc, #4]	@ (80067c8 <__sfp_lock_release+0x8>)
 80067c2:	f000 ba0d 	b.w	8006be0 <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	20000685 	.word	0x20000685

080067cc <__sinit>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4604      	mov	r4, r0
 80067d0:	f7ff fff0 	bl	80067b4 <__sfp_lock_acquire>
 80067d4:	6a23      	ldr	r3, [r4, #32]
 80067d6:	b11b      	cbz	r3, 80067e0 <__sinit+0x14>
 80067d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067dc:	f7ff bff0 	b.w	80067c0 <__sfp_lock_release>
 80067e0:	4b04      	ldr	r3, [pc, #16]	@ (80067f4 <__sinit+0x28>)
 80067e2:	6223      	str	r3, [r4, #32]
 80067e4:	4b04      	ldr	r3, [pc, #16]	@ (80067f8 <__sinit+0x2c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f5      	bne.n	80067d8 <__sinit+0xc>
 80067ec:	f7ff ffc4 	bl	8006778 <global_stdio_init.part.0>
 80067f0:	e7f2      	b.n	80067d8 <__sinit+0xc>
 80067f2:	bf00      	nop
 80067f4:	08006739 	.word	0x08006739
 80067f8:	2000067c 	.word	0x2000067c

080067fc <_fwalk_sglue>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	4607      	mov	r7, r0
 8006802:	4688      	mov	r8, r1
 8006804:	4614      	mov	r4, r2
 8006806:	2600      	movs	r6, #0
 8006808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800680c:	f1b9 0901 	subs.w	r9, r9, #1
 8006810:	d505      	bpl.n	800681e <_fwalk_sglue+0x22>
 8006812:	6824      	ldr	r4, [r4, #0]
 8006814:	2c00      	cmp	r4, #0
 8006816:	d1f7      	bne.n	8006808 <_fwalk_sglue+0xc>
 8006818:	4630      	mov	r0, r6
 800681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681e:	89ab      	ldrh	r3, [r5, #12]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d907      	bls.n	8006834 <_fwalk_sglue+0x38>
 8006824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006828:	3301      	adds	r3, #1
 800682a:	d003      	beq.n	8006834 <_fwalk_sglue+0x38>
 800682c:	4629      	mov	r1, r5
 800682e:	4638      	mov	r0, r7
 8006830:	47c0      	blx	r8
 8006832:	4306      	orrs	r6, r0
 8006834:	3568      	adds	r5, #104	@ 0x68
 8006836:	e7e9      	b.n	800680c <_fwalk_sglue+0x10>

08006838 <_puts_r>:
 8006838:	6a03      	ldr	r3, [r0, #32]
 800683a:	b570      	push	{r4, r5, r6, lr}
 800683c:	6884      	ldr	r4, [r0, #8]
 800683e:	4605      	mov	r5, r0
 8006840:	460e      	mov	r6, r1
 8006842:	b90b      	cbnz	r3, 8006848 <_puts_r+0x10>
 8006844:	f7ff ffc2 	bl	80067cc <__sinit>
 8006848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800684a:	07db      	lsls	r3, r3, #31
 800684c:	d405      	bmi.n	800685a <_puts_r+0x22>
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	0598      	lsls	r0, r3, #22
 8006852:	d402      	bmi.n	800685a <_puts_r+0x22>
 8006854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006856:	f000 f9c2 	bl	8006bde <__retarget_lock_acquire_recursive>
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	0719      	lsls	r1, r3, #28
 800685e:	d502      	bpl.n	8006866 <_puts_r+0x2e>
 8006860:	6923      	ldr	r3, [r4, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d135      	bne.n	80068d2 <_puts_r+0x9a>
 8006866:	4621      	mov	r1, r4
 8006868:	4628      	mov	r0, r5
 800686a:	f000 f8e5 	bl	8006a38 <__swsetup_r>
 800686e:	b380      	cbz	r0, 80068d2 <_puts_r+0x9a>
 8006870:	f04f 35ff 	mov.w	r5, #4294967295
 8006874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006876:	07da      	lsls	r2, r3, #31
 8006878:	d405      	bmi.n	8006886 <_puts_r+0x4e>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	059b      	lsls	r3, r3, #22
 800687e:	d402      	bmi.n	8006886 <_puts_r+0x4e>
 8006880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006882:	f000 f9ad 	bl	8006be0 <__retarget_lock_release_recursive>
 8006886:	4628      	mov	r0, r5
 8006888:	bd70      	pop	{r4, r5, r6, pc}
 800688a:	2b00      	cmp	r3, #0
 800688c:	da04      	bge.n	8006898 <_puts_r+0x60>
 800688e:	69a2      	ldr	r2, [r4, #24]
 8006890:	429a      	cmp	r2, r3
 8006892:	dc17      	bgt.n	80068c4 <_puts_r+0x8c>
 8006894:	290a      	cmp	r1, #10
 8006896:	d015      	beq.n	80068c4 <_puts_r+0x8c>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	6022      	str	r2, [r4, #0]
 800689e:	7019      	strb	r1, [r3, #0]
 80068a0:	68a3      	ldr	r3, [r4, #8]
 80068a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068a6:	3b01      	subs	r3, #1
 80068a8:	60a3      	str	r3, [r4, #8]
 80068aa:	2900      	cmp	r1, #0
 80068ac:	d1ed      	bne.n	800688a <_puts_r+0x52>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da11      	bge.n	80068d6 <_puts_r+0x9e>
 80068b2:	4622      	mov	r2, r4
 80068b4:	210a      	movs	r1, #10
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f87f 	bl	80069ba <__swbuf_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d0d7      	beq.n	8006870 <_puts_r+0x38>
 80068c0:	250a      	movs	r5, #10
 80068c2:	e7d7      	b.n	8006874 <_puts_r+0x3c>
 80068c4:	4622      	mov	r2, r4
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 f877 	bl	80069ba <__swbuf_r>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d1e7      	bne.n	80068a0 <_puts_r+0x68>
 80068d0:	e7ce      	b.n	8006870 <_puts_r+0x38>
 80068d2:	3e01      	subs	r6, #1
 80068d4:	e7e4      	b.n	80068a0 <_puts_r+0x68>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	6022      	str	r2, [r4, #0]
 80068dc:	220a      	movs	r2, #10
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e7ee      	b.n	80068c0 <_puts_r+0x88>
	...

080068e4 <puts>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	@ (80068f0 <puts+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f7ff bfa5 	b.w	8006838 <_puts_r>
 80068ee:	bf00      	nop
 80068f0:	20000024 	.word	0x20000024

080068f4 <siprintf>:
 80068f4:	b40e      	push	{r1, r2, r3}
 80068f6:	b500      	push	{lr}
 80068f8:	b09c      	sub	sp, #112	@ 0x70
 80068fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	9006      	str	r0, [sp, #24]
 8006900:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006904:	4809      	ldr	r0, [pc, #36]	@ (800692c <siprintf+0x38>)
 8006906:	9107      	str	r1, [sp, #28]
 8006908:	9104      	str	r1, [sp, #16]
 800690a:	4909      	ldr	r1, [pc, #36]	@ (8006930 <siprintf+0x3c>)
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006910:	9105      	str	r1, [sp, #20]
 8006912:	6800      	ldr	r0, [r0, #0]
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	a902      	add	r1, sp, #8
 8006918:	f002 fc48 	bl	80091ac <_svfiprintf_r>
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	b01c      	add	sp, #112	@ 0x70
 8006924:	f85d eb04 	ldr.w	lr, [sp], #4
 8006928:	b003      	add	sp, #12
 800692a:	4770      	bx	lr
 800692c:	20000024 	.word	0x20000024
 8006930:	ffff0208 	.word	0xffff0208

08006934 <__sread>:
 8006934:	b510      	push	{r4, lr}
 8006936:	460c      	mov	r4, r1
 8006938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693c:	f000 f900 	bl	8006b40 <_read_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	bfab      	itete	ge
 8006944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006946:	89a3      	ldrhlt	r3, [r4, #12]
 8006948:	181b      	addge	r3, r3, r0
 800694a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800694e:	bfac      	ite	ge
 8006950:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006952:	81a3      	strhlt	r3, [r4, #12]
 8006954:	bd10      	pop	{r4, pc}

08006956 <__swrite>:
 8006956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695a:	461f      	mov	r7, r3
 800695c:	898b      	ldrh	r3, [r1, #12]
 800695e:	05db      	lsls	r3, r3, #23
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	4616      	mov	r6, r2
 8006966:	d505      	bpl.n	8006974 <__swrite+0x1e>
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2302      	movs	r3, #2
 800696e:	2200      	movs	r2, #0
 8006970:	f000 f8d4 	bl	8006b1c <_lseek_r>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	4628      	mov	r0, r5
 8006986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	f000 b8eb 	b.w	8006b64 <_write_r>

0800698e <__sseek>:
 800698e:	b510      	push	{r4, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006996:	f000 f8c1 	bl	8006b1c <_lseek_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	bf15      	itete	ne
 80069a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069aa:	81a3      	strheq	r3, [r4, #12]
 80069ac:	bf18      	it	ne
 80069ae:	81a3      	strhne	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__sclose>:
 80069b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b6:	f000 b8a1 	b.w	8006afc <_close_r>

080069ba <__swbuf_r>:
 80069ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069bc:	460e      	mov	r6, r1
 80069be:	4614      	mov	r4, r2
 80069c0:	4605      	mov	r5, r0
 80069c2:	b118      	cbz	r0, 80069cc <__swbuf_r+0x12>
 80069c4:	6a03      	ldr	r3, [r0, #32]
 80069c6:	b90b      	cbnz	r3, 80069cc <__swbuf_r+0x12>
 80069c8:	f7ff ff00 	bl	80067cc <__sinit>
 80069cc:	69a3      	ldr	r3, [r4, #24]
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	071a      	lsls	r2, r3, #28
 80069d4:	d501      	bpl.n	80069da <__swbuf_r+0x20>
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	b943      	cbnz	r3, 80069ec <__swbuf_r+0x32>
 80069da:	4621      	mov	r1, r4
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 f82b 	bl	8006a38 <__swsetup_r>
 80069e2:	b118      	cbz	r0, 80069ec <__swbuf_r+0x32>
 80069e4:	f04f 37ff 	mov.w	r7, #4294967295
 80069e8:	4638      	mov	r0, r7
 80069ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	6922      	ldr	r2, [r4, #16]
 80069f0:	1a98      	subs	r0, r3, r2
 80069f2:	6963      	ldr	r3, [r4, #20]
 80069f4:	b2f6      	uxtb	r6, r6
 80069f6:	4283      	cmp	r3, r0
 80069f8:	4637      	mov	r7, r6
 80069fa:	dc05      	bgt.n	8006a08 <__swbuf_r+0x4e>
 80069fc:	4621      	mov	r1, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	f002 fd54 	bl	80094ac <_fflush_r>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1ed      	bne.n	80069e4 <__swbuf_r+0x2a>
 8006a08:	68a3      	ldr	r3, [r4, #8]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	701e      	strb	r6, [r3, #0]
 8006a16:	6962      	ldr	r2, [r4, #20]
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d004      	beq.n	8006a28 <__swbuf_r+0x6e>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	07db      	lsls	r3, r3, #31
 8006a22:	d5e1      	bpl.n	80069e8 <__swbuf_r+0x2e>
 8006a24:	2e0a      	cmp	r6, #10
 8006a26:	d1df      	bne.n	80069e8 <__swbuf_r+0x2e>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f002 fd3e 	bl	80094ac <_fflush_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0d9      	beq.n	80069e8 <__swbuf_r+0x2e>
 8006a34:	e7d6      	b.n	80069e4 <__swbuf_r+0x2a>
	...

08006a38 <__swsetup_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <__swsetup_r+0xa8>)
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	460c      	mov	r4, r1
 8006a42:	b118      	cbz	r0, 8006a4c <__swsetup_r+0x14>
 8006a44:	6a03      	ldr	r3, [r0, #32]
 8006a46:	b90b      	cbnz	r3, 8006a4c <__swsetup_r+0x14>
 8006a48:	f7ff fec0 	bl	80067cc <__sinit>
 8006a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a50:	0719      	lsls	r1, r3, #28
 8006a52:	d422      	bmi.n	8006a9a <__swsetup_r+0x62>
 8006a54:	06da      	lsls	r2, r3, #27
 8006a56:	d407      	bmi.n	8006a68 <__swsetup_r+0x30>
 8006a58:	2209      	movs	r2, #9
 8006a5a:	602a      	str	r2, [r5, #0]
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e033      	b.n	8006ad0 <__swsetup_r+0x98>
 8006a68:	0758      	lsls	r0, r3, #29
 8006a6a:	d512      	bpl.n	8006a92 <__swsetup_r+0x5a>
 8006a6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a6e:	b141      	cbz	r1, 8006a82 <__swsetup_r+0x4a>
 8006a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d002      	beq.n	8006a7e <__swsetup_r+0x46>
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 ff05 	bl	8007888 <_free_r>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6063      	str	r3, [r4, #4]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f043 0308 	orr.w	r3, r3, #8
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	b94b      	cbnz	r3, 8006ab2 <__swsetup_r+0x7a>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa8:	d003      	beq.n	8006ab2 <__swsetup_r+0x7a>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f002 fd4b 	bl	8009548 <__smakebuf_r>
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	f013 0201 	ands.w	r2, r3, #1
 8006aba:	d00a      	beq.n	8006ad2 <__swsetup_r+0x9a>
 8006abc:	2200      	movs	r2, #0
 8006abe:	60a2      	str	r2, [r4, #8]
 8006ac0:	6962      	ldr	r2, [r4, #20]
 8006ac2:	4252      	negs	r2, r2
 8006ac4:	61a2      	str	r2, [r4, #24]
 8006ac6:	6922      	ldr	r2, [r4, #16]
 8006ac8:	b942      	cbnz	r2, 8006adc <__swsetup_r+0xa4>
 8006aca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ace:	d1c5      	bne.n	8006a5c <__swsetup_r+0x24>
 8006ad0:	bd38      	pop	{r3, r4, r5, pc}
 8006ad2:	0799      	lsls	r1, r3, #30
 8006ad4:	bf58      	it	pl
 8006ad6:	6962      	ldrpl	r2, [r4, #20]
 8006ad8:	60a2      	str	r2, [r4, #8]
 8006ada:	e7f4      	b.n	8006ac6 <__swsetup_r+0x8e>
 8006adc:	2000      	movs	r0, #0
 8006ade:	e7f7      	b.n	8006ad0 <__swsetup_r+0x98>
 8006ae0:	20000024 	.word	0x20000024

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <_localeconv_r>:
 8006af4:	4800      	ldr	r0, [pc, #0]	@ (8006af8 <_localeconv_r+0x4>)
 8006af6:	4770      	bx	lr
 8006af8:	20000164 	.word	0x20000164

08006afc <_close_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	@ (8006b18 <_close_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7fa fddc 	bl	80016c4 <_close>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_close_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_close_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000680 	.word	0x20000680

08006b1c <_lseek_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	@ (8006b3c <_lseek_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa fdf1 	bl	8001712 <_lseek>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_lseek_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_lseek_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000680 	.word	0x20000680

08006b40 <_read_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	@ (8006b60 <_read_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fa fd9b 	bl	800168a <_read>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_read_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_read_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20000680 	.word	0x20000680

08006b64 <_write_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d07      	ldr	r5, [pc, #28]	@ (8006b84 <_write_r+0x20>)
 8006b68:	4604      	mov	r4, r0
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f7fa fc2a 	bl	80013cc <_write>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_write_r+0x1e>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_write_r+0x1e>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20000680 	.word	0x20000680

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	@ (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000024 	.word	0x20000024

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	@ (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f003 fadc 	bl	800a164 <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	0800aa60 	.word	0x0800aa60
 8006bd0:	0800aa60 	.word	0x0800aa60
 8006bd4:	0800aa60 	.word	0x0800aa60
 8006bd8:	0800aa64 	.word	0x0800aa64

08006bdc <__retarget_lock_init_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_acquire_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__retarget_lock_release_recursive>:
 8006be0:	4770      	bx	lr
	...

08006be4 <nanf>:
 8006be4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006bec <nanf+0x8>
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	7fc00000 	.word	0x7fc00000

08006bf0 <quorem>:
 8006bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	6903      	ldr	r3, [r0, #16]
 8006bf6:	690c      	ldr	r4, [r1, #16]
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	db7e      	blt.n	8006cfc <quorem+0x10c>
 8006bfe:	3c01      	subs	r4, #1
 8006c00:	f101 0814 	add.w	r8, r1, #20
 8006c04:	00a3      	lsls	r3, r4, #2
 8006c06:	f100 0514 	add.w	r5, r0, #20
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c22:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c26:	d32e      	bcc.n	8006c86 <quorem+0x96>
 8006c28:	f04f 0a00 	mov.w	sl, #0
 8006c2c:	46c4      	mov	ip, r8
 8006c2e:	46ae      	mov	lr, r5
 8006c30:	46d3      	mov	fp, sl
 8006c32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c36:	b298      	uxth	r0, r3
 8006c38:	fb06 a000 	mla	r0, r6, r0, sl
 8006c3c:	0c02      	lsrs	r2, r0, #16
 8006c3e:	0c1b      	lsrs	r3, r3, #16
 8006c40:	fb06 2303 	mla	r3, r6, r3, r2
 8006c44:	f8de 2000 	ldr.w	r2, [lr]
 8006c48:	b280      	uxth	r0, r0
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	1a12      	subs	r2, r2, r0
 8006c4e:	445a      	add	r2, fp
 8006c50:	f8de 0000 	ldr.w	r0, [lr]
 8006c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c62:	b292      	uxth	r2, r2
 8006c64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c68:	45e1      	cmp	r9, ip
 8006c6a:	f84e 2b04 	str.w	r2, [lr], #4
 8006c6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c72:	d2de      	bcs.n	8006c32 <quorem+0x42>
 8006c74:	9b00      	ldr	r3, [sp, #0]
 8006c76:	58eb      	ldr	r3, [r5, r3]
 8006c78:	b92b      	cbnz	r3, 8006c86 <quorem+0x96>
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	429d      	cmp	r5, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	d32f      	bcc.n	8006ce4 <quorem+0xf4>
 8006c84:	613c      	str	r4, [r7, #16]
 8006c86:	4638      	mov	r0, r7
 8006c88:	f001 f9c2 	bl	8008010 <__mcmp>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	db25      	blt.n	8006cdc <quorem+0xec>
 8006c90:	4629      	mov	r1, r5
 8006c92:	2000      	movs	r0, #0
 8006c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c98:	f8d1 c000 	ldr.w	ip, [r1]
 8006c9c:	fa1f fe82 	uxth.w	lr, r2
 8006ca0:	fa1f f38c 	uxth.w	r3, ip
 8006ca4:	eba3 030e 	sub.w	r3, r3, lr
 8006ca8:	4403      	add	r3, r0
 8006caa:	0c12      	lsrs	r2, r2, #16
 8006cac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006cb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cba:	45c1      	cmp	r9, r8
 8006cbc:	f841 3b04 	str.w	r3, [r1], #4
 8006cc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cc4:	d2e6      	bcs.n	8006c94 <quorem+0xa4>
 8006cc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cce:	b922      	cbnz	r2, 8006cda <quorem+0xea>
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	d30b      	bcc.n	8006cf0 <quorem+0x100>
 8006cd8:	613c      	str	r4, [r7, #16]
 8006cda:	3601      	adds	r6, #1
 8006cdc:	4630      	mov	r0, r6
 8006cde:	b003      	add	sp, #12
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d1cb      	bne.n	8006c84 <quorem+0x94>
 8006cec:	3c01      	subs	r4, #1
 8006cee:	e7c6      	b.n	8006c7e <quorem+0x8e>
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	d1ef      	bne.n	8006cd8 <quorem+0xe8>
 8006cf8:	3c01      	subs	r4, #1
 8006cfa:	e7ea      	b.n	8006cd2 <quorem+0xe2>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7ee      	b.n	8006cde <quorem+0xee>

08006d00 <_dtoa_r>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	69c7      	ldr	r7, [r0, #28]
 8006d06:	b099      	sub	sp, #100	@ 0x64
 8006d08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d0c:	ec55 4b10 	vmov	r4, r5, d0
 8006d10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006d12:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d14:	4683      	mov	fp, r0
 8006d16:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d1a:	b97f      	cbnz	r7, 8006d3c <_dtoa_r+0x3c>
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	f000 fdfd 	bl	800791c <malloc>
 8006d22:	4602      	mov	r2, r0
 8006d24:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d28:	b920      	cbnz	r0, 8006d34 <_dtoa_r+0x34>
 8006d2a:	4ba7      	ldr	r3, [pc, #668]	@ (8006fc8 <_dtoa_r+0x2c8>)
 8006d2c:	21ef      	movs	r1, #239	@ 0xef
 8006d2e:	48a7      	ldr	r0, [pc, #668]	@ (8006fcc <_dtoa_r+0x2cc>)
 8006d30:	f002 fcba 	bl	80096a8 <__assert_func>
 8006d34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d38:	6007      	str	r7, [r0, #0]
 8006d3a:	60c7      	str	r7, [r0, #12]
 8006d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d40:	6819      	ldr	r1, [r3, #0]
 8006d42:	b159      	cbz	r1, 8006d5c <_dtoa_r+0x5c>
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	604a      	str	r2, [r1, #4]
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4093      	lsls	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]
 8006d4e:	4658      	mov	r0, fp
 8006d50:	f000 feda 	bl	8007b08 <_Bfree>
 8006d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	1e2b      	subs	r3, r5, #0
 8006d5e:	bfb9      	ittee	lt
 8006d60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d64:	9303      	strlt	r3, [sp, #12]
 8006d66:	2300      	movge	r3, #0
 8006d68:	6033      	strge	r3, [r6, #0]
 8006d6a:	9f03      	ldr	r7, [sp, #12]
 8006d6c:	4b98      	ldr	r3, [pc, #608]	@ (8006fd0 <_dtoa_r+0x2d0>)
 8006d6e:	bfbc      	itt	lt
 8006d70:	2201      	movlt	r2, #1
 8006d72:	6032      	strlt	r2, [r6, #0]
 8006d74:	43bb      	bics	r3, r7
 8006d76:	d112      	bne.n	8006d9e <_dtoa_r+0x9e>
 8006d78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d84:	4323      	orrs	r3, r4
 8006d86:	f000 854d 	beq.w	8007824 <_dtoa_r+0xb24>
 8006d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006fe4 <_dtoa_r+0x2e4>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 854f 	beq.w	8007834 <_dtoa_r+0xb34>
 8006d96:	f10a 0303 	add.w	r3, sl, #3
 8006d9a:	f000 bd49 	b.w	8007830 <_dtoa_r+0xb30>
 8006d9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	ec51 0b17 	vmov	r0, r1, d7
 8006da8:	2300      	movs	r3, #0
 8006daa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006dae:	f7f9 feab 	bl	8000b08 <__aeabi_dcmpeq>
 8006db2:	4680      	mov	r8, r0
 8006db4:	b158      	cbz	r0, 8006dce <_dtoa_r+0xce>
 8006db6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006db8:	2301      	movs	r3, #1
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006dbe:	b113      	cbz	r3, 8006dc6 <_dtoa_r+0xc6>
 8006dc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006dc2:	4b84      	ldr	r3, [pc, #528]	@ (8006fd4 <_dtoa_r+0x2d4>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006fe8 <_dtoa_r+0x2e8>
 8006dca:	f000 bd33 	b.w	8007834 <_dtoa_r+0xb34>
 8006dce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006dd2:	aa16      	add	r2, sp, #88	@ 0x58
 8006dd4:	a917      	add	r1, sp, #92	@ 0x5c
 8006dd6:	4658      	mov	r0, fp
 8006dd8:	f001 fa3a 	bl	8008250 <__d2b>
 8006ddc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006de0:	4681      	mov	r9, r0
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d077      	beq.n	8006ed6 <_dtoa_r+0x1d6>
 8006de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006de8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006df8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006dfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e00:	4619      	mov	r1, r3
 8006e02:	2200      	movs	r2, #0
 8006e04:	4b74      	ldr	r3, [pc, #464]	@ (8006fd8 <_dtoa_r+0x2d8>)
 8006e06:	f7f9 fa5f 	bl	80002c8 <__aeabi_dsub>
 8006e0a:	a369      	add	r3, pc, #420	@ (adr r3, 8006fb0 <_dtoa_r+0x2b0>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fc12 	bl	8000638 <__aeabi_dmul>
 8006e14:	a368      	add	r3, pc, #416	@ (adr r3, 8006fb8 <_dtoa_r+0x2b8>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 fa57 	bl	80002cc <__adddf3>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	4630      	mov	r0, r6
 8006e22:	460d      	mov	r5, r1
 8006e24:	f7f9 fb9e 	bl	8000564 <__aeabi_i2d>
 8006e28:	a365      	add	r3, pc, #404	@ (adr r3, 8006fc0 <_dtoa_r+0x2c0>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fc03 	bl	8000638 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 fa47 	bl	80002cc <__adddf3>
 8006e3e:	4604      	mov	r4, r0
 8006e40:	460d      	mov	r5, r1
 8006e42:	f7f9 fea9 	bl	8000b98 <__aeabi_d2iz>
 8006e46:	2200      	movs	r2, #0
 8006e48:	4607      	mov	r7, r0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7f9 fe64 	bl	8000b1c <__aeabi_dcmplt>
 8006e54:	b140      	cbz	r0, 8006e68 <_dtoa_r+0x168>
 8006e56:	4638      	mov	r0, r7
 8006e58:	f7f9 fb84 	bl	8000564 <__aeabi_i2d>
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	462b      	mov	r3, r5
 8006e60:	f7f9 fe52 	bl	8000b08 <__aeabi_dcmpeq>
 8006e64:	b900      	cbnz	r0, 8006e68 <_dtoa_r+0x168>
 8006e66:	3f01      	subs	r7, #1
 8006e68:	2f16      	cmp	r7, #22
 8006e6a:	d851      	bhi.n	8006f10 <_dtoa_r+0x210>
 8006e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006fdc <_dtoa_r+0x2dc>)
 8006e6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e7a:	f7f9 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d048      	beq.n	8006f14 <_dtoa_r+0x214>
 8006e82:	3f01      	subs	r7, #1
 8006e84:	2300      	movs	r3, #0
 8006e86:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e8a:	1b9b      	subs	r3, r3, r6
 8006e8c:	1e5a      	subs	r2, r3, #1
 8006e8e:	bf44      	itt	mi
 8006e90:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e94:	2300      	movmi	r3, #0
 8006e96:	9208      	str	r2, [sp, #32]
 8006e98:	bf54      	ite	pl
 8006e9a:	f04f 0800 	movpl.w	r8, #0
 8006e9e:	9308      	strmi	r3, [sp, #32]
 8006ea0:	2f00      	cmp	r7, #0
 8006ea2:	db39      	blt.n	8006f18 <_dtoa_r+0x218>
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ea8:	443b      	add	r3, r7
 8006eaa:	9308      	str	r3, [sp, #32]
 8006eac:	2300      	movs	r3, #0
 8006eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d864      	bhi.n	8006f80 <_dtoa_r+0x280>
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	bfc4      	itt	gt
 8006eba:	3b04      	subgt	r3, #4
 8006ebc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	f1a3 0302 	sub.w	r3, r3, #2
 8006ec4:	bfcc      	ite	gt
 8006ec6:	2400      	movgt	r4, #0
 8006ec8:	2401      	movle	r4, #1
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d863      	bhi.n	8006f96 <_dtoa_r+0x296>
 8006ece:	e8df f003 	tbb	[pc, r3]
 8006ed2:	372a      	.short	0x372a
 8006ed4:	5535      	.short	0x5535
 8006ed6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006eda:	441e      	add	r6, r3
 8006edc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	bfc1      	itttt	gt
 8006ee4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ee8:	409f      	lslgt	r7, r3
 8006eea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006eee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ef2:	bfd6      	itet	le
 8006ef4:	f1c3 0320 	rsble	r3, r3, #32
 8006ef8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006efc:	fa04 f003 	lslle.w	r0, r4, r3
 8006f00:	f7f9 fb20 	bl	8000544 <__aeabi_ui2d>
 8006f04:	2201      	movs	r2, #1
 8006f06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f0a:	3e01      	subs	r6, #1
 8006f0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f0e:	e777      	b.n	8006e00 <_dtoa_r+0x100>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e7b8      	b.n	8006e86 <_dtoa_r+0x186>
 8006f14:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f16:	e7b7      	b.n	8006e88 <_dtoa_r+0x188>
 8006f18:	427b      	negs	r3, r7
 8006f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	eba8 0807 	sub.w	r8, r8, r7
 8006f22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f24:	e7c4      	b.n	8006eb0 <_dtoa_r+0x1b0>
 8006f26:	2300      	movs	r3, #0
 8006f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dc35      	bgt.n	8006f9c <_dtoa_r+0x29c>
 8006f30:	2301      	movs	r3, #1
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	9307      	str	r3, [sp, #28]
 8006f36:	461a      	mov	r2, r3
 8006f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f3a:	e00b      	b.n	8006f54 <_dtoa_r+0x254>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e7f3      	b.n	8006f28 <_dtoa_r+0x228>
 8006f40:	2300      	movs	r3, #0
 8006f42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	9307      	str	r3, [sp, #28]
 8006f50:	bfb8      	it	lt
 8006f52:	2301      	movlt	r3, #1
 8006f54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	2204      	movs	r2, #4
 8006f5c:	f102 0514 	add.w	r5, r2, #20
 8006f60:	429d      	cmp	r5, r3
 8006f62:	d91f      	bls.n	8006fa4 <_dtoa_r+0x2a4>
 8006f64:	6041      	str	r1, [r0, #4]
 8006f66:	4658      	mov	r0, fp
 8006f68:	f000 fd8e 	bl	8007a88 <_Balloc>
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d13c      	bne.n	8006fec <_dtoa_r+0x2ec>
 8006f72:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe0 <_dtoa_r+0x2e0>)
 8006f74:	4602      	mov	r2, r0
 8006f76:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f7a:	e6d8      	b.n	8006d2e <_dtoa_r+0x2e>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e7e0      	b.n	8006f42 <_dtoa_r+0x242>
 8006f80:	2401      	movs	r4, #1
 8006f82:	2300      	movs	r3, #0
 8006f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	9307      	str	r3, [sp, #28]
 8006f90:	2200      	movs	r2, #0
 8006f92:	2312      	movs	r3, #18
 8006f94:	e7d0      	b.n	8006f38 <_dtoa_r+0x238>
 8006f96:	2301      	movs	r3, #1
 8006f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f9a:	e7f5      	b.n	8006f88 <_dtoa_r+0x288>
 8006f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	9307      	str	r3, [sp, #28]
 8006fa2:	e7d7      	b.n	8006f54 <_dtoa_r+0x254>
 8006fa4:	3101      	adds	r1, #1
 8006fa6:	0052      	lsls	r2, r2, #1
 8006fa8:	e7d8      	b.n	8006f5c <_dtoa_r+0x25c>
 8006faa:	bf00      	nop
 8006fac:	f3af 8000 	nop.w
 8006fb0:	636f4361 	.word	0x636f4361
 8006fb4:	3fd287a7 	.word	0x3fd287a7
 8006fb8:	8b60c8b3 	.word	0x8b60c8b3
 8006fbc:	3fc68a28 	.word	0x3fc68a28
 8006fc0:	509f79fb 	.word	0x509f79fb
 8006fc4:	3fd34413 	.word	0x3fd34413
 8006fc8:	0800a66e 	.word	0x0800a66e
 8006fcc:	0800a685 	.word	0x0800a685
 8006fd0:	7ff00000 	.word	0x7ff00000
 8006fd4:	0800a639 	.word	0x0800a639
 8006fd8:	3ff80000 	.word	0x3ff80000
 8006fdc:	0800a780 	.word	0x0800a780
 8006fe0:	0800a6dd 	.word	0x0800a6dd
 8006fe4:	0800a66a 	.word	0x0800a66a
 8006fe8:	0800a638 	.word	0x0800a638
 8006fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ff0:	6018      	str	r0, [r3, #0]
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	2b0e      	cmp	r3, #14
 8006ff6:	f200 80a4 	bhi.w	8007142 <_dtoa_r+0x442>
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	f000 80a1 	beq.w	8007142 <_dtoa_r+0x442>
 8007000:	2f00      	cmp	r7, #0
 8007002:	dd33      	ble.n	800706c <_dtoa_r+0x36c>
 8007004:	4bad      	ldr	r3, [pc, #692]	@ (80072bc <_dtoa_r+0x5bc>)
 8007006:	f007 020f 	and.w	r2, r7, #15
 800700a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800700e:	ed93 7b00 	vldr	d7, [r3]
 8007012:	05f8      	lsls	r0, r7, #23
 8007014:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800701c:	d516      	bpl.n	800704c <_dtoa_r+0x34c>
 800701e:	4ba8      	ldr	r3, [pc, #672]	@ (80072c0 <_dtoa_r+0x5c0>)
 8007020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007028:	f7f9 fc30 	bl	800088c <__aeabi_ddiv>
 800702c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007030:	f004 040f 	and.w	r4, r4, #15
 8007034:	2603      	movs	r6, #3
 8007036:	4da2      	ldr	r5, [pc, #648]	@ (80072c0 <_dtoa_r+0x5c0>)
 8007038:	b954      	cbnz	r4, 8007050 <_dtoa_r+0x350>
 800703a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007042:	f7f9 fc23 	bl	800088c <__aeabi_ddiv>
 8007046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800704a:	e028      	b.n	800709e <_dtoa_r+0x39e>
 800704c:	2602      	movs	r6, #2
 800704e:	e7f2      	b.n	8007036 <_dtoa_r+0x336>
 8007050:	07e1      	lsls	r1, r4, #31
 8007052:	d508      	bpl.n	8007066 <_dtoa_r+0x366>
 8007054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800705c:	f7f9 faec 	bl	8000638 <__aeabi_dmul>
 8007060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007064:	3601      	adds	r6, #1
 8007066:	1064      	asrs	r4, r4, #1
 8007068:	3508      	adds	r5, #8
 800706a:	e7e5      	b.n	8007038 <_dtoa_r+0x338>
 800706c:	f000 80d2 	beq.w	8007214 <_dtoa_r+0x514>
 8007070:	427c      	negs	r4, r7
 8007072:	4b92      	ldr	r3, [pc, #584]	@ (80072bc <_dtoa_r+0x5bc>)
 8007074:	4d92      	ldr	r5, [pc, #584]	@ (80072c0 <_dtoa_r+0x5c0>)
 8007076:	f004 020f 	and.w	r2, r4, #15
 800707a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007086:	f7f9 fad7 	bl	8000638 <__aeabi_dmul>
 800708a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800708e:	1124      	asrs	r4, r4, #4
 8007090:	2300      	movs	r3, #0
 8007092:	2602      	movs	r6, #2
 8007094:	2c00      	cmp	r4, #0
 8007096:	f040 80b2 	bne.w	80071fe <_dtoa_r+0x4fe>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1d3      	bne.n	8007046 <_dtoa_r+0x346>
 800709e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 80b7 	beq.w	8007218 <_dtoa_r+0x518>
 80070aa:	4b86      	ldr	r3, [pc, #536]	@ (80072c4 <_dtoa_r+0x5c4>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 fd33 	bl	8000b1c <__aeabi_dcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f000 80ae 	beq.w	8007218 <_dtoa_r+0x518>
 80070bc:	9b07      	ldr	r3, [sp, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 80aa 	beq.w	8007218 <_dtoa_r+0x518>
 80070c4:	9b00      	ldr	r3, [sp, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd37      	ble.n	800713a <_dtoa_r+0x43a>
 80070ca:	1e7b      	subs	r3, r7, #1
 80070cc:	9304      	str	r3, [sp, #16]
 80070ce:	4620      	mov	r0, r4
 80070d0:	4b7d      	ldr	r3, [pc, #500]	@ (80072c8 <_dtoa_r+0x5c8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 faaf 	bl	8000638 <__aeabi_dmul>
 80070da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070de:	9c00      	ldr	r4, [sp, #0]
 80070e0:	3601      	adds	r6, #1
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7f9 fa3e 	bl	8000564 <__aeabi_i2d>
 80070e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ec:	f7f9 faa4 	bl	8000638 <__aeabi_dmul>
 80070f0:	4b76      	ldr	r3, [pc, #472]	@ (80072cc <_dtoa_r+0x5cc>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	f7f9 f8ea 	bl	80002cc <__adddf3>
 80070f8:	4605      	mov	r5, r0
 80070fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070fe:	2c00      	cmp	r4, #0
 8007100:	f040 808d 	bne.w	800721e <_dtoa_r+0x51e>
 8007104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007108:	4b71      	ldr	r3, [pc, #452]	@ (80072d0 <_dtoa_r+0x5d0>)
 800710a:	2200      	movs	r2, #0
 800710c:	f7f9 f8dc 	bl	80002c8 <__aeabi_dsub>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007118:	462a      	mov	r2, r5
 800711a:	4633      	mov	r3, r6
 800711c:	f7f9 fd1c 	bl	8000b58 <__aeabi_dcmpgt>
 8007120:	2800      	cmp	r0, #0
 8007122:	f040 828b 	bne.w	800763c <_dtoa_r+0x93c>
 8007126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800712a:	462a      	mov	r2, r5
 800712c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007130:	f7f9 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8007134:	2800      	cmp	r0, #0
 8007136:	f040 8128 	bne.w	800738a <_dtoa_r+0x68a>
 800713a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800713e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007144:	2b00      	cmp	r3, #0
 8007146:	f2c0 815a 	blt.w	80073fe <_dtoa_r+0x6fe>
 800714a:	2f0e      	cmp	r7, #14
 800714c:	f300 8157 	bgt.w	80073fe <_dtoa_r+0x6fe>
 8007150:	4b5a      	ldr	r3, [pc, #360]	@ (80072bc <_dtoa_r+0x5bc>)
 8007152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007156:	ed93 7b00 	vldr	d7, [r3]
 800715a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	ed8d 7b00 	vstr	d7, [sp]
 8007162:	da03      	bge.n	800716c <_dtoa_r+0x46c>
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f340 8101 	ble.w	800736e <_dtoa_r+0x66e>
 800716c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007170:	4656      	mov	r6, sl
 8007172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007176:	4620      	mov	r0, r4
 8007178:	4629      	mov	r1, r5
 800717a:	f7f9 fb87 	bl	800088c <__aeabi_ddiv>
 800717e:	f7f9 fd0b 	bl	8000b98 <__aeabi_d2iz>
 8007182:	4680      	mov	r8, r0
 8007184:	f7f9 f9ee 	bl	8000564 <__aeabi_i2d>
 8007188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800718c:	f7f9 fa54 	bl	8000638 <__aeabi_dmul>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4620      	mov	r0, r4
 8007196:	4629      	mov	r1, r5
 8007198:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800719c:	f7f9 f894 	bl	80002c8 <__aeabi_dsub>
 80071a0:	f806 4b01 	strb.w	r4, [r6], #1
 80071a4:	9d07      	ldr	r5, [sp, #28]
 80071a6:	eba6 040a 	sub.w	r4, r6, sl
 80071aa:	42a5      	cmp	r5, r4
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	f040 8117 	bne.w	80073e2 <_dtoa_r+0x6e2>
 80071b4:	f7f9 f88a 	bl	80002cc <__adddf3>
 80071b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	f7f9 fcca 	bl	8000b58 <__aeabi_dcmpgt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f040 80f9 	bne.w	80073bc <_dtoa_r+0x6bc>
 80071ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fc99 	bl	8000b08 <__aeabi_dcmpeq>
 80071d6:	b118      	cbz	r0, 80071e0 <_dtoa_r+0x4e0>
 80071d8:	f018 0f01 	tst.w	r8, #1
 80071dc:	f040 80ee 	bne.w	80073bc <_dtoa_r+0x6bc>
 80071e0:	4649      	mov	r1, r9
 80071e2:	4658      	mov	r0, fp
 80071e4:	f000 fc90 	bl	8007b08 <_Bfree>
 80071e8:	2300      	movs	r3, #0
 80071ea:	7033      	strb	r3, [r6, #0]
 80071ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071ee:	3701      	adds	r7, #1
 80071f0:	601f      	str	r7, [r3, #0]
 80071f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 831d 	beq.w	8007834 <_dtoa_r+0xb34>
 80071fa:	601e      	str	r6, [r3, #0]
 80071fc:	e31a      	b.n	8007834 <_dtoa_r+0xb34>
 80071fe:	07e2      	lsls	r2, r4, #31
 8007200:	d505      	bpl.n	800720e <_dtoa_r+0x50e>
 8007202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007206:	f7f9 fa17 	bl	8000638 <__aeabi_dmul>
 800720a:	3601      	adds	r6, #1
 800720c:	2301      	movs	r3, #1
 800720e:	1064      	asrs	r4, r4, #1
 8007210:	3508      	adds	r5, #8
 8007212:	e73f      	b.n	8007094 <_dtoa_r+0x394>
 8007214:	2602      	movs	r6, #2
 8007216:	e742      	b.n	800709e <_dtoa_r+0x39e>
 8007218:	9c07      	ldr	r4, [sp, #28]
 800721a:	9704      	str	r7, [sp, #16]
 800721c:	e761      	b.n	80070e2 <_dtoa_r+0x3e2>
 800721e:	4b27      	ldr	r3, [pc, #156]	@ (80072bc <_dtoa_r+0x5bc>)
 8007220:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007222:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007226:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800722a:	4454      	add	r4, sl
 800722c:	2900      	cmp	r1, #0
 800722e:	d053      	beq.n	80072d8 <_dtoa_r+0x5d8>
 8007230:	4928      	ldr	r1, [pc, #160]	@ (80072d4 <_dtoa_r+0x5d4>)
 8007232:	2000      	movs	r0, #0
 8007234:	f7f9 fb2a 	bl	800088c <__aeabi_ddiv>
 8007238:	4633      	mov	r3, r6
 800723a:	462a      	mov	r2, r5
 800723c:	f7f9 f844 	bl	80002c8 <__aeabi_dsub>
 8007240:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007244:	4656      	mov	r6, sl
 8007246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724a:	f7f9 fca5 	bl	8000b98 <__aeabi_d2iz>
 800724e:	4605      	mov	r5, r0
 8007250:	f7f9 f988 	bl	8000564 <__aeabi_i2d>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725c:	f7f9 f834 	bl	80002c8 <__aeabi_dsub>
 8007260:	3530      	adds	r5, #48	@ 0x30
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800726a:	f806 5b01 	strb.w	r5, [r6], #1
 800726e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007272:	f7f9 fc53 	bl	8000b1c <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	d171      	bne.n	800735e <_dtoa_r+0x65e>
 800727a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800727e:	4911      	ldr	r1, [pc, #68]	@ (80072c4 <_dtoa_r+0x5c4>)
 8007280:	2000      	movs	r0, #0
 8007282:	f7f9 f821 	bl	80002c8 <__aeabi_dsub>
 8007286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800728a:	f7f9 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800728e:	2800      	cmp	r0, #0
 8007290:	f040 8095 	bne.w	80073be <_dtoa_r+0x6be>
 8007294:	42a6      	cmp	r6, r4
 8007296:	f43f af50 	beq.w	800713a <_dtoa_r+0x43a>
 800729a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800729e:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <_dtoa_r+0x5c8>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	f7f9 f9c9 	bl	8000638 <__aeabi_dmul>
 80072a6:	4b08      	ldr	r3, [pc, #32]	@ (80072c8 <_dtoa_r+0x5c8>)
 80072a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ac:	2200      	movs	r2, #0
 80072ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b2:	f7f9 f9c1 	bl	8000638 <__aeabi_dmul>
 80072b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ba:	e7c4      	b.n	8007246 <_dtoa_r+0x546>
 80072bc:	0800a780 	.word	0x0800a780
 80072c0:	0800a758 	.word	0x0800a758
 80072c4:	3ff00000 	.word	0x3ff00000
 80072c8:	40240000 	.word	0x40240000
 80072cc:	401c0000 	.word	0x401c0000
 80072d0:	40140000 	.word	0x40140000
 80072d4:	3fe00000 	.word	0x3fe00000
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f9 f9ac 	bl	8000638 <__aeabi_dmul>
 80072e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80072e6:	4656      	mov	r6, sl
 80072e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ec:	f7f9 fc54 	bl	8000b98 <__aeabi_d2iz>
 80072f0:	4605      	mov	r5, r0
 80072f2:	f7f9 f937 	bl	8000564 <__aeabi_i2d>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fe:	f7f8 ffe3 	bl	80002c8 <__aeabi_dsub>
 8007302:	3530      	adds	r5, #48	@ 0x30
 8007304:	f806 5b01 	strb.w	r5, [r6], #1
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	42a6      	cmp	r6, r4
 800730e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	d124      	bne.n	8007362 <_dtoa_r+0x662>
 8007318:	4bac      	ldr	r3, [pc, #688]	@ (80075cc <_dtoa_r+0x8cc>)
 800731a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800731e:	f7f8 ffd5 	bl	80002cc <__adddf3>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732a:	f7f9 fc15 	bl	8000b58 <__aeabi_dcmpgt>
 800732e:	2800      	cmp	r0, #0
 8007330:	d145      	bne.n	80073be <_dtoa_r+0x6be>
 8007332:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007336:	49a5      	ldr	r1, [pc, #660]	@ (80075cc <_dtoa_r+0x8cc>)
 8007338:	2000      	movs	r0, #0
 800733a:	f7f8 ffc5 	bl	80002c8 <__aeabi_dsub>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007346:	f7f9 fbe9 	bl	8000b1c <__aeabi_dcmplt>
 800734a:	2800      	cmp	r0, #0
 800734c:	f43f aef5 	beq.w	800713a <_dtoa_r+0x43a>
 8007350:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007352:	1e73      	subs	r3, r6, #1
 8007354:	9315      	str	r3, [sp, #84]	@ 0x54
 8007356:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800735a:	2b30      	cmp	r3, #48	@ 0x30
 800735c:	d0f8      	beq.n	8007350 <_dtoa_r+0x650>
 800735e:	9f04      	ldr	r7, [sp, #16]
 8007360:	e73e      	b.n	80071e0 <_dtoa_r+0x4e0>
 8007362:	4b9b      	ldr	r3, [pc, #620]	@ (80075d0 <_dtoa_r+0x8d0>)
 8007364:	f7f9 f968 	bl	8000638 <__aeabi_dmul>
 8007368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736c:	e7bc      	b.n	80072e8 <_dtoa_r+0x5e8>
 800736e:	d10c      	bne.n	800738a <_dtoa_r+0x68a>
 8007370:	4b98      	ldr	r3, [pc, #608]	@ (80075d4 <_dtoa_r+0x8d4>)
 8007372:	2200      	movs	r2, #0
 8007374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007378:	f7f9 f95e 	bl	8000638 <__aeabi_dmul>
 800737c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007380:	f7f9 fbe0 	bl	8000b44 <__aeabi_dcmpge>
 8007384:	2800      	cmp	r0, #0
 8007386:	f000 8157 	beq.w	8007638 <_dtoa_r+0x938>
 800738a:	2400      	movs	r4, #0
 800738c:	4625      	mov	r5, r4
 800738e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007390:	43db      	mvns	r3, r3
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	4656      	mov	r6, sl
 8007396:	2700      	movs	r7, #0
 8007398:	4621      	mov	r1, r4
 800739a:	4658      	mov	r0, fp
 800739c:	f000 fbb4 	bl	8007b08 <_Bfree>
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	d0dc      	beq.n	800735e <_dtoa_r+0x65e>
 80073a4:	b12f      	cbz	r7, 80073b2 <_dtoa_r+0x6b2>
 80073a6:	42af      	cmp	r7, r5
 80073a8:	d003      	beq.n	80073b2 <_dtoa_r+0x6b2>
 80073aa:	4639      	mov	r1, r7
 80073ac:	4658      	mov	r0, fp
 80073ae:	f000 fbab 	bl	8007b08 <_Bfree>
 80073b2:	4629      	mov	r1, r5
 80073b4:	4658      	mov	r0, fp
 80073b6:	f000 fba7 	bl	8007b08 <_Bfree>
 80073ba:	e7d0      	b.n	800735e <_dtoa_r+0x65e>
 80073bc:	9704      	str	r7, [sp, #16]
 80073be:	4633      	mov	r3, r6
 80073c0:	461e      	mov	r6, r3
 80073c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073c6:	2a39      	cmp	r2, #57	@ 0x39
 80073c8:	d107      	bne.n	80073da <_dtoa_r+0x6da>
 80073ca:	459a      	cmp	sl, r3
 80073cc:	d1f8      	bne.n	80073c0 <_dtoa_r+0x6c0>
 80073ce:	9a04      	ldr	r2, [sp, #16]
 80073d0:	3201      	adds	r2, #1
 80073d2:	9204      	str	r2, [sp, #16]
 80073d4:	2230      	movs	r2, #48	@ 0x30
 80073d6:	f88a 2000 	strb.w	r2, [sl]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	3201      	adds	r2, #1
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	e7bd      	b.n	800735e <_dtoa_r+0x65e>
 80073e2:	4b7b      	ldr	r3, [pc, #492]	@ (80075d0 <_dtoa_r+0x8d0>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	f7f9 f927 	bl	8000638 <__aeabi_dmul>
 80073ea:	2200      	movs	r2, #0
 80073ec:	2300      	movs	r3, #0
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	f7f9 fb89 	bl	8000b08 <__aeabi_dcmpeq>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f aebb 	beq.w	8007172 <_dtoa_r+0x472>
 80073fc:	e6f0      	b.n	80071e0 <_dtoa_r+0x4e0>
 80073fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007400:	2a00      	cmp	r2, #0
 8007402:	f000 80db 	beq.w	80075bc <_dtoa_r+0x8bc>
 8007406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007408:	2a01      	cmp	r2, #1
 800740a:	f300 80bf 	bgt.w	800758c <_dtoa_r+0x88c>
 800740e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007410:	2a00      	cmp	r2, #0
 8007412:	f000 80b7 	beq.w	8007584 <_dtoa_r+0x884>
 8007416:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800741a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800741c:	4646      	mov	r6, r8
 800741e:	9a08      	ldr	r2, [sp, #32]
 8007420:	2101      	movs	r1, #1
 8007422:	441a      	add	r2, r3
 8007424:	4658      	mov	r0, fp
 8007426:	4498      	add	r8, r3
 8007428:	9208      	str	r2, [sp, #32]
 800742a:	f000 fc6b 	bl	8007d04 <__i2b>
 800742e:	4605      	mov	r5, r0
 8007430:	b15e      	cbz	r6, 800744a <_dtoa_r+0x74a>
 8007432:	9b08      	ldr	r3, [sp, #32]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dd08      	ble.n	800744a <_dtoa_r+0x74a>
 8007438:	42b3      	cmp	r3, r6
 800743a:	9a08      	ldr	r2, [sp, #32]
 800743c:	bfa8      	it	ge
 800743e:	4633      	movge	r3, r6
 8007440:	eba8 0803 	sub.w	r8, r8, r3
 8007444:	1af6      	subs	r6, r6, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744c:	b1f3      	cbz	r3, 800748c <_dtoa_r+0x78c>
 800744e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80b7 	beq.w	80075c4 <_dtoa_r+0x8c4>
 8007456:	b18c      	cbz	r4, 800747c <_dtoa_r+0x77c>
 8007458:	4629      	mov	r1, r5
 800745a:	4622      	mov	r2, r4
 800745c:	4658      	mov	r0, fp
 800745e:	f000 fd11 	bl	8007e84 <__pow5mult>
 8007462:	464a      	mov	r2, r9
 8007464:	4601      	mov	r1, r0
 8007466:	4605      	mov	r5, r0
 8007468:	4658      	mov	r0, fp
 800746a:	f000 fc61 	bl	8007d30 <__multiply>
 800746e:	4649      	mov	r1, r9
 8007470:	9004      	str	r0, [sp, #16]
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fb48 	bl	8007b08 <_Bfree>
 8007478:	9b04      	ldr	r3, [sp, #16]
 800747a:	4699      	mov	r9, r3
 800747c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800747e:	1b1a      	subs	r2, r3, r4
 8007480:	d004      	beq.n	800748c <_dtoa_r+0x78c>
 8007482:	4649      	mov	r1, r9
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fcfd 	bl	8007e84 <__pow5mult>
 800748a:	4681      	mov	r9, r0
 800748c:	2101      	movs	r1, #1
 800748e:	4658      	mov	r0, fp
 8007490:	f000 fc38 	bl	8007d04 <__i2b>
 8007494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007496:	4604      	mov	r4, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 81cf 	beq.w	800783c <_dtoa_r+0xb3c>
 800749e:	461a      	mov	r2, r3
 80074a0:	4601      	mov	r1, r0
 80074a2:	4658      	mov	r0, fp
 80074a4:	f000 fcee 	bl	8007e84 <__pow5mult>
 80074a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	4604      	mov	r4, r0
 80074ae:	f300 8095 	bgt.w	80075dc <_dtoa_r+0x8dc>
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f040 8087 	bne.w	80075c8 <_dtoa_r+0x8c8>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8089 	bne.w	80075d8 <_dtoa_r+0x8d8>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074cc:	0d1b      	lsrs	r3, r3, #20
 80074ce:	051b      	lsls	r3, r3, #20
 80074d0:	b12b      	cbz	r3, 80074de <_dtoa_r+0x7de>
 80074d2:	9b08      	ldr	r3, [sp, #32]
 80074d4:	3301      	adds	r3, #1
 80074d6:	9308      	str	r3, [sp, #32]
 80074d8:	f108 0801 	add.w	r8, r8, #1
 80074dc:	2301      	movs	r3, #1
 80074de:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 81b0 	beq.w	8007848 <_dtoa_r+0xb48>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074ee:	6918      	ldr	r0, [r3, #16]
 80074f0:	f000 fbbc 	bl	8007c6c <__hi0bits>
 80074f4:	f1c0 0020 	rsb	r0, r0, #32
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	4418      	add	r0, r3
 80074fc:	f010 001f 	ands.w	r0, r0, #31
 8007500:	d077      	beq.n	80075f2 <_dtoa_r+0x8f2>
 8007502:	f1c0 0320 	rsb	r3, r0, #32
 8007506:	2b04      	cmp	r3, #4
 8007508:	dd6b      	ble.n	80075e2 <_dtoa_r+0x8e2>
 800750a:	9b08      	ldr	r3, [sp, #32]
 800750c:	f1c0 001c 	rsb	r0, r0, #28
 8007510:	4403      	add	r3, r0
 8007512:	4480      	add	r8, r0
 8007514:	4406      	add	r6, r0
 8007516:	9308      	str	r3, [sp, #32]
 8007518:	f1b8 0f00 	cmp.w	r8, #0
 800751c:	dd05      	ble.n	800752a <_dtoa_r+0x82a>
 800751e:	4649      	mov	r1, r9
 8007520:	4642      	mov	r2, r8
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fd08 	bl	8007f38 <__lshift>
 8007528:	4681      	mov	r9, r0
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	2b00      	cmp	r3, #0
 800752e:	dd05      	ble.n	800753c <_dtoa_r+0x83c>
 8007530:	4621      	mov	r1, r4
 8007532:	461a      	mov	r2, r3
 8007534:	4658      	mov	r0, fp
 8007536:	f000 fcff 	bl	8007f38 <__lshift>
 800753a:	4604      	mov	r4, r0
 800753c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800753e:	2b00      	cmp	r3, #0
 8007540:	d059      	beq.n	80075f6 <_dtoa_r+0x8f6>
 8007542:	4621      	mov	r1, r4
 8007544:	4648      	mov	r0, r9
 8007546:	f000 fd63 	bl	8008010 <__mcmp>
 800754a:	2800      	cmp	r0, #0
 800754c:	da53      	bge.n	80075f6 <_dtoa_r+0x8f6>
 800754e:	1e7b      	subs	r3, r7, #1
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	4649      	mov	r1, r9
 8007554:	2300      	movs	r3, #0
 8007556:	220a      	movs	r2, #10
 8007558:	4658      	mov	r0, fp
 800755a:	f000 faf7 	bl	8007b4c <__multadd>
 800755e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007560:	4681      	mov	r9, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8172 	beq.w	800784c <_dtoa_r+0xb4c>
 8007568:	2300      	movs	r3, #0
 800756a:	4629      	mov	r1, r5
 800756c:	220a      	movs	r2, #10
 800756e:	4658      	mov	r0, fp
 8007570:	f000 faec 	bl	8007b4c <__multadd>
 8007574:	9b00      	ldr	r3, [sp, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	4605      	mov	r5, r0
 800757a:	dc67      	bgt.n	800764c <_dtoa_r+0x94c>
 800757c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757e:	2b02      	cmp	r3, #2
 8007580:	dc41      	bgt.n	8007606 <_dtoa_r+0x906>
 8007582:	e063      	b.n	800764c <_dtoa_r+0x94c>
 8007584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800758a:	e746      	b.n	800741a <_dtoa_r+0x71a>
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	1e5c      	subs	r4, r3, #1
 8007590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007592:	42a3      	cmp	r3, r4
 8007594:	bfbf      	itttt	lt
 8007596:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007598:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800759a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800759c:	1ae3      	sublt	r3, r4, r3
 800759e:	bfb4      	ite	lt
 80075a0:	18d2      	addlt	r2, r2, r3
 80075a2:	1b1c      	subge	r4, r3, r4
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	bfbc      	itt	lt
 80075a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80075aa:	2400      	movlt	r4, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bfb5      	itete	lt
 80075b0:	eba8 0603 	sublt.w	r6, r8, r3
 80075b4:	9b07      	ldrge	r3, [sp, #28]
 80075b6:	2300      	movlt	r3, #0
 80075b8:	4646      	movge	r6, r8
 80075ba:	e730      	b.n	800741e <_dtoa_r+0x71e>
 80075bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075c0:	4646      	mov	r6, r8
 80075c2:	e735      	b.n	8007430 <_dtoa_r+0x730>
 80075c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075c6:	e75c      	b.n	8007482 <_dtoa_r+0x782>
 80075c8:	2300      	movs	r3, #0
 80075ca:	e788      	b.n	80074de <_dtoa_r+0x7de>
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	40240000 	.word	0x40240000
 80075d4:	40140000 	.word	0x40140000
 80075d8:	9b02      	ldr	r3, [sp, #8]
 80075da:	e780      	b.n	80074de <_dtoa_r+0x7de>
 80075dc:	2300      	movs	r3, #0
 80075de:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e0:	e782      	b.n	80074e8 <_dtoa_r+0x7e8>
 80075e2:	d099      	beq.n	8007518 <_dtoa_r+0x818>
 80075e4:	9a08      	ldr	r2, [sp, #32]
 80075e6:	331c      	adds	r3, #28
 80075e8:	441a      	add	r2, r3
 80075ea:	4498      	add	r8, r3
 80075ec:	441e      	add	r6, r3
 80075ee:	9208      	str	r2, [sp, #32]
 80075f0:	e792      	b.n	8007518 <_dtoa_r+0x818>
 80075f2:	4603      	mov	r3, r0
 80075f4:	e7f6      	b.n	80075e4 <_dtoa_r+0x8e4>
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	9704      	str	r7, [sp, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	dc20      	bgt.n	8007640 <_dtoa_r+0x940>
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007602:	2b02      	cmp	r3, #2
 8007604:	dd1e      	ble.n	8007644 <_dtoa_r+0x944>
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f47f aec0 	bne.w	800738e <_dtoa_r+0x68e>
 800760e:	4621      	mov	r1, r4
 8007610:	2205      	movs	r2, #5
 8007612:	4658      	mov	r0, fp
 8007614:	f000 fa9a 	bl	8007b4c <__multadd>
 8007618:	4601      	mov	r1, r0
 800761a:	4604      	mov	r4, r0
 800761c:	4648      	mov	r0, r9
 800761e:	f000 fcf7 	bl	8008010 <__mcmp>
 8007622:	2800      	cmp	r0, #0
 8007624:	f77f aeb3 	ble.w	800738e <_dtoa_r+0x68e>
 8007628:	4656      	mov	r6, sl
 800762a:	2331      	movs	r3, #49	@ 0x31
 800762c:	f806 3b01 	strb.w	r3, [r6], #1
 8007630:	9b04      	ldr	r3, [sp, #16]
 8007632:	3301      	adds	r3, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	e6ae      	b.n	8007396 <_dtoa_r+0x696>
 8007638:	9c07      	ldr	r4, [sp, #28]
 800763a:	9704      	str	r7, [sp, #16]
 800763c:	4625      	mov	r5, r4
 800763e:	e7f3      	b.n	8007628 <_dtoa_r+0x928>
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8104 	beq.w	8007854 <_dtoa_r+0xb54>
 800764c:	2e00      	cmp	r6, #0
 800764e:	dd05      	ble.n	800765c <_dtoa_r+0x95c>
 8007650:	4629      	mov	r1, r5
 8007652:	4632      	mov	r2, r6
 8007654:	4658      	mov	r0, fp
 8007656:	f000 fc6f 	bl	8007f38 <__lshift>
 800765a:	4605      	mov	r5, r0
 800765c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d05a      	beq.n	8007718 <_dtoa_r+0xa18>
 8007662:	6869      	ldr	r1, [r5, #4]
 8007664:	4658      	mov	r0, fp
 8007666:	f000 fa0f 	bl	8007a88 <_Balloc>
 800766a:	4606      	mov	r6, r0
 800766c:	b928      	cbnz	r0, 800767a <_dtoa_r+0x97a>
 800766e:	4b84      	ldr	r3, [pc, #528]	@ (8007880 <_dtoa_r+0xb80>)
 8007670:	4602      	mov	r2, r0
 8007672:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007676:	f7ff bb5a 	b.w	8006d2e <_dtoa_r+0x2e>
 800767a:	692a      	ldr	r2, [r5, #16]
 800767c:	3202      	adds	r2, #2
 800767e:	0092      	lsls	r2, r2, #2
 8007680:	f105 010c 	add.w	r1, r5, #12
 8007684:	300c      	adds	r0, #12
 8007686:	f001 fff9 	bl	800967c <memcpy>
 800768a:	2201      	movs	r2, #1
 800768c:	4631      	mov	r1, r6
 800768e:	4658      	mov	r0, fp
 8007690:	f000 fc52 	bl	8007f38 <__lshift>
 8007694:	f10a 0301 	add.w	r3, sl, #1
 8007698:	9307      	str	r3, [sp, #28]
 800769a:	9b00      	ldr	r3, [sp, #0]
 800769c:	4453      	add	r3, sl
 800769e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076a0:	9b02      	ldr	r3, [sp, #8]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	462f      	mov	r7, r5
 80076a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80076aa:	4605      	mov	r5, r0
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	4621      	mov	r1, r4
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4648      	mov	r0, r9
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	f7ff fa9b 	bl	8006bf0 <quorem>
 80076ba:	4639      	mov	r1, r7
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076c2:	4648      	mov	r0, r9
 80076c4:	f000 fca4 	bl	8008010 <__mcmp>
 80076c8:	462a      	mov	r2, r5
 80076ca:	9008      	str	r0, [sp, #32]
 80076cc:	4621      	mov	r1, r4
 80076ce:	4658      	mov	r0, fp
 80076d0:	f000 fcba 	bl	8008048 <__mdiff>
 80076d4:	68c2      	ldr	r2, [r0, #12]
 80076d6:	4606      	mov	r6, r0
 80076d8:	bb02      	cbnz	r2, 800771c <_dtoa_r+0xa1c>
 80076da:	4601      	mov	r1, r0
 80076dc:	4648      	mov	r0, r9
 80076de:	f000 fc97 	bl	8008010 <__mcmp>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4631      	mov	r1, r6
 80076e6:	4658      	mov	r0, fp
 80076e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80076ea:	f000 fa0d 	bl	8007b08 <_Bfree>
 80076ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076f2:	9e07      	ldr	r6, [sp, #28]
 80076f4:	ea43 0102 	orr.w	r1, r3, r2
 80076f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076fa:	4319      	orrs	r1, r3
 80076fc:	d110      	bne.n	8007720 <_dtoa_r+0xa20>
 80076fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007702:	d029      	beq.n	8007758 <_dtoa_r+0xa58>
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd02      	ble.n	8007710 <_dtoa_r+0xa10>
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007710:	9b00      	ldr	r3, [sp, #0]
 8007712:	f883 8000 	strb.w	r8, [r3]
 8007716:	e63f      	b.n	8007398 <_dtoa_r+0x698>
 8007718:	4628      	mov	r0, r5
 800771a:	e7bb      	b.n	8007694 <_dtoa_r+0x994>
 800771c:	2201      	movs	r2, #1
 800771e:	e7e1      	b.n	80076e4 <_dtoa_r+0x9e4>
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	2b00      	cmp	r3, #0
 8007724:	db04      	blt.n	8007730 <_dtoa_r+0xa30>
 8007726:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007728:	430b      	orrs	r3, r1
 800772a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800772c:	430b      	orrs	r3, r1
 800772e:	d120      	bne.n	8007772 <_dtoa_r+0xa72>
 8007730:	2a00      	cmp	r2, #0
 8007732:	dded      	ble.n	8007710 <_dtoa_r+0xa10>
 8007734:	4649      	mov	r1, r9
 8007736:	2201      	movs	r2, #1
 8007738:	4658      	mov	r0, fp
 800773a:	f000 fbfd 	bl	8007f38 <__lshift>
 800773e:	4621      	mov	r1, r4
 8007740:	4681      	mov	r9, r0
 8007742:	f000 fc65 	bl	8008010 <__mcmp>
 8007746:	2800      	cmp	r0, #0
 8007748:	dc03      	bgt.n	8007752 <_dtoa_r+0xa52>
 800774a:	d1e1      	bne.n	8007710 <_dtoa_r+0xa10>
 800774c:	f018 0f01 	tst.w	r8, #1
 8007750:	d0de      	beq.n	8007710 <_dtoa_r+0xa10>
 8007752:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007756:	d1d8      	bne.n	800770a <_dtoa_r+0xa0a>
 8007758:	9a00      	ldr	r2, [sp, #0]
 800775a:	2339      	movs	r3, #57	@ 0x39
 800775c:	7013      	strb	r3, [r2, #0]
 800775e:	4633      	mov	r3, r6
 8007760:	461e      	mov	r6, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007768:	2a39      	cmp	r2, #57	@ 0x39
 800776a:	d052      	beq.n	8007812 <_dtoa_r+0xb12>
 800776c:	3201      	adds	r2, #1
 800776e:	701a      	strb	r2, [r3, #0]
 8007770:	e612      	b.n	8007398 <_dtoa_r+0x698>
 8007772:	2a00      	cmp	r2, #0
 8007774:	dd07      	ble.n	8007786 <_dtoa_r+0xa86>
 8007776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800777a:	d0ed      	beq.n	8007758 <_dtoa_r+0xa58>
 800777c:	9a00      	ldr	r2, [sp, #0]
 800777e:	f108 0301 	add.w	r3, r8, #1
 8007782:	7013      	strb	r3, [r2, #0]
 8007784:	e608      	b.n	8007398 <_dtoa_r+0x698>
 8007786:	9b07      	ldr	r3, [sp, #28]
 8007788:	9a07      	ldr	r2, [sp, #28]
 800778a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800778e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007790:	4293      	cmp	r3, r2
 8007792:	d028      	beq.n	80077e6 <_dtoa_r+0xae6>
 8007794:	4649      	mov	r1, r9
 8007796:	2300      	movs	r3, #0
 8007798:	220a      	movs	r2, #10
 800779a:	4658      	mov	r0, fp
 800779c:	f000 f9d6 	bl	8007b4c <__multadd>
 80077a0:	42af      	cmp	r7, r5
 80077a2:	4681      	mov	r9, r0
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	f04f 020a 	mov.w	r2, #10
 80077ac:	4639      	mov	r1, r7
 80077ae:	4658      	mov	r0, fp
 80077b0:	d107      	bne.n	80077c2 <_dtoa_r+0xac2>
 80077b2:	f000 f9cb 	bl	8007b4c <__multadd>
 80077b6:	4607      	mov	r7, r0
 80077b8:	4605      	mov	r5, r0
 80077ba:	9b07      	ldr	r3, [sp, #28]
 80077bc:	3301      	adds	r3, #1
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	e774      	b.n	80076ac <_dtoa_r+0x9ac>
 80077c2:	f000 f9c3 	bl	8007b4c <__multadd>
 80077c6:	4629      	mov	r1, r5
 80077c8:	4607      	mov	r7, r0
 80077ca:	2300      	movs	r3, #0
 80077cc:	220a      	movs	r2, #10
 80077ce:	4658      	mov	r0, fp
 80077d0:	f000 f9bc 	bl	8007b4c <__multadd>
 80077d4:	4605      	mov	r5, r0
 80077d6:	e7f0      	b.n	80077ba <_dtoa_r+0xaba>
 80077d8:	9b00      	ldr	r3, [sp, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfcc      	ite	gt
 80077de:	461e      	movgt	r6, r3
 80077e0:	2601      	movle	r6, #1
 80077e2:	4456      	add	r6, sl
 80077e4:	2700      	movs	r7, #0
 80077e6:	4649      	mov	r1, r9
 80077e8:	2201      	movs	r2, #1
 80077ea:	4658      	mov	r0, fp
 80077ec:	f000 fba4 	bl	8007f38 <__lshift>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4681      	mov	r9, r0
 80077f4:	f000 fc0c 	bl	8008010 <__mcmp>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	dcb0      	bgt.n	800775e <_dtoa_r+0xa5e>
 80077fc:	d102      	bne.n	8007804 <_dtoa_r+0xb04>
 80077fe:	f018 0f01 	tst.w	r8, #1
 8007802:	d1ac      	bne.n	800775e <_dtoa_r+0xa5e>
 8007804:	4633      	mov	r3, r6
 8007806:	461e      	mov	r6, r3
 8007808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800780c:	2a30      	cmp	r2, #48	@ 0x30
 800780e:	d0fa      	beq.n	8007806 <_dtoa_r+0xb06>
 8007810:	e5c2      	b.n	8007398 <_dtoa_r+0x698>
 8007812:	459a      	cmp	sl, r3
 8007814:	d1a4      	bne.n	8007760 <_dtoa_r+0xa60>
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	3301      	adds	r3, #1
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	2331      	movs	r3, #49	@ 0x31
 800781e:	f88a 3000 	strb.w	r3, [sl]
 8007822:	e5b9      	b.n	8007398 <_dtoa_r+0x698>
 8007824:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007826:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007884 <_dtoa_r+0xb84>
 800782a:	b11b      	cbz	r3, 8007834 <_dtoa_r+0xb34>
 800782c:	f10a 0308 	add.w	r3, sl, #8
 8007830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4650      	mov	r0, sl
 8007836:	b019      	add	sp, #100	@ 0x64
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783e:	2b01      	cmp	r3, #1
 8007840:	f77f ae37 	ble.w	80074b2 <_dtoa_r+0x7b2>
 8007844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007846:	930a      	str	r3, [sp, #40]	@ 0x28
 8007848:	2001      	movs	r0, #1
 800784a:	e655      	b.n	80074f8 <_dtoa_r+0x7f8>
 800784c:	9b00      	ldr	r3, [sp, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f77f aed6 	ble.w	8007600 <_dtoa_r+0x900>
 8007854:	4656      	mov	r6, sl
 8007856:	4621      	mov	r1, r4
 8007858:	4648      	mov	r0, r9
 800785a:	f7ff f9c9 	bl	8006bf0 <quorem>
 800785e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007862:	f806 8b01 	strb.w	r8, [r6], #1
 8007866:	9b00      	ldr	r3, [sp, #0]
 8007868:	eba6 020a 	sub.w	r2, r6, sl
 800786c:	4293      	cmp	r3, r2
 800786e:	ddb3      	ble.n	80077d8 <_dtoa_r+0xad8>
 8007870:	4649      	mov	r1, r9
 8007872:	2300      	movs	r3, #0
 8007874:	220a      	movs	r2, #10
 8007876:	4658      	mov	r0, fp
 8007878:	f000 f968 	bl	8007b4c <__multadd>
 800787c:	4681      	mov	r9, r0
 800787e:	e7ea      	b.n	8007856 <_dtoa_r+0xb56>
 8007880:	0800a6dd 	.word	0x0800a6dd
 8007884:	0800a661 	.word	0x0800a661

08007888 <_free_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4605      	mov	r5, r0
 800788c:	2900      	cmp	r1, #0
 800788e:	d041      	beq.n	8007914 <_free_r+0x8c>
 8007890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007894:	1f0c      	subs	r4, r1, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfb8      	it	lt
 800789a:	18e4      	addlt	r4, r4, r3
 800789c:	f000 f8e8 	bl	8007a70 <__malloc_lock>
 80078a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007918 <_free_r+0x90>)
 80078a2:	6813      	ldr	r3, [r2, #0]
 80078a4:	b933      	cbnz	r3, 80078b4 <_free_r+0x2c>
 80078a6:	6063      	str	r3, [r4, #4]
 80078a8:	6014      	str	r4, [r2, #0]
 80078aa:	4628      	mov	r0, r5
 80078ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b0:	f000 b8e4 	b.w	8007a7c <__malloc_unlock>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d908      	bls.n	80078ca <_free_r+0x42>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	1821      	adds	r1, r4, r0
 80078bc:	428b      	cmp	r3, r1
 80078be:	bf01      	itttt	eq
 80078c0:	6819      	ldreq	r1, [r3, #0]
 80078c2:	685b      	ldreq	r3, [r3, #4]
 80078c4:	1809      	addeq	r1, r1, r0
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	e7ed      	b.n	80078a6 <_free_r+0x1e>
 80078ca:	461a      	mov	r2, r3
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b10b      	cbz	r3, 80078d4 <_free_r+0x4c>
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d9fa      	bls.n	80078ca <_free_r+0x42>
 80078d4:	6811      	ldr	r1, [r2, #0]
 80078d6:	1850      	adds	r0, r2, r1
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d10b      	bne.n	80078f4 <_free_r+0x6c>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	4401      	add	r1, r0
 80078e0:	1850      	adds	r0, r2, r1
 80078e2:	4283      	cmp	r3, r0
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	d1e0      	bne.n	80078aa <_free_r+0x22>
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	6053      	str	r3, [r2, #4]
 80078ee:	4408      	add	r0, r1
 80078f0:	6010      	str	r0, [r2, #0]
 80078f2:	e7da      	b.n	80078aa <_free_r+0x22>
 80078f4:	d902      	bls.n	80078fc <_free_r+0x74>
 80078f6:	230c      	movs	r3, #12
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	e7d6      	b.n	80078aa <_free_r+0x22>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	1821      	adds	r1, r4, r0
 8007900:	428b      	cmp	r3, r1
 8007902:	bf04      	itt	eq
 8007904:	6819      	ldreq	r1, [r3, #0]
 8007906:	685b      	ldreq	r3, [r3, #4]
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	bf04      	itt	eq
 800790c:	1809      	addeq	r1, r1, r0
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	6054      	str	r4, [r2, #4]
 8007912:	e7ca      	b.n	80078aa <_free_r+0x22>
 8007914:	bd38      	pop	{r3, r4, r5, pc}
 8007916:	bf00      	nop
 8007918:	2000068c 	.word	0x2000068c

0800791c <malloc>:
 800791c:	4b02      	ldr	r3, [pc, #8]	@ (8007928 <malloc+0xc>)
 800791e:	4601      	mov	r1, r0
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	f000 b825 	b.w	8007970 <_malloc_r>
 8007926:	bf00      	nop
 8007928:	20000024 	.word	0x20000024

0800792c <sbrk_aligned>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	4e0f      	ldr	r6, [pc, #60]	@ (800796c <sbrk_aligned+0x40>)
 8007930:	460c      	mov	r4, r1
 8007932:	6831      	ldr	r1, [r6, #0]
 8007934:	4605      	mov	r5, r0
 8007936:	b911      	cbnz	r1, 800793e <sbrk_aligned+0x12>
 8007938:	f001 fe90 	bl	800965c <_sbrk_r>
 800793c:	6030      	str	r0, [r6, #0]
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f001 fe8b 	bl	800965c <_sbrk_r>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	d103      	bne.n	8007952 <sbrk_aligned+0x26>
 800794a:	f04f 34ff 	mov.w	r4, #4294967295
 800794e:	4620      	mov	r0, r4
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	1cc4      	adds	r4, r0, #3
 8007954:	f024 0403 	bic.w	r4, r4, #3
 8007958:	42a0      	cmp	r0, r4
 800795a:	d0f8      	beq.n	800794e <sbrk_aligned+0x22>
 800795c:	1a21      	subs	r1, r4, r0
 800795e:	4628      	mov	r0, r5
 8007960:	f001 fe7c 	bl	800965c <_sbrk_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d1f2      	bne.n	800794e <sbrk_aligned+0x22>
 8007968:	e7ef      	b.n	800794a <sbrk_aligned+0x1e>
 800796a:	bf00      	nop
 800796c:	20000688 	.word	0x20000688

08007970 <_malloc_r>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	1ccd      	adds	r5, r1, #3
 8007976:	f025 0503 	bic.w	r5, r5, #3
 800797a:	3508      	adds	r5, #8
 800797c:	2d0c      	cmp	r5, #12
 800797e:	bf38      	it	cc
 8007980:	250c      	movcc	r5, #12
 8007982:	2d00      	cmp	r5, #0
 8007984:	4606      	mov	r6, r0
 8007986:	db01      	blt.n	800798c <_malloc_r+0x1c>
 8007988:	42a9      	cmp	r1, r5
 800798a:	d904      	bls.n	8007996 <_malloc_r+0x26>
 800798c:	230c      	movs	r3, #12
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a6c <_malloc_r+0xfc>
 800799a:	f000 f869 	bl	8007a70 <__malloc_lock>
 800799e:	f8d8 3000 	ldr.w	r3, [r8]
 80079a2:	461c      	mov	r4, r3
 80079a4:	bb44      	cbnz	r4, 80079f8 <_malloc_r+0x88>
 80079a6:	4629      	mov	r1, r5
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff ffbf 	bl	800792c <sbrk_aligned>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	4604      	mov	r4, r0
 80079b2:	d158      	bne.n	8007a66 <_malloc_r+0xf6>
 80079b4:	f8d8 4000 	ldr.w	r4, [r8]
 80079b8:	4627      	mov	r7, r4
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d143      	bne.n	8007a46 <_malloc_r+0xd6>
 80079be:	2c00      	cmp	r4, #0
 80079c0:	d04b      	beq.n	8007a5a <_malloc_r+0xea>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	4639      	mov	r1, r7
 80079c6:	4630      	mov	r0, r6
 80079c8:	eb04 0903 	add.w	r9, r4, r3
 80079cc:	f001 fe46 	bl	800965c <_sbrk_r>
 80079d0:	4581      	cmp	r9, r0
 80079d2:	d142      	bne.n	8007a5a <_malloc_r+0xea>
 80079d4:	6821      	ldr	r1, [r4, #0]
 80079d6:	1a6d      	subs	r5, r5, r1
 80079d8:	4629      	mov	r1, r5
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ffa6 	bl	800792c <sbrk_aligned>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d03a      	beq.n	8007a5a <_malloc_r+0xea>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	442b      	add	r3, r5
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	f8d8 3000 	ldr.w	r3, [r8]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	bb62      	cbnz	r2, 8007a4c <_malloc_r+0xdc>
 80079f2:	f8c8 7000 	str.w	r7, [r8]
 80079f6:	e00f      	b.n	8007a18 <_malloc_r+0xa8>
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	1b52      	subs	r2, r2, r5
 80079fc:	d420      	bmi.n	8007a40 <_malloc_r+0xd0>
 80079fe:	2a0b      	cmp	r2, #11
 8007a00:	d917      	bls.n	8007a32 <_malloc_r+0xc2>
 8007a02:	1961      	adds	r1, r4, r5
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	6025      	str	r5, [r4, #0]
 8007a08:	bf18      	it	ne
 8007a0a:	6059      	strne	r1, [r3, #4]
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	bf08      	it	eq
 8007a10:	f8c8 1000 	streq.w	r1, [r8]
 8007a14:	5162      	str	r2, [r4, r5]
 8007a16:	604b      	str	r3, [r1, #4]
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f000 f82f 	bl	8007a7c <__malloc_unlock>
 8007a1e:	f104 000b 	add.w	r0, r4, #11
 8007a22:	1d23      	adds	r3, r4, #4
 8007a24:	f020 0007 	bic.w	r0, r0, #7
 8007a28:	1ac2      	subs	r2, r0, r3
 8007a2a:	bf1c      	itt	ne
 8007a2c:	1a1b      	subne	r3, r3, r0
 8007a2e:	50a3      	strne	r3, [r4, r2]
 8007a30:	e7af      	b.n	8007992 <_malloc_r+0x22>
 8007a32:	6862      	ldr	r2, [r4, #4]
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	bf0c      	ite	eq
 8007a38:	f8c8 2000 	streq.w	r2, [r8]
 8007a3c:	605a      	strne	r2, [r3, #4]
 8007a3e:	e7eb      	b.n	8007a18 <_malloc_r+0xa8>
 8007a40:	4623      	mov	r3, r4
 8007a42:	6864      	ldr	r4, [r4, #4]
 8007a44:	e7ae      	b.n	80079a4 <_malloc_r+0x34>
 8007a46:	463c      	mov	r4, r7
 8007a48:	687f      	ldr	r7, [r7, #4]
 8007a4a:	e7b6      	b.n	80079ba <_malloc_r+0x4a>
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d1fb      	bne.n	8007a4c <_malloc_r+0xdc>
 8007a54:	2300      	movs	r3, #0
 8007a56:	6053      	str	r3, [r2, #4]
 8007a58:	e7de      	b.n	8007a18 <_malloc_r+0xa8>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f000 f80c 	bl	8007a7c <__malloc_unlock>
 8007a64:	e794      	b.n	8007990 <_malloc_r+0x20>
 8007a66:	6005      	str	r5, [r0, #0]
 8007a68:	e7d6      	b.n	8007a18 <_malloc_r+0xa8>
 8007a6a:	bf00      	nop
 8007a6c:	2000068c 	.word	0x2000068c

08007a70 <__malloc_lock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	@ (8007a78 <__malloc_lock+0x8>)
 8007a72:	f7ff b8b4 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	20000684 	.word	0x20000684

08007a7c <__malloc_unlock>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	@ (8007a84 <__malloc_unlock+0x8>)
 8007a7e:	f7ff b8af 	b.w	8006be0 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	20000684 	.word	0x20000684

08007a88 <_Balloc>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	69c6      	ldr	r6, [r0, #28]
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	b976      	cbnz	r6, 8007ab0 <_Balloc+0x28>
 8007a92:	2010      	movs	r0, #16
 8007a94:	f7ff ff42 	bl	800791c <malloc>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	61e0      	str	r0, [r4, #28]
 8007a9c:	b920      	cbnz	r0, 8007aa8 <_Balloc+0x20>
 8007a9e:	4b18      	ldr	r3, [pc, #96]	@ (8007b00 <_Balloc+0x78>)
 8007aa0:	4818      	ldr	r0, [pc, #96]	@ (8007b04 <_Balloc+0x7c>)
 8007aa2:	216b      	movs	r1, #107	@ 0x6b
 8007aa4:	f001 fe00 	bl	80096a8 <__assert_func>
 8007aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aac:	6006      	str	r6, [r0, #0]
 8007aae:	60c6      	str	r6, [r0, #12]
 8007ab0:	69e6      	ldr	r6, [r4, #28]
 8007ab2:	68f3      	ldr	r3, [r6, #12]
 8007ab4:	b183      	cbz	r3, 8007ad8 <_Balloc+0x50>
 8007ab6:	69e3      	ldr	r3, [r4, #28]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007abe:	b9b8      	cbnz	r0, 8007af0 <_Balloc+0x68>
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ac6:	1d72      	adds	r2, r6, #5
 8007ac8:	0092      	lsls	r2, r2, #2
 8007aca:	4620      	mov	r0, r4
 8007acc:	f001 fe0a 	bl	80096e4 <_calloc_r>
 8007ad0:	b160      	cbz	r0, 8007aec <_Balloc+0x64>
 8007ad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ad6:	e00e      	b.n	8007af6 <_Balloc+0x6e>
 8007ad8:	2221      	movs	r2, #33	@ 0x21
 8007ada:	2104      	movs	r1, #4
 8007adc:	4620      	mov	r0, r4
 8007ade:	f001 fe01 	bl	80096e4 <_calloc_r>
 8007ae2:	69e3      	ldr	r3, [r4, #28]
 8007ae4:	60f0      	str	r0, [r6, #12]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e4      	bne.n	8007ab6 <_Balloc+0x2e>
 8007aec:	2000      	movs	r0, #0
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	6802      	ldr	r2, [r0, #0]
 8007af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007af6:	2300      	movs	r3, #0
 8007af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007afc:	e7f7      	b.n	8007aee <_Balloc+0x66>
 8007afe:	bf00      	nop
 8007b00:	0800a66e 	.word	0x0800a66e
 8007b04:	0800a6ee 	.word	0x0800a6ee

08007b08 <_Bfree>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	69c6      	ldr	r6, [r0, #28]
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	b976      	cbnz	r6, 8007b30 <_Bfree+0x28>
 8007b12:	2010      	movs	r0, #16
 8007b14:	f7ff ff02 	bl	800791c <malloc>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	61e8      	str	r0, [r5, #28]
 8007b1c:	b920      	cbnz	r0, 8007b28 <_Bfree+0x20>
 8007b1e:	4b09      	ldr	r3, [pc, #36]	@ (8007b44 <_Bfree+0x3c>)
 8007b20:	4809      	ldr	r0, [pc, #36]	@ (8007b48 <_Bfree+0x40>)
 8007b22:	218f      	movs	r1, #143	@ 0x8f
 8007b24:	f001 fdc0 	bl	80096a8 <__assert_func>
 8007b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b2c:	6006      	str	r6, [r0, #0]
 8007b2e:	60c6      	str	r6, [r0, #12]
 8007b30:	b13c      	cbz	r4, 8007b42 <_Bfree+0x3a>
 8007b32:	69eb      	ldr	r3, [r5, #28]
 8007b34:	6862      	ldr	r2, [r4, #4]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b3c:	6021      	str	r1, [r4, #0]
 8007b3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	0800a66e 	.word	0x0800a66e
 8007b48:	0800a6ee 	.word	0x0800a6ee

08007b4c <__multadd>:
 8007b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b50:	690d      	ldr	r5, [r1, #16]
 8007b52:	4607      	mov	r7, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	461e      	mov	r6, r3
 8007b58:	f101 0c14 	add.w	ip, r1, #20
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b62:	b299      	uxth	r1, r3
 8007b64:	fb02 6101 	mla	r1, r2, r1, r6
 8007b68:	0c1e      	lsrs	r6, r3, #16
 8007b6a:	0c0b      	lsrs	r3, r1, #16
 8007b6c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b70:	b289      	uxth	r1, r1
 8007b72:	3001      	adds	r0, #1
 8007b74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b78:	4285      	cmp	r5, r0
 8007b7a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b82:	dcec      	bgt.n	8007b5e <__multadd+0x12>
 8007b84:	b30e      	cbz	r6, 8007bca <__multadd+0x7e>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dc19      	bgt.n	8007bc0 <__multadd+0x74>
 8007b8c:	6861      	ldr	r1, [r4, #4]
 8007b8e:	4638      	mov	r0, r7
 8007b90:	3101      	adds	r1, #1
 8007b92:	f7ff ff79 	bl	8007a88 <_Balloc>
 8007b96:	4680      	mov	r8, r0
 8007b98:	b928      	cbnz	r0, 8007ba6 <__multadd+0x5a>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <__multadd+0x84>)
 8007b9e:	480d      	ldr	r0, [pc, #52]	@ (8007bd4 <__multadd+0x88>)
 8007ba0:	21ba      	movs	r1, #186	@ 0xba
 8007ba2:	f001 fd81 	bl	80096a8 <__assert_func>
 8007ba6:	6922      	ldr	r2, [r4, #16]
 8007ba8:	3202      	adds	r2, #2
 8007baa:	f104 010c 	add.w	r1, r4, #12
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	300c      	adds	r0, #12
 8007bb2:	f001 fd63 	bl	800967c <memcpy>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff ffa5 	bl	8007b08 <_Bfree>
 8007bbe:	4644      	mov	r4, r8
 8007bc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	615e      	str	r6, [r3, #20]
 8007bc8:	6125      	str	r5, [r4, #16]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	0800a6dd 	.word	0x0800a6dd
 8007bd4:	0800a6ee 	.word	0x0800a6ee

08007bd8 <__s2b>:
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	4615      	mov	r5, r2
 8007be0:	461f      	mov	r7, r3
 8007be2:	2209      	movs	r2, #9
 8007be4:	3308      	adds	r3, #8
 8007be6:	4606      	mov	r6, r0
 8007be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bec:	2100      	movs	r1, #0
 8007bee:	2201      	movs	r2, #1
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	db09      	blt.n	8007c08 <__s2b+0x30>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff ff47 	bl	8007a88 <_Balloc>
 8007bfa:	b940      	cbnz	r0, 8007c0e <__s2b+0x36>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b19      	ldr	r3, [pc, #100]	@ (8007c64 <__s2b+0x8c>)
 8007c00:	4819      	ldr	r0, [pc, #100]	@ (8007c68 <__s2b+0x90>)
 8007c02:	21d3      	movs	r1, #211	@ 0xd3
 8007c04:	f001 fd50 	bl	80096a8 <__assert_func>
 8007c08:	0052      	lsls	r2, r2, #1
 8007c0a:	3101      	adds	r1, #1
 8007c0c:	e7f0      	b.n	8007bf0 <__s2b+0x18>
 8007c0e:	9b08      	ldr	r3, [sp, #32]
 8007c10:	6143      	str	r3, [r0, #20]
 8007c12:	2d09      	cmp	r5, #9
 8007c14:	f04f 0301 	mov.w	r3, #1
 8007c18:	6103      	str	r3, [r0, #16]
 8007c1a:	dd16      	ble.n	8007c4a <__s2b+0x72>
 8007c1c:	f104 0909 	add.w	r9, r4, #9
 8007c20:	46c8      	mov	r8, r9
 8007c22:	442c      	add	r4, r5
 8007c24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c28:	4601      	mov	r1, r0
 8007c2a:	3b30      	subs	r3, #48	@ 0x30
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ff8c 	bl	8007b4c <__multadd>
 8007c34:	45a0      	cmp	r8, r4
 8007c36:	d1f5      	bne.n	8007c24 <__s2b+0x4c>
 8007c38:	f1a5 0408 	sub.w	r4, r5, #8
 8007c3c:	444c      	add	r4, r9
 8007c3e:	1b2d      	subs	r5, r5, r4
 8007c40:	1963      	adds	r3, r4, r5
 8007c42:	42bb      	cmp	r3, r7
 8007c44:	db04      	blt.n	8007c50 <__s2b+0x78>
 8007c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4a:	340a      	adds	r4, #10
 8007c4c:	2509      	movs	r5, #9
 8007c4e:	e7f6      	b.n	8007c3e <__s2b+0x66>
 8007c50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c54:	4601      	mov	r1, r0
 8007c56:	3b30      	subs	r3, #48	@ 0x30
 8007c58:	220a      	movs	r2, #10
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff ff76 	bl	8007b4c <__multadd>
 8007c60:	e7ee      	b.n	8007c40 <__s2b+0x68>
 8007c62:	bf00      	nop
 8007c64:	0800a6dd 	.word	0x0800a6dd
 8007c68:	0800a6ee 	.word	0x0800a6ee

08007c6c <__hi0bits>:
 8007c6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c70:	4603      	mov	r3, r0
 8007c72:	bf36      	itet	cc
 8007c74:	0403      	lslcc	r3, r0, #16
 8007c76:	2000      	movcs	r0, #0
 8007c78:	2010      	movcc	r0, #16
 8007c7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c7e:	bf3c      	itt	cc
 8007c80:	021b      	lslcc	r3, r3, #8
 8007c82:	3008      	addcc	r0, #8
 8007c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c88:	bf3c      	itt	cc
 8007c8a:	011b      	lslcc	r3, r3, #4
 8007c8c:	3004      	addcc	r0, #4
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c92:	bf3c      	itt	cc
 8007c94:	009b      	lslcc	r3, r3, #2
 8007c96:	3002      	addcc	r0, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	db05      	blt.n	8007ca8 <__hi0bits+0x3c>
 8007c9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ca0:	f100 0001 	add.w	r0, r0, #1
 8007ca4:	bf08      	it	eq
 8007ca6:	2020      	moveq	r0, #32
 8007ca8:	4770      	bx	lr

08007caa <__lo0bits>:
 8007caa:	6803      	ldr	r3, [r0, #0]
 8007cac:	4602      	mov	r2, r0
 8007cae:	f013 0007 	ands.w	r0, r3, #7
 8007cb2:	d00b      	beq.n	8007ccc <__lo0bits+0x22>
 8007cb4:	07d9      	lsls	r1, r3, #31
 8007cb6:	d421      	bmi.n	8007cfc <__lo0bits+0x52>
 8007cb8:	0798      	lsls	r0, r3, #30
 8007cba:	bf49      	itett	mi
 8007cbc:	085b      	lsrmi	r3, r3, #1
 8007cbe:	089b      	lsrpl	r3, r3, #2
 8007cc0:	2001      	movmi	r0, #1
 8007cc2:	6013      	strmi	r3, [r2, #0]
 8007cc4:	bf5c      	itt	pl
 8007cc6:	6013      	strpl	r3, [r2, #0]
 8007cc8:	2002      	movpl	r0, #2
 8007cca:	4770      	bx	lr
 8007ccc:	b299      	uxth	r1, r3
 8007cce:	b909      	cbnz	r1, 8007cd4 <__lo0bits+0x2a>
 8007cd0:	0c1b      	lsrs	r3, r3, #16
 8007cd2:	2010      	movs	r0, #16
 8007cd4:	b2d9      	uxtb	r1, r3
 8007cd6:	b909      	cbnz	r1, 8007cdc <__lo0bits+0x32>
 8007cd8:	3008      	adds	r0, #8
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	0719      	lsls	r1, r3, #28
 8007cde:	bf04      	itt	eq
 8007ce0:	091b      	lsreq	r3, r3, #4
 8007ce2:	3004      	addeq	r0, #4
 8007ce4:	0799      	lsls	r1, r3, #30
 8007ce6:	bf04      	itt	eq
 8007ce8:	089b      	lsreq	r3, r3, #2
 8007cea:	3002      	addeq	r0, #2
 8007cec:	07d9      	lsls	r1, r3, #31
 8007cee:	d403      	bmi.n	8007cf8 <__lo0bits+0x4e>
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	f100 0001 	add.w	r0, r0, #1
 8007cf6:	d003      	beq.n	8007d00 <__lo0bits+0x56>
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4770      	bx	lr
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	4770      	bx	lr
 8007d00:	2020      	movs	r0, #32
 8007d02:	4770      	bx	lr

08007d04 <__i2b>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	460c      	mov	r4, r1
 8007d08:	2101      	movs	r1, #1
 8007d0a:	f7ff febd 	bl	8007a88 <_Balloc>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	b928      	cbnz	r0, 8007d1e <__i2b+0x1a>
 8007d12:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <__i2b+0x24>)
 8007d14:	4805      	ldr	r0, [pc, #20]	@ (8007d2c <__i2b+0x28>)
 8007d16:	f240 1145 	movw	r1, #325	@ 0x145
 8007d1a:	f001 fcc5 	bl	80096a8 <__assert_func>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	6144      	str	r4, [r0, #20]
 8007d22:	6103      	str	r3, [r0, #16]
 8007d24:	bd10      	pop	{r4, pc}
 8007d26:	bf00      	nop
 8007d28:	0800a6dd 	.word	0x0800a6dd
 8007d2c:	0800a6ee 	.word	0x0800a6ee

08007d30 <__multiply>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	4614      	mov	r4, r2
 8007d36:	690a      	ldr	r2, [r1, #16]
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bfa8      	it	ge
 8007d3e:	4623      	movge	r3, r4
 8007d40:	460f      	mov	r7, r1
 8007d42:	bfa4      	itt	ge
 8007d44:	460c      	movge	r4, r1
 8007d46:	461f      	movge	r7, r3
 8007d48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d50:	68a3      	ldr	r3, [r4, #8]
 8007d52:	6861      	ldr	r1, [r4, #4]
 8007d54:	eb0a 0609 	add.w	r6, sl, r9
 8007d58:	42b3      	cmp	r3, r6
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	bfb8      	it	lt
 8007d5e:	3101      	addlt	r1, #1
 8007d60:	f7ff fe92 	bl	8007a88 <_Balloc>
 8007d64:	b930      	cbnz	r0, 8007d74 <__multiply+0x44>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b44      	ldr	r3, [pc, #272]	@ (8007e7c <__multiply+0x14c>)
 8007d6a:	4845      	ldr	r0, [pc, #276]	@ (8007e80 <__multiply+0x150>)
 8007d6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d70:	f001 fc9a 	bl	80096a8 <__assert_func>
 8007d74:	f100 0514 	add.w	r5, r0, #20
 8007d78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	2200      	movs	r2, #0
 8007d80:	4543      	cmp	r3, r8
 8007d82:	d321      	bcc.n	8007dc8 <__multiply+0x98>
 8007d84:	f107 0114 	add.w	r1, r7, #20
 8007d88:	f104 0214 	add.w	r2, r4, #20
 8007d8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	1b13      	subs	r3, r2, r4
 8007d98:	3b15      	subs	r3, #21
 8007d9a:	f023 0303 	bic.w	r3, r3, #3
 8007d9e:	3304      	adds	r3, #4
 8007da0:	f104 0715 	add.w	r7, r4, #21
 8007da4:	42ba      	cmp	r2, r7
 8007da6:	bf38      	it	cc
 8007da8:	2304      	movcc	r3, #4
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	9b02      	ldr	r3, [sp, #8]
 8007dae:	9103      	str	r1, [sp, #12]
 8007db0:	428b      	cmp	r3, r1
 8007db2:	d80c      	bhi.n	8007dce <__multiply+0x9e>
 8007db4:	2e00      	cmp	r6, #0
 8007db6:	dd03      	ble.n	8007dc0 <__multiply+0x90>
 8007db8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d05b      	beq.n	8007e78 <__multiply+0x148>
 8007dc0:	6106      	str	r6, [r0, #16]
 8007dc2:	b005      	add	sp, #20
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	f843 2b04 	str.w	r2, [r3], #4
 8007dcc:	e7d8      	b.n	8007d80 <__multiply+0x50>
 8007dce:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dd2:	f1ba 0f00 	cmp.w	sl, #0
 8007dd6:	d024      	beq.n	8007e22 <__multiply+0xf2>
 8007dd8:	f104 0e14 	add.w	lr, r4, #20
 8007ddc:	46a9      	mov	r9, r5
 8007dde:	f04f 0c00 	mov.w	ip, #0
 8007de2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007de6:	f8d9 3000 	ldr.w	r3, [r9]
 8007dea:	fa1f fb87 	uxth.w	fp, r7
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007df4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007df8:	f8d9 7000 	ldr.w	r7, [r9]
 8007dfc:	4463      	add	r3, ip
 8007dfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e02:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e10:	4572      	cmp	r2, lr
 8007e12:	f849 3b04 	str.w	r3, [r9], #4
 8007e16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e1a:	d8e2      	bhi.n	8007de2 <__multiply+0xb2>
 8007e1c:	9b01      	ldr	r3, [sp, #4]
 8007e1e:	f845 c003 	str.w	ip, [r5, r3]
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e28:	3104      	adds	r1, #4
 8007e2a:	f1b9 0f00 	cmp.w	r9, #0
 8007e2e:	d021      	beq.n	8007e74 <__multiply+0x144>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	f104 0c14 	add.w	ip, r4, #20
 8007e36:	46ae      	mov	lr, r5
 8007e38:	f04f 0a00 	mov.w	sl, #0
 8007e3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e44:	fb09 770b 	mla	r7, r9, fp, r7
 8007e48:	4457      	add	r7, sl
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e50:	f84e 3b04 	str.w	r3, [lr], #4
 8007e54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e5c:	f8be 3000 	ldrh.w	r3, [lr]
 8007e60:	fb09 330a 	mla	r3, r9, sl, r3
 8007e64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e68:	4562      	cmp	r2, ip
 8007e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e6e:	d8e5      	bhi.n	8007e3c <__multiply+0x10c>
 8007e70:	9f01      	ldr	r7, [sp, #4]
 8007e72:	51eb      	str	r3, [r5, r7]
 8007e74:	3504      	adds	r5, #4
 8007e76:	e799      	b.n	8007dac <__multiply+0x7c>
 8007e78:	3e01      	subs	r6, #1
 8007e7a:	e79b      	b.n	8007db4 <__multiply+0x84>
 8007e7c:	0800a6dd 	.word	0x0800a6dd
 8007e80:	0800a6ee 	.word	0x0800a6ee

08007e84 <__pow5mult>:
 8007e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e88:	4615      	mov	r5, r2
 8007e8a:	f012 0203 	ands.w	r2, r2, #3
 8007e8e:	4607      	mov	r7, r0
 8007e90:	460e      	mov	r6, r1
 8007e92:	d007      	beq.n	8007ea4 <__pow5mult+0x20>
 8007e94:	4c25      	ldr	r4, [pc, #148]	@ (8007f2c <__pow5mult+0xa8>)
 8007e96:	3a01      	subs	r2, #1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9e:	f7ff fe55 	bl	8007b4c <__multadd>
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	10ad      	asrs	r5, r5, #2
 8007ea6:	d03d      	beq.n	8007f24 <__pow5mult+0xa0>
 8007ea8:	69fc      	ldr	r4, [r7, #28]
 8007eaa:	b97c      	cbnz	r4, 8007ecc <__pow5mult+0x48>
 8007eac:	2010      	movs	r0, #16
 8007eae:	f7ff fd35 	bl	800791c <malloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	61f8      	str	r0, [r7, #28]
 8007eb6:	b928      	cbnz	r0, 8007ec4 <__pow5mult+0x40>
 8007eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f30 <__pow5mult+0xac>)
 8007eba:	481e      	ldr	r0, [pc, #120]	@ (8007f34 <__pow5mult+0xb0>)
 8007ebc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ec0:	f001 fbf2 	bl	80096a8 <__assert_func>
 8007ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ec8:	6004      	str	r4, [r0, #0]
 8007eca:	60c4      	str	r4, [r0, #12]
 8007ecc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ed0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ed4:	b94c      	cbnz	r4, 8007eea <__pow5mult+0x66>
 8007ed6:	f240 2171 	movw	r1, #625	@ 0x271
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff ff12 	bl	8007d04 <__i2b>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	6003      	str	r3, [r0, #0]
 8007eea:	f04f 0900 	mov.w	r9, #0
 8007eee:	07eb      	lsls	r3, r5, #31
 8007ef0:	d50a      	bpl.n	8007f08 <__pow5mult+0x84>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f7ff ff1a 	bl	8007d30 <__multiply>
 8007efc:	4631      	mov	r1, r6
 8007efe:	4680      	mov	r8, r0
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7ff fe01 	bl	8007b08 <_Bfree>
 8007f06:	4646      	mov	r6, r8
 8007f08:	106d      	asrs	r5, r5, #1
 8007f0a:	d00b      	beq.n	8007f24 <__pow5mult+0xa0>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	b938      	cbnz	r0, 8007f20 <__pow5mult+0x9c>
 8007f10:	4622      	mov	r2, r4
 8007f12:	4621      	mov	r1, r4
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff ff0b 	bl	8007d30 <__multiply>
 8007f1a:	6020      	str	r0, [r4, #0]
 8007f1c:	f8c0 9000 	str.w	r9, [r0]
 8007f20:	4604      	mov	r4, r0
 8007f22:	e7e4      	b.n	8007eee <__pow5mult+0x6a>
 8007f24:	4630      	mov	r0, r6
 8007f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f2a:	bf00      	nop
 8007f2c:	0800a748 	.word	0x0800a748
 8007f30:	0800a66e 	.word	0x0800a66e
 8007f34:	0800a6ee 	.word	0x0800a6ee

08007f38 <__lshift>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	6849      	ldr	r1, [r1, #4]
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f46:	68a3      	ldr	r3, [r4, #8]
 8007f48:	4607      	mov	r7, r0
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f50:	f108 0601 	add.w	r6, r8, #1
 8007f54:	42b3      	cmp	r3, r6
 8007f56:	db0b      	blt.n	8007f70 <__lshift+0x38>
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f7ff fd95 	bl	8007a88 <_Balloc>
 8007f5e:	4605      	mov	r5, r0
 8007f60:	b948      	cbnz	r0, 8007f76 <__lshift+0x3e>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b28      	ldr	r3, [pc, #160]	@ (8008008 <__lshift+0xd0>)
 8007f66:	4829      	ldr	r0, [pc, #164]	@ (800800c <__lshift+0xd4>)
 8007f68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f6c:	f001 fb9c 	bl	80096a8 <__assert_func>
 8007f70:	3101      	adds	r1, #1
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	e7ee      	b.n	8007f54 <__lshift+0x1c>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f100 0114 	add.w	r1, r0, #20
 8007f7c:	f100 0210 	add.w	r2, r0, #16
 8007f80:	4618      	mov	r0, r3
 8007f82:	4553      	cmp	r3, sl
 8007f84:	db33      	blt.n	8007fee <__lshift+0xb6>
 8007f86:	6920      	ldr	r0, [r4, #16]
 8007f88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f8c:	f104 0314 	add.w	r3, r4, #20
 8007f90:	f019 091f 	ands.w	r9, r9, #31
 8007f94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f9c:	d02b      	beq.n	8007ff6 <__lshift+0xbe>
 8007f9e:	f1c9 0e20 	rsb	lr, r9, #32
 8007fa2:	468a      	mov	sl, r1
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	fa00 f009 	lsl.w	r0, r0, r9
 8007fac:	4310      	orrs	r0, r2
 8007fae:	f84a 0b04 	str.w	r0, [sl], #4
 8007fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb6:	459c      	cmp	ip, r3
 8007fb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fbc:	d8f3      	bhi.n	8007fa6 <__lshift+0x6e>
 8007fbe:	ebac 0304 	sub.w	r3, ip, r4
 8007fc2:	3b15      	subs	r3, #21
 8007fc4:	f023 0303 	bic.w	r3, r3, #3
 8007fc8:	3304      	adds	r3, #4
 8007fca:	f104 0015 	add.w	r0, r4, #21
 8007fce:	4584      	cmp	ip, r0
 8007fd0:	bf38      	it	cc
 8007fd2:	2304      	movcc	r3, #4
 8007fd4:	50ca      	str	r2, [r1, r3]
 8007fd6:	b10a      	cbz	r2, 8007fdc <__lshift+0xa4>
 8007fd8:	f108 0602 	add.w	r6, r8, #2
 8007fdc:	3e01      	subs	r6, #1
 8007fde:	4638      	mov	r0, r7
 8007fe0:	612e      	str	r6, [r5, #16]
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	f7ff fd90 	bl	8007b08 <_Bfree>
 8007fe8:	4628      	mov	r0, r5
 8007fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	e7c5      	b.n	8007f82 <__lshift+0x4a>
 8007ff6:	3904      	subs	r1, #4
 8007ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008000:	459c      	cmp	ip, r3
 8008002:	d8f9      	bhi.n	8007ff8 <__lshift+0xc0>
 8008004:	e7ea      	b.n	8007fdc <__lshift+0xa4>
 8008006:	bf00      	nop
 8008008:	0800a6dd 	.word	0x0800a6dd
 800800c:	0800a6ee 	.word	0x0800a6ee

08008010 <__mcmp>:
 8008010:	690a      	ldr	r2, [r1, #16]
 8008012:	4603      	mov	r3, r0
 8008014:	6900      	ldr	r0, [r0, #16]
 8008016:	1a80      	subs	r0, r0, r2
 8008018:	b530      	push	{r4, r5, lr}
 800801a:	d10e      	bne.n	800803a <__mcmp+0x2a>
 800801c:	3314      	adds	r3, #20
 800801e:	3114      	adds	r1, #20
 8008020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800802c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008030:	4295      	cmp	r5, r2
 8008032:	d003      	beq.n	800803c <__mcmp+0x2c>
 8008034:	d205      	bcs.n	8008042 <__mcmp+0x32>
 8008036:	f04f 30ff 	mov.w	r0, #4294967295
 800803a:	bd30      	pop	{r4, r5, pc}
 800803c:	42a3      	cmp	r3, r4
 800803e:	d3f3      	bcc.n	8008028 <__mcmp+0x18>
 8008040:	e7fb      	b.n	800803a <__mcmp+0x2a>
 8008042:	2001      	movs	r0, #1
 8008044:	e7f9      	b.n	800803a <__mcmp+0x2a>
	...

08008048 <__mdiff>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4689      	mov	r9, r1
 800804e:	4606      	mov	r6, r0
 8008050:	4611      	mov	r1, r2
 8008052:	4648      	mov	r0, r9
 8008054:	4614      	mov	r4, r2
 8008056:	f7ff ffdb 	bl	8008010 <__mcmp>
 800805a:	1e05      	subs	r5, r0, #0
 800805c:	d112      	bne.n	8008084 <__mdiff+0x3c>
 800805e:	4629      	mov	r1, r5
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff fd11 	bl	8007a88 <_Balloc>
 8008066:	4602      	mov	r2, r0
 8008068:	b928      	cbnz	r0, 8008076 <__mdiff+0x2e>
 800806a:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <__mdiff+0x120>)
 800806c:	f240 2137 	movw	r1, #567	@ 0x237
 8008070:	483e      	ldr	r0, [pc, #248]	@ (800816c <__mdiff+0x124>)
 8008072:	f001 fb19 	bl	80096a8 <__assert_func>
 8008076:	2301      	movs	r3, #1
 8008078:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800807c:	4610      	mov	r0, r2
 800807e:	b003      	add	sp, #12
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	bfbc      	itt	lt
 8008086:	464b      	movlt	r3, r9
 8008088:	46a1      	movlt	r9, r4
 800808a:	4630      	mov	r0, r6
 800808c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008090:	bfba      	itte	lt
 8008092:	461c      	movlt	r4, r3
 8008094:	2501      	movlt	r5, #1
 8008096:	2500      	movge	r5, #0
 8008098:	f7ff fcf6 	bl	8007a88 <_Balloc>
 800809c:	4602      	mov	r2, r0
 800809e:	b918      	cbnz	r0, 80080a8 <__mdiff+0x60>
 80080a0:	4b31      	ldr	r3, [pc, #196]	@ (8008168 <__mdiff+0x120>)
 80080a2:	f240 2145 	movw	r1, #581	@ 0x245
 80080a6:	e7e3      	b.n	8008070 <__mdiff+0x28>
 80080a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080ac:	6926      	ldr	r6, [r4, #16]
 80080ae:	60c5      	str	r5, [r0, #12]
 80080b0:	f109 0310 	add.w	r3, r9, #16
 80080b4:	f109 0514 	add.w	r5, r9, #20
 80080b8:	f104 0e14 	add.w	lr, r4, #20
 80080bc:	f100 0b14 	add.w	fp, r0, #20
 80080c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	46d9      	mov	r9, fp
 80080cc:	f04f 0c00 	mov.w	ip, #0
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	fa1f f38a 	uxth.w	r3, sl
 80080e0:	4619      	mov	r1, r3
 80080e2:	b283      	uxth	r3, r0
 80080e4:	1acb      	subs	r3, r1, r3
 80080e6:	0c00      	lsrs	r0, r0, #16
 80080e8:	4463      	add	r3, ip
 80080ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080f8:	4576      	cmp	r6, lr
 80080fa:	f849 3b04 	str.w	r3, [r9], #4
 80080fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008102:	d8e5      	bhi.n	80080d0 <__mdiff+0x88>
 8008104:	1b33      	subs	r3, r6, r4
 8008106:	3b15      	subs	r3, #21
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	3415      	adds	r4, #21
 800810e:	3304      	adds	r3, #4
 8008110:	42a6      	cmp	r6, r4
 8008112:	bf38      	it	cc
 8008114:	2304      	movcc	r3, #4
 8008116:	441d      	add	r5, r3
 8008118:	445b      	add	r3, fp
 800811a:	461e      	mov	r6, r3
 800811c:	462c      	mov	r4, r5
 800811e:	4544      	cmp	r4, r8
 8008120:	d30e      	bcc.n	8008140 <__mdiff+0xf8>
 8008122:	f108 0103 	add.w	r1, r8, #3
 8008126:	1b49      	subs	r1, r1, r5
 8008128:	f021 0103 	bic.w	r1, r1, #3
 800812c:	3d03      	subs	r5, #3
 800812e:	45a8      	cmp	r8, r5
 8008130:	bf38      	it	cc
 8008132:	2100      	movcc	r1, #0
 8008134:	440b      	add	r3, r1
 8008136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800813a:	b191      	cbz	r1, 8008162 <__mdiff+0x11a>
 800813c:	6117      	str	r7, [r2, #16]
 800813e:	e79d      	b.n	800807c <__mdiff+0x34>
 8008140:	f854 1b04 	ldr.w	r1, [r4], #4
 8008144:	46e6      	mov	lr, ip
 8008146:	0c08      	lsrs	r0, r1, #16
 8008148:	fa1c fc81 	uxtah	ip, ip, r1
 800814c:	4471      	add	r1, lr
 800814e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008152:	b289      	uxth	r1, r1
 8008154:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008158:	f846 1b04 	str.w	r1, [r6], #4
 800815c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008160:	e7dd      	b.n	800811e <__mdiff+0xd6>
 8008162:	3f01      	subs	r7, #1
 8008164:	e7e7      	b.n	8008136 <__mdiff+0xee>
 8008166:	bf00      	nop
 8008168:	0800a6dd 	.word	0x0800a6dd
 800816c:	0800a6ee 	.word	0x0800a6ee

08008170 <__ulp>:
 8008170:	b082      	sub	sp, #8
 8008172:	ed8d 0b00 	vstr	d0, [sp]
 8008176:	9a01      	ldr	r2, [sp, #4]
 8008178:	4b0f      	ldr	r3, [pc, #60]	@ (80081b8 <__ulp+0x48>)
 800817a:	4013      	ands	r3, r2
 800817c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008180:	2b00      	cmp	r3, #0
 8008182:	dc08      	bgt.n	8008196 <__ulp+0x26>
 8008184:	425b      	negs	r3, r3
 8008186:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800818a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800818e:	da04      	bge.n	800819a <__ulp+0x2a>
 8008190:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008194:	4113      	asrs	r3, r2
 8008196:	2200      	movs	r2, #0
 8008198:	e008      	b.n	80081ac <__ulp+0x3c>
 800819a:	f1a2 0314 	sub.w	r3, r2, #20
 800819e:	2b1e      	cmp	r3, #30
 80081a0:	bfda      	itte	le
 80081a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80081a6:	40da      	lsrle	r2, r3
 80081a8:	2201      	movgt	r2, #1
 80081aa:	2300      	movs	r3, #0
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	ec41 0b10 	vmov	d0, r0, r1
 80081b4:	b002      	add	sp, #8
 80081b6:	4770      	bx	lr
 80081b8:	7ff00000 	.word	0x7ff00000

080081bc <__b2d>:
 80081bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c0:	6906      	ldr	r6, [r0, #16]
 80081c2:	f100 0814 	add.w	r8, r0, #20
 80081c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80081ca:	1f37      	subs	r7, r6, #4
 80081cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7ff fd4b 	bl	8007c6c <__hi0bits>
 80081d6:	f1c0 0320 	rsb	r3, r0, #32
 80081da:	280a      	cmp	r0, #10
 80081dc:	600b      	str	r3, [r1, #0]
 80081de:	491b      	ldr	r1, [pc, #108]	@ (800824c <__b2d+0x90>)
 80081e0:	dc15      	bgt.n	800820e <__b2d+0x52>
 80081e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80081e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80081ea:	45b8      	cmp	r8, r7
 80081ec:	ea43 0501 	orr.w	r5, r3, r1
 80081f0:	bf34      	ite	cc
 80081f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80081f6:	2300      	movcs	r3, #0
 80081f8:	3015      	adds	r0, #21
 80081fa:	fa02 f000 	lsl.w	r0, r2, r0
 80081fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8008202:	4303      	orrs	r3, r0
 8008204:	461c      	mov	r4, r3
 8008206:	ec45 4b10 	vmov	d0, r4, r5
 800820a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820e:	45b8      	cmp	r8, r7
 8008210:	bf3a      	itte	cc
 8008212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008216:	f1a6 0708 	subcc.w	r7, r6, #8
 800821a:	2300      	movcs	r3, #0
 800821c:	380b      	subs	r0, #11
 800821e:	d012      	beq.n	8008246 <__b2d+0x8a>
 8008220:	f1c0 0120 	rsb	r1, r0, #32
 8008224:	fa23 f401 	lsr.w	r4, r3, r1
 8008228:	4082      	lsls	r2, r0
 800822a:	4322      	orrs	r2, r4
 800822c:	4547      	cmp	r7, r8
 800822e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008232:	bf8c      	ite	hi
 8008234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008238:	2200      	movls	r2, #0
 800823a:	4083      	lsls	r3, r0
 800823c:	40ca      	lsrs	r2, r1
 800823e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008242:	4313      	orrs	r3, r2
 8008244:	e7de      	b.n	8008204 <__b2d+0x48>
 8008246:	ea42 0501 	orr.w	r5, r2, r1
 800824a:	e7db      	b.n	8008204 <__b2d+0x48>
 800824c:	3ff00000 	.word	0x3ff00000

08008250 <__d2b>:
 8008250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008254:	460f      	mov	r7, r1
 8008256:	2101      	movs	r1, #1
 8008258:	ec59 8b10 	vmov	r8, r9, d0
 800825c:	4616      	mov	r6, r2
 800825e:	f7ff fc13 	bl	8007a88 <_Balloc>
 8008262:	4604      	mov	r4, r0
 8008264:	b930      	cbnz	r0, 8008274 <__d2b+0x24>
 8008266:	4602      	mov	r2, r0
 8008268:	4b23      	ldr	r3, [pc, #140]	@ (80082f8 <__d2b+0xa8>)
 800826a:	4824      	ldr	r0, [pc, #144]	@ (80082fc <__d2b+0xac>)
 800826c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008270:	f001 fa1a 	bl	80096a8 <__assert_func>
 8008274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827c:	b10d      	cbz	r5, 8008282 <__d2b+0x32>
 800827e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	f1b8 0300 	subs.w	r3, r8, #0
 8008288:	d023      	beq.n	80082d2 <__d2b+0x82>
 800828a:	4668      	mov	r0, sp
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	f7ff fd0c 	bl	8007caa <__lo0bits>
 8008292:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008296:	b1d0      	cbz	r0, 80082ce <__d2b+0x7e>
 8008298:	f1c0 0320 	rsb	r3, r0, #32
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	430b      	orrs	r3, r1
 80082a2:	40c2      	lsrs	r2, r0
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	9201      	str	r2, [sp, #4]
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	61a3      	str	r3, [r4, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf0c      	ite	eq
 80082b0:	2201      	moveq	r2, #1
 80082b2:	2202      	movne	r2, #2
 80082b4:	6122      	str	r2, [r4, #16]
 80082b6:	b1a5      	cbz	r5, 80082e2 <__d2b+0x92>
 80082b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082bc:	4405      	add	r5, r0
 80082be:	603d      	str	r5, [r7, #0]
 80082c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082c4:	6030      	str	r0, [r6, #0]
 80082c6:	4620      	mov	r0, r4
 80082c8:	b003      	add	sp, #12
 80082ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ce:	6161      	str	r1, [r4, #20]
 80082d0:	e7ea      	b.n	80082a8 <__d2b+0x58>
 80082d2:	a801      	add	r0, sp, #4
 80082d4:	f7ff fce9 	bl	8007caa <__lo0bits>
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	6163      	str	r3, [r4, #20]
 80082dc:	3020      	adds	r0, #32
 80082de:	2201      	movs	r2, #1
 80082e0:	e7e8      	b.n	80082b4 <__d2b+0x64>
 80082e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082ea:	6038      	str	r0, [r7, #0]
 80082ec:	6918      	ldr	r0, [r3, #16]
 80082ee:	f7ff fcbd 	bl	8007c6c <__hi0bits>
 80082f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082f6:	e7e5      	b.n	80082c4 <__d2b+0x74>
 80082f8:	0800a6dd 	.word	0x0800a6dd
 80082fc:	0800a6ee 	.word	0x0800a6ee

08008300 <__ratio>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	b085      	sub	sp, #20
 8008306:	e9cd 1000 	strd	r1, r0, [sp]
 800830a:	a902      	add	r1, sp, #8
 800830c:	f7ff ff56 	bl	80081bc <__b2d>
 8008310:	9800      	ldr	r0, [sp, #0]
 8008312:	a903      	add	r1, sp, #12
 8008314:	ec55 4b10 	vmov	r4, r5, d0
 8008318:	f7ff ff50 	bl	80081bc <__b2d>
 800831c:	9b01      	ldr	r3, [sp, #4]
 800831e:	6919      	ldr	r1, [r3, #16]
 8008320:	9b00      	ldr	r3, [sp, #0]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	1ac9      	subs	r1, r1, r3
 8008326:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	ec5b ab10 	vmov	sl, fp, d0
 8008330:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008334:	2b00      	cmp	r3, #0
 8008336:	bfce      	itee	gt
 8008338:	462a      	movgt	r2, r5
 800833a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800833e:	465a      	movle	r2, fp
 8008340:	462f      	mov	r7, r5
 8008342:	46d9      	mov	r9, fp
 8008344:	bfcc      	ite	gt
 8008346:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800834a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800834e:	464b      	mov	r3, r9
 8008350:	4652      	mov	r2, sl
 8008352:	4620      	mov	r0, r4
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fa99 	bl	800088c <__aeabi_ddiv>
 800835a:	ec41 0b10 	vmov	d0, r0, r1
 800835e:	b005      	add	sp, #20
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008364 <__copybits>:
 8008364:	3901      	subs	r1, #1
 8008366:	b570      	push	{r4, r5, r6, lr}
 8008368:	1149      	asrs	r1, r1, #5
 800836a:	6914      	ldr	r4, [r2, #16]
 800836c:	3101      	adds	r1, #1
 800836e:	f102 0314 	add.w	r3, r2, #20
 8008372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800837a:	1f05      	subs	r5, r0, #4
 800837c:	42a3      	cmp	r3, r4
 800837e:	d30c      	bcc.n	800839a <__copybits+0x36>
 8008380:	1aa3      	subs	r3, r4, r2
 8008382:	3b11      	subs	r3, #17
 8008384:	f023 0303 	bic.w	r3, r3, #3
 8008388:	3211      	adds	r2, #17
 800838a:	42a2      	cmp	r2, r4
 800838c:	bf88      	it	hi
 800838e:	2300      	movhi	r3, #0
 8008390:	4418      	add	r0, r3
 8008392:	2300      	movs	r3, #0
 8008394:	4288      	cmp	r0, r1
 8008396:	d305      	bcc.n	80083a4 <__copybits+0x40>
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	f853 6b04 	ldr.w	r6, [r3], #4
 800839e:	f845 6f04 	str.w	r6, [r5, #4]!
 80083a2:	e7eb      	b.n	800837c <__copybits+0x18>
 80083a4:	f840 3b04 	str.w	r3, [r0], #4
 80083a8:	e7f4      	b.n	8008394 <__copybits+0x30>

080083aa <__any_on>:
 80083aa:	f100 0214 	add.w	r2, r0, #20
 80083ae:	6900      	ldr	r0, [r0, #16]
 80083b0:	114b      	asrs	r3, r1, #5
 80083b2:	4298      	cmp	r0, r3
 80083b4:	b510      	push	{r4, lr}
 80083b6:	db11      	blt.n	80083dc <__any_on+0x32>
 80083b8:	dd0a      	ble.n	80083d0 <__any_on+0x26>
 80083ba:	f011 011f 	ands.w	r1, r1, #31
 80083be:	d007      	beq.n	80083d0 <__any_on+0x26>
 80083c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083c4:	fa24 f001 	lsr.w	r0, r4, r1
 80083c8:	fa00 f101 	lsl.w	r1, r0, r1
 80083cc:	428c      	cmp	r4, r1
 80083ce:	d10b      	bne.n	80083e8 <__any_on+0x3e>
 80083d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d803      	bhi.n	80083e0 <__any_on+0x36>
 80083d8:	2000      	movs	r0, #0
 80083da:	bd10      	pop	{r4, pc}
 80083dc:	4603      	mov	r3, r0
 80083de:	e7f7      	b.n	80083d0 <__any_on+0x26>
 80083e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d0f5      	beq.n	80083d4 <__any_on+0x2a>
 80083e8:	2001      	movs	r0, #1
 80083ea:	e7f6      	b.n	80083da <__any_on+0x30>

080083ec <sulp>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	ec45 4b10 	vmov	d0, r4, r5
 80083f6:	4616      	mov	r6, r2
 80083f8:	f7ff feba 	bl	8008170 <__ulp>
 80083fc:	ec51 0b10 	vmov	r0, r1, d0
 8008400:	b17e      	cbz	r6, 8008422 <sulp+0x36>
 8008402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008406:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800840a:	2b00      	cmp	r3, #0
 800840c:	dd09      	ble.n	8008422 <sulp+0x36>
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008414:	2400      	movs	r4, #0
 8008416:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800841a:	4622      	mov	r2, r4
 800841c:	462b      	mov	r3, r5
 800841e:	f7f8 f90b 	bl	8000638 <__aeabi_dmul>
 8008422:	ec41 0b10 	vmov	d0, r0, r1
 8008426:	bd70      	pop	{r4, r5, r6, pc}

08008428 <_strtod_l>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	b09f      	sub	sp, #124	@ 0x7c
 800842e:	460c      	mov	r4, r1
 8008430:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008432:	2200      	movs	r2, #0
 8008434:	921a      	str	r2, [sp, #104]	@ 0x68
 8008436:	9005      	str	r0, [sp, #20]
 8008438:	f04f 0a00 	mov.w	sl, #0
 800843c:	f04f 0b00 	mov.w	fp, #0
 8008440:	460a      	mov	r2, r1
 8008442:	9219      	str	r2, [sp, #100]	@ 0x64
 8008444:	7811      	ldrb	r1, [r2, #0]
 8008446:	292b      	cmp	r1, #43	@ 0x2b
 8008448:	d04a      	beq.n	80084e0 <_strtod_l+0xb8>
 800844a:	d838      	bhi.n	80084be <_strtod_l+0x96>
 800844c:	290d      	cmp	r1, #13
 800844e:	d832      	bhi.n	80084b6 <_strtod_l+0x8e>
 8008450:	2908      	cmp	r1, #8
 8008452:	d832      	bhi.n	80084ba <_strtod_l+0x92>
 8008454:	2900      	cmp	r1, #0
 8008456:	d03b      	beq.n	80084d0 <_strtod_l+0xa8>
 8008458:	2200      	movs	r2, #0
 800845a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800845c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800845e:	782a      	ldrb	r2, [r5, #0]
 8008460:	2a30      	cmp	r2, #48	@ 0x30
 8008462:	f040 80b3 	bne.w	80085cc <_strtod_l+0x1a4>
 8008466:	786a      	ldrb	r2, [r5, #1]
 8008468:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800846c:	2a58      	cmp	r2, #88	@ 0x58
 800846e:	d16e      	bne.n	800854e <_strtod_l+0x126>
 8008470:	9302      	str	r3, [sp, #8]
 8008472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	ab1a      	add	r3, sp, #104	@ 0x68
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	4a8e      	ldr	r2, [pc, #568]	@ (80086b4 <_strtod_l+0x28c>)
 800847c:	9805      	ldr	r0, [sp, #20]
 800847e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008480:	a919      	add	r1, sp, #100	@ 0x64
 8008482:	f001 f9ab 	bl	80097dc <__gethex>
 8008486:	f010 060f 	ands.w	r6, r0, #15
 800848a:	4604      	mov	r4, r0
 800848c:	d005      	beq.n	800849a <_strtod_l+0x72>
 800848e:	2e06      	cmp	r6, #6
 8008490:	d128      	bne.n	80084e4 <_strtod_l+0xbc>
 8008492:	3501      	adds	r5, #1
 8008494:	2300      	movs	r3, #0
 8008496:	9519      	str	r5, [sp, #100]	@ 0x64
 8008498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800849a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800849c:	2b00      	cmp	r3, #0
 800849e:	f040 858e 	bne.w	8008fbe <_strtod_l+0xb96>
 80084a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084a4:	b1cb      	cbz	r3, 80084da <_strtod_l+0xb2>
 80084a6:	4652      	mov	r2, sl
 80084a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80084ac:	ec43 2b10 	vmov	d0, r2, r3
 80084b0:	b01f      	add	sp, #124	@ 0x7c
 80084b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b6:	2920      	cmp	r1, #32
 80084b8:	d1ce      	bne.n	8008458 <_strtod_l+0x30>
 80084ba:	3201      	adds	r2, #1
 80084bc:	e7c1      	b.n	8008442 <_strtod_l+0x1a>
 80084be:	292d      	cmp	r1, #45	@ 0x2d
 80084c0:	d1ca      	bne.n	8008458 <_strtod_l+0x30>
 80084c2:	2101      	movs	r1, #1
 80084c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084c6:	1c51      	adds	r1, r2, #1
 80084c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80084ca:	7852      	ldrb	r2, [r2, #1]
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	d1c5      	bne.n	800845c <_strtod_l+0x34>
 80084d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f040 8570 	bne.w	8008fba <_strtod_l+0xb92>
 80084da:	4652      	mov	r2, sl
 80084dc:	465b      	mov	r3, fp
 80084de:	e7e5      	b.n	80084ac <_strtod_l+0x84>
 80084e0:	2100      	movs	r1, #0
 80084e2:	e7ef      	b.n	80084c4 <_strtod_l+0x9c>
 80084e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084e6:	b13a      	cbz	r2, 80084f8 <_strtod_l+0xd0>
 80084e8:	2135      	movs	r1, #53	@ 0x35
 80084ea:	a81c      	add	r0, sp, #112	@ 0x70
 80084ec:	f7ff ff3a 	bl	8008364 <__copybits>
 80084f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084f2:	9805      	ldr	r0, [sp, #20]
 80084f4:	f7ff fb08 	bl	8007b08 <_Bfree>
 80084f8:	3e01      	subs	r6, #1
 80084fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084fc:	2e04      	cmp	r6, #4
 80084fe:	d806      	bhi.n	800850e <_strtod_l+0xe6>
 8008500:	e8df f006 	tbb	[pc, r6]
 8008504:	201d0314 	.word	0x201d0314
 8008508:	14          	.byte	0x14
 8008509:	00          	.byte	0x00
 800850a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800850e:	05e1      	lsls	r1, r4, #23
 8008510:	bf48      	it	mi
 8008512:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800851a:	0d1b      	lsrs	r3, r3, #20
 800851c:	051b      	lsls	r3, r3, #20
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1bb      	bne.n	800849a <_strtod_l+0x72>
 8008522:	f7fe fb31 	bl	8006b88 <__errno>
 8008526:	2322      	movs	r3, #34	@ 0x22
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	e7b6      	b.n	800849a <_strtod_l+0x72>
 800852c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008538:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800853c:	e7e7      	b.n	800850e <_strtod_l+0xe6>
 800853e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80086bc <_strtod_l+0x294>
 8008542:	e7e4      	b.n	800850e <_strtod_l+0xe6>
 8008544:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008548:	f04f 3aff 	mov.w	sl, #4294967295
 800854c:	e7df      	b.n	800850e <_strtod_l+0xe6>
 800854e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	9219      	str	r2, [sp, #100]	@ 0x64
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b30      	cmp	r3, #48	@ 0x30
 8008558:	d0f9      	beq.n	800854e <_strtod_l+0x126>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d09d      	beq.n	800849a <_strtod_l+0x72>
 800855e:	2301      	movs	r3, #1
 8008560:	9309      	str	r3, [sp, #36]	@ 0x24
 8008562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008564:	930c      	str	r3, [sp, #48]	@ 0x30
 8008566:	2300      	movs	r3, #0
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	930a      	str	r3, [sp, #40]	@ 0x28
 800856c:	461f      	mov	r7, r3
 800856e:	220a      	movs	r2, #10
 8008570:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008572:	7805      	ldrb	r5, [r0, #0]
 8008574:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008578:	b2d9      	uxtb	r1, r3
 800857a:	2909      	cmp	r1, #9
 800857c:	d928      	bls.n	80085d0 <_strtod_l+0x1a8>
 800857e:	494e      	ldr	r1, [pc, #312]	@ (80086b8 <_strtod_l+0x290>)
 8008580:	2201      	movs	r2, #1
 8008582:	f001 f837 	bl	80095f4 <strncmp>
 8008586:	2800      	cmp	r0, #0
 8008588:	d032      	beq.n	80085f0 <_strtod_l+0x1c8>
 800858a:	2000      	movs	r0, #0
 800858c:	462a      	mov	r2, r5
 800858e:	4681      	mov	r9, r0
 8008590:	463d      	mov	r5, r7
 8008592:	4603      	mov	r3, r0
 8008594:	2a65      	cmp	r2, #101	@ 0x65
 8008596:	d001      	beq.n	800859c <_strtod_l+0x174>
 8008598:	2a45      	cmp	r2, #69	@ 0x45
 800859a:	d114      	bne.n	80085c6 <_strtod_l+0x19e>
 800859c:	b91d      	cbnz	r5, 80085a6 <_strtod_l+0x17e>
 800859e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a0:	4302      	orrs	r2, r0
 80085a2:	d095      	beq.n	80084d0 <_strtod_l+0xa8>
 80085a4:	2500      	movs	r5, #0
 80085a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80085a8:	1c62      	adds	r2, r4, #1
 80085aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ac:	7862      	ldrb	r2, [r4, #1]
 80085ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80085b0:	d077      	beq.n	80086a2 <_strtod_l+0x27a>
 80085b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80085b4:	d07b      	beq.n	80086ae <_strtod_l+0x286>
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80085be:	2909      	cmp	r1, #9
 80085c0:	f240 8082 	bls.w	80086c8 <_strtod_l+0x2a0>
 80085c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80085c6:	f04f 0800 	mov.w	r8, #0
 80085ca:	e0a2      	b.n	8008712 <_strtod_l+0x2ea>
 80085cc:	2300      	movs	r3, #0
 80085ce:	e7c7      	b.n	8008560 <_strtod_l+0x138>
 80085d0:	2f08      	cmp	r7, #8
 80085d2:	bfd5      	itete	le
 80085d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80085d6:	9908      	ldrgt	r1, [sp, #32]
 80085d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80085dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085e0:	f100 0001 	add.w	r0, r0, #1
 80085e4:	bfd4      	ite	le
 80085e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80085e8:	9308      	strgt	r3, [sp, #32]
 80085ea:	3701      	adds	r7, #1
 80085ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80085ee:	e7bf      	b.n	8008570 <_strtod_l+0x148>
 80085f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085f2:	1c5a      	adds	r2, r3, #1
 80085f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80085f6:	785a      	ldrb	r2, [r3, #1]
 80085f8:	b37f      	cbz	r7, 800865a <_strtod_l+0x232>
 80085fa:	4681      	mov	r9, r0
 80085fc:	463d      	mov	r5, r7
 80085fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008602:	2b09      	cmp	r3, #9
 8008604:	d912      	bls.n	800862c <_strtod_l+0x204>
 8008606:	2301      	movs	r3, #1
 8008608:	e7c4      	b.n	8008594 <_strtod_l+0x16c>
 800860a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008610:	785a      	ldrb	r2, [r3, #1]
 8008612:	3001      	adds	r0, #1
 8008614:	2a30      	cmp	r2, #48	@ 0x30
 8008616:	d0f8      	beq.n	800860a <_strtod_l+0x1e2>
 8008618:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800861c:	2b08      	cmp	r3, #8
 800861e:	f200 84d3 	bhi.w	8008fc8 <_strtod_l+0xba0>
 8008622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008624:	930c      	str	r3, [sp, #48]	@ 0x30
 8008626:	4681      	mov	r9, r0
 8008628:	2000      	movs	r0, #0
 800862a:	4605      	mov	r5, r0
 800862c:	3a30      	subs	r2, #48	@ 0x30
 800862e:	f100 0301 	add.w	r3, r0, #1
 8008632:	d02a      	beq.n	800868a <_strtod_l+0x262>
 8008634:	4499      	add	r9, r3
 8008636:	eb00 0c05 	add.w	ip, r0, r5
 800863a:	462b      	mov	r3, r5
 800863c:	210a      	movs	r1, #10
 800863e:	4563      	cmp	r3, ip
 8008640:	d10d      	bne.n	800865e <_strtod_l+0x236>
 8008642:	1c69      	adds	r1, r5, #1
 8008644:	4401      	add	r1, r0
 8008646:	4428      	add	r0, r5
 8008648:	2808      	cmp	r0, #8
 800864a:	dc16      	bgt.n	800867a <_strtod_l+0x252>
 800864c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800864e:	230a      	movs	r3, #10
 8008650:	fb03 2300 	mla	r3, r3, r0, r2
 8008654:	930a      	str	r3, [sp, #40]	@ 0x28
 8008656:	2300      	movs	r3, #0
 8008658:	e018      	b.n	800868c <_strtod_l+0x264>
 800865a:	4638      	mov	r0, r7
 800865c:	e7da      	b.n	8008614 <_strtod_l+0x1ec>
 800865e:	2b08      	cmp	r3, #8
 8008660:	f103 0301 	add.w	r3, r3, #1
 8008664:	dc03      	bgt.n	800866e <_strtod_l+0x246>
 8008666:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008668:	434e      	muls	r6, r1
 800866a:	960a      	str	r6, [sp, #40]	@ 0x28
 800866c:	e7e7      	b.n	800863e <_strtod_l+0x216>
 800866e:	2b10      	cmp	r3, #16
 8008670:	bfde      	ittt	le
 8008672:	9e08      	ldrle	r6, [sp, #32]
 8008674:	434e      	mulle	r6, r1
 8008676:	9608      	strle	r6, [sp, #32]
 8008678:	e7e1      	b.n	800863e <_strtod_l+0x216>
 800867a:	280f      	cmp	r0, #15
 800867c:	dceb      	bgt.n	8008656 <_strtod_l+0x22e>
 800867e:	9808      	ldr	r0, [sp, #32]
 8008680:	230a      	movs	r3, #10
 8008682:	fb03 2300 	mla	r3, r3, r0, r2
 8008686:	9308      	str	r3, [sp, #32]
 8008688:	e7e5      	b.n	8008656 <_strtod_l+0x22e>
 800868a:	4629      	mov	r1, r5
 800868c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800868e:	1c50      	adds	r0, r2, #1
 8008690:	9019      	str	r0, [sp, #100]	@ 0x64
 8008692:	7852      	ldrb	r2, [r2, #1]
 8008694:	4618      	mov	r0, r3
 8008696:	460d      	mov	r5, r1
 8008698:	e7b1      	b.n	80085fe <_strtod_l+0x1d6>
 800869a:	f04f 0900 	mov.w	r9, #0
 800869e:	2301      	movs	r3, #1
 80086a0:	e77d      	b.n	800859e <_strtod_l+0x176>
 80086a2:	f04f 0c00 	mov.w	ip, #0
 80086a6:	1ca2      	adds	r2, r4, #2
 80086a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80086aa:	78a2      	ldrb	r2, [r4, #2]
 80086ac:	e785      	b.n	80085ba <_strtod_l+0x192>
 80086ae:	f04f 0c01 	mov.w	ip, #1
 80086b2:	e7f8      	b.n	80086a6 <_strtod_l+0x27e>
 80086b4:	0800a860 	.word	0x0800a860
 80086b8:	0800a848 	.word	0x0800a848
 80086bc:	7ff00000 	.word	0x7ff00000
 80086c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086c2:	1c51      	adds	r1, r2, #1
 80086c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80086c6:	7852      	ldrb	r2, [r2, #1]
 80086c8:	2a30      	cmp	r2, #48	@ 0x30
 80086ca:	d0f9      	beq.n	80086c0 <_strtod_l+0x298>
 80086cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086d0:	2908      	cmp	r1, #8
 80086d2:	f63f af78 	bhi.w	80085c6 <_strtod_l+0x19e>
 80086d6:	3a30      	subs	r2, #48	@ 0x30
 80086d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086de:	f04f 080a 	mov.w	r8, #10
 80086e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086e4:	1c56      	adds	r6, r2, #1
 80086e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80086e8:	7852      	ldrb	r2, [r2, #1]
 80086ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086ee:	f1be 0f09 	cmp.w	lr, #9
 80086f2:	d939      	bls.n	8008768 <_strtod_l+0x340>
 80086f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086f6:	1a76      	subs	r6, r6, r1
 80086f8:	2e08      	cmp	r6, #8
 80086fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80086fe:	dc03      	bgt.n	8008708 <_strtod_l+0x2e0>
 8008700:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008702:	4588      	cmp	r8, r1
 8008704:	bfa8      	it	ge
 8008706:	4688      	movge	r8, r1
 8008708:	f1bc 0f00 	cmp.w	ip, #0
 800870c:	d001      	beq.n	8008712 <_strtod_l+0x2ea>
 800870e:	f1c8 0800 	rsb	r8, r8, #0
 8008712:	2d00      	cmp	r5, #0
 8008714:	d14e      	bne.n	80087b4 <_strtod_l+0x38c>
 8008716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008718:	4308      	orrs	r0, r1
 800871a:	f47f aebe 	bne.w	800849a <_strtod_l+0x72>
 800871e:	2b00      	cmp	r3, #0
 8008720:	f47f aed6 	bne.w	80084d0 <_strtod_l+0xa8>
 8008724:	2a69      	cmp	r2, #105	@ 0x69
 8008726:	d028      	beq.n	800877a <_strtod_l+0x352>
 8008728:	dc25      	bgt.n	8008776 <_strtod_l+0x34e>
 800872a:	2a49      	cmp	r2, #73	@ 0x49
 800872c:	d025      	beq.n	800877a <_strtod_l+0x352>
 800872e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008730:	f47f aece 	bne.w	80084d0 <_strtod_l+0xa8>
 8008734:	499b      	ldr	r1, [pc, #620]	@ (80089a4 <_strtod_l+0x57c>)
 8008736:	a819      	add	r0, sp, #100	@ 0x64
 8008738:	f001 fa72 	bl	8009c20 <__match>
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f aec7 	beq.w	80084d0 <_strtod_l+0xa8>
 8008742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b28      	cmp	r3, #40	@ 0x28
 8008748:	d12e      	bne.n	80087a8 <_strtod_l+0x380>
 800874a:	4997      	ldr	r1, [pc, #604]	@ (80089a8 <_strtod_l+0x580>)
 800874c:	aa1c      	add	r2, sp, #112	@ 0x70
 800874e:	a819      	add	r0, sp, #100	@ 0x64
 8008750:	f001 fa7a 	bl	8009c48 <__hexnan>
 8008754:	2805      	cmp	r0, #5
 8008756:	d127      	bne.n	80087a8 <_strtod_l+0x380>
 8008758:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800875a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800875e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008762:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008766:	e698      	b.n	800849a <_strtod_l+0x72>
 8008768:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800876a:	fb08 2101 	mla	r1, r8, r1, r2
 800876e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008772:	920e      	str	r2, [sp, #56]	@ 0x38
 8008774:	e7b5      	b.n	80086e2 <_strtod_l+0x2ba>
 8008776:	2a6e      	cmp	r2, #110	@ 0x6e
 8008778:	e7da      	b.n	8008730 <_strtod_l+0x308>
 800877a:	498c      	ldr	r1, [pc, #560]	@ (80089ac <_strtod_l+0x584>)
 800877c:	a819      	add	r0, sp, #100	@ 0x64
 800877e:	f001 fa4f 	bl	8009c20 <__match>
 8008782:	2800      	cmp	r0, #0
 8008784:	f43f aea4 	beq.w	80084d0 <_strtod_l+0xa8>
 8008788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800878a:	4989      	ldr	r1, [pc, #548]	@ (80089b0 <_strtod_l+0x588>)
 800878c:	3b01      	subs	r3, #1
 800878e:	a819      	add	r0, sp, #100	@ 0x64
 8008790:	9319      	str	r3, [sp, #100]	@ 0x64
 8008792:	f001 fa45 	bl	8009c20 <__match>
 8008796:	b910      	cbnz	r0, 800879e <_strtod_l+0x376>
 8008798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800879a:	3301      	adds	r3, #1
 800879c:	9319      	str	r3, [sp, #100]	@ 0x64
 800879e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80089c0 <_strtod_l+0x598>
 80087a2:	f04f 0a00 	mov.w	sl, #0
 80087a6:	e678      	b.n	800849a <_strtod_l+0x72>
 80087a8:	4882      	ldr	r0, [pc, #520]	@ (80089b4 <_strtod_l+0x58c>)
 80087aa:	f000 ff75 	bl	8009698 <nan>
 80087ae:	ec5b ab10 	vmov	sl, fp, d0
 80087b2:	e672      	b.n	800849a <_strtod_l+0x72>
 80087b4:	eba8 0309 	sub.w	r3, r8, r9
 80087b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80087bc:	2f00      	cmp	r7, #0
 80087be:	bf08      	it	eq
 80087c0:	462f      	moveq	r7, r5
 80087c2:	2d10      	cmp	r5, #16
 80087c4:	462c      	mov	r4, r5
 80087c6:	bfa8      	it	ge
 80087c8:	2410      	movge	r4, #16
 80087ca:	f7f7 febb 	bl	8000544 <__aeabi_ui2d>
 80087ce:	2d09      	cmp	r5, #9
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	dc13      	bgt.n	80087fe <_strtod_l+0x3d6>
 80087d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f43f ae5e 	beq.w	800849a <_strtod_l+0x72>
 80087de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e0:	dd78      	ble.n	80088d4 <_strtod_l+0x4ac>
 80087e2:	2b16      	cmp	r3, #22
 80087e4:	dc5f      	bgt.n	80088a6 <_strtod_l+0x47e>
 80087e6:	4974      	ldr	r1, [pc, #464]	@ (80089b8 <_strtod_l+0x590>)
 80087e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f0:	4652      	mov	r2, sl
 80087f2:	465b      	mov	r3, fp
 80087f4:	f7f7 ff20 	bl	8000638 <__aeabi_dmul>
 80087f8:	4682      	mov	sl, r0
 80087fa:	468b      	mov	fp, r1
 80087fc:	e64d      	b.n	800849a <_strtod_l+0x72>
 80087fe:	4b6e      	ldr	r3, [pc, #440]	@ (80089b8 <_strtod_l+0x590>)
 8008800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008804:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008808:	f7f7 ff16 	bl	8000638 <__aeabi_dmul>
 800880c:	4682      	mov	sl, r0
 800880e:	9808      	ldr	r0, [sp, #32]
 8008810:	468b      	mov	fp, r1
 8008812:	f7f7 fe97 	bl	8000544 <__aeabi_ui2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4650      	mov	r0, sl
 800881c:	4659      	mov	r1, fp
 800881e:	f7f7 fd55 	bl	80002cc <__adddf3>
 8008822:	2d0f      	cmp	r5, #15
 8008824:	4682      	mov	sl, r0
 8008826:	468b      	mov	fp, r1
 8008828:	ddd5      	ble.n	80087d6 <_strtod_l+0x3ae>
 800882a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882c:	1b2c      	subs	r4, r5, r4
 800882e:	441c      	add	r4, r3
 8008830:	2c00      	cmp	r4, #0
 8008832:	f340 8096 	ble.w	8008962 <_strtod_l+0x53a>
 8008836:	f014 030f 	ands.w	r3, r4, #15
 800883a:	d00a      	beq.n	8008852 <_strtod_l+0x42a>
 800883c:	495e      	ldr	r1, [pc, #376]	@ (80089b8 <_strtod_l+0x590>)
 800883e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008842:	4652      	mov	r2, sl
 8008844:	465b      	mov	r3, fp
 8008846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884a:	f7f7 fef5 	bl	8000638 <__aeabi_dmul>
 800884e:	4682      	mov	sl, r0
 8008850:	468b      	mov	fp, r1
 8008852:	f034 040f 	bics.w	r4, r4, #15
 8008856:	d073      	beq.n	8008940 <_strtod_l+0x518>
 8008858:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800885c:	dd48      	ble.n	80088f0 <_strtod_l+0x4c8>
 800885e:	2400      	movs	r4, #0
 8008860:	46a0      	mov	r8, r4
 8008862:	940a      	str	r4, [sp, #40]	@ 0x28
 8008864:	46a1      	mov	r9, r4
 8008866:	9a05      	ldr	r2, [sp, #20]
 8008868:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80089c0 <_strtod_l+0x598>
 800886c:	2322      	movs	r3, #34	@ 0x22
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008876:	2b00      	cmp	r3, #0
 8008878:	f43f ae0f 	beq.w	800849a <_strtod_l+0x72>
 800887c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800887e:	9805      	ldr	r0, [sp, #20]
 8008880:	f7ff f942 	bl	8007b08 <_Bfree>
 8008884:	9805      	ldr	r0, [sp, #20]
 8008886:	4649      	mov	r1, r9
 8008888:	f7ff f93e 	bl	8007b08 <_Bfree>
 800888c:	9805      	ldr	r0, [sp, #20]
 800888e:	4641      	mov	r1, r8
 8008890:	f7ff f93a 	bl	8007b08 <_Bfree>
 8008894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008896:	9805      	ldr	r0, [sp, #20]
 8008898:	f7ff f936 	bl	8007b08 <_Bfree>
 800889c:	9805      	ldr	r0, [sp, #20]
 800889e:	4621      	mov	r1, r4
 80088a0:	f7ff f932 	bl	8007b08 <_Bfree>
 80088a4:	e5f9      	b.n	800849a <_strtod_l+0x72>
 80088a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80088ac:	4293      	cmp	r3, r2
 80088ae:	dbbc      	blt.n	800882a <_strtod_l+0x402>
 80088b0:	4c41      	ldr	r4, [pc, #260]	@ (80089b8 <_strtod_l+0x590>)
 80088b2:	f1c5 050f 	rsb	r5, r5, #15
 80088b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088ba:	4652      	mov	r2, sl
 80088bc:	465b      	mov	r3, fp
 80088be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c2:	f7f7 feb9 	bl	8000638 <__aeabi_dmul>
 80088c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c8:	1b5d      	subs	r5, r3, r5
 80088ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088d2:	e78f      	b.n	80087f4 <_strtod_l+0x3cc>
 80088d4:	3316      	adds	r3, #22
 80088d6:	dba8      	blt.n	800882a <_strtod_l+0x402>
 80088d8:	4b37      	ldr	r3, [pc, #220]	@ (80089b8 <_strtod_l+0x590>)
 80088da:	eba9 0808 	sub.w	r8, r9, r8
 80088de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088e6:	4650      	mov	r0, sl
 80088e8:	4659      	mov	r1, fp
 80088ea:	f7f7 ffcf 	bl	800088c <__aeabi_ddiv>
 80088ee:	e783      	b.n	80087f8 <_strtod_l+0x3d0>
 80088f0:	4b32      	ldr	r3, [pc, #200]	@ (80089bc <_strtod_l+0x594>)
 80088f2:	9308      	str	r3, [sp, #32]
 80088f4:	2300      	movs	r3, #0
 80088f6:	1124      	asrs	r4, r4, #4
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	461e      	mov	r6, r3
 80088fe:	2c01      	cmp	r4, #1
 8008900:	dc21      	bgt.n	8008946 <_strtod_l+0x51e>
 8008902:	b10b      	cbz	r3, 8008908 <_strtod_l+0x4e0>
 8008904:	4682      	mov	sl, r0
 8008906:	468b      	mov	fp, r1
 8008908:	492c      	ldr	r1, [pc, #176]	@ (80089bc <_strtod_l+0x594>)
 800890a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800890e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008912:	4652      	mov	r2, sl
 8008914:	465b      	mov	r3, fp
 8008916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800891a:	f7f7 fe8d 	bl	8000638 <__aeabi_dmul>
 800891e:	4b28      	ldr	r3, [pc, #160]	@ (80089c0 <_strtod_l+0x598>)
 8008920:	460a      	mov	r2, r1
 8008922:	400b      	ands	r3, r1
 8008924:	4927      	ldr	r1, [pc, #156]	@ (80089c4 <_strtod_l+0x59c>)
 8008926:	428b      	cmp	r3, r1
 8008928:	4682      	mov	sl, r0
 800892a:	d898      	bhi.n	800885e <_strtod_l+0x436>
 800892c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008930:	428b      	cmp	r3, r1
 8008932:	bf86      	itte	hi
 8008934:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80089c8 <_strtod_l+0x5a0>
 8008938:	f04f 3aff 	movhi.w	sl, #4294967295
 800893c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008940:	2300      	movs	r3, #0
 8008942:	9308      	str	r3, [sp, #32]
 8008944:	e07a      	b.n	8008a3c <_strtod_l+0x614>
 8008946:	07e2      	lsls	r2, r4, #31
 8008948:	d505      	bpl.n	8008956 <_strtod_l+0x52e>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fe72 	bl	8000638 <__aeabi_dmul>
 8008954:	2301      	movs	r3, #1
 8008956:	9a08      	ldr	r2, [sp, #32]
 8008958:	3208      	adds	r2, #8
 800895a:	3601      	adds	r6, #1
 800895c:	1064      	asrs	r4, r4, #1
 800895e:	9208      	str	r2, [sp, #32]
 8008960:	e7cd      	b.n	80088fe <_strtod_l+0x4d6>
 8008962:	d0ed      	beq.n	8008940 <_strtod_l+0x518>
 8008964:	4264      	negs	r4, r4
 8008966:	f014 020f 	ands.w	r2, r4, #15
 800896a:	d00a      	beq.n	8008982 <_strtod_l+0x55a>
 800896c:	4b12      	ldr	r3, [pc, #72]	@ (80089b8 <_strtod_l+0x590>)
 800896e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008972:	4650      	mov	r0, sl
 8008974:	4659      	mov	r1, fp
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 ff87 	bl	800088c <__aeabi_ddiv>
 800897e:	4682      	mov	sl, r0
 8008980:	468b      	mov	fp, r1
 8008982:	1124      	asrs	r4, r4, #4
 8008984:	d0dc      	beq.n	8008940 <_strtod_l+0x518>
 8008986:	2c1f      	cmp	r4, #31
 8008988:	dd20      	ble.n	80089cc <_strtod_l+0x5a4>
 800898a:	2400      	movs	r4, #0
 800898c:	46a0      	mov	r8, r4
 800898e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008990:	46a1      	mov	r9, r4
 8008992:	9a05      	ldr	r2, [sp, #20]
 8008994:	2322      	movs	r3, #34	@ 0x22
 8008996:	f04f 0a00 	mov.w	sl, #0
 800899a:	f04f 0b00 	mov.w	fp, #0
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e768      	b.n	8008874 <_strtod_l+0x44c>
 80089a2:	bf00      	nop
 80089a4:	0800a635 	.word	0x0800a635
 80089a8:	0800a84c 	.word	0x0800a84c
 80089ac:	0800a62d 	.word	0x0800a62d
 80089b0:	0800a664 	.word	0x0800a664
 80089b4:	0800a9f5 	.word	0x0800a9f5
 80089b8:	0800a780 	.word	0x0800a780
 80089bc:	0800a758 	.word	0x0800a758
 80089c0:	7ff00000 	.word	0x7ff00000
 80089c4:	7ca00000 	.word	0x7ca00000
 80089c8:	7fefffff 	.word	0x7fefffff
 80089cc:	f014 0310 	ands.w	r3, r4, #16
 80089d0:	bf18      	it	ne
 80089d2:	236a      	movne	r3, #106	@ 0x6a
 80089d4:	4ea9      	ldr	r6, [pc, #676]	@ (8008c7c <_strtod_l+0x854>)
 80089d6:	9308      	str	r3, [sp, #32]
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	2300      	movs	r3, #0
 80089de:	07e2      	lsls	r2, r4, #31
 80089e0:	d504      	bpl.n	80089ec <_strtod_l+0x5c4>
 80089e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089e6:	f7f7 fe27 	bl	8000638 <__aeabi_dmul>
 80089ea:	2301      	movs	r3, #1
 80089ec:	1064      	asrs	r4, r4, #1
 80089ee:	f106 0608 	add.w	r6, r6, #8
 80089f2:	d1f4      	bne.n	80089de <_strtod_l+0x5b6>
 80089f4:	b10b      	cbz	r3, 80089fa <_strtod_l+0x5d2>
 80089f6:	4682      	mov	sl, r0
 80089f8:	468b      	mov	fp, r1
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	b1b3      	cbz	r3, 8008a2c <_strtod_l+0x604>
 80089fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	4659      	mov	r1, fp
 8008a0a:	dd0f      	ble.n	8008a2c <_strtod_l+0x604>
 8008a0c:	2b1f      	cmp	r3, #31
 8008a0e:	dd55      	ble.n	8008abc <_strtod_l+0x694>
 8008a10:	2b34      	cmp	r3, #52	@ 0x34
 8008a12:	bfde      	ittt	le
 8008a14:	f04f 33ff 	movle.w	r3, #4294967295
 8008a18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008a1c:	4093      	lslle	r3, r2
 8008a1e:	f04f 0a00 	mov.w	sl, #0
 8008a22:	bfcc      	ite	gt
 8008a24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a28:	ea03 0b01 	andle.w	fp, r3, r1
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4650      	mov	r0, sl
 8008a32:	4659      	mov	r1, fp
 8008a34:	f7f8 f868 	bl	8000b08 <__aeabi_dcmpeq>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1a6      	bne.n	800898a <_strtod_l+0x562>
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a42:	9805      	ldr	r0, [sp, #20]
 8008a44:	462b      	mov	r3, r5
 8008a46:	463a      	mov	r2, r7
 8008a48:	f7ff f8c6 	bl	8007bd8 <__s2b>
 8008a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f af05 	beq.w	800885e <_strtod_l+0x436>
 8008a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	eba9 0308 	sub.w	r3, r9, r8
 8008a5c:	bfa8      	it	ge
 8008a5e:	2300      	movge	r3, #0
 8008a60:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a62:	2400      	movs	r4, #0
 8008a64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a68:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a6a:	46a0      	mov	r8, r4
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6e:	9805      	ldr	r0, [sp, #20]
 8008a70:	6859      	ldr	r1, [r3, #4]
 8008a72:	f7ff f809 	bl	8007a88 <_Balloc>
 8008a76:	4681      	mov	r9, r0
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f43f aef4 	beq.w	8008866 <_strtod_l+0x43e>
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	3202      	adds	r2, #2
 8008a84:	f103 010c 	add.w	r1, r3, #12
 8008a88:	0092      	lsls	r2, r2, #2
 8008a8a:	300c      	adds	r0, #12
 8008a8c:	f000 fdf6 	bl	800967c <memcpy>
 8008a90:	ec4b ab10 	vmov	d0, sl, fp
 8008a94:	9805      	ldr	r0, [sp, #20]
 8008a96:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a98:	a91b      	add	r1, sp, #108	@ 0x6c
 8008a9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a9e:	f7ff fbd7 	bl	8008250 <__d2b>
 8008aa2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f43f aede 	beq.w	8008866 <_strtod_l+0x43e>
 8008aaa:	9805      	ldr	r0, [sp, #20]
 8008aac:	2101      	movs	r1, #1
 8008aae:	f7ff f929 	bl	8007d04 <__i2b>
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	b948      	cbnz	r0, 8008aca <_strtod_l+0x6a2>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	e6d4      	b.n	8008866 <_strtod_l+0x43e>
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ac8:	e7b0      	b.n	8008a2c <_strtod_l+0x604>
 8008aca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008acc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	bfab      	itete	ge
 8008ad2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008ad4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008ad6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ad8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ada:	bfac      	ite	ge
 8008adc:	18ef      	addge	r7, r5, r3
 8008ade:	1b5e      	sublt	r6, r3, r5
 8008ae0:	9b08      	ldr	r3, [sp, #32]
 8008ae2:	1aed      	subs	r5, r5, r3
 8008ae4:	4415      	add	r5, r2
 8008ae6:	4b66      	ldr	r3, [pc, #408]	@ (8008c80 <_strtod_l+0x858>)
 8008ae8:	3d01      	subs	r5, #1
 8008aea:	429d      	cmp	r5, r3
 8008aec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008af0:	da50      	bge.n	8008b94 <_strtod_l+0x76c>
 8008af2:	1b5b      	subs	r3, r3, r5
 8008af4:	2b1f      	cmp	r3, #31
 8008af6:	eba2 0203 	sub.w	r2, r2, r3
 8008afa:	f04f 0101 	mov.w	r1, #1
 8008afe:	dc3d      	bgt.n	8008b7c <_strtod_l+0x754>
 8008b00:	fa01 f303 	lsl.w	r3, r1, r3
 8008b04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b06:	2300      	movs	r3, #0
 8008b08:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b0a:	18bd      	adds	r5, r7, r2
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	42af      	cmp	r7, r5
 8008b10:	4416      	add	r6, r2
 8008b12:	441e      	add	r6, r3
 8008b14:	463b      	mov	r3, r7
 8008b16:	bfa8      	it	ge
 8008b18:	462b      	movge	r3, r5
 8008b1a:	42b3      	cmp	r3, r6
 8008b1c:	bfa8      	it	ge
 8008b1e:	4633      	movge	r3, r6
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfc2      	ittt	gt
 8008b24:	1aed      	subgt	r5, r5, r3
 8008b26:	1af6      	subgt	r6, r6, r3
 8008b28:	1aff      	subgt	r7, r7, r3
 8008b2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dd16      	ble.n	8008b5e <_strtod_l+0x736>
 8008b30:	4641      	mov	r1, r8
 8008b32:	9805      	ldr	r0, [sp, #20]
 8008b34:	461a      	mov	r2, r3
 8008b36:	f7ff f9a5 	bl	8007e84 <__pow5mult>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d0ba      	beq.n	8008ab6 <_strtod_l+0x68e>
 8008b40:	4601      	mov	r1, r0
 8008b42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b44:	9805      	ldr	r0, [sp, #20]
 8008b46:	f7ff f8f3 	bl	8007d30 <__multiply>
 8008b4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f ae8a 	beq.w	8008866 <_strtod_l+0x43e>
 8008b52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b54:	9805      	ldr	r0, [sp, #20]
 8008b56:	f7fe ffd7 	bl	8007b08 <_Bfree>
 8008b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b5e:	2d00      	cmp	r5, #0
 8008b60:	dc1d      	bgt.n	8008b9e <_strtod_l+0x776>
 8008b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dd23      	ble.n	8008bb0 <_strtod_l+0x788>
 8008b68:	4649      	mov	r1, r9
 8008b6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f7ff f989 	bl	8007e84 <__pow5mult>
 8008b72:	4681      	mov	r9, r0
 8008b74:	b9e0      	cbnz	r0, 8008bb0 <_strtod_l+0x788>
 8008b76:	f04f 0900 	mov.w	r9, #0
 8008b7a:	e674      	b.n	8008866 <_strtod_l+0x43e>
 8008b7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b88:	35e2      	adds	r5, #226	@ 0xe2
 8008b8a:	fa01 f305 	lsl.w	r3, r1, r5
 8008b8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b92:	e7ba      	b.n	8008b0a <_strtod_l+0x6e2>
 8008b94:	2300      	movs	r3, #0
 8008b96:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b98:	2301      	movs	r3, #1
 8008b9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b9c:	e7b5      	b.n	8008b0a <_strtod_l+0x6e2>
 8008b9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ba0:	9805      	ldr	r0, [sp, #20]
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	f7ff f9c8 	bl	8007f38 <__lshift>
 8008ba8:	901a      	str	r0, [sp, #104]	@ 0x68
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d1d9      	bne.n	8008b62 <_strtod_l+0x73a>
 8008bae:	e65a      	b.n	8008866 <_strtod_l+0x43e>
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd07      	ble.n	8008bc4 <_strtod_l+0x79c>
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	9805      	ldr	r0, [sp, #20]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	f7ff f9bd 	bl	8007f38 <__lshift>
 8008bbe:	4681      	mov	r9, r0
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d0d8      	beq.n	8008b76 <_strtod_l+0x74e>
 8008bc4:	2f00      	cmp	r7, #0
 8008bc6:	dd08      	ble.n	8008bda <_strtod_l+0x7b2>
 8008bc8:	4641      	mov	r1, r8
 8008bca:	9805      	ldr	r0, [sp, #20]
 8008bcc:	463a      	mov	r2, r7
 8008bce:	f7ff f9b3 	bl	8007f38 <__lshift>
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f43f ae46 	beq.w	8008866 <_strtod_l+0x43e>
 8008bda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bdc:	9805      	ldr	r0, [sp, #20]
 8008bde:	464a      	mov	r2, r9
 8008be0:	f7ff fa32 	bl	8008048 <__mdiff>
 8008be4:	4604      	mov	r4, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f43f ae3d 	beq.w	8008866 <_strtod_l+0x43e>
 8008bec:	68c3      	ldr	r3, [r0, #12]
 8008bee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60c3      	str	r3, [r0, #12]
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	f7ff fa0b 	bl	8008010 <__mcmp>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	da46      	bge.n	8008c8c <_strtod_l+0x864>
 8008bfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c00:	ea53 030a 	orrs.w	r3, r3, sl
 8008c04:	d16c      	bne.n	8008ce0 <_strtod_l+0x8b8>
 8008c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d168      	bne.n	8008ce0 <_strtod_l+0x8b8>
 8008c0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c12:	0d1b      	lsrs	r3, r3, #20
 8008c14:	051b      	lsls	r3, r3, #20
 8008c16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c1a:	d961      	bls.n	8008ce0 <_strtod_l+0x8b8>
 8008c1c:	6963      	ldr	r3, [r4, #20]
 8008c1e:	b913      	cbnz	r3, 8008c26 <_strtod_l+0x7fe>
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	dd5c      	ble.n	8008ce0 <_strtod_l+0x8b8>
 8008c26:	4621      	mov	r1, r4
 8008c28:	2201      	movs	r2, #1
 8008c2a:	9805      	ldr	r0, [sp, #20]
 8008c2c:	f7ff f984 	bl	8007f38 <__lshift>
 8008c30:	4641      	mov	r1, r8
 8008c32:	4604      	mov	r4, r0
 8008c34:	f7ff f9ec 	bl	8008010 <__mcmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dd51      	ble.n	8008ce0 <_strtod_l+0x8b8>
 8008c3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c40:	9a08      	ldr	r2, [sp, #32]
 8008c42:	0d1b      	lsrs	r3, r3, #20
 8008c44:	051b      	lsls	r3, r3, #20
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	d06b      	beq.n	8008d22 <_strtod_l+0x8fa>
 8008c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c4e:	d868      	bhi.n	8008d22 <_strtod_l+0x8fa>
 8008c50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c54:	f67f ae9d 	bls.w	8008992 <_strtod_l+0x56a>
 8008c58:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <_strtod_l+0x85c>)
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	4659      	mov	r1, fp
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f7f7 fcea 	bl	8000638 <__aeabi_dmul>
 8008c64:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <_strtod_l+0x860>)
 8008c66:	400b      	ands	r3, r1
 8008c68:	4682      	mov	sl, r0
 8008c6a:	468b      	mov	fp, r1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f47f ae05 	bne.w	800887c <_strtod_l+0x454>
 8008c72:	9a05      	ldr	r2, [sp, #20]
 8008c74:	2322      	movs	r3, #34	@ 0x22
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	e600      	b.n	800887c <_strtod_l+0x454>
 8008c7a:	bf00      	nop
 8008c7c:	0800a878 	.word	0x0800a878
 8008c80:	fffffc02 	.word	0xfffffc02
 8008c84:	39500000 	.word	0x39500000
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c90:	d165      	bne.n	8008d5e <_strtod_l+0x936>
 8008c92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c98:	b35a      	cbz	r2, 8008cf2 <_strtod_l+0x8ca>
 8008c9a:	4a9f      	ldr	r2, [pc, #636]	@ (8008f18 <_strtod_l+0xaf0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d12b      	bne.n	8008cf8 <_strtod_l+0x8d0>
 8008ca0:	9b08      	ldr	r3, [sp, #32]
 8008ca2:	4651      	mov	r1, sl
 8008ca4:	b303      	cbz	r3, 8008ce8 <_strtod_l+0x8c0>
 8008ca6:	4b9d      	ldr	r3, [pc, #628]	@ (8008f1c <_strtod_l+0xaf4>)
 8008ca8:	465a      	mov	r2, fp
 8008caa:	4013      	ands	r3, r2
 8008cac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb4:	d81b      	bhi.n	8008cee <_strtod_l+0x8c6>
 8008cb6:	0d1b      	lsrs	r3, r3, #20
 8008cb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d119      	bne.n	8008cf8 <_strtod_l+0x8d0>
 8008cc4:	4b96      	ldr	r3, [pc, #600]	@ (8008f20 <_strtod_l+0xaf8>)
 8008cc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d102      	bne.n	8008cd2 <_strtod_l+0x8aa>
 8008ccc:	3101      	adds	r1, #1
 8008cce:	f43f adca 	beq.w	8008866 <_strtod_l+0x43e>
 8008cd2:	4b92      	ldr	r3, [pc, #584]	@ (8008f1c <_strtod_l+0xaf4>)
 8008cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cd6:	401a      	ands	r2, r3
 8008cd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008cdc:	f04f 0a00 	mov.w	sl, #0
 8008ce0:	9b08      	ldr	r3, [sp, #32]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1b8      	bne.n	8008c58 <_strtod_l+0x830>
 8008ce6:	e5c9      	b.n	800887c <_strtod_l+0x454>
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cec:	e7e8      	b.n	8008cc0 <_strtod_l+0x898>
 8008cee:	4613      	mov	r3, r2
 8008cf0:	e7e6      	b.n	8008cc0 <_strtod_l+0x898>
 8008cf2:	ea53 030a 	orrs.w	r3, r3, sl
 8008cf6:	d0a1      	beq.n	8008c3c <_strtod_l+0x814>
 8008cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cfa:	b1db      	cbz	r3, 8008d34 <_strtod_l+0x90c>
 8008cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cfe:	4213      	tst	r3, r2
 8008d00:	d0ee      	beq.n	8008ce0 <_strtod_l+0x8b8>
 8008d02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d04:	9a08      	ldr	r2, [sp, #32]
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	b1bb      	cbz	r3, 8008d3c <_strtod_l+0x914>
 8008d0c:	f7ff fb6e 	bl	80083ec <sulp>
 8008d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d14:	ec53 2b10 	vmov	r2, r3, d0
 8008d18:	f7f7 fad8 	bl	80002cc <__adddf3>
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	468b      	mov	fp, r1
 8008d20:	e7de      	b.n	8008ce0 <_strtod_l+0x8b8>
 8008d22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008d26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d2e:	f04f 3aff 	mov.w	sl, #4294967295
 8008d32:	e7d5      	b.n	8008ce0 <_strtod_l+0x8b8>
 8008d34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d36:	ea13 0f0a 	tst.w	r3, sl
 8008d3a:	e7e1      	b.n	8008d00 <_strtod_l+0x8d8>
 8008d3c:	f7ff fb56 	bl	80083ec <sulp>
 8008d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d44:	ec53 2b10 	vmov	r2, r3, d0
 8008d48:	f7f7 fabe 	bl	80002c8 <__aeabi_dsub>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	f7f7 fed8 	bl	8000b08 <__aeabi_dcmpeq>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d0c1      	beq.n	8008ce0 <_strtod_l+0x8b8>
 8008d5c:	e619      	b.n	8008992 <_strtod_l+0x56a>
 8008d5e:	4641      	mov	r1, r8
 8008d60:	4620      	mov	r0, r4
 8008d62:	f7ff facd 	bl	8008300 <__ratio>
 8008d66:	ec57 6b10 	vmov	r6, r7, d0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 fedc 	bl	8000b30 <__aeabi_dcmple>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d06f      	beq.n	8008e5c <_strtod_l+0xa34>
 8008d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d17a      	bne.n	8008e78 <_strtod_l+0xa50>
 8008d82:	f1ba 0f00 	cmp.w	sl, #0
 8008d86:	d158      	bne.n	8008e3a <_strtod_l+0xa12>
 8008d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d15a      	bne.n	8008e48 <_strtod_l+0xa20>
 8008d92:	4b64      	ldr	r3, [pc, #400]	@ (8008f24 <_strtod_l+0xafc>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 febf 	bl	8000b1c <__aeabi_dcmplt>
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d159      	bne.n	8008e56 <_strtod_l+0xa2e>
 8008da2:	4630      	mov	r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	4b60      	ldr	r3, [pc, #384]	@ (8008f28 <_strtod_l+0xb00>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	f7f7 fc45 	bl	8000638 <__aeabi_dmul>
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008db6:	9606      	str	r6, [sp, #24]
 8008db8:	9307      	str	r3, [sp, #28]
 8008dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dbe:	4d57      	ldr	r5, [pc, #348]	@ (8008f1c <_strtod_l+0xaf4>)
 8008dc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc6:	401d      	ands	r5, r3
 8008dc8:	4b58      	ldr	r3, [pc, #352]	@ (8008f2c <_strtod_l+0xb04>)
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	f040 80b2 	bne.w	8008f34 <_strtod_l+0xb0c>
 8008dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dd6:	ec4b ab10 	vmov	d0, sl, fp
 8008dda:	f7ff f9c9 	bl	8008170 <__ulp>
 8008dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de2:	ec51 0b10 	vmov	r0, r1, d0
 8008de6:	f7f7 fc27 	bl	8000638 <__aeabi_dmul>
 8008dea:	4652      	mov	r2, sl
 8008dec:	465b      	mov	r3, fp
 8008dee:	f7f7 fa6d 	bl	80002cc <__adddf3>
 8008df2:	460b      	mov	r3, r1
 8008df4:	4949      	ldr	r1, [pc, #292]	@ (8008f1c <_strtod_l+0xaf4>)
 8008df6:	4a4e      	ldr	r2, [pc, #312]	@ (8008f30 <_strtod_l+0xb08>)
 8008df8:	4019      	ands	r1, r3
 8008dfa:	4291      	cmp	r1, r2
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	d942      	bls.n	8008e86 <_strtod_l+0xa5e>
 8008e00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e02:	4b47      	ldr	r3, [pc, #284]	@ (8008f20 <_strtod_l+0xaf8>)
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d103      	bne.n	8008e10 <_strtod_l+0x9e8>
 8008e08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f43f ad2b 	beq.w	8008866 <_strtod_l+0x43e>
 8008e10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008f20 <_strtod_l+0xaf8>
 8008e14:	f04f 3aff 	mov.w	sl, #4294967295
 8008e18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	f7fe fe74 	bl	8007b08 <_Bfree>
 8008e20:	9805      	ldr	r0, [sp, #20]
 8008e22:	4649      	mov	r1, r9
 8008e24:	f7fe fe70 	bl	8007b08 <_Bfree>
 8008e28:	9805      	ldr	r0, [sp, #20]
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	f7fe fe6c 	bl	8007b08 <_Bfree>
 8008e30:	9805      	ldr	r0, [sp, #20]
 8008e32:	4621      	mov	r1, r4
 8008e34:	f7fe fe68 	bl	8007b08 <_Bfree>
 8008e38:	e618      	b.n	8008a6c <_strtod_l+0x644>
 8008e3a:	f1ba 0f01 	cmp.w	sl, #1
 8008e3e:	d103      	bne.n	8008e48 <_strtod_l+0xa20>
 8008e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f ada5 	beq.w	8008992 <_strtod_l+0x56a>
 8008e48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ef8 <_strtod_l+0xad0>
 8008e4c:	4f35      	ldr	r7, [pc, #212]	@ (8008f24 <_strtod_l+0xafc>)
 8008e4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e52:	2600      	movs	r6, #0
 8008e54:	e7b1      	b.n	8008dba <_strtod_l+0x992>
 8008e56:	4f34      	ldr	r7, [pc, #208]	@ (8008f28 <_strtod_l+0xb00>)
 8008e58:	2600      	movs	r6, #0
 8008e5a:	e7aa      	b.n	8008db2 <_strtod_l+0x98a>
 8008e5c:	4b32      	ldr	r3, [pc, #200]	@ (8008f28 <_strtod_l+0xb00>)
 8008e5e:	4630      	mov	r0, r6
 8008e60:	4639      	mov	r1, r7
 8008e62:	2200      	movs	r2, #0
 8008e64:	f7f7 fbe8 	bl	8000638 <__aeabi_dmul>
 8008e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d09f      	beq.n	8008db2 <_strtod_l+0x98a>
 8008e72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e76:	e7a0      	b.n	8008dba <_strtod_l+0x992>
 8008e78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008f00 <_strtod_l+0xad8>
 8008e7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e80:	ec57 6b17 	vmov	r6, r7, d7
 8008e84:	e799      	b.n	8008dba <_strtod_l+0x992>
 8008e86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1c1      	bne.n	8008e18 <_strtod_l+0x9f0>
 8008e94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e98:	0d1b      	lsrs	r3, r3, #20
 8008e9a:	051b      	lsls	r3, r3, #20
 8008e9c:	429d      	cmp	r5, r3
 8008e9e:	d1bb      	bne.n	8008e18 <_strtod_l+0x9f0>
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 ff28 	bl	8000cf8 <__aeabi_d2lz>
 8008ea8:	f7f7 fb98 	bl	80005dc <__aeabi_l2d>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 fa08 	bl	80002c8 <__aeabi_dsub>
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4602      	mov	r2, r0
 8008ebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ec0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec6:	ea46 060a 	orr.w	r6, r6, sl
 8008eca:	431e      	orrs	r6, r3
 8008ecc:	d06f      	beq.n	8008fae <_strtod_l+0xb86>
 8008ece:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f08 <_strtod_l+0xae0>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f7f7 fe22 	bl	8000b1c <__aeabi_dcmplt>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	f47f accf 	bne.w	800887c <_strtod_l+0x454>
 8008ede:	a30c      	add	r3, pc, #48	@ (adr r3, 8008f10 <_strtod_l+0xae8>)
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee8:	f7f7 fe36 	bl	8000b58 <__aeabi_dcmpgt>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d093      	beq.n	8008e18 <_strtod_l+0x9f0>
 8008ef0:	e4c4      	b.n	800887c <_strtod_l+0x454>
 8008ef2:	bf00      	nop
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	bff00000 	.word	0xbff00000
 8008f00:	00000000 	.word	0x00000000
 8008f04:	3ff00000 	.word	0x3ff00000
 8008f08:	94a03595 	.word	0x94a03595
 8008f0c:	3fdfffff 	.word	0x3fdfffff
 8008f10:	35afe535 	.word	0x35afe535
 8008f14:	3fe00000 	.word	0x3fe00000
 8008f18:	000fffff 	.word	0x000fffff
 8008f1c:	7ff00000 	.word	0x7ff00000
 8008f20:	7fefffff 	.word	0x7fefffff
 8008f24:	3ff00000 	.word	0x3ff00000
 8008f28:	3fe00000 	.word	0x3fe00000
 8008f2c:	7fe00000 	.word	0x7fe00000
 8008f30:	7c9fffff 	.word	0x7c9fffff
 8008f34:	9b08      	ldr	r3, [sp, #32]
 8008f36:	b323      	cbz	r3, 8008f82 <_strtod_l+0xb5a>
 8008f38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f3c:	d821      	bhi.n	8008f82 <_strtod_l+0xb5a>
 8008f3e:	a328      	add	r3, pc, #160	@ (adr r3, 8008fe0 <_strtod_l+0xbb8>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 fdf2 	bl	8000b30 <__aeabi_dcmple>
 8008f4c:	b1a0      	cbz	r0, 8008f78 <_strtod_l+0xb50>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7f7 fe49 	bl	8000be8 <__aeabi_d2uiz>
 8008f56:	2801      	cmp	r0, #1
 8008f58:	bf38      	it	cc
 8008f5a:	2001      	movcc	r0, #1
 8008f5c:	f7f7 faf2 	bl	8000544 <__aeabi_ui2d>
 8008f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	b9fb      	cbnz	r3, 8008fa8 <_strtod_l+0xb80>
 8008f68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f7e:	1b5b      	subs	r3, r3, r5
 8008f80:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f8a:	f7ff f8f1 	bl	8008170 <__ulp>
 8008f8e:	4650      	mov	r0, sl
 8008f90:	ec53 2b10 	vmov	r2, r3, d0
 8008f94:	4659      	mov	r1, fp
 8008f96:	f7f7 fb4f 	bl	8000638 <__aeabi_dmul>
 8008f9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f9e:	f7f7 f995 	bl	80002cc <__adddf3>
 8008fa2:	4682      	mov	sl, r0
 8008fa4:	468b      	mov	fp, r1
 8008fa6:	e770      	b.n	8008e8a <_strtod_l+0xa62>
 8008fa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008fac:	e7e0      	b.n	8008f70 <_strtod_l+0xb48>
 8008fae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fe8 <_strtod_l+0xbc0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fdb2 	bl	8000b1c <__aeabi_dcmplt>
 8008fb8:	e798      	b.n	8008eec <_strtod_l+0xac4>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008fc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	f7ff ba6d 	b.w	80084a2 <_strtod_l+0x7a>
 8008fc8:	2a65      	cmp	r2, #101	@ 0x65
 8008fca:	f43f ab66 	beq.w	800869a <_strtod_l+0x272>
 8008fce:	2a45      	cmp	r2, #69	@ 0x45
 8008fd0:	f43f ab63 	beq.w	800869a <_strtod_l+0x272>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f7ff bb9e 	b.w	8008716 <_strtod_l+0x2ee>
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	ffc00000 	.word	0xffc00000
 8008fe4:	41dfffff 	.word	0x41dfffff
 8008fe8:	94a03595 	.word	0x94a03595
 8008fec:	3fcfffff 	.word	0x3fcfffff

08008ff0 <_strtod_r>:
 8008ff0:	4b01      	ldr	r3, [pc, #4]	@ (8008ff8 <_strtod_r+0x8>)
 8008ff2:	f7ff ba19 	b.w	8008428 <_strtod_l>
 8008ff6:	bf00      	nop
 8008ff8:	20000074 	.word	0x20000074

08008ffc <_strtol_l.constprop.0>:
 8008ffc:	2b24      	cmp	r3, #36	@ 0x24
 8008ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009002:	4686      	mov	lr, r0
 8009004:	4690      	mov	r8, r2
 8009006:	d801      	bhi.n	800900c <_strtol_l.constprop.0+0x10>
 8009008:	2b01      	cmp	r3, #1
 800900a:	d106      	bne.n	800901a <_strtol_l.constprop.0+0x1e>
 800900c:	f7fd fdbc 	bl	8006b88 <__errno>
 8009010:	2316      	movs	r3, #22
 8009012:	6003      	str	r3, [r0, #0]
 8009014:	2000      	movs	r0, #0
 8009016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901a:	4834      	ldr	r0, [pc, #208]	@ (80090ec <_strtol_l.constprop.0+0xf0>)
 800901c:	460d      	mov	r5, r1
 800901e:	462a      	mov	r2, r5
 8009020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009024:	5d06      	ldrb	r6, [r0, r4]
 8009026:	f016 0608 	ands.w	r6, r6, #8
 800902a:	d1f8      	bne.n	800901e <_strtol_l.constprop.0+0x22>
 800902c:	2c2d      	cmp	r4, #45	@ 0x2d
 800902e:	d12d      	bne.n	800908c <_strtol_l.constprop.0+0x90>
 8009030:	782c      	ldrb	r4, [r5, #0]
 8009032:	2601      	movs	r6, #1
 8009034:	1c95      	adds	r5, r2, #2
 8009036:	f033 0210 	bics.w	r2, r3, #16
 800903a:	d109      	bne.n	8009050 <_strtol_l.constprop.0+0x54>
 800903c:	2c30      	cmp	r4, #48	@ 0x30
 800903e:	d12a      	bne.n	8009096 <_strtol_l.constprop.0+0x9a>
 8009040:	782a      	ldrb	r2, [r5, #0]
 8009042:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009046:	2a58      	cmp	r2, #88	@ 0x58
 8009048:	d125      	bne.n	8009096 <_strtol_l.constprop.0+0x9a>
 800904a:	786c      	ldrb	r4, [r5, #1]
 800904c:	2310      	movs	r3, #16
 800904e:	3502      	adds	r5, #2
 8009050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009054:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009058:	2200      	movs	r2, #0
 800905a:	fbbc f9f3 	udiv	r9, ip, r3
 800905e:	4610      	mov	r0, r2
 8009060:	fb03 ca19 	mls	sl, r3, r9, ip
 8009064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009068:	2f09      	cmp	r7, #9
 800906a:	d81b      	bhi.n	80090a4 <_strtol_l.constprop.0+0xa8>
 800906c:	463c      	mov	r4, r7
 800906e:	42a3      	cmp	r3, r4
 8009070:	dd27      	ble.n	80090c2 <_strtol_l.constprop.0+0xc6>
 8009072:	1c57      	adds	r7, r2, #1
 8009074:	d007      	beq.n	8009086 <_strtol_l.constprop.0+0x8a>
 8009076:	4581      	cmp	r9, r0
 8009078:	d320      	bcc.n	80090bc <_strtol_l.constprop.0+0xc0>
 800907a:	d101      	bne.n	8009080 <_strtol_l.constprop.0+0x84>
 800907c:	45a2      	cmp	sl, r4
 800907e:	db1d      	blt.n	80090bc <_strtol_l.constprop.0+0xc0>
 8009080:	fb00 4003 	mla	r0, r0, r3, r4
 8009084:	2201      	movs	r2, #1
 8009086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800908a:	e7eb      	b.n	8009064 <_strtol_l.constprop.0+0x68>
 800908c:	2c2b      	cmp	r4, #43	@ 0x2b
 800908e:	bf04      	itt	eq
 8009090:	782c      	ldrbeq	r4, [r5, #0]
 8009092:	1c95      	addeq	r5, r2, #2
 8009094:	e7cf      	b.n	8009036 <_strtol_l.constprop.0+0x3a>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1da      	bne.n	8009050 <_strtol_l.constprop.0+0x54>
 800909a:	2c30      	cmp	r4, #48	@ 0x30
 800909c:	bf0c      	ite	eq
 800909e:	2308      	moveq	r3, #8
 80090a0:	230a      	movne	r3, #10
 80090a2:	e7d5      	b.n	8009050 <_strtol_l.constprop.0+0x54>
 80090a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090a8:	2f19      	cmp	r7, #25
 80090aa:	d801      	bhi.n	80090b0 <_strtol_l.constprop.0+0xb4>
 80090ac:	3c37      	subs	r4, #55	@ 0x37
 80090ae:	e7de      	b.n	800906e <_strtol_l.constprop.0+0x72>
 80090b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090b4:	2f19      	cmp	r7, #25
 80090b6:	d804      	bhi.n	80090c2 <_strtol_l.constprop.0+0xc6>
 80090b8:	3c57      	subs	r4, #87	@ 0x57
 80090ba:	e7d8      	b.n	800906e <_strtol_l.constprop.0+0x72>
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295
 80090c0:	e7e1      	b.n	8009086 <_strtol_l.constprop.0+0x8a>
 80090c2:	1c53      	adds	r3, r2, #1
 80090c4:	d108      	bne.n	80090d8 <_strtol_l.constprop.0+0xdc>
 80090c6:	2322      	movs	r3, #34	@ 0x22
 80090c8:	f8ce 3000 	str.w	r3, [lr]
 80090cc:	4660      	mov	r0, ip
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	d0a0      	beq.n	8009016 <_strtol_l.constprop.0+0x1a>
 80090d4:	1e69      	subs	r1, r5, #1
 80090d6:	e006      	b.n	80090e6 <_strtol_l.constprop.0+0xea>
 80090d8:	b106      	cbz	r6, 80090dc <_strtol_l.constprop.0+0xe0>
 80090da:	4240      	negs	r0, r0
 80090dc:	f1b8 0f00 	cmp.w	r8, #0
 80090e0:	d099      	beq.n	8009016 <_strtol_l.constprop.0+0x1a>
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	d1f6      	bne.n	80090d4 <_strtol_l.constprop.0+0xd8>
 80090e6:	f8c8 1000 	str.w	r1, [r8]
 80090ea:	e794      	b.n	8009016 <_strtol_l.constprop.0+0x1a>
 80090ec:	0800a8a1 	.word	0x0800a8a1

080090f0 <_strtol_r>:
 80090f0:	f7ff bf84 	b.w	8008ffc <_strtol_l.constprop.0>

080090f4 <__ssputs_r>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	688e      	ldr	r6, [r1, #8]
 80090fa:	461f      	mov	r7, r3
 80090fc:	42be      	cmp	r6, r7
 80090fe:	680b      	ldr	r3, [r1, #0]
 8009100:	4682      	mov	sl, r0
 8009102:	460c      	mov	r4, r1
 8009104:	4690      	mov	r8, r2
 8009106:	d82d      	bhi.n	8009164 <__ssputs_r+0x70>
 8009108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800910c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009110:	d026      	beq.n	8009160 <__ssputs_r+0x6c>
 8009112:	6965      	ldr	r5, [r4, #20]
 8009114:	6909      	ldr	r1, [r1, #16]
 8009116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800911a:	eba3 0901 	sub.w	r9, r3, r1
 800911e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009122:	1c7b      	adds	r3, r7, #1
 8009124:	444b      	add	r3, r9
 8009126:	106d      	asrs	r5, r5, #1
 8009128:	429d      	cmp	r5, r3
 800912a:	bf38      	it	cc
 800912c:	461d      	movcc	r5, r3
 800912e:	0553      	lsls	r3, r2, #21
 8009130:	d527      	bpl.n	8009182 <__ssputs_r+0x8e>
 8009132:	4629      	mov	r1, r5
 8009134:	f7fe fc1c 	bl	8007970 <_malloc_r>
 8009138:	4606      	mov	r6, r0
 800913a:	b360      	cbz	r0, 8009196 <__ssputs_r+0xa2>
 800913c:	6921      	ldr	r1, [r4, #16]
 800913e:	464a      	mov	r2, r9
 8009140:	f000 fa9c 	bl	800967c <memcpy>
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800914a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	6126      	str	r6, [r4, #16]
 8009152:	6165      	str	r5, [r4, #20]
 8009154:	444e      	add	r6, r9
 8009156:	eba5 0509 	sub.w	r5, r5, r9
 800915a:	6026      	str	r6, [r4, #0]
 800915c:	60a5      	str	r5, [r4, #8]
 800915e:	463e      	mov	r6, r7
 8009160:	42be      	cmp	r6, r7
 8009162:	d900      	bls.n	8009166 <__ssputs_r+0x72>
 8009164:	463e      	mov	r6, r7
 8009166:	6820      	ldr	r0, [r4, #0]
 8009168:	4632      	mov	r2, r6
 800916a:	4641      	mov	r1, r8
 800916c:	f000 fa28 	bl	80095c0 <memmove>
 8009170:	68a3      	ldr	r3, [r4, #8]
 8009172:	1b9b      	subs	r3, r3, r6
 8009174:	60a3      	str	r3, [r4, #8]
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	4433      	add	r3, r6
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	2000      	movs	r0, #0
 800917e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009182:	462a      	mov	r2, r5
 8009184:	f000 fe0d 	bl	8009da2 <_realloc_r>
 8009188:	4606      	mov	r6, r0
 800918a:	2800      	cmp	r0, #0
 800918c:	d1e0      	bne.n	8009150 <__ssputs_r+0x5c>
 800918e:	6921      	ldr	r1, [r4, #16]
 8009190:	4650      	mov	r0, sl
 8009192:	f7fe fb79 	bl	8007888 <_free_r>
 8009196:	230c      	movs	r3, #12
 8009198:	f8ca 3000 	str.w	r3, [sl]
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e7e9      	b.n	800917e <__ssputs_r+0x8a>
	...

080091ac <_svfiprintf_r>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	4698      	mov	r8, r3
 80091b2:	898b      	ldrh	r3, [r1, #12]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	b09d      	sub	sp, #116	@ 0x74
 80091b8:	4607      	mov	r7, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	4614      	mov	r4, r2
 80091be:	d510      	bpl.n	80091e2 <_svfiprintf_r+0x36>
 80091c0:	690b      	ldr	r3, [r1, #16]
 80091c2:	b973      	cbnz	r3, 80091e2 <_svfiprintf_r+0x36>
 80091c4:	2140      	movs	r1, #64	@ 0x40
 80091c6:	f7fe fbd3 	bl	8007970 <_malloc_r>
 80091ca:	6028      	str	r0, [r5, #0]
 80091cc:	6128      	str	r0, [r5, #16]
 80091ce:	b930      	cbnz	r0, 80091de <_svfiprintf_r+0x32>
 80091d0:	230c      	movs	r3, #12
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	b01d      	add	sp, #116	@ 0x74
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	2340      	movs	r3, #64	@ 0x40
 80091e0:	616b      	str	r3, [r5, #20]
 80091e2:	2300      	movs	r3, #0
 80091e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e6:	2320      	movs	r3, #32
 80091e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f0:	2330      	movs	r3, #48	@ 0x30
 80091f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009390 <_svfiprintf_r+0x1e4>
 80091f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091fa:	f04f 0901 	mov.w	r9, #1
 80091fe:	4623      	mov	r3, r4
 8009200:	469a      	mov	sl, r3
 8009202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009206:	b10a      	cbz	r2, 800920c <_svfiprintf_r+0x60>
 8009208:	2a25      	cmp	r2, #37	@ 0x25
 800920a:	d1f9      	bne.n	8009200 <_svfiprintf_r+0x54>
 800920c:	ebba 0b04 	subs.w	fp, sl, r4
 8009210:	d00b      	beq.n	800922a <_svfiprintf_r+0x7e>
 8009212:	465b      	mov	r3, fp
 8009214:	4622      	mov	r2, r4
 8009216:	4629      	mov	r1, r5
 8009218:	4638      	mov	r0, r7
 800921a:	f7ff ff6b 	bl	80090f4 <__ssputs_r>
 800921e:	3001      	adds	r0, #1
 8009220:	f000 80a7 	beq.w	8009372 <_svfiprintf_r+0x1c6>
 8009224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009226:	445a      	add	r2, fp
 8009228:	9209      	str	r2, [sp, #36]	@ 0x24
 800922a:	f89a 3000 	ldrb.w	r3, [sl]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 809f 	beq.w	8009372 <_svfiprintf_r+0x1c6>
 8009234:	2300      	movs	r3, #0
 8009236:	f04f 32ff 	mov.w	r2, #4294967295
 800923a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800923e:	f10a 0a01 	add.w	sl, sl, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	9307      	str	r3, [sp, #28]
 8009246:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800924a:	931a      	str	r3, [sp, #104]	@ 0x68
 800924c:	4654      	mov	r4, sl
 800924e:	2205      	movs	r2, #5
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	484e      	ldr	r0, [pc, #312]	@ (8009390 <_svfiprintf_r+0x1e4>)
 8009256:	f7f6 ffdb 	bl	8000210 <memchr>
 800925a:	9a04      	ldr	r2, [sp, #16]
 800925c:	b9d8      	cbnz	r0, 8009296 <_svfiprintf_r+0xea>
 800925e:	06d0      	lsls	r0, r2, #27
 8009260:	bf44      	itt	mi
 8009262:	2320      	movmi	r3, #32
 8009264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009268:	0711      	lsls	r1, r2, #28
 800926a:	bf44      	itt	mi
 800926c:	232b      	movmi	r3, #43	@ 0x2b
 800926e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009272:	f89a 3000 	ldrb.w	r3, [sl]
 8009276:	2b2a      	cmp	r3, #42	@ 0x2a
 8009278:	d015      	beq.n	80092a6 <_svfiprintf_r+0xfa>
 800927a:	9a07      	ldr	r2, [sp, #28]
 800927c:	4654      	mov	r4, sl
 800927e:	2000      	movs	r0, #0
 8009280:	f04f 0c0a 	mov.w	ip, #10
 8009284:	4621      	mov	r1, r4
 8009286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928a:	3b30      	subs	r3, #48	@ 0x30
 800928c:	2b09      	cmp	r3, #9
 800928e:	d94b      	bls.n	8009328 <_svfiprintf_r+0x17c>
 8009290:	b1b0      	cbz	r0, 80092c0 <_svfiprintf_r+0x114>
 8009292:	9207      	str	r2, [sp, #28]
 8009294:	e014      	b.n	80092c0 <_svfiprintf_r+0x114>
 8009296:	eba0 0308 	sub.w	r3, r0, r8
 800929a:	fa09 f303 	lsl.w	r3, r9, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	46a2      	mov	sl, r4
 80092a4:	e7d2      	b.n	800924c <_svfiprintf_r+0xa0>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	1d19      	adds	r1, r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	9103      	str	r1, [sp, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	bfbb      	ittet	lt
 80092b2:	425b      	neglt	r3, r3
 80092b4:	f042 0202 	orrlt.w	r2, r2, #2
 80092b8:	9307      	strge	r3, [sp, #28]
 80092ba:	9307      	strlt	r3, [sp, #28]
 80092bc:	bfb8      	it	lt
 80092be:	9204      	strlt	r2, [sp, #16]
 80092c0:	7823      	ldrb	r3, [r4, #0]
 80092c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80092c4:	d10a      	bne.n	80092dc <_svfiprintf_r+0x130>
 80092c6:	7863      	ldrb	r3, [r4, #1]
 80092c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ca:	d132      	bne.n	8009332 <_svfiprintf_r+0x186>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	9203      	str	r2, [sp, #12]
 80092d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092d8:	3402      	adds	r4, #2
 80092da:	9305      	str	r3, [sp, #20]
 80092dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093a0 <_svfiprintf_r+0x1f4>
 80092e0:	7821      	ldrb	r1, [r4, #0]
 80092e2:	2203      	movs	r2, #3
 80092e4:	4650      	mov	r0, sl
 80092e6:	f7f6 ff93 	bl	8000210 <memchr>
 80092ea:	b138      	cbz	r0, 80092fc <_svfiprintf_r+0x150>
 80092ec:	9b04      	ldr	r3, [sp, #16]
 80092ee:	eba0 000a 	sub.w	r0, r0, sl
 80092f2:	2240      	movs	r2, #64	@ 0x40
 80092f4:	4082      	lsls	r2, r0
 80092f6:	4313      	orrs	r3, r2
 80092f8:	3401      	adds	r4, #1
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009300:	4824      	ldr	r0, [pc, #144]	@ (8009394 <_svfiprintf_r+0x1e8>)
 8009302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009306:	2206      	movs	r2, #6
 8009308:	f7f6 ff82 	bl	8000210 <memchr>
 800930c:	2800      	cmp	r0, #0
 800930e:	d036      	beq.n	800937e <_svfiprintf_r+0x1d2>
 8009310:	4b21      	ldr	r3, [pc, #132]	@ (8009398 <_svfiprintf_r+0x1ec>)
 8009312:	bb1b      	cbnz	r3, 800935c <_svfiprintf_r+0x1b0>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	3307      	adds	r3, #7
 8009318:	f023 0307 	bic.w	r3, r3, #7
 800931c:	3308      	adds	r3, #8
 800931e:	9303      	str	r3, [sp, #12]
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	4433      	add	r3, r6
 8009324:	9309      	str	r3, [sp, #36]	@ 0x24
 8009326:	e76a      	b.n	80091fe <_svfiprintf_r+0x52>
 8009328:	fb0c 3202 	mla	r2, ip, r2, r3
 800932c:	460c      	mov	r4, r1
 800932e:	2001      	movs	r0, #1
 8009330:	e7a8      	b.n	8009284 <_svfiprintf_r+0xd8>
 8009332:	2300      	movs	r3, #0
 8009334:	3401      	adds	r4, #1
 8009336:	9305      	str	r3, [sp, #20]
 8009338:	4619      	mov	r1, r3
 800933a:	f04f 0c0a 	mov.w	ip, #10
 800933e:	4620      	mov	r0, r4
 8009340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009344:	3a30      	subs	r2, #48	@ 0x30
 8009346:	2a09      	cmp	r2, #9
 8009348:	d903      	bls.n	8009352 <_svfiprintf_r+0x1a6>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0c6      	beq.n	80092dc <_svfiprintf_r+0x130>
 800934e:	9105      	str	r1, [sp, #20]
 8009350:	e7c4      	b.n	80092dc <_svfiprintf_r+0x130>
 8009352:	fb0c 2101 	mla	r1, ip, r1, r2
 8009356:	4604      	mov	r4, r0
 8009358:	2301      	movs	r3, #1
 800935a:	e7f0      	b.n	800933e <_svfiprintf_r+0x192>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	462a      	mov	r2, r5
 8009362:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <_svfiprintf_r+0x1f0>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4638      	mov	r0, r7
 8009368:	f7fc fbd8 	bl	8005b1c <_printf_float>
 800936c:	1c42      	adds	r2, r0, #1
 800936e:	4606      	mov	r6, r0
 8009370:	d1d6      	bne.n	8009320 <_svfiprintf_r+0x174>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	065b      	lsls	r3, r3, #25
 8009376:	f53f af2d 	bmi.w	80091d4 <_svfiprintf_r+0x28>
 800937a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800937c:	e72c      	b.n	80091d8 <_svfiprintf_r+0x2c>
 800937e:	ab03      	add	r3, sp, #12
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	462a      	mov	r2, r5
 8009384:	4b05      	ldr	r3, [pc, #20]	@ (800939c <_svfiprintf_r+0x1f0>)
 8009386:	a904      	add	r1, sp, #16
 8009388:	4638      	mov	r0, r7
 800938a:	f7fc fe5f 	bl	800604c <_printf_i>
 800938e:	e7ed      	b.n	800936c <_svfiprintf_r+0x1c0>
 8009390:	0800a9a1 	.word	0x0800a9a1
 8009394:	0800a9ab 	.word	0x0800a9ab
 8009398:	08005b1d 	.word	0x08005b1d
 800939c:	080090f5 	.word	0x080090f5
 80093a0:	0800a9a7 	.word	0x0800a9a7

080093a4 <__sflush_r>:
 80093a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	0716      	lsls	r6, r2, #28
 80093ae:	4605      	mov	r5, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	d454      	bmi.n	800945e <__sflush_r+0xba>
 80093b4:	684b      	ldr	r3, [r1, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	dc02      	bgt.n	80093c0 <__sflush_r+0x1c>
 80093ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd48      	ble.n	8009452 <__sflush_r+0xae>
 80093c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	d045      	beq.n	8009452 <__sflush_r+0xae>
 80093c6:	2300      	movs	r3, #0
 80093c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093cc:	682f      	ldr	r7, [r5, #0]
 80093ce:	6a21      	ldr	r1, [r4, #32]
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	d030      	beq.n	8009436 <__sflush_r+0x92>
 80093d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	0759      	lsls	r1, r3, #29
 80093da:	d505      	bpl.n	80093e8 <__sflush_r+0x44>
 80093dc:	6863      	ldr	r3, [r4, #4]
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093e2:	b10b      	cbz	r3, 80093e8 <__sflush_r+0x44>
 80093e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093e6:	1ad2      	subs	r2, r2, r3
 80093e8:	2300      	movs	r3, #0
 80093ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093ec:	6a21      	ldr	r1, [r4, #32]
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b0      	blx	r6
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	d106      	bne.n	8009406 <__sflush_r+0x62>
 80093f8:	6829      	ldr	r1, [r5, #0]
 80093fa:	291d      	cmp	r1, #29
 80093fc:	d82b      	bhi.n	8009456 <__sflush_r+0xb2>
 80093fe:	4a2a      	ldr	r2, [pc, #168]	@ (80094a8 <__sflush_r+0x104>)
 8009400:	410a      	asrs	r2, r1
 8009402:	07d6      	lsls	r6, r2, #31
 8009404:	d427      	bmi.n	8009456 <__sflush_r+0xb2>
 8009406:	2200      	movs	r2, #0
 8009408:	6062      	str	r2, [r4, #4]
 800940a:	04d9      	lsls	r1, r3, #19
 800940c:	6922      	ldr	r2, [r4, #16]
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	d504      	bpl.n	800941c <__sflush_r+0x78>
 8009412:	1c42      	adds	r2, r0, #1
 8009414:	d101      	bne.n	800941a <__sflush_r+0x76>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b903      	cbnz	r3, 800941c <__sflush_r+0x78>
 800941a:	6560      	str	r0, [r4, #84]	@ 0x54
 800941c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800941e:	602f      	str	r7, [r5, #0]
 8009420:	b1b9      	cbz	r1, 8009452 <__sflush_r+0xae>
 8009422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009426:	4299      	cmp	r1, r3
 8009428:	d002      	beq.n	8009430 <__sflush_r+0x8c>
 800942a:	4628      	mov	r0, r5
 800942c:	f7fe fa2c 	bl	8007888 <_free_r>
 8009430:	2300      	movs	r3, #0
 8009432:	6363      	str	r3, [r4, #52]	@ 0x34
 8009434:	e00d      	b.n	8009452 <__sflush_r+0xae>
 8009436:	2301      	movs	r3, #1
 8009438:	4628      	mov	r0, r5
 800943a:	47b0      	blx	r6
 800943c:	4602      	mov	r2, r0
 800943e:	1c50      	adds	r0, r2, #1
 8009440:	d1c9      	bne.n	80093d6 <__sflush_r+0x32>
 8009442:	682b      	ldr	r3, [r5, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0c6      	beq.n	80093d6 <__sflush_r+0x32>
 8009448:	2b1d      	cmp	r3, #29
 800944a:	d001      	beq.n	8009450 <__sflush_r+0xac>
 800944c:	2b16      	cmp	r3, #22
 800944e:	d11e      	bne.n	800948e <__sflush_r+0xea>
 8009450:	602f      	str	r7, [r5, #0]
 8009452:	2000      	movs	r0, #0
 8009454:	e022      	b.n	800949c <__sflush_r+0xf8>
 8009456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800945a:	b21b      	sxth	r3, r3
 800945c:	e01b      	b.n	8009496 <__sflush_r+0xf2>
 800945e:	690f      	ldr	r7, [r1, #16]
 8009460:	2f00      	cmp	r7, #0
 8009462:	d0f6      	beq.n	8009452 <__sflush_r+0xae>
 8009464:	0793      	lsls	r3, r2, #30
 8009466:	680e      	ldr	r6, [r1, #0]
 8009468:	bf08      	it	eq
 800946a:	694b      	ldreq	r3, [r1, #20]
 800946c:	600f      	str	r7, [r1, #0]
 800946e:	bf18      	it	ne
 8009470:	2300      	movne	r3, #0
 8009472:	eba6 0807 	sub.w	r8, r6, r7
 8009476:	608b      	str	r3, [r1, #8]
 8009478:	f1b8 0f00 	cmp.w	r8, #0
 800947c:	dde9      	ble.n	8009452 <__sflush_r+0xae>
 800947e:	6a21      	ldr	r1, [r4, #32]
 8009480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009482:	4643      	mov	r3, r8
 8009484:	463a      	mov	r2, r7
 8009486:	4628      	mov	r0, r5
 8009488:	47b0      	blx	r6
 800948a:	2800      	cmp	r0, #0
 800948c:	dc08      	bgt.n	80094a0 <__sflush_r+0xfc>
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a0:	4407      	add	r7, r0
 80094a2:	eba8 0800 	sub.w	r8, r8, r0
 80094a6:	e7e7      	b.n	8009478 <__sflush_r+0xd4>
 80094a8:	dfbffffe 	.word	0xdfbffffe

080094ac <_fflush_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	690b      	ldr	r3, [r1, #16]
 80094b0:	4605      	mov	r5, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	b913      	cbnz	r3, 80094bc <_fflush_r+0x10>
 80094b6:	2500      	movs	r5, #0
 80094b8:	4628      	mov	r0, r5
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	b118      	cbz	r0, 80094c6 <_fflush_r+0x1a>
 80094be:	6a03      	ldr	r3, [r0, #32]
 80094c0:	b90b      	cbnz	r3, 80094c6 <_fflush_r+0x1a>
 80094c2:	f7fd f983 	bl	80067cc <__sinit>
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0f3      	beq.n	80094b6 <_fflush_r+0xa>
 80094ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094d0:	07d0      	lsls	r0, r2, #31
 80094d2:	d404      	bmi.n	80094de <_fflush_r+0x32>
 80094d4:	0599      	lsls	r1, r3, #22
 80094d6:	d402      	bmi.n	80094de <_fflush_r+0x32>
 80094d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094da:	f7fd fb80 	bl	8006bde <__retarget_lock_acquire_recursive>
 80094de:	4628      	mov	r0, r5
 80094e0:	4621      	mov	r1, r4
 80094e2:	f7ff ff5f 	bl	80093a4 <__sflush_r>
 80094e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094e8:	07da      	lsls	r2, r3, #31
 80094ea:	4605      	mov	r5, r0
 80094ec:	d4e4      	bmi.n	80094b8 <_fflush_r+0xc>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	059b      	lsls	r3, r3, #22
 80094f2:	d4e1      	bmi.n	80094b8 <_fflush_r+0xc>
 80094f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094f6:	f7fd fb73 	bl	8006be0 <__retarget_lock_release_recursive>
 80094fa:	e7dd      	b.n	80094b8 <_fflush_r+0xc>

080094fc <__swhatbuf_r>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	460c      	mov	r4, r1
 8009500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009504:	2900      	cmp	r1, #0
 8009506:	b096      	sub	sp, #88	@ 0x58
 8009508:	4615      	mov	r5, r2
 800950a:	461e      	mov	r6, r3
 800950c:	da0d      	bge.n	800952a <__swhatbuf_r+0x2e>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009514:	f04f 0100 	mov.w	r1, #0
 8009518:	bf14      	ite	ne
 800951a:	2340      	movne	r3, #64	@ 0x40
 800951c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009520:	2000      	movs	r0, #0
 8009522:	6031      	str	r1, [r6, #0]
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	b016      	add	sp, #88	@ 0x58
 8009528:	bd70      	pop	{r4, r5, r6, pc}
 800952a:	466a      	mov	r2, sp
 800952c:	f000 f874 	bl	8009618 <_fstat_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	dbec      	blt.n	800950e <__swhatbuf_r+0x12>
 8009534:	9901      	ldr	r1, [sp, #4]
 8009536:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800953a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800953e:	4259      	negs	r1, r3
 8009540:	4159      	adcs	r1, r3
 8009542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009546:	e7eb      	b.n	8009520 <__swhatbuf_r+0x24>

08009548 <__smakebuf_r>:
 8009548:	898b      	ldrh	r3, [r1, #12]
 800954a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800954c:	079d      	lsls	r5, r3, #30
 800954e:	4606      	mov	r6, r0
 8009550:	460c      	mov	r4, r1
 8009552:	d507      	bpl.n	8009564 <__smakebuf_r+0x1c>
 8009554:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	6123      	str	r3, [r4, #16]
 800955c:	2301      	movs	r3, #1
 800955e:	6163      	str	r3, [r4, #20]
 8009560:	b003      	add	sp, #12
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009564:	ab01      	add	r3, sp, #4
 8009566:	466a      	mov	r2, sp
 8009568:	f7ff ffc8 	bl	80094fc <__swhatbuf_r>
 800956c:	9f00      	ldr	r7, [sp, #0]
 800956e:	4605      	mov	r5, r0
 8009570:	4639      	mov	r1, r7
 8009572:	4630      	mov	r0, r6
 8009574:	f7fe f9fc 	bl	8007970 <_malloc_r>
 8009578:	b948      	cbnz	r0, 800958e <__smakebuf_r+0x46>
 800957a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957e:	059a      	lsls	r2, r3, #22
 8009580:	d4ee      	bmi.n	8009560 <__smakebuf_r+0x18>
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	f043 0302 	orr.w	r3, r3, #2
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	e7e2      	b.n	8009554 <__smakebuf_r+0xc>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	6020      	str	r0, [r4, #0]
 8009592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	9b01      	ldr	r3, [sp, #4]
 800959a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800959e:	b15b      	cbz	r3, 80095b8 <__smakebuf_r+0x70>
 80095a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 f849 	bl	800963c <_isatty_r>
 80095aa:	b128      	cbz	r0, 80095b8 <__smakebuf_r+0x70>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	431d      	orrs	r5, r3
 80095bc:	81a5      	strh	r5, [r4, #12]
 80095be:	e7cf      	b.n	8009560 <__smakebuf_r+0x18>

080095c0 <memmove>:
 80095c0:	4288      	cmp	r0, r1
 80095c2:	b510      	push	{r4, lr}
 80095c4:	eb01 0402 	add.w	r4, r1, r2
 80095c8:	d902      	bls.n	80095d0 <memmove+0x10>
 80095ca:	4284      	cmp	r4, r0
 80095cc:	4623      	mov	r3, r4
 80095ce:	d807      	bhi.n	80095e0 <memmove+0x20>
 80095d0:	1e43      	subs	r3, r0, #1
 80095d2:	42a1      	cmp	r1, r4
 80095d4:	d008      	beq.n	80095e8 <memmove+0x28>
 80095d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095de:	e7f8      	b.n	80095d2 <memmove+0x12>
 80095e0:	4402      	add	r2, r0
 80095e2:	4601      	mov	r1, r0
 80095e4:	428a      	cmp	r2, r1
 80095e6:	d100      	bne.n	80095ea <memmove+0x2a>
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095f2:	e7f7      	b.n	80095e4 <memmove+0x24>

080095f4 <strncmp>:
 80095f4:	b510      	push	{r4, lr}
 80095f6:	b16a      	cbz	r2, 8009614 <strncmp+0x20>
 80095f8:	3901      	subs	r1, #1
 80095fa:	1884      	adds	r4, r0, r2
 80095fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009600:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009604:	429a      	cmp	r2, r3
 8009606:	d103      	bne.n	8009610 <strncmp+0x1c>
 8009608:	42a0      	cmp	r0, r4
 800960a:	d001      	beq.n	8009610 <strncmp+0x1c>
 800960c:	2a00      	cmp	r2, #0
 800960e:	d1f5      	bne.n	80095fc <strncmp+0x8>
 8009610:	1ad0      	subs	r0, r2, r3
 8009612:	bd10      	pop	{r4, pc}
 8009614:	4610      	mov	r0, r2
 8009616:	e7fc      	b.n	8009612 <strncmp+0x1e>

08009618 <_fstat_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	@ (8009638 <_fstat_r+0x20>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	f7f8 f859 	bl	80016dc <_fstat>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d102      	bne.n	8009634 <_fstat_r+0x1c>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	b103      	cbz	r3, 8009634 <_fstat_r+0x1c>
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	bf00      	nop
 8009638:	20000680 	.word	0x20000680

0800963c <_isatty_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d06      	ldr	r5, [pc, #24]	@ (8009658 <_isatty_r+0x1c>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	f7f8 f858 	bl	80016fc <_isatty>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_isatty_r+0x1a>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_isatty_r+0x1a>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20000680 	.word	0x20000680

0800965c <_sbrk_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d06      	ldr	r5, [pc, #24]	@ (8009678 <_sbrk_r+0x1c>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	f7f8 f860 	bl	800172c <_sbrk>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_sbrk_r+0x1a>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_sbrk_r+0x1a>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	20000680 	.word	0x20000680

0800967c <memcpy>:
 800967c:	440a      	add	r2, r1
 800967e:	4291      	cmp	r1, r2
 8009680:	f100 33ff 	add.w	r3, r0, #4294967295
 8009684:	d100      	bne.n	8009688 <memcpy+0xc>
 8009686:	4770      	bx	lr
 8009688:	b510      	push	{r4, lr}
 800968a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009692:	4291      	cmp	r1, r2
 8009694:	d1f9      	bne.n	800968a <memcpy+0xe>
 8009696:	bd10      	pop	{r4, pc}

08009698 <nan>:
 8009698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096a0 <nan+0x8>
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	00000000 	.word	0x00000000
 80096a4:	7ff80000 	.word	0x7ff80000

080096a8 <__assert_func>:
 80096a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096aa:	4614      	mov	r4, r2
 80096ac:	461a      	mov	r2, r3
 80096ae:	4b09      	ldr	r3, [pc, #36]	@ (80096d4 <__assert_func+0x2c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4605      	mov	r5, r0
 80096b4:	68d8      	ldr	r0, [r3, #12]
 80096b6:	b954      	cbnz	r4, 80096ce <__assert_func+0x26>
 80096b8:	4b07      	ldr	r3, [pc, #28]	@ (80096d8 <__assert_func+0x30>)
 80096ba:	461c      	mov	r4, r3
 80096bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096c0:	9100      	str	r1, [sp, #0]
 80096c2:	462b      	mov	r3, r5
 80096c4:	4905      	ldr	r1, [pc, #20]	@ (80096dc <__assert_func+0x34>)
 80096c6:	f000 fba7 	bl	8009e18 <fiprintf>
 80096ca:	f000 fbb7 	bl	8009e3c <abort>
 80096ce:	4b04      	ldr	r3, [pc, #16]	@ (80096e0 <__assert_func+0x38>)
 80096d0:	e7f4      	b.n	80096bc <__assert_func+0x14>
 80096d2:	bf00      	nop
 80096d4:	20000024 	.word	0x20000024
 80096d8:	0800a9f5 	.word	0x0800a9f5
 80096dc:	0800a9c7 	.word	0x0800a9c7
 80096e0:	0800a9ba 	.word	0x0800a9ba

080096e4 <_calloc_r>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	fba1 5402 	umull	r5, r4, r1, r2
 80096ea:	b93c      	cbnz	r4, 80096fc <_calloc_r+0x18>
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7fe f93f 	bl	8007970 <_malloc_r>
 80096f2:	4606      	mov	r6, r0
 80096f4:	b928      	cbnz	r0, 8009702 <_calloc_r+0x1e>
 80096f6:	2600      	movs	r6, #0
 80096f8:	4630      	mov	r0, r6
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	220c      	movs	r2, #12
 80096fe:	6002      	str	r2, [r0, #0]
 8009700:	e7f9      	b.n	80096f6 <_calloc_r+0x12>
 8009702:	462a      	mov	r2, r5
 8009704:	4621      	mov	r1, r4
 8009706:	f7fd f9ed 	bl	8006ae4 <memset>
 800970a:	e7f5      	b.n	80096f8 <_calloc_r+0x14>

0800970c <rshift>:
 800970c:	6903      	ldr	r3, [r0, #16]
 800970e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800971a:	f100 0414 	add.w	r4, r0, #20
 800971e:	dd45      	ble.n	80097ac <rshift+0xa0>
 8009720:	f011 011f 	ands.w	r1, r1, #31
 8009724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800972c:	d10c      	bne.n	8009748 <rshift+0x3c>
 800972e:	f100 0710 	add.w	r7, r0, #16
 8009732:	4629      	mov	r1, r5
 8009734:	42b1      	cmp	r1, r6
 8009736:	d334      	bcc.n	80097a2 <rshift+0x96>
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	1eea      	subs	r2, r5, #3
 800973e:	4296      	cmp	r6, r2
 8009740:	bf38      	it	cc
 8009742:	2300      	movcc	r3, #0
 8009744:	4423      	add	r3, r4
 8009746:	e015      	b.n	8009774 <rshift+0x68>
 8009748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800974c:	f1c1 0820 	rsb	r8, r1, #32
 8009750:	40cf      	lsrs	r7, r1
 8009752:	f105 0e04 	add.w	lr, r5, #4
 8009756:	46a1      	mov	r9, r4
 8009758:	4576      	cmp	r6, lr
 800975a:	46f4      	mov	ip, lr
 800975c:	d815      	bhi.n	800978a <rshift+0x7e>
 800975e:	1a9a      	subs	r2, r3, r2
 8009760:	0092      	lsls	r2, r2, #2
 8009762:	3a04      	subs	r2, #4
 8009764:	3501      	adds	r5, #1
 8009766:	42ae      	cmp	r6, r5
 8009768:	bf38      	it	cc
 800976a:	2200      	movcc	r2, #0
 800976c:	18a3      	adds	r3, r4, r2
 800976e:	50a7      	str	r7, [r4, r2]
 8009770:	b107      	cbz	r7, 8009774 <rshift+0x68>
 8009772:	3304      	adds	r3, #4
 8009774:	1b1a      	subs	r2, r3, r4
 8009776:	42a3      	cmp	r3, r4
 8009778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800977c:	bf08      	it	eq
 800977e:	2300      	moveq	r3, #0
 8009780:	6102      	str	r2, [r0, #16]
 8009782:	bf08      	it	eq
 8009784:	6143      	streq	r3, [r0, #20]
 8009786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978a:	f8dc c000 	ldr.w	ip, [ip]
 800978e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009792:	ea4c 0707 	orr.w	r7, ip, r7
 8009796:	f849 7b04 	str.w	r7, [r9], #4
 800979a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800979e:	40cf      	lsrs	r7, r1
 80097a0:	e7da      	b.n	8009758 <rshift+0x4c>
 80097a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80097a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80097aa:	e7c3      	b.n	8009734 <rshift+0x28>
 80097ac:	4623      	mov	r3, r4
 80097ae:	e7e1      	b.n	8009774 <rshift+0x68>

080097b0 <__hexdig_fun>:
 80097b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d802      	bhi.n	80097be <__hexdig_fun+0xe>
 80097b8:	3820      	subs	r0, #32
 80097ba:	b2c0      	uxtb	r0, r0
 80097bc:	4770      	bx	lr
 80097be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097c2:	2b05      	cmp	r3, #5
 80097c4:	d801      	bhi.n	80097ca <__hexdig_fun+0x1a>
 80097c6:	3847      	subs	r0, #71	@ 0x47
 80097c8:	e7f7      	b.n	80097ba <__hexdig_fun+0xa>
 80097ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	d801      	bhi.n	80097d6 <__hexdig_fun+0x26>
 80097d2:	3827      	subs	r0, #39	@ 0x27
 80097d4:	e7f1      	b.n	80097ba <__hexdig_fun+0xa>
 80097d6:	2000      	movs	r0, #0
 80097d8:	4770      	bx	lr
	...

080097dc <__gethex>:
 80097dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e0:	b085      	sub	sp, #20
 80097e2:	468a      	mov	sl, r1
 80097e4:	9302      	str	r3, [sp, #8]
 80097e6:	680b      	ldr	r3, [r1, #0]
 80097e8:	9001      	str	r0, [sp, #4]
 80097ea:	4690      	mov	r8, r2
 80097ec:	1c9c      	adds	r4, r3, #2
 80097ee:	46a1      	mov	r9, r4
 80097f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097f4:	2830      	cmp	r0, #48	@ 0x30
 80097f6:	d0fa      	beq.n	80097ee <__gethex+0x12>
 80097f8:	eba9 0303 	sub.w	r3, r9, r3
 80097fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009800:	f7ff ffd6 	bl	80097b0 <__hexdig_fun>
 8009804:	4605      	mov	r5, r0
 8009806:	2800      	cmp	r0, #0
 8009808:	d168      	bne.n	80098dc <__gethex+0x100>
 800980a:	49a0      	ldr	r1, [pc, #640]	@ (8009a8c <__gethex+0x2b0>)
 800980c:	2201      	movs	r2, #1
 800980e:	4648      	mov	r0, r9
 8009810:	f7ff fef0 	bl	80095f4 <strncmp>
 8009814:	4607      	mov	r7, r0
 8009816:	2800      	cmp	r0, #0
 8009818:	d167      	bne.n	80098ea <__gethex+0x10e>
 800981a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800981e:	4626      	mov	r6, r4
 8009820:	f7ff ffc6 	bl	80097b0 <__hexdig_fun>
 8009824:	2800      	cmp	r0, #0
 8009826:	d062      	beq.n	80098ee <__gethex+0x112>
 8009828:	4623      	mov	r3, r4
 800982a:	7818      	ldrb	r0, [r3, #0]
 800982c:	2830      	cmp	r0, #48	@ 0x30
 800982e:	4699      	mov	r9, r3
 8009830:	f103 0301 	add.w	r3, r3, #1
 8009834:	d0f9      	beq.n	800982a <__gethex+0x4e>
 8009836:	f7ff ffbb 	bl	80097b0 <__hexdig_fun>
 800983a:	fab0 f580 	clz	r5, r0
 800983e:	096d      	lsrs	r5, r5, #5
 8009840:	f04f 0b01 	mov.w	fp, #1
 8009844:	464a      	mov	r2, r9
 8009846:	4616      	mov	r6, r2
 8009848:	3201      	adds	r2, #1
 800984a:	7830      	ldrb	r0, [r6, #0]
 800984c:	f7ff ffb0 	bl	80097b0 <__hexdig_fun>
 8009850:	2800      	cmp	r0, #0
 8009852:	d1f8      	bne.n	8009846 <__gethex+0x6a>
 8009854:	498d      	ldr	r1, [pc, #564]	@ (8009a8c <__gethex+0x2b0>)
 8009856:	2201      	movs	r2, #1
 8009858:	4630      	mov	r0, r6
 800985a:	f7ff fecb 	bl	80095f4 <strncmp>
 800985e:	2800      	cmp	r0, #0
 8009860:	d13f      	bne.n	80098e2 <__gethex+0x106>
 8009862:	b944      	cbnz	r4, 8009876 <__gethex+0x9a>
 8009864:	1c74      	adds	r4, r6, #1
 8009866:	4622      	mov	r2, r4
 8009868:	4616      	mov	r6, r2
 800986a:	3201      	adds	r2, #1
 800986c:	7830      	ldrb	r0, [r6, #0]
 800986e:	f7ff ff9f 	bl	80097b0 <__hexdig_fun>
 8009872:	2800      	cmp	r0, #0
 8009874:	d1f8      	bne.n	8009868 <__gethex+0x8c>
 8009876:	1ba4      	subs	r4, r4, r6
 8009878:	00a7      	lsls	r7, r4, #2
 800987a:	7833      	ldrb	r3, [r6, #0]
 800987c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009880:	2b50      	cmp	r3, #80	@ 0x50
 8009882:	d13e      	bne.n	8009902 <__gethex+0x126>
 8009884:	7873      	ldrb	r3, [r6, #1]
 8009886:	2b2b      	cmp	r3, #43	@ 0x2b
 8009888:	d033      	beq.n	80098f2 <__gethex+0x116>
 800988a:	2b2d      	cmp	r3, #45	@ 0x2d
 800988c:	d034      	beq.n	80098f8 <__gethex+0x11c>
 800988e:	1c71      	adds	r1, r6, #1
 8009890:	2400      	movs	r4, #0
 8009892:	7808      	ldrb	r0, [r1, #0]
 8009894:	f7ff ff8c 	bl	80097b0 <__hexdig_fun>
 8009898:	1e43      	subs	r3, r0, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b18      	cmp	r3, #24
 800989e:	d830      	bhi.n	8009902 <__gethex+0x126>
 80098a0:	f1a0 0210 	sub.w	r2, r0, #16
 80098a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098a8:	f7ff ff82 	bl	80097b0 <__hexdig_fun>
 80098ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80098b0:	fa5f fc8c 	uxtb.w	ip, ip
 80098b4:	f1bc 0f18 	cmp.w	ip, #24
 80098b8:	f04f 030a 	mov.w	r3, #10
 80098bc:	d91e      	bls.n	80098fc <__gethex+0x120>
 80098be:	b104      	cbz	r4, 80098c2 <__gethex+0xe6>
 80098c0:	4252      	negs	r2, r2
 80098c2:	4417      	add	r7, r2
 80098c4:	f8ca 1000 	str.w	r1, [sl]
 80098c8:	b1ed      	cbz	r5, 8009906 <__gethex+0x12a>
 80098ca:	f1bb 0f00 	cmp.w	fp, #0
 80098ce:	bf0c      	ite	eq
 80098d0:	2506      	moveq	r5, #6
 80098d2:	2500      	movne	r5, #0
 80098d4:	4628      	mov	r0, r5
 80098d6:	b005      	add	sp, #20
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	2500      	movs	r5, #0
 80098de:	462c      	mov	r4, r5
 80098e0:	e7b0      	b.n	8009844 <__gethex+0x68>
 80098e2:	2c00      	cmp	r4, #0
 80098e4:	d1c7      	bne.n	8009876 <__gethex+0x9a>
 80098e6:	4627      	mov	r7, r4
 80098e8:	e7c7      	b.n	800987a <__gethex+0x9e>
 80098ea:	464e      	mov	r6, r9
 80098ec:	462f      	mov	r7, r5
 80098ee:	2501      	movs	r5, #1
 80098f0:	e7c3      	b.n	800987a <__gethex+0x9e>
 80098f2:	2400      	movs	r4, #0
 80098f4:	1cb1      	adds	r1, r6, #2
 80098f6:	e7cc      	b.n	8009892 <__gethex+0xb6>
 80098f8:	2401      	movs	r4, #1
 80098fa:	e7fb      	b.n	80098f4 <__gethex+0x118>
 80098fc:	fb03 0002 	mla	r0, r3, r2, r0
 8009900:	e7ce      	b.n	80098a0 <__gethex+0xc4>
 8009902:	4631      	mov	r1, r6
 8009904:	e7de      	b.n	80098c4 <__gethex+0xe8>
 8009906:	eba6 0309 	sub.w	r3, r6, r9
 800990a:	3b01      	subs	r3, #1
 800990c:	4629      	mov	r1, r5
 800990e:	2b07      	cmp	r3, #7
 8009910:	dc0a      	bgt.n	8009928 <__gethex+0x14c>
 8009912:	9801      	ldr	r0, [sp, #4]
 8009914:	f7fe f8b8 	bl	8007a88 <_Balloc>
 8009918:	4604      	mov	r4, r0
 800991a:	b940      	cbnz	r0, 800992e <__gethex+0x152>
 800991c:	4b5c      	ldr	r3, [pc, #368]	@ (8009a90 <__gethex+0x2b4>)
 800991e:	4602      	mov	r2, r0
 8009920:	21e4      	movs	r1, #228	@ 0xe4
 8009922:	485c      	ldr	r0, [pc, #368]	@ (8009a94 <__gethex+0x2b8>)
 8009924:	f7ff fec0 	bl	80096a8 <__assert_func>
 8009928:	3101      	adds	r1, #1
 800992a:	105b      	asrs	r3, r3, #1
 800992c:	e7ef      	b.n	800990e <__gethex+0x132>
 800992e:	f100 0a14 	add.w	sl, r0, #20
 8009932:	2300      	movs	r3, #0
 8009934:	4655      	mov	r5, sl
 8009936:	469b      	mov	fp, r3
 8009938:	45b1      	cmp	r9, r6
 800993a:	d337      	bcc.n	80099ac <__gethex+0x1d0>
 800993c:	f845 bb04 	str.w	fp, [r5], #4
 8009940:	eba5 050a 	sub.w	r5, r5, sl
 8009944:	10ad      	asrs	r5, r5, #2
 8009946:	6125      	str	r5, [r4, #16]
 8009948:	4658      	mov	r0, fp
 800994a:	f7fe f98f 	bl	8007c6c <__hi0bits>
 800994e:	016d      	lsls	r5, r5, #5
 8009950:	f8d8 6000 	ldr.w	r6, [r8]
 8009954:	1a2d      	subs	r5, r5, r0
 8009956:	42b5      	cmp	r5, r6
 8009958:	dd54      	ble.n	8009a04 <__gethex+0x228>
 800995a:	1bad      	subs	r5, r5, r6
 800995c:	4629      	mov	r1, r5
 800995e:	4620      	mov	r0, r4
 8009960:	f7fe fd23 	bl	80083aa <__any_on>
 8009964:	4681      	mov	r9, r0
 8009966:	b178      	cbz	r0, 8009988 <__gethex+0x1ac>
 8009968:	1e6b      	subs	r3, r5, #1
 800996a:	1159      	asrs	r1, r3, #5
 800996c:	f003 021f 	and.w	r2, r3, #31
 8009970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009974:	f04f 0901 	mov.w	r9, #1
 8009978:	fa09 f202 	lsl.w	r2, r9, r2
 800997c:	420a      	tst	r2, r1
 800997e:	d003      	beq.n	8009988 <__gethex+0x1ac>
 8009980:	454b      	cmp	r3, r9
 8009982:	dc36      	bgt.n	80099f2 <__gethex+0x216>
 8009984:	f04f 0902 	mov.w	r9, #2
 8009988:	4629      	mov	r1, r5
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff febe 	bl	800970c <rshift>
 8009990:	442f      	add	r7, r5
 8009992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009996:	42bb      	cmp	r3, r7
 8009998:	da42      	bge.n	8009a20 <__gethex+0x244>
 800999a:	9801      	ldr	r0, [sp, #4]
 800999c:	4621      	mov	r1, r4
 800999e:	f7fe f8b3 	bl	8007b08 <_Bfree>
 80099a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099a4:	2300      	movs	r3, #0
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	25a3      	movs	r5, #163	@ 0xa3
 80099aa:	e793      	b.n	80098d4 <__gethex+0xf8>
 80099ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80099b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80099b2:	d012      	beq.n	80099da <__gethex+0x1fe>
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d104      	bne.n	80099c2 <__gethex+0x1e6>
 80099b8:	f845 bb04 	str.w	fp, [r5], #4
 80099bc:	f04f 0b00 	mov.w	fp, #0
 80099c0:	465b      	mov	r3, fp
 80099c2:	7830      	ldrb	r0, [r6, #0]
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	f7ff fef3 	bl	80097b0 <__hexdig_fun>
 80099ca:	9b03      	ldr	r3, [sp, #12]
 80099cc:	f000 000f 	and.w	r0, r0, #15
 80099d0:	4098      	lsls	r0, r3
 80099d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80099d6:	3304      	adds	r3, #4
 80099d8:	e7ae      	b.n	8009938 <__gethex+0x15c>
 80099da:	45b1      	cmp	r9, r6
 80099dc:	d8ea      	bhi.n	80099b4 <__gethex+0x1d8>
 80099de:	492b      	ldr	r1, [pc, #172]	@ (8009a8c <__gethex+0x2b0>)
 80099e0:	9303      	str	r3, [sp, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff fe05 	bl	80095f4 <strncmp>
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d1e1      	bne.n	80099b4 <__gethex+0x1d8>
 80099f0:	e7a2      	b.n	8009938 <__gethex+0x15c>
 80099f2:	1ea9      	subs	r1, r5, #2
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7fe fcd8 	bl	80083aa <__any_on>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d0c2      	beq.n	8009984 <__gethex+0x1a8>
 80099fe:	f04f 0903 	mov.w	r9, #3
 8009a02:	e7c1      	b.n	8009988 <__gethex+0x1ac>
 8009a04:	da09      	bge.n	8009a1a <__gethex+0x23e>
 8009a06:	1b75      	subs	r5, r6, r5
 8009a08:	4621      	mov	r1, r4
 8009a0a:	9801      	ldr	r0, [sp, #4]
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	f7fe fa93 	bl	8007f38 <__lshift>
 8009a12:	1b7f      	subs	r7, r7, r5
 8009a14:	4604      	mov	r4, r0
 8009a16:	f100 0a14 	add.w	sl, r0, #20
 8009a1a:	f04f 0900 	mov.w	r9, #0
 8009a1e:	e7b8      	b.n	8009992 <__gethex+0x1b6>
 8009a20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a24:	42bd      	cmp	r5, r7
 8009a26:	dd6f      	ble.n	8009b08 <__gethex+0x32c>
 8009a28:	1bed      	subs	r5, r5, r7
 8009a2a:	42ae      	cmp	r6, r5
 8009a2c:	dc34      	bgt.n	8009a98 <__gethex+0x2bc>
 8009a2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d022      	beq.n	8009a7c <__gethex+0x2a0>
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d024      	beq.n	8009a84 <__gethex+0x2a8>
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d115      	bne.n	8009a6a <__gethex+0x28e>
 8009a3e:	42ae      	cmp	r6, r5
 8009a40:	d113      	bne.n	8009a6a <__gethex+0x28e>
 8009a42:	2e01      	cmp	r6, #1
 8009a44:	d10b      	bne.n	8009a5e <__gethex+0x282>
 8009a46:	9a02      	ldr	r2, [sp, #8]
 8009a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	2301      	movs	r3, #1
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	f8ca 3000 	str.w	r3, [sl]
 8009a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a58:	2562      	movs	r5, #98	@ 0x62
 8009a5a:	601c      	str	r4, [r3, #0]
 8009a5c:	e73a      	b.n	80098d4 <__gethex+0xf8>
 8009a5e:	1e71      	subs	r1, r6, #1
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7fe fca2 	bl	80083aa <__any_on>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d1ed      	bne.n	8009a46 <__gethex+0x26a>
 8009a6a:	9801      	ldr	r0, [sp, #4]
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	f7fe f84b 	bl	8007b08 <_Bfree>
 8009a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a74:	2300      	movs	r3, #0
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	2550      	movs	r5, #80	@ 0x50
 8009a7a:	e72b      	b.n	80098d4 <__gethex+0xf8>
 8009a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1f3      	bne.n	8009a6a <__gethex+0x28e>
 8009a82:	e7e0      	b.n	8009a46 <__gethex+0x26a>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1dd      	bne.n	8009a46 <__gethex+0x26a>
 8009a8a:	e7ee      	b.n	8009a6a <__gethex+0x28e>
 8009a8c:	0800a848 	.word	0x0800a848
 8009a90:	0800a6dd 	.word	0x0800a6dd
 8009a94:	0800a9f6 	.word	0x0800a9f6
 8009a98:	1e6f      	subs	r7, r5, #1
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	d130      	bne.n	8009b02 <__gethex+0x326>
 8009aa0:	b127      	cbz	r7, 8009aac <__gethex+0x2d0>
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f7fe fc80 	bl	80083aa <__any_on>
 8009aaa:	4681      	mov	r9, r0
 8009aac:	117a      	asrs	r2, r7, #5
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ab4:	f007 071f 	and.w	r7, r7, #31
 8009ab8:	40bb      	lsls	r3, r7
 8009aba:	4213      	tst	r3, r2
 8009abc:	4629      	mov	r1, r5
 8009abe:	4620      	mov	r0, r4
 8009ac0:	bf18      	it	ne
 8009ac2:	f049 0902 	orrne.w	r9, r9, #2
 8009ac6:	f7ff fe21 	bl	800970c <rshift>
 8009aca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009ace:	1b76      	subs	r6, r6, r5
 8009ad0:	2502      	movs	r5, #2
 8009ad2:	f1b9 0f00 	cmp.w	r9, #0
 8009ad6:	d047      	beq.n	8009b68 <__gethex+0x38c>
 8009ad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d015      	beq.n	8009b0c <__gethex+0x330>
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d017      	beq.n	8009b14 <__gethex+0x338>
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d109      	bne.n	8009afc <__gethex+0x320>
 8009ae8:	f019 0f02 	tst.w	r9, #2
 8009aec:	d006      	beq.n	8009afc <__gethex+0x320>
 8009aee:	f8da 3000 	ldr.w	r3, [sl]
 8009af2:	ea49 0903 	orr.w	r9, r9, r3
 8009af6:	f019 0f01 	tst.w	r9, #1
 8009afa:	d10e      	bne.n	8009b1a <__gethex+0x33e>
 8009afc:	f045 0510 	orr.w	r5, r5, #16
 8009b00:	e032      	b.n	8009b68 <__gethex+0x38c>
 8009b02:	f04f 0901 	mov.w	r9, #1
 8009b06:	e7d1      	b.n	8009aac <__gethex+0x2d0>
 8009b08:	2501      	movs	r5, #1
 8009b0a:	e7e2      	b.n	8009ad2 <__gethex+0x2f6>
 8009b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b0e:	f1c3 0301 	rsb	r3, r3, #1
 8009b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0f0      	beq.n	8009afc <__gethex+0x320>
 8009b1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b1e:	f104 0314 	add.w	r3, r4, #20
 8009b22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b2a:	f04f 0c00 	mov.w	ip, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b38:	d01b      	beq.n	8009b72 <__gethex+0x396>
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	6002      	str	r2, [r0, #0]
 8009b3e:	2d02      	cmp	r5, #2
 8009b40:	f104 0314 	add.w	r3, r4, #20
 8009b44:	d13c      	bne.n	8009bc0 <__gethex+0x3e4>
 8009b46:	f8d8 2000 	ldr.w	r2, [r8]
 8009b4a:	3a01      	subs	r2, #1
 8009b4c:	42b2      	cmp	r2, r6
 8009b4e:	d109      	bne.n	8009b64 <__gethex+0x388>
 8009b50:	1171      	asrs	r1, r6, #5
 8009b52:	2201      	movs	r2, #1
 8009b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b58:	f006 061f 	and.w	r6, r6, #31
 8009b5c:	fa02 f606 	lsl.w	r6, r2, r6
 8009b60:	421e      	tst	r6, r3
 8009b62:	d13a      	bne.n	8009bda <__gethex+0x3fe>
 8009b64:	f045 0520 	orr.w	r5, r5, #32
 8009b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b6a:	601c      	str	r4, [r3, #0]
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	601f      	str	r7, [r3, #0]
 8009b70:	e6b0      	b.n	80098d4 <__gethex+0xf8>
 8009b72:	4299      	cmp	r1, r3
 8009b74:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b78:	d8d9      	bhi.n	8009b2e <__gethex+0x352>
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	459b      	cmp	fp, r3
 8009b7e:	db17      	blt.n	8009bb0 <__gethex+0x3d4>
 8009b80:	6861      	ldr	r1, [r4, #4]
 8009b82:	9801      	ldr	r0, [sp, #4]
 8009b84:	3101      	adds	r1, #1
 8009b86:	f7fd ff7f 	bl	8007a88 <_Balloc>
 8009b8a:	4681      	mov	r9, r0
 8009b8c:	b918      	cbnz	r0, 8009b96 <__gethex+0x3ba>
 8009b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf8 <__gethex+0x41c>)
 8009b90:	4602      	mov	r2, r0
 8009b92:	2184      	movs	r1, #132	@ 0x84
 8009b94:	e6c5      	b.n	8009922 <__gethex+0x146>
 8009b96:	6922      	ldr	r2, [r4, #16]
 8009b98:	3202      	adds	r2, #2
 8009b9a:	f104 010c 	add.w	r1, r4, #12
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	300c      	adds	r0, #12
 8009ba2:	f7ff fd6b 	bl	800967c <memcpy>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	9801      	ldr	r0, [sp, #4]
 8009baa:	f7fd ffad 	bl	8007b08 <_Bfree>
 8009bae:	464c      	mov	r4, r9
 8009bb0:	6923      	ldr	r3, [r4, #16]
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bb8:	6122      	str	r2, [r4, #16]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	615a      	str	r2, [r3, #20]
 8009bbe:	e7be      	b.n	8009b3e <__gethex+0x362>
 8009bc0:	6922      	ldr	r2, [r4, #16]
 8009bc2:	455a      	cmp	r2, fp
 8009bc4:	dd0b      	ble.n	8009bde <__gethex+0x402>
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f7ff fd9f 	bl	800970c <rshift>
 8009bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bd2:	3701      	adds	r7, #1
 8009bd4:	42bb      	cmp	r3, r7
 8009bd6:	f6ff aee0 	blt.w	800999a <__gethex+0x1be>
 8009bda:	2501      	movs	r5, #1
 8009bdc:	e7c2      	b.n	8009b64 <__gethex+0x388>
 8009bde:	f016 061f 	ands.w	r6, r6, #31
 8009be2:	d0fa      	beq.n	8009bda <__gethex+0x3fe>
 8009be4:	4453      	add	r3, sl
 8009be6:	f1c6 0620 	rsb	r6, r6, #32
 8009bea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bee:	f7fe f83d 	bl	8007c6c <__hi0bits>
 8009bf2:	42b0      	cmp	r0, r6
 8009bf4:	dbe7      	blt.n	8009bc6 <__gethex+0x3ea>
 8009bf6:	e7f0      	b.n	8009bda <__gethex+0x3fe>
 8009bf8:	0800a6dd 	.word	0x0800a6dd

08009bfc <L_shift>:
 8009bfc:	f1c2 0208 	rsb	r2, r2, #8
 8009c00:	0092      	lsls	r2, r2, #2
 8009c02:	b570      	push	{r4, r5, r6, lr}
 8009c04:	f1c2 0620 	rsb	r6, r2, #32
 8009c08:	6843      	ldr	r3, [r0, #4]
 8009c0a:	6804      	ldr	r4, [r0, #0]
 8009c0c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c10:	432c      	orrs	r4, r5
 8009c12:	40d3      	lsrs	r3, r2
 8009c14:	6004      	str	r4, [r0, #0]
 8009c16:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c1a:	4288      	cmp	r0, r1
 8009c1c:	d3f4      	bcc.n	8009c08 <L_shift+0xc>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}

08009c20 <__match>:
 8009c20:	b530      	push	{r4, r5, lr}
 8009c22:	6803      	ldr	r3, [r0, #0]
 8009c24:	3301      	adds	r3, #1
 8009c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c2a:	b914      	cbnz	r4, 8009c32 <__match+0x12>
 8009c2c:	6003      	str	r3, [r0, #0]
 8009c2e:	2001      	movs	r0, #1
 8009c30:	bd30      	pop	{r4, r5, pc}
 8009c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c3a:	2d19      	cmp	r5, #25
 8009c3c:	bf98      	it	ls
 8009c3e:	3220      	addls	r2, #32
 8009c40:	42a2      	cmp	r2, r4
 8009c42:	d0f0      	beq.n	8009c26 <__match+0x6>
 8009c44:	2000      	movs	r0, #0
 8009c46:	e7f3      	b.n	8009c30 <__match+0x10>

08009c48 <__hexnan>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	680b      	ldr	r3, [r1, #0]
 8009c4e:	6801      	ldr	r1, [r0, #0]
 8009c50:	115e      	asrs	r6, r3, #5
 8009c52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c56:	f013 031f 	ands.w	r3, r3, #31
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	bf18      	it	ne
 8009c5e:	3604      	addne	r6, #4
 8009c60:	2500      	movs	r5, #0
 8009c62:	1f37      	subs	r7, r6, #4
 8009c64:	4682      	mov	sl, r0
 8009c66:	4690      	mov	r8, r2
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c6e:	46b9      	mov	r9, r7
 8009c70:	463c      	mov	r4, r7
 8009c72:	9502      	str	r5, [sp, #8]
 8009c74:	46ab      	mov	fp, r5
 8009c76:	784a      	ldrb	r2, [r1, #1]
 8009c78:	1c4b      	adds	r3, r1, #1
 8009c7a:	9303      	str	r3, [sp, #12]
 8009c7c:	b342      	cbz	r2, 8009cd0 <__hexnan+0x88>
 8009c7e:	4610      	mov	r0, r2
 8009c80:	9105      	str	r1, [sp, #20]
 8009c82:	9204      	str	r2, [sp, #16]
 8009c84:	f7ff fd94 	bl	80097b0 <__hexdig_fun>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d151      	bne.n	8009d30 <__hexnan+0xe8>
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	9905      	ldr	r1, [sp, #20]
 8009c90:	2a20      	cmp	r2, #32
 8009c92:	d818      	bhi.n	8009cc6 <__hexnan+0x7e>
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	459b      	cmp	fp, r3
 8009c98:	dd13      	ble.n	8009cc2 <__hexnan+0x7a>
 8009c9a:	454c      	cmp	r4, r9
 8009c9c:	d206      	bcs.n	8009cac <__hexnan+0x64>
 8009c9e:	2d07      	cmp	r5, #7
 8009ca0:	dc04      	bgt.n	8009cac <__hexnan+0x64>
 8009ca2:	462a      	mov	r2, r5
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff ffa8 	bl	8009bfc <L_shift>
 8009cac:	4544      	cmp	r4, r8
 8009cae:	d952      	bls.n	8009d56 <__hexnan+0x10e>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f1a4 0904 	sub.w	r9, r4, #4
 8009cb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cba:	f8cd b008 	str.w	fp, [sp, #8]
 8009cbe:	464c      	mov	r4, r9
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	9903      	ldr	r1, [sp, #12]
 8009cc4:	e7d7      	b.n	8009c76 <__hexnan+0x2e>
 8009cc6:	2a29      	cmp	r2, #41	@ 0x29
 8009cc8:	d157      	bne.n	8009d7a <__hexnan+0x132>
 8009cca:	3102      	adds	r1, #2
 8009ccc:	f8ca 1000 	str.w	r1, [sl]
 8009cd0:	f1bb 0f00 	cmp.w	fp, #0
 8009cd4:	d051      	beq.n	8009d7a <__hexnan+0x132>
 8009cd6:	454c      	cmp	r4, r9
 8009cd8:	d206      	bcs.n	8009ce8 <__hexnan+0xa0>
 8009cda:	2d07      	cmp	r5, #7
 8009cdc:	dc04      	bgt.n	8009ce8 <__hexnan+0xa0>
 8009cde:	462a      	mov	r2, r5
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff ff8a 	bl	8009bfc <L_shift>
 8009ce8:	4544      	cmp	r4, r8
 8009cea:	d936      	bls.n	8009d5a <__hexnan+0x112>
 8009cec:	f1a8 0204 	sub.w	r2, r8, #4
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cf6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cfa:	429f      	cmp	r7, r3
 8009cfc:	d2f9      	bcs.n	8009cf2 <__hexnan+0xaa>
 8009cfe:	1b3b      	subs	r3, r7, r4
 8009d00:	f023 0303 	bic.w	r3, r3, #3
 8009d04:	3304      	adds	r3, #4
 8009d06:	3401      	adds	r4, #1
 8009d08:	3e03      	subs	r6, #3
 8009d0a:	42b4      	cmp	r4, r6
 8009d0c:	bf88      	it	hi
 8009d0e:	2304      	movhi	r3, #4
 8009d10:	4443      	add	r3, r8
 8009d12:	2200      	movs	r2, #0
 8009d14:	f843 2b04 	str.w	r2, [r3], #4
 8009d18:	429f      	cmp	r7, r3
 8009d1a:	d2fb      	bcs.n	8009d14 <__hexnan+0xcc>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	b91b      	cbnz	r3, 8009d28 <__hexnan+0xe0>
 8009d20:	4547      	cmp	r7, r8
 8009d22:	d128      	bne.n	8009d76 <__hexnan+0x12e>
 8009d24:	2301      	movs	r3, #1
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	2005      	movs	r0, #5
 8009d2a:	b007      	add	sp, #28
 8009d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d30:	3501      	adds	r5, #1
 8009d32:	2d08      	cmp	r5, #8
 8009d34:	f10b 0b01 	add.w	fp, fp, #1
 8009d38:	dd06      	ble.n	8009d48 <__hexnan+0x100>
 8009d3a:	4544      	cmp	r4, r8
 8009d3c:	d9c1      	bls.n	8009cc2 <__hexnan+0x7a>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d44:	2501      	movs	r5, #1
 8009d46:	3c04      	subs	r4, #4
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	f000 000f 	and.w	r0, r0, #15
 8009d4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d52:	6020      	str	r0, [r4, #0]
 8009d54:	e7b5      	b.n	8009cc2 <__hexnan+0x7a>
 8009d56:	2508      	movs	r5, #8
 8009d58:	e7b3      	b.n	8009cc2 <__hexnan+0x7a>
 8009d5a:	9b01      	ldr	r3, [sp, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0dd      	beq.n	8009d1c <__hexnan+0xd4>
 8009d60:	f1c3 0320 	rsb	r3, r3, #32
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295
 8009d68:	40da      	lsrs	r2, r3
 8009d6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d74:	e7d2      	b.n	8009d1c <__hexnan+0xd4>
 8009d76:	3f04      	subs	r7, #4
 8009d78:	e7d0      	b.n	8009d1c <__hexnan+0xd4>
 8009d7a:	2004      	movs	r0, #4
 8009d7c:	e7d5      	b.n	8009d2a <__hexnan+0xe2>

08009d7e <__ascii_mbtowc>:
 8009d7e:	b082      	sub	sp, #8
 8009d80:	b901      	cbnz	r1, 8009d84 <__ascii_mbtowc+0x6>
 8009d82:	a901      	add	r1, sp, #4
 8009d84:	b142      	cbz	r2, 8009d98 <__ascii_mbtowc+0x1a>
 8009d86:	b14b      	cbz	r3, 8009d9c <__ascii_mbtowc+0x1e>
 8009d88:	7813      	ldrb	r3, [r2, #0]
 8009d8a:	600b      	str	r3, [r1, #0]
 8009d8c:	7812      	ldrb	r2, [r2, #0]
 8009d8e:	1e10      	subs	r0, r2, #0
 8009d90:	bf18      	it	ne
 8009d92:	2001      	movne	r0, #1
 8009d94:	b002      	add	sp, #8
 8009d96:	4770      	bx	lr
 8009d98:	4610      	mov	r0, r2
 8009d9a:	e7fb      	b.n	8009d94 <__ascii_mbtowc+0x16>
 8009d9c:	f06f 0001 	mvn.w	r0, #1
 8009da0:	e7f8      	b.n	8009d94 <__ascii_mbtowc+0x16>

08009da2 <_realloc_r>:
 8009da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	4680      	mov	r8, r0
 8009da8:	4615      	mov	r5, r2
 8009daa:	460c      	mov	r4, r1
 8009dac:	b921      	cbnz	r1, 8009db8 <_realloc_r+0x16>
 8009dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009db2:	4611      	mov	r1, r2
 8009db4:	f7fd bddc 	b.w	8007970 <_malloc_r>
 8009db8:	b92a      	cbnz	r2, 8009dc6 <_realloc_r+0x24>
 8009dba:	f7fd fd65 	bl	8007888 <_free_r>
 8009dbe:	2400      	movs	r4, #0
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc6:	f000 f840 	bl	8009e4a <_malloc_usable_size_r>
 8009dca:	4285      	cmp	r5, r0
 8009dcc:	4606      	mov	r6, r0
 8009dce:	d802      	bhi.n	8009dd6 <_realloc_r+0x34>
 8009dd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dd4:	d8f4      	bhi.n	8009dc0 <_realloc_r+0x1e>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4640      	mov	r0, r8
 8009dda:	f7fd fdc9 	bl	8007970 <_malloc_r>
 8009dde:	4607      	mov	r7, r0
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d0ec      	beq.n	8009dbe <_realloc_r+0x1c>
 8009de4:	42b5      	cmp	r5, r6
 8009de6:	462a      	mov	r2, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	bf28      	it	cs
 8009dec:	4632      	movcs	r2, r6
 8009dee:	f7ff fc45 	bl	800967c <memcpy>
 8009df2:	4621      	mov	r1, r4
 8009df4:	4640      	mov	r0, r8
 8009df6:	f7fd fd47 	bl	8007888 <_free_r>
 8009dfa:	463c      	mov	r4, r7
 8009dfc:	e7e0      	b.n	8009dc0 <_realloc_r+0x1e>

08009dfe <__ascii_wctomb>:
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4608      	mov	r0, r1
 8009e02:	b141      	cbz	r1, 8009e16 <__ascii_wctomb+0x18>
 8009e04:	2aff      	cmp	r2, #255	@ 0xff
 8009e06:	d904      	bls.n	8009e12 <__ascii_wctomb+0x14>
 8009e08:	228a      	movs	r2, #138	@ 0x8a
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	4770      	bx	lr
 8009e12:	700a      	strb	r2, [r1, #0]
 8009e14:	2001      	movs	r0, #1
 8009e16:	4770      	bx	lr

08009e18 <fiprintf>:
 8009e18:	b40e      	push	{r1, r2, r3}
 8009e1a:	b503      	push	{r0, r1, lr}
 8009e1c:	4601      	mov	r1, r0
 8009e1e:	ab03      	add	r3, sp, #12
 8009e20:	4805      	ldr	r0, [pc, #20]	@ (8009e38 <fiprintf+0x20>)
 8009e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e26:	6800      	ldr	r0, [r0, #0]
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	f000 f83f 	bl	8009eac <_vfiprintf_r>
 8009e2e:	b002      	add	sp, #8
 8009e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e34:	b003      	add	sp, #12
 8009e36:	4770      	bx	lr
 8009e38:	20000024 	.word	0x20000024

08009e3c <abort>:
 8009e3c:	b508      	push	{r3, lr}
 8009e3e:	2006      	movs	r0, #6
 8009e40:	f000 f974 	bl	800a12c <raise>
 8009e44:	2001      	movs	r0, #1
 8009e46:	f7f7 fc15 	bl	8001674 <_exit>

08009e4a <_malloc_usable_size_r>:
 8009e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4e:	1f18      	subs	r0, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfbc      	itt	lt
 8009e54:	580b      	ldrlt	r3, [r1, r0]
 8009e56:	18c0      	addlt	r0, r0, r3
 8009e58:	4770      	bx	lr

08009e5a <__sfputc_r>:
 8009e5a:	6893      	ldr	r3, [r2, #8]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	b410      	push	{r4}
 8009e62:	6093      	str	r3, [r2, #8]
 8009e64:	da08      	bge.n	8009e78 <__sfputc_r+0x1e>
 8009e66:	6994      	ldr	r4, [r2, #24]
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	db01      	blt.n	8009e70 <__sfputc_r+0x16>
 8009e6c:	290a      	cmp	r1, #10
 8009e6e:	d103      	bne.n	8009e78 <__sfputc_r+0x1e>
 8009e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e74:	f7fc bda1 	b.w	80069ba <__swbuf_r>
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	1c58      	adds	r0, r3, #1
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	7019      	strb	r1, [r3, #0]
 8009e80:	4608      	mov	r0, r1
 8009e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <__sfputs_r>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	4614      	mov	r4, r2
 8009e90:	18d5      	adds	r5, r2, r3
 8009e92:	42ac      	cmp	r4, r5
 8009e94:	d101      	bne.n	8009e9a <__sfputs_r+0x12>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e007      	b.n	8009eaa <__sfputs_r+0x22>
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ffda 	bl	8009e5a <__sfputc_r>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	d1f3      	bne.n	8009e92 <__sfputs_r+0xa>
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eac <_vfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	460d      	mov	r5, r1
 8009eb2:	b09d      	sub	sp, #116	@ 0x74
 8009eb4:	4614      	mov	r4, r2
 8009eb6:	4698      	mov	r8, r3
 8009eb8:	4606      	mov	r6, r0
 8009eba:	b118      	cbz	r0, 8009ec4 <_vfiprintf_r+0x18>
 8009ebc:	6a03      	ldr	r3, [r0, #32]
 8009ebe:	b90b      	cbnz	r3, 8009ec4 <_vfiprintf_r+0x18>
 8009ec0:	f7fc fc84 	bl	80067cc <__sinit>
 8009ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ec6:	07d9      	lsls	r1, r3, #31
 8009ec8:	d405      	bmi.n	8009ed6 <_vfiprintf_r+0x2a>
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	059a      	lsls	r2, r3, #22
 8009ece:	d402      	bmi.n	8009ed6 <_vfiprintf_r+0x2a>
 8009ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ed2:	f7fc fe84 	bl	8006bde <__retarget_lock_acquire_recursive>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	071b      	lsls	r3, r3, #28
 8009eda:	d501      	bpl.n	8009ee0 <_vfiprintf_r+0x34>
 8009edc:	692b      	ldr	r3, [r5, #16]
 8009ede:	b99b      	cbnz	r3, 8009f08 <_vfiprintf_r+0x5c>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7fc fda8 	bl	8006a38 <__swsetup_r>
 8009ee8:	b170      	cbz	r0, 8009f08 <_vfiprintf_r+0x5c>
 8009eea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009eec:	07dc      	lsls	r4, r3, #31
 8009eee:	d504      	bpl.n	8009efa <_vfiprintf_r+0x4e>
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	b01d      	add	sp, #116	@ 0x74
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	89ab      	ldrh	r3, [r5, #12]
 8009efc:	0598      	lsls	r0, r3, #22
 8009efe:	d4f7      	bmi.n	8009ef0 <_vfiprintf_r+0x44>
 8009f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f02:	f7fc fe6d 	bl	8006be0 <__retarget_lock_release_recursive>
 8009f06:	e7f3      	b.n	8009ef0 <_vfiprintf_r+0x44>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f16:	2330      	movs	r3, #48	@ 0x30
 8009f18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0c8 <_vfiprintf_r+0x21c>
 8009f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f20:	f04f 0901 	mov.w	r9, #1
 8009f24:	4623      	mov	r3, r4
 8009f26:	469a      	mov	sl, r3
 8009f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f2c:	b10a      	cbz	r2, 8009f32 <_vfiprintf_r+0x86>
 8009f2e:	2a25      	cmp	r2, #37	@ 0x25
 8009f30:	d1f9      	bne.n	8009f26 <_vfiprintf_r+0x7a>
 8009f32:	ebba 0b04 	subs.w	fp, sl, r4
 8009f36:	d00b      	beq.n	8009f50 <_vfiprintf_r+0xa4>
 8009f38:	465b      	mov	r3, fp
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f7ff ffa2 	bl	8009e88 <__sfputs_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	f000 80a7 	beq.w	800a098 <_vfiprintf_r+0x1ec>
 8009f4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f4c:	445a      	add	r2, fp
 8009f4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 809f 	beq.w	800a098 <_vfiprintf_r+0x1ec>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f64:	f10a 0a01 	add.w	sl, sl, #1
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	9307      	str	r3, [sp, #28]
 8009f6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f70:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f72:	4654      	mov	r4, sl
 8009f74:	2205      	movs	r2, #5
 8009f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f7a:	4853      	ldr	r0, [pc, #332]	@ (800a0c8 <_vfiprintf_r+0x21c>)
 8009f7c:	f7f6 f948 	bl	8000210 <memchr>
 8009f80:	9a04      	ldr	r2, [sp, #16]
 8009f82:	b9d8      	cbnz	r0, 8009fbc <_vfiprintf_r+0x110>
 8009f84:	06d1      	lsls	r1, r2, #27
 8009f86:	bf44      	itt	mi
 8009f88:	2320      	movmi	r3, #32
 8009f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f8e:	0713      	lsls	r3, r2, #28
 8009f90:	bf44      	itt	mi
 8009f92:	232b      	movmi	r3, #43	@ 0x2b
 8009f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f98:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f9e:	d015      	beq.n	8009fcc <_vfiprintf_r+0x120>
 8009fa0:	9a07      	ldr	r2, [sp, #28]
 8009fa2:	4654      	mov	r4, sl
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	f04f 0c0a 	mov.w	ip, #10
 8009faa:	4621      	mov	r1, r4
 8009fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb0:	3b30      	subs	r3, #48	@ 0x30
 8009fb2:	2b09      	cmp	r3, #9
 8009fb4:	d94b      	bls.n	800a04e <_vfiprintf_r+0x1a2>
 8009fb6:	b1b0      	cbz	r0, 8009fe6 <_vfiprintf_r+0x13a>
 8009fb8:	9207      	str	r2, [sp, #28]
 8009fba:	e014      	b.n	8009fe6 <_vfiprintf_r+0x13a>
 8009fbc:	eba0 0308 	sub.w	r3, r0, r8
 8009fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	46a2      	mov	sl, r4
 8009fca:	e7d2      	b.n	8009f72 <_vfiprintf_r+0xc6>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	1d19      	adds	r1, r3, #4
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	9103      	str	r1, [sp, #12]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfbb      	ittet	lt
 8009fd8:	425b      	neglt	r3, r3
 8009fda:	f042 0202 	orrlt.w	r2, r2, #2
 8009fde:	9307      	strge	r3, [sp, #28]
 8009fe0:	9307      	strlt	r3, [sp, #28]
 8009fe2:	bfb8      	it	lt
 8009fe4:	9204      	strlt	r2, [sp, #16]
 8009fe6:	7823      	ldrb	r3, [r4, #0]
 8009fe8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fea:	d10a      	bne.n	800a002 <_vfiprintf_r+0x156>
 8009fec:	7863      	ldrb	r3, [r4, #1]
 8009fee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff0:	d132      	bne.n	800a058 <_vfiprintf_r+0x1ac>
 8009ff2:	9b03      	ldr	r3, [sp, #12]
 8009ff4:	1d1a      	adds	r2, r3, #4
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	9203      	str	r2, [sp, #12]
 8009ffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ffe:	3402      	adds	r4, #2
 800a000:	9305      	str	r3, [sp, #20]
 800a002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0d8 <_vfiprintf_r+0x22c>
 800a006:	7821      	ldrb	r1, [r4, #0]
 800a008:	2203      	movs	r2, #3
 800a00a:	4650      	mov	r0, sl
 800a00c:	f7f6 f900 	bl	8000210 <memchr>
 800a010:	b138      	cbz	r0, 800a022 <_vfiprintf_r+0x176>
 800a012:	9b04      	ldr	r3, [sp, #16]
 800a014:	eba0 000a 	sub.w	r0, r0, sl
 800a018:	2240      	movs	r2, #64	@ 0x40
 800a01a:	4082      	lsls	r2, r0
 800a01c:	4313      	orrs	r3, r2
 800a01e:	3401      	adds	r4, #1
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a026:	4829      	ldr	r0, [pc, #164]	@ (800a0cc <_vfiprintf_r+0x220>)
 800a028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a02c:	2206      	movs	r2, #6
 800a02e:	f7f6 f8ef 	bl	8000210 <memchr>
 800a032:	2800      	cmp	r0, #0
 800a034:	d03f      	beq.n	800a0b6 <_vfiprintf_r+0x20a>
 800a036:	4b26      	ldr	r3, [pc, #152]	@ (800a0d0 <_vfiprintf_r+0x224>)
 800a038:	bb1b      	cbnz	r3, 800a082 <_vfiprintf_r+0x1d6>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	3307      	adds	r3, #7
 800a03e:	f023 0307 	bic.w	r3, r3, #7
 800a042:	3308      	adds	r3, #8
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a048:	443b      	add	r3, r7
 800a04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a04c:	e76a      	b.n	8009f24 <_vfiprintf_r+0x78>
 800a04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a052:	460c      	mov	r4, r1
 800a054:	2001      	movs	r0, #1
 800a056:	e7a8      	b.n	8009faa <_vfiprintf_r+0xfe>
 800a058:	2300      	movs	r3, #0
 800a05a:	3401      	adds	r4, #1
 800a05c:	9305      	str	r3, [sp, #20]
 800a05e:	4619      	mov	r1, r3
 800a060:	f04f 0c0a 	mov.w	ip, #10
 800a064:	4620      	mov	r0, r4
 800a066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a06a:	3a30      	subs	r2, #48	@ 0x30
 800a06c:	2a09      	cmp	r2, #9
 800a06e:	d903      	bls.n	800a078 <_vfiprintf_r+0x1cc>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0c6      	beq.n	800a002 <_vfiprintf_r+0x156>
 800a074:	9105      	str	r1, [sp, #20]
 800a076:	e7c4      	b.n	800a002 <_vfiprintf_r+0x156>
 800a078:	fb0c 2101 	mla	r1, ip, r1, r2
 800a07c:	4604      	mov	r4, r0
 800a07e:	2301      	movs	r3, #1
 800a080:	e7f0      	b.n	800a064 <_vfiprintf_r+0x1b8>
 800a082:	ab03      	add	r3, sp, #12
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	462a      	mov	r2, r5
 800a088:	4b12      	ldr	r3, [pc, #72]	@ (800a0d4 <_vfiprintf_r+0x228>)
 800a08a:	a904      	add	r1, sp, #16
 800a08c:	4630      	mov	r0, r6
 800a08e:	f7fb fd45 	bl	8005b1c <_printf_float>
 800a092:	4607      	mov	r7, r0
 800a094:	1c78      	adds	r0, r7, #1
 800a096:	d1d6      	bne.n	800a046 <_vfiprintf_r+0x19a>
 800a098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a09a:	07d9      	lsls	r1, r3, #31
 800a09c:	d405      	bmi.n	800a0aa <_vfiprintf_r+0x1fe>
 800a09e:	89ab      	ldrh	r3, [r5, #12]
 800a0a0:	059a      	lsls	r2, r3, #22
 800a0a2:	d402      	bmi.n	800a0aa <_vfiprintf_r+0x1fe>
 800a0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0a6:	f7fc fd9b 	bl	8006be0 <__retarget_lock_release_recursive>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	065b      	lsls	r3, r3, #25
 800a0ae:	f53f af1f 	bmi.w	8009ef0 <_vfiprintf_r+0x44>
 800a0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0b4:	e71e      	b.n	8009ef4 <_vfiprintf_r+0x48>
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <_vfiprintf_r+0x228>)
 800a0be:	a904      	add	r1, sp, #16
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f7fb ffc3 	bl	800604c <_printf_i>
 800a0c6:	e7e4      	b.n	800a092 <_vfiprintf_r+0x1e6>
 800a0c8:	0800a9a1 	.word	0x0800a9a1
 800a0cc:	0800a9ab 	.word	0x0800a9ab
 800a0d0:	08005b1d 	.word	0x08005b1d
 800a0d4:	08009e89 	.word	0x08009e89
 800a0d8:	0800a9a7 	.word	0x0800a9a7

0800a0dc <_raise_r>:
 800a0dc:	291f      	cmp	r1, #31
 800a0de:	b538      	push	{r3, r4, r5, lr}
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	d904      	bls.n	800a0f0 <_raise_r+0x14>
 800a0e6:	2316      	movs	r3, #22
 800a0e8:	6003      	str	r3, [r0, #0]
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0f2:	b112      	cbz	r2, 800a0fa <_raise_r+0x1e>
 800a0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f8:	b94b      	cbnz	r3, 800a10e <_raise_r+0x32>
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f830 	bl	800a160 <_getpid_r>
 800a100:	4622      	mov	r2, r4
 800a102:	4601      	mov	r1, r0
 800a104:	4628      	mov	r0, r5
 800a106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10a:	f000 b817 	b.w	800a13c <_kill_r>
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d00a      	beq.n	800a128 <_raise_r+0x4c>
 800a112:	1c59      	adds	r1, r3, #1
 800a114:	d103      	bne.n	800a11e <_raise_r+0x42>
 800a116:	2316      	movs	r3, #22
 800a118:	6003      	str	r3, [r0, #0]
 800a11a:	2001      	movs	r0, #1
 800a11c:	e7e7      	b.n	800a0ee <_raise_r+0x12>
 800a11e:	2100      	movs	r1, #0
 800a120:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a124:	4620      	mov	r0, r4
 800a126:	4798      	blx	r3
 800a128:	2000      	movs	r0, #0
 800a12a:	e7e0      	b.n	800a0ee <_raise_r+0x12>

0800a12c <raise>:
 800a12c:	4b02      	ldr	r3, [pc, #8]	@ (800a138 <raise+0xc>)
 800a12e:	4601      	mov	r1, r0
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f7ff bfd3 	b.w	800a0dc <_raise_r>
 800a136:	bf00      	nop
 800a138:	20000024 	.word	0x20000024

0800a13c <_kill_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	@ (800a15c <_kill_r+0x20>)
 800a140:	2300      	movs	r3, #0
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	602b      	str	r3, [r5, #0]
 800a14a:	f7f7 fa83 	bl	8001654 <_kill>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d102      	bne.n	800a158 <_kill_r+0x1c>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b103      	cbz	r3, 800a158 <_kill_r+0x1c>
 800a156:	6023      	str	r3, [r4, #0]
 800a158:	bd38      	pop	{r3, r4, r5, pc}
 800a15a:	bf00      	nop
 800a15c:	20000680 	.word	0x20000680

0800a160 <_getpid_r>:
 800a160:	f7f7 ba70 	b.w	8001644 <_getpid>

0800a164 <_init>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr

0800a170 <_fini>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr
