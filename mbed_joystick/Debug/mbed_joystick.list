
mbed_joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019d0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001b94  08001b94  00002b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba4  08001ba4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ba4  08001ba4  00002ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bac  08001bac  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bac  08001bac  00002bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bb0  08001bb0  00002bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001bb4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001bc0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001bc0  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040af  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001078  00000000  00000000  000070eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00008168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000343  00000000  00000000  000085e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd58  00000000  00000000  0000892b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062c8  00000000  00000000  00028683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c21e0  00000000  00000000  0002e94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000106c  00000000  00000000  000f0b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f1bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001b7c 	.word	0x08001b7c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001b7c 	.word	0x08001b7c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa42 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f86c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8d8 	bl	80006b4 <MX_GPIO_Init>
	  //HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
	  //HAL_GPIO_TogglePin(Green_GPIO_Port, Green_Pin);
	  //HAL_GPIO_TogglePin(GPIOA, Blue_Pin);
	  	//HAL_GPIO_TogglePin(Red_GPIO_Port, Red_Pin);
	  	//HAL_Delay(500);
	  	if(HAL_GPIO_ReadPin(Joystick_Up_GPIO_Port, Joystick_Up_Pin) == GPIO_PIN_SET)
 8000504:	2110      	movs	r1, #16
 8000506:	4831      	ldr	r0, [pc, #196]	@ (80005cc <main+0xd8>)
 8000508:	f000 fd26 	bl	8000f58 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d10b      	bne.n	800052a <main+0x36>
	  	{
	  		HAL_GPIO_WritePin(GPIOA, Blue_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000518:	482c      	ldr	r0, [pc, #176]	@ (80005cc <main+0xd8>)
 800051a:	f000 fd35 	bl	8000f88 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	482b      	ldr	r0, [pc, #172]	@ (80005d0 <main+0xdc>)
 8000524:	f000 fd30 	bl	8000f88 <HAL_GPIO_WritePin>
 8000528:	e7ec      	b.n	8000504 <main+0x10>
	  	}
	  	else if(HAL_GPIO_ReadPin(GPIOB, Joystick_Down_Pin) == GPIO_PIN_SET)
 800052a:	2101      	movs	r1, #1
 800052c:	4829      	ldr	r0, [pc, #164]	@ (80005d4 <main+0xe0>)
 800052e:	f000 fd13 	bl	8000f58 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d110      	bne.n	800055a <main+0x66>
	  	{
	  		HAL_GPIO_WritePin(GPIOA, Blue_Pin, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800053e:	4823      	ldr	r0, [pc, #140]	@ (80005cc <main+0xd8>)
 8000540:	f000 fd22 	bl	8000f88 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	4821      	ldr	r0, [pc, #132]	@ (80005d0 <main+0xdc>)
 800054a:	f000 fd1d 	bl	8000f88 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2110      	movs	r1, #16
 8000552:	4820      	ldr	r0, [pc, #128]	@ (80005d4 <main+0xe0>)
 8000554:	f000 fd18 	bl	8000f88 <HAL_GPIO_WritePin>
 8000558:	e7d4      	b.n	8000504 <main+0x10>
	  	}
	  	else if(HAL_GPIO_ReadPin(GPIOC, Joystick_Right_Pin) == GPIO_PIN_SET)
 800055a:	2101      	movs	r1, #1
 800055c:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <main+0xdc>)
 800055e:	f000 fcfb 	bl	8000f58 <HAL_GPIO_ReadPin>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d105      	bne.n	8000574 <main+0x80>
	  	{
	  		HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <main+0xe0>)
 800056e:	f000 fd0b 	bl	8000f88 <HAL_GPIO_WritePin>
 8000572:	e7c7      	b.n	8000504 <main+0x10>
	  	}
	  	else if(HAL_GPIO_ReadPin(GPIOC, Joystick_Left_Pin) == GPIO_PIN_SET)
 8000574:	2102      	movs	r1, #2
 8000576:	4816      	ldr	r0, [pc, #88]	@ (80005d0 <main+0xdc>)
 8000578:	f000 fcee 	bl	8000f58 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <main+0x9c>
	  	{
	  		HAL_GPIO_WritePin(GPIOA, Blue_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000588:	4810      	ldr	r0, [pc, #64]	@ (80005cc <main+0xd8>)
 800058a:	f000 fcfd 	bl	8000f88 <HAL_GPIO_WritePin>
 800058e:	e7b9      	b.n	8000504 <main+0x10>
	  	}
	  	else if(HAL_GPIO_ReadPin(GPIOB, Joystick_Centre_Pin) == GPIO_PIN_SET)
 8000590:	2120      	movs	r1, #32
 8000592:	4810      	ldr	r0, [pc, #64]	@ (80005d4 <main+0xe0>)
 8000594:	f000 fce0 	bl	8000f58 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d105      	bne.n	80005aa <main+0xb6>
	  	{
	  		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2180      	movs	r1, #128	@ 0x80
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <main+0xdc>)
 80005a4:	f000 fcf0 	bl	8000f88 <HAL_GPIO_WritePin>
 80005a8:	e7ac      	b.n	8000504 <main+0x10>
	  	}
	  	else
	  	{
	  		HAL_GPIO_WritePin(GPIOA, Blue_Pin, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	4806      	ldr	r0, [pc, #24]	@ (80005cc <main+0xd8>)
 80005b2:	f000 fce9 	bl	8000f88 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2180      	movs	r1, #128	@ 0x80
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <main+0xdc>)
 80005bc:	f000 fce4 	bl	8000f88 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2110      	movs	r1, #16
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <main+0xe0>)
 80005c6:	f000 fcdf 	bl	8000f88 <HAL_GPIO_WritePin>
	  	if(HAL_GPIO_ReadPin(Joystick_Up_GPIO_Port, Joystick_Up_Pin) == GPIO_PIN_SET)
 80005ca:	e79b      	b.n	8000504 <main+0x10>
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020800 	.word	0x40020800
 80005d4:	40020400 	.word	0x40020400

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	@ 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fa9c 	bl	8001b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <SystemClock_Config+0xd4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <SystemClock_Config+0xd8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd8>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064c:	2310      	movs	r3, #16
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000656:	2304      	movs	r3, #4
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ffbe 	bl	80015e8 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000672:	f000 f8eb 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fc92 	bl	8000fbc <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800069e:	f000 f8d5 	bl	800084c <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b5b      	ldr	r3, [pc, #364]	@ (800083c <MX_GPIO_Init+0x188>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a5a      	ldr	r2, [pc, #360]	@ (800083c <MX_GPIO_Init+0x188>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b58      	ldr	r3, [pc, #352]	@ (800083c <MX_GPIO_Init+0x188>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b54      	ldr	r3, [pc, #336]	@ (800083c <MX_GPIO_Init+0x188>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a53      	ldr	r2, [pc, #332]	@ (800083c <MX_GPIO_Init+0x188>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b51      	ldr	r3, [pc, #324]	@ (800083c <MX_GPIO_Init+0x188>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b4d      	ldr	r3, [pc, #308]	@ (800083c <MX_GPIO_Init+0x188>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a4c      	ldr	r2, [pc, #304]	@ (800083c <MX_GPIO_Init+0x188>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b4a      	ldr	r3, [pc, #296]	@ (800083c <MX_GPIO_Init+0x188>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b46      	ldr	r3, [pc, #280]	@ (800083c <MX_GPIO_Init+0x188>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a45      	ldr	r2, [pc, #276]	@ (800083c <MX_GPIO_Init+0x188>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <MX_GPIO_Init+0x188>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Blue_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <MX_GPIO_Init+0x18c>)
 8000742:	f000 fc21 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	483e      	ldr	r0, [pc, #248]	@ (8000844 <MX_GPIO_Init+0x190>)
 800074c:	f000 fc1c 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2110      	movs	r1, #16
 8000754:	483c      	ldr	r0, [pc, #240]	@ (8000848 <MX_GPIO_Init+0x194>)
 8000756:	f000 fc17 	bl	8000f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4834      	ldr	r0, [pc, #208]	@ (8000844 <MX_GPIO_Init+0x190>)
 8000772:	f000 fa5d 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Right_Pin Joystick_Left_Pin */
  GPIO_InitStruct.Pin = Joystick_Right_Pin|Joystick_Left_Pin;
 8000776:	2303      	movs	r3, #3
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	482e      	ldr	r0, [pc, #184]	@ (8000844 <MX_GPIO_Init+0x190>)
 800078a:	f000 fa51 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800078e:	230c      	movs	r3, #12
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800079e:	2307      	movs	r3, #7
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4825      	ldr	r0, [pc, #148]	@ (8000840 <MX_GPIO_Init+0x18c>)
 80007aa:	f000 fa41 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Joystick_Up_Pin */
  GPIO_InitStruct.Pin = Joystick_Up_Pin;
 80007ae:	2310      	movs	r3, #16
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Joystick_Up_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481f      	ldr	r0, [pc, #124]	@ (8000840 <MX_GPIO_Init+0x18c>)
 80007c2:	f000 fa35 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Blue_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Blue_Pin;
 80007c6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4818      	ldr	r0, [pc, #96]	@ (8000840 <MX_GPIO_Init+0x18c>)
 80007e0:	f000 fa26 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Down_Pin Joystick_Centre_Pin */
  GPIO_InitStruct.Pin = Joystick_Down_Pin|Joystick_Centre_Pin;
 80007e4:	2321      	movs	r3, #33	@ 0x21
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	@ (8000848 <MX_GPIO_Init+0x194>)
 80007f8:	f000 fa1a 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Pin */
  GPIO_InitStruct.Pin = Green_Pin;
 80007fc:	2380      	movs	r3, #128	@ 0x80
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Green_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_GPIO_Init+0x190>)
 8000814:	f000 fa0c 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Red_Pin */
  GPIO_InitStruct.Pin = Red_Pin;
 8000818:	2310      	movs	r3, #16
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Red_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <MX_GPIO_Init+0x194>)
 8000830:	f000 f9fe 	bl	8000c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020800 	.word	0x40020800
 8000848:	40020400 	.word	0x40020400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6453      	str	r3, [r2, #68]	@ 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 f996 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 f891 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 f8eb 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff fdc9 	bl	80004f4 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000970:	08001bb4 	.word	0x08001bb4
  ldr r2, =_sbss
 8000974:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000978:	2000002c 	.word	0x2000002c

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <HAL_Init+0x40>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800098e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_Init+0x40>)
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_Init+0x40>)
 80009a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 f90d 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff ff50 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023c00 	.word	0x40023c00

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f917 	bl	8000c16 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 f8ed 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	@ (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	@ (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000028 	.word	0x20000028

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000028 	.word	0x20000028

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	@ (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	@ 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	@ 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff47 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff5c 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff8e 	bl	8000b1c <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffb0 	bl	8000b84 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	e165      	b.n	8000f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	f040 8154 	bne.w	8000f12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d005      	beq.n	8000c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d130      	bne.n	8000ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d017      	beq.n	8000d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d123      	bne.n	8000d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	69b9      	ldr	r1, [r7, #24]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80ae 	beq.w	8000f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b5d      	ldr	r3, [pc, #372]	@ (8000f30 <HAL_GPIO_Init+0x300>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8000f30 <HAL_GPIO_Init+0x300>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <HAL_GPIO_Init+0x300>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a58      	ldr	r2, [pc, #352]	@ (8000f34 <HAL_GPIO_Init+0x304>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	@ (8000f38 <HAL_GPIO_Init+0x308>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x21a>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4e      	ldr	r2, [pc, #312]	@ (8000f3c <HAL_GPIO_Init+0x30c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x216>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4d      	ldr	r2, [pc, #308]	@ (8000f40 <HAL_GPIO_Init+0x310>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x212>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4c      	ldr	r2, [pc, #304]	@ (8000f44 <HAL_GPIO_Init+0x314>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x20e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	@ (8000f48 <HAL_GPIO_Init+0x318>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x20a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	@ (8000f4c <HAL_GPIO_Init+0x31c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x206>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	@ (8000f50 <HAL_GPIO_Init+0x320>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x202>
 8000e2e:	2306      	movs	r3, #6
 8000e30:	e00c      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e32:	2307      	movs	r3, #7
 8000e34:	e00a      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e36:	2305      	movs	r3, #5
 8000e38:	e008      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e004      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x21c>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	f002 0203 	and.w	r2, r2, #3
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	4093      	lsls	r3, r2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5c:	4935      	ldr	r1, [pc, #212]	@ (8000f34 <HAL_GPIO_Init+0x304>)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8e:	4a31      	ldr	r2, [pc, #196]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb8:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ebe:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <HAL_GPIO_Init+0x324>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	f67f ae96 	bls.w	8000c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40021800 	.word	0x40021800
 8000f54:	40013c00 	.word	0x40013c00

08000f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e001      	b.n	8000f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f98:	787b      	ldrb	r3, [r7, #1]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa4:	e003      	b.n	8000fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0cc      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fd0:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d90c      	bls.n	8000ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fde:	4b65      	ldr	r3, [pc, #404]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe6:	4b63      	ldr	r3, [pc, #396]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d001      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0b8      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001010:	4b59      	ldr	r3, [pc, #356]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a58      	ldr	r2, [pc, #352]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800101a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001028:	4b53      	ldr	r3, [pc, #332]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a52      	ldr	r2, [pc, #328]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001034:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	494d      	ldr	r1, [pc, #308]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	4313      	orrs	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d044      	beq.n	80010dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b47      	ldr	r3, [pc, #284]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d119      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e07f      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d003      	beq.n	800107a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001076:	2b03      	cmp	r3, #3
 8001078:	d107      	bne.n	800108a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800107a:	4b3f      	ldr	r3, [pc, #252]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d109      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e06f      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	4b3b      	ldr	r3, [pc, #236]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e067      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800109a:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f023 0203 	bic.w	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4934      	ldr	r1, [pc, #208]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ac:	f7ff fcce 	bl	8000a4c <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b2:	e00a      	b.n	80010ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b4:	f7ff fcca 	bl	8000a4c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e04f      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 020c 	and.w	r2, r3, #12
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	429a      	cmp	r2, r3
 80010da:	d1eb      	bne.n	80010b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d20c      	bcs.n	8001104 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e032      	b.n	800116a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4916      	ldr	r1, [pc, #88]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	4313      	orrs	r3, r2
 8001120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	490e      	ldr	r1, [pc, #56]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	4313      	orrs	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001142:	f000 f821 	bl	8001188 <HAL_RCC_GetSysClockFreq>
 8001146:	4602      	mov	r2, r0
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	490a      	ldr	r1, [pc, #40]	@ (800117c <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	5ccb      	ldrb	r3, [r1, r3]
 8001156:	fa22 f303 	lsr.w	r3, r2, r3
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_RCC_ClockConfig+0x1c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fc2e 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00
 8001178:	40023800 	.word	0x40023800
 800117c:	08001b94 	.word	0x08001b94
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b0ae      	sub	sp, #184	@ 0xb8
 800118e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ae:	4bcb      	ldr	r3, [pc, #812]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	f200 8206 	bhi.w	80015c8 <HAL_RCC_GetSysClockFreq+0x440>
 80011bc:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	080015c9 	.word	0x080015c9
 80011cc:	080015c9 	.word	0x080015c9
 80011d0:	080015c9 	.word	0x080015c9
 80011d4:	08001201 	.word	0x08001201
 80011d8:	080015c9 	.word	0x080015c9
 80011dc:	080015c9 	.word	0x080015c9
 80011e0:	080015c9 	.word	0x080015c9
 80011e4:	08001209 	.word	0x08001209
 80011e8:	080015c9 	.word	0x080015c9
 80011ec:	080015c9 	.word	0x080015c9
 80011f0:	080015c9 	.word	0x080015c9
 80011f4:	080013f9 	.word	0x080013f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011f8:	4bb9      	ldr	r3, [pc, #740]	@ (80014e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80011fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80011fe:	e1e7      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4bb8      	ldr	r3, [pc, #736]	@ (80014e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001206:	e1e3      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001208:	4bb4      	ldr	r3, [pc, #720]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001214:	4bb1      	ldr	r3, [pc, #708]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d071      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001220:	4bae      	ldr	r3, [pc, #696]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	099b      	lsrs	r3, r3, #6
 8001226:	2200      	movs	r2, #0
 8001228:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800122c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001238:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001242:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001246:	4622      	mov	r2, r4
 8001248:	462b      	mov	r3, r5
 800124a:	f04f 0000 	mov.w	r0, #0
 800124e:	f04f 0100 	mov.w	r1, #0
 8001252:	0159      	lsls	r1, r3, #5
 8001254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001258:	0150      	lsls	r0, r2, #5
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4621      	mov	r1, r4
 8001260:	1a51      	subs	r1, r2, r1
 8001262:	6439      	str	r1, [r7, #64]	@ 0x40
 8001264:	4629      	mov	r1, r5
 8001266:	eb63 0301 	sbc.w	r3, r3, r1
 800126a:	647b      	str	r3, [r7, #68]	@ 0x44
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001278:	4649      	mov	r1, r9
 800127a:	018b      	lsls	r3, r1, #6
 800127c:	4641      	mov	r1, r8
 800127e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001282:	4641      	mov	r1, r8
 8001284:	018a      	lsls	r2, r1, #6
 8001286:	4641      	mov	r1, r8
 8001288:	1a51      	subs	r1, r2, r1
 800128a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800128c:	4649      	mov	r1, r9
 800128e:	eb63 0301 	sbc.w	r3, r3, r1
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80012a0:	4649      	mov	r1, r9
 80012a2:	00cb      	lsls	r3, r1, #3
 80012a4:	4641      	mov	r1, r8
 80012a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012aa:	4641      	mov	r1, r8
 80012ac:	00ca      	lsls	r2, r1, #3
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	4622      	mov	r2, r4
 80012b6:	189b      	adds	r3, r3, r2
 80012b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80012ba:	462b      	mov	r3, r5
 80012bc:	460a      	mov	r2, r1
 80012be:	eb42 0303 	adc.w	r3, r2, r3
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 0300 	mov.w	r3, #0
 80012cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012d0:	4629      	mov	r1, r5
 80012d2:	024b      	lsls	r3, r1, #9
 80012d4:	4621      	mov	r1, r4
 80012d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012da:	4621      	mov	r1, r4
 80012dc:	024a      	lsls	r2, r1, #9
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012f4:	f7fe ff86 	bl	8000204 <__aeabi_uldivmod>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4613      	mov	r3, r2
 80012fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001302:	e067      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001304:	4b75      	ldr	r3, [pc, #468]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	2200      	movs	r2, #0
 800130c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001310:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001314:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800131c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800131e:	2300      	movs	r3, #0
 8001320:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001322:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001326:	4622      	mov	r2, r4
 8001328:	462b      	mov	r3, r5
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	f04f 0100 	mov.w	r1, #0
 8001332:	0159      	lsls	r1, r3, #5
 8001334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001338:	0150      	lsls	r0, r2, #5
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4621      	mov	r1, r4
 8001340:	1a51      	subs	r1, r2, r1
 8001342:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001344:	4629      	mov	r1, r5
 8001346:	eb63 0301 	sbc.w	r3, r3, r1
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001358:	4649      	mov	r1, r9
 800135a:	018b      	lsls	r3, r1, #6
 800135c:	4641      	mov	r1, r8
 800135e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001362:	4641      	mov	r1, r8
 8001364:	018a      	lsls	r2, r1, #6
 8001366:	4641      	mov	r1, r8
 8001368:	ebb2 0a01 	subs.w	sl, r2, r1
 800136c:	4649      	mov	r1, r9
 800136e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800137e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001386:	4692      	mov	sl, r2
 8001388:	469b      	mov	fp, r3
 800138a:	4623      	mov	r3, r4
 800138c:	eb1a 0303 	adds.w	r3, sl, r3
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	462b      	mov	r3, r5
 8001394:	eb4b 0303 	adc.w	r3, fp, r3
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013a6:	4629      	mov	r1, r5
 80013a8:	028b      	lsls	r3, r1, #10
 80013aa:	4621      	mov	r1, r4
 80013ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013b0:	4621      	mov	r1, r4
 80013b2:	028a      	lsls	r2, r1, #10
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013bc:	2200      	movs	r2, #0
 80013be:	673b      	str	r3, [r7, #112]	@ 0x70
 80013c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80013c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013c6:	f7fe ff1d 	bl	8000204 <__aeabi_uldivmod>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4613      	mov	r3, r2
 80013d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	3301      	adds	r3, #1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80013e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013f6:	e0eb      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001404:	4b35      	ldr	r3, [pc, #212]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d06b      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	2200      	movs	r2, #0
 8001418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800141a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800141c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800141e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001422:	663b      	str	r3, [r7, #96]	@ 0x60
 8001424:	2300      	movs	r3, #0
 8001426:	667b      	str	r3, [r7, #100]	@ 0x64
 8001428:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800142c:	4622      	mov	r2, r4
 800142e:	462b      	mov	r3, r5
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	0159      	lsls	r1, r3, #5
 800143a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800143e:	0150      	lsls	r0, r2, #5
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4621      	mov	r1, r4
 8001446:	1a51      	subs	r1, r2, r1
 8001448:	61b9      	str	r1, [r7, #24]
 800144a:	4629      	mov	r1, r5
 800144c:	eb63 0301 	sbc.w	r3, r3, r1
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800145e:	4659      	mov	r1, fp
 8001460:	018b      	lsls	r3, r1, #6
 8001462:	4651      	mov	r1, sl
 8001464:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001468:	4651      	mov	r1, sl
 800146a:	018a      	lsls	r2, r1, #6
 800146c:	4651      	mov	r1, sl
 800146e:	ebb2 0801 	subs.w	r8, r2, r1
 8001472:	4659      	mov	r1, fp
 8001474:	eb63 0901 	sbc.w	r9, r3, r1
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001484:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001488:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800148c:	4690      	mov	r8, r2
 800148e:	4699      	mov	r9, r3
 8001490:	4623      	mov	r3, r4
 8001492:	eb18 0303 	adds.w	r3, r8, r3
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	462b      	mov	r3, r5
 800149a:	eb49 0303 	adc.w	r3, r9, r3
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014ac:	4629      	mov	r1, r5
 80014ae:	024b      	lsls	r3, r1, #9
 80014b0:	4621      	mov	r1, r4
 80014b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014b6:	4621      	mov	r1, r4
 80014b8:	024a      	lsls	r2, r1, #9
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014c2:	2200      	movs	r2, #0
 80014c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014cc:	f7fe fe9a 	bl	8000204 <__aeabi_uldivmod>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4613      	mov	r3, r2
 80014d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014da:	e065      	b.n	80015a8 <HAL_RCC_GetSysClockFreq+0x420>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	2200      	movs	r2, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	4611      	mov	r1, r2
 80014f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80014fa:	2300      	movs	r3, #0
 80014fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80014fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001502:	4642      	mov	r2, r8
 8001504:	464b      	mov	r3, r9
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0159      	lsls	r1, r3, #5
 8001510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001514:	0150      	lsls	r0, r2, #5
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4641      	mov	r1, r8
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	4649      	mov	r1, r9
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001534:	4659      	mov	r1, fp
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	4651      	mov	r1, sl
 800153a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153e:	4651      	mov	r1, sl
 8001540:	018a      	lsls	r2, r1, #6
 8001542:	4651      	mov	r1, sl
 8001544:	1a54      	subs	r4, r2, r1
 8001546:	4659      	mov	r1, fp
 8001548:	eb63 0501 	sbc.w	r5, r3, r1
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	00eb      	lsls	r3, r5, #3
 8001556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800155a:	00e2      	lsls	r2, r4, #3
 800155c:	4614      	mov	r4, r2
 800155e:	461d      	mov	r5, r3
 8001560:	4643      	mov	r3, r8
 8001562:	18e3      	adds	r3, r4, r3
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	464b      	mov	r3, r9
 8001568:	eb45 0303 	adc.w	r3, r5, r3
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800157a:	4629      	mov	r1, r5
 800157c:	028b      	lsls	r3, r1, #10
 800157e:	4621      	mov	r1, r4
 8001580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001584:	4621      	mov	r1, r4
 8001586:	028a      	lsls	r2, r1, #10
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001590:	2200      	movs	r2, #0
 8001592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001594:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001596:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800159a:	f7fe fe33 	bl	8000204 <__aeabi_uldivmod>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4613      	mov	r3, r2
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015a8:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	0f1b      	lsrs	r3, r3, #28
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80015b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015c6:	e003      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	37b8      	adds	r7, #184	@ 0xb8
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	00f42400 	.word	0x00f42400

080015e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e28d      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8083 	beq.w	800170e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001608:	4b94      	ldr	r3, [pc, #592]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b04      	cmp	r3, #4
 8001612:	d019      	beq.n	8001648 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001614:	4b91      	ldr	r3, [pc, #580]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
        || \
 800161c:	2b08      	cmp	r3, #8
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001620:	4b8e      	ldr	r3, [pc, #568]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800162c:	d00c      	beq.n	8001648 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162e:	4b8b      	ldr	r3, [pc, #556]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d112      	bne.n	8001660 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163a:	4b88      	ldr	r3, [pc, #544]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b84      	ldr	r3, [pc, #528]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d05b      	beq.n	800170c <HAL_RCC_OscConfig+0x124>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d157      	bne.n	800170c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e25a      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x90>
 800166a:	4b7c      	ldr	r3, [pc, #496]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a7b      	ldr	r2, [pc, #492]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xcc>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xb4>
 8001682:	4b76      	ldr	r3, [pc, #472]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a75      	ldr	r2, [pc, #468]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a72      	ldr	r2, [pc, #456]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xcc>
 800169c:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6e      	ldr	r2, [pc, #440]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f9c6 	bl	8000a4c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f9c2 	bl	8000a4c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e21f      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b61      	ldr	r3, [pc, #388]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xdc>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff f9b2 	bl	8000a4c <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff f9ae 	bl	8000a4c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e20b      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b57      	ldr	r3, [pc, #348]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x104>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06f      	beq.n	80017fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800171a:	4b50      	ldr	r3, [pc, #320]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d017      	beq.n	8001756 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001726:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
        || \
 800172e:	2b08      	cmp	r3, #8
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x186>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1d3      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4937      	ldr	r1, [pc, #220]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x278>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff f95b 	bl	8000a4c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff f957 	bl	8000a4c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1b4      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4925      	ldr	r1, [pc, #148]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <HAL_RCC_OscConfig+0x278>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff f93a 	bl	8000a4c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff f936 	bl	8000a4c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e193      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d036      	beq.n	8001874 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_RCC_OscConfig+0x27c>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7ff f91a 	bl	8000a4c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff f916 	bl	8000a4c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e173      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x234>
 800183a:	e01b      	b.n	8001874 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_OscConfig+0x27c>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff f903 	bl	8000a4c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e00e      	b.n	8001868 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff f8ff 	bl	8000a4c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d907      	bls.n	8001868 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e15c      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
 800185c:	40023800 	.word	0x40023800
 8001860:	42470000 	.word	0x42470000
 8001864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b8a      	ldr	r3, [pc, #552]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800186a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ea      	bne.n	800184a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 8097 	beq.w	80019b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b83      	ldr	r3, [pc, #524]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b79      	ldr	r3, [pc, #484]	@ (8001a98 <HAL_RCC_OscConfig+0x4b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b76      	ldr	r3, [pc, #472]	@ (8001a98 <HAL_RCC_OscConfig+0x4b0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a75      	ldr	r2, [pc, #468]	@ (8001a98 <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f8bf 	bl	8000a4c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff f8bb 	bl	8000a4c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e118      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a98 <HAL_RCC_OscConfig+0x4b0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x31e>
 80018f8:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	e01c      	b.n	8001940 <HAL_RCC_OscConfig+0x358>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b05      	cmp	r3, #5
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x340>
 800190e:	4b61      	ldr	r3, [pc, #388]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001912:	4a60      	ldr	r2, [pc, #384]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6713      	str	r3, [r2, #112]	@ 0x70
 800191a:	4b5e      	ldr	r3, [pc, #376]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	4a5d      	ldr	r2, [pc, #372]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	@ 0x70
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0x358>
 8001928:	4b5a      	ldr	r3, [pc, #360]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	4a59      	ldr	r2, [pc, #356]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	@ 0x70
 8001934:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	f023 0304 	bic.w	r3, r3, #4
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d015      	beq.n	8001974 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f880 	bl	8000a4c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f87c 	bl	8000a4c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0d7      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	4b4b      	ldr	r3, [pc, #300]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0ee      	beq.n	8001950 <HAL_RCC_OscConfig+0x368>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff f86a 	bl	8000a4c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197a:	e00a      	b.n	8001992 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197c:	f7ff f866 	bl	8000a4c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0c1      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	4b40      	ldr	r3, [pc, #256]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ee      	bne.n	800197c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d105      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80ad 	beq.w	8001b14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ba:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d060      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d145      	bne.n	8001a5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <HAL_RCC_OscConfig+0x4b4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f83a 	bl	8000a4c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f836 	bl	8000a4c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e093      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	071b      	lsls	r3, r3, #28
 8001a26:	491b      	ldr	r1, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x4b4>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f80b 	bl	8000a4c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f807 	bl	8000a4c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e064      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x452>
 8001a58:	e05c      	b.n	8001b14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <HAL_RCC_OscConfig+0x4b4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7fe fff4 	bl	8000a4c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7fe fff0 	bl	8000a4c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e04d      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x480>
 8001a86:	e045      	b.n	8001b14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e040      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <HAL_RCC_OscConfig+0x538>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d030      	beq.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d129      	bne.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d122      	bne.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d119      	bne.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10f      	bne.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <memset>:
 8001b24:	4402      	add	r2, r0
 8001b26:	4603      	mov	r3, r0
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <memset+0xa>
 8001b2c:	4770      	bx	lr
 8001b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b32:	e7f9      	b.n	8001b28 <memset+0x4>

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	4d0d      	ldr	r5, [pc, #52]	@ (8001b6c <__libc_init_array+0x38>)
 8001b38:	4c0d      	ldr	r4, [pc, #52]	@ (8001b70 <__libc_init_array+0x3c>)
 8001b3a:	1b64      	subs	r4, r4, r5
 8001b3c:	10a4      	asrs	r4, r4, #2
 8001b3e:	2600      	movs	r6, #0
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	4d0b      	ldr	r5, [pc, #44]	@ (8001b74 <__libc_init_array+0x40>)
 8001b46:	4c0c      	ldr	r4, [pc, #48]	@ (8001b78 <__libc_init_array+0x44>)
 8001b48:	f000 f818 	bl	8001b7c <_init>
 8001b4c:	1b64      	subs	r4, r4, r5
 8001b4e:	10a4      	asrs	r4, r4, #2
 8001b50:	2600      	movs	r6, #0
 8001b52:	42a6      	cmp	r6, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b5c:	4798      	blx	r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b66:	4798      	blx	r3
 8001b68:	3601      	adds	r6, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001bac 	.word	0x08001bac
 8001b70:	08001bac 	.word	0x08001bac
 8001b74:	08001bac 	.word	0x08001bac
 8001b78:	08001bb0 	.word	0x08001bb0

08001b7c <_init>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr

08001b88 <_fini>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr
